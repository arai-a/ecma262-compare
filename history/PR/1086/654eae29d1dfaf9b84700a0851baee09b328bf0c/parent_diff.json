{"from": {"secList": ["sec-static-semantics-mv", "sec-properties-of-the-string-prototype-object", "sec-binaryxor", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-array.prototype.reduceright", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-string.prototype.repeat", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-string.fromcharcode", "sec-string.prototype.indexof", "sec-number.prototype.toexponential", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-async-function-definitions", "sec-numerictorawbytes", "sec-assertion", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-ecmascript-language-types-number-type", "sec-math.clz32", "sec-math.log2e", "sec-%typedarray%", "sec-array.prototype.lastindexof", "sec-math.ln10", "sec-properties-of-the-array-prototype-object", "sec-runtime-semantics-mv-s", "sec-array.prototype.reduce", "sec-math.log10e", "sec-math.e", "sec-class-definitions-runtime-semantics-namedevaluation", "sec-patterns-static-semantics-capturing-group-number", "sec-strict-mode-of-ecmascript", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-binaryand", "sec-array.prototype.splice", "sec-async-function-definitions-InstantiateFunctionObject", "sec-string.prototype.startswith", "sec-math.sqrt2", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-static-semantics-sourcetext", "sec-array.prototype.includes", "sec-year-number", "sec-numeric-types-number-tostring", "sec-math.ln2", "sec-function-definitions-runtime-semantics-evaluation", "sec-parseint-string-radix", "sec-runtime-semantics-definemethod", "sec-getsubstitution", "sec-parsefloat-string", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-binaryor", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-string.fromcodepoint", "sec-returnifabrupt-shorthands", "sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-identifiers-static-semantics-early-errors", "sec-class-definitions-runtime-semantics-evaluation", "sec-static-semantics-sv", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-math.pi", "sec-toboolean", "sec-array.prototype.pop", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-array.prototype.indexof", "sec-number.prototype.tofixed", "sec-numericvalue", "sec-math.sqrt1_2", "sec-number.prototype.toprecision", "sec-array.prototype.shift", "sec-string.prototype.includes", "sec-asyncgenerator-definitions-evaluation", "sec-string.prototype.replace", "sec-mathematical-operations", "sec-date.parse", "sec-date.prototype.tostring", "sec-async-function-definitions-PropertyDefinitionEvaluation"], "secData": {"sec-static-semantics-mv": {"num": "11.8.3.1", "title": "#sec-static-semantics-mv Static Semantics: MV", "html": "<emu-clause id=\"sec-static-semantics-mv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</span> Static Semantics: MV</h1>\n        <p>A numeric literal stands for a value of the Number type or the BigInt type.</p>\n        <ul>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d3d71ddd\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"832f57ee\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1d0c4a66\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bf0728f3\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8af49841\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"971b5362\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ef115d8a\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>)) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var> -<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b404bcda\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d1f87c1\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d4c393e5\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3f4b150f\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9f250657\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"ExponentPart\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7f837518\"><emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3bd7fe57\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58000348\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 4<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 5<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 6<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 7<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 8<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 9<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a61fcfde\"><emu-t>a</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9d7d0fdb\"><emu-t>A</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0185ce89\"><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0a26d628\"><emu-t>B</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 11<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d594c144\"><emu-t>c</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f87cc5b\"><emu-t>C</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 12<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"919b1483\"><emu-t>D</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 13<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0d7c9fba\"><emu-t>e</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b15f6792\"><emu-t>E</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 14<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4068cae7\"><emu-t>f</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0d544f70\"><emu-t>F</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 15<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"600d7817\"><emu-t>0b</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7c1f17d9\"><emu-t>0B</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5f1ee23\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"82aa7443\"><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8056cb0\"><emu-t>0o</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3a3652fa\"><emu-t>0O</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"99bc1d53\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37a295fe\"><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cf154180\"><emu-t>0x</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9ef756f3\"><emu-t>0X</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a0c48a71\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-string-prototype-object": {"num": "21.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The String prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%StringPrototype%</dfn>.</li>\n        <li>is a String <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation  <dfn id=\"sec-thisstringvalue\" aoid=\"thisStringValue\">thisStringValue</dfn>(<var>value</var>) performs the following steps:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">21.1.3.1</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">21.1.3.2</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">21.1.3.3</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">21.1.3.4</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">21.1.3.5</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">21.1.3.6</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">21.1.3.7</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">21.1.3.8</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">21.1.3.9</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">21.1.3.10</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">21.1.3.11</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">21.1.3.12</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">21.1.3.13</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">21.1.3.14</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">21.1.3.15</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">21.1.3.16</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">21.1.3.17</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">21.1.3.18</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">21.1.3.19</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">21.1.3.20</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">21.1.3.21</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">21.1.3.22</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">21.1.3.23</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">21.1.3.24</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">21.1.3.25</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">21.1.3.26</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">21.1.3.27</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">21.1.3.28</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">21.1.3.29</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">21.1.3.30</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">21.1.3.31</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">21.1.3.32</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-binaryxor": {"num": "6.1.6.2.18", "title": "#sec-binaryxor BinaryXor ( x, y )", "html": "<emu-clause id=\"sec-binaryxor\" aoid=\"BinaryXor\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryxor\">#sec-binaryxor</span> BinaryXor ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 and <var>y</var> is 0, return 1.</li><li>Else if <var>x</var> is 0 and <var>y</var> is 1, return 1.</li><li>Else, return 0.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-array.prototype.reduceright": {"num": "22.1.3.22", "title": "#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-array.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</span> Array.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that takes four arguments. <code>reduceRight</code> calls the callback, as a function, once for each element after the first element present in the array, in descending order.</p>\n          <p><var>callbackfn</var> is called with four arguments: the <var>previousValue</var> (value from the previous call to <var>callbackfn</var>), the <var>currentValue</var> (value of the current element), the <var>currentIndex</var>, and the object being traversed. The first time the function is called, the <var>previousValue</var> and <var>currentValue</var> can be one of two values. If an <var>initialValue</var> was supplied in the call to <code>reduceRight</code>, then <var>previousValue</var> will be equal to <var>initialValue</var> and <var>currentValue</var> will be equal to the last value in the array. If no <var>initialValue</var> was supplied, then <var>previousValue</var> will be equal to the last value in the array and <var>currentValue</var> will be equal to the second-to-last value. It is a <emu-val>TypeError</emu-val> if the array contains no elements and <var>initialValue</var> is not provided.</p>\n          <p><code>reduceRight</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>reduceRight</code> is set before the first call to <var>callbackfn</var>. Elements that are appended to the array after the call to <code>reduceRight</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed by <var>callbackfn</var>, their value as passed to <var>callbackfn</var> will be the value at the time <code>reduceRight</code> visits them; elements that are deleted after the call to <code>reduceRight</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>reduceRight</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> is 0 and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>kPresent</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>kPresent</var> is <emu-val>false</emu-val> and <var>k</var> &#8805; 0<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Set <var>kPresent</var> to ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>If <var>kPresent</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <var>accumulator</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>reduceRight</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.repeat": {"num": "21.1.3.16", "title": "#sec-string.prototype.repeat String.prototype.repeat ( count )", "html": "<emu-clause id=\"sec-string.prototype.repeat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.repeat\">#sec-string.prototype.repeat</span> String.prototype.repeat ( <var>count</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>If <var>n</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is <emu-val>+&#8734;</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is 0, return the empty String.</li><li>Return the String value that is made from <var>n</var> copies of <var>S</var> appended together.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method creates the String value consisting of the code units of the <emu-val>this</emu-val> object (converted to String) repeated <var>count</var> times.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>repeat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codeUnits</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codeUnits</var>[<var>nextIndex</var>].</li><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.indexof": {"num": "21.1.3.8", "title": "#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.indexof\">#sec-string.prototype.indexof</span> String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, then the smallest such index is returned; otherwise, -1 is returned. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <p>The <code>indexOf</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>Return the smallest possible <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> not smaller than <var>start</var> such that <var>k</var> + <var>searchLen</var> is not greater than <var>len</var>, and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>S</var> is the same as the code unit at index <var>j</var> within <var>searchStr</var>; but if there is no such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var>, return the value -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toexponential": {"num": "20.1.3.2", "title": "#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.toexponential\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toexponential\">#sec-number.prototype.toexponential</span> Number.prototype.toExponential ( <var>fractionDigits</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal exponential notation with one digit before the significand's decimal point and <var>fractionDigits</var> digits after the significand's decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, include as many significand digits as necessary to uniquely specify the Number (just like in <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = <emu-val>+&#8734;</emu-val>, then<ol><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <emu-val>\"Infinity\"</emu-val>.</li></ol></li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>f</var> + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>If <var>fractionDigits</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is larger.</li></ol></li><li>Else,<ol><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. Note that the decimal representation of <var>n</var> has <var>f</var> + 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> digits, <var>n</var> is not divisible by 10, and the least significant digit of <var>n</var> is not necessarily uniquely determined by these criteria.</li></ol></li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li></ol></li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> = 0, then<ol><li>Let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>d</var> be <emu-val>\"0\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>e</var> &gt; 0, let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be <emu-val>\"-\"</emu-val>.</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li></ol></li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>m</var>, <emu-val>\"e\"</emu-val>, <var>c</var>, and <var>d</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 10.b.i be used as a guideline:</p>\n          <emu-alg type=\"i\"><ol><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. If there are multiple possibilities for <var>n</var>, choose the value of <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is closest in value to <var>x</var>. If there are two such possible values of <var>n</var>, choose the one that is even.\n          </li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See  <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f512250e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c25b1d19\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"be6457e0\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a922691e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present. The  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-PropertyDefinitionEvaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.14</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a TypedArray element type <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to IEEE 754-2008 binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-assertion": {"num": "21.2.2.6", "title": "#sec-assertion Assertion", "html": "<emu-clause id=\"sec-assertion\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assertion\">#sec-assertion</span> Assertion</h1>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5878811\"><emu-t>^</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>If <var>e</var> is zero, return <emu-val>true</emu-val>.</li><li>If <var>Multiline</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the character <var>Input</var>[<var>e</var> - 1] is one of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Even when the <code>y</code> flag is used with a pattern, <code>^</code> always matches only at the beginning of <var>Input</var>, or (if <var>Multiline</var> is <emu-val>true</emu-val>) at the beginning of a line.</p>\n        </div></emu-note>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>If <var>e</var> is equal to <var>InputLength</var>, return <emu-val>true</emu-val>.</li><li>If <var>Multiline</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the character <var>Input</var>[<var>e</var>] is one of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1e228da5\"><emu-t>\\</emu-t><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var> - 1) and let <var>a</var> be the Boolean result.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var>) and let <var>b</var> be the Boolean result.</li><li>If <var>a</var> is <emu-val>true</emu-val> and <var>b</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>a</var> is <emu-val>false</emu-val> and <var>b</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a5dc97fa\"><emu-t>\\</emu-t><emu-t>B</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var> - 1) and let <var>a</var> be the Boolean result.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var>) and let <var>b</var> be the Boolean result.</li><li>If <var>a</var> is <emu-val>true</emu-val> and <var>b</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>a</var> is <emu-val>false</emu-val> and <var>b</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cfb94f94\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>=</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be <var>r</var>'s State.</li><li>Let <var>cap</var> be <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>z</var> be the State (<var>xe</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ba98f6e2\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>!</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8db9fbbe\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with -1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be <var>r</var>'s State.</li><li>Let <var>cap</var> be <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>z</var> be the State (<var>xe</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b07b2c0\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>&lt;!</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with -1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-wordcharacters-abstract-operation\"><h1><span class=\"secnum\">21.2.2.6.1</span>#sec-runtime-semantics-wordcharacters-abstract-operation Runtime Semantics: WordCharacters ( )</h1>...</div><div id=\"excluded-sec-runtime-semantics-iswordchar-abstract-operation\"><h1><span class=\"secnum\">21.2.2.6.2</span>#sec-runtime-semantics-iswordchar-abstract-operation Runtime Semantics: IsWordChar ( e )</h1>...</div></emu-clause>\n      "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> + 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values, representing the double-precision 64-bit format IEEE 754-2008 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>64<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>54<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> but not less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> to 971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> (that is,  <emu-eqn class=\"inline\">2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> or -1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>52<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup>, and <var>e</var> is -1074<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>53<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> &#215; 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>971<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> and  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>1024<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the IEEE 754-2008 roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-math.clz32": {"num": "20.3.2.11", "title": "#sec-math.clz32 Math.clz32 ( x )", "html": "<emu-clause id=\"sec-math.clz32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.clz32\">#sec-math.clz32</span> Math.clz32 ( <var>x</var> )</h1>\n        <p>When <code>Math.clz32</code> is called with one argument <var>x</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be the number of leading zero bits in the 32-bit binary representation of <var>n</var>.</li><li>Return <var>p</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <var>n</var> is 0, <var>p</var> will be 32. If the most significant bit of the 32-bit binary encoding of <var>n</var> is 1, <var>p</var> will be 0.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.log2e": {"num": "20.3.1.5", "title": "#sec-math.log2e Math.LOG2E", "html": "<emu-clause id=\"sec-math.log2e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log2e\">#sec-math.log2e</span> Math.LOG2E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the base-2 logarithm of <var>e</var><sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, the base of the natural logarithms; this value is approximately 1.4426950408889634.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.LOG2E</code> is approximately the reciprocal of the value of <code>Math.LN2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%": {"num": "22.2.1.1", "title": "#sec-%typedarray% %TypedArray% ( )", "html": "<emu-clause id=\"sec-%typedarray%\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%\">#sec-%typedarray%</span> %TypedArray% ( )</h1>\n        <p>The <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> performs the following steps:</p>\n        <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function is 0.</p>\n      </emu-clause>\n    "}, "sec-array.prototype.lastindexof": {"num": "22.1.3.17", "title": "#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</span> Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>lastIndexOf</code> compares <var>searchElement</var> to the elements of the array in descending order using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the largest such index; otherwise, -1 is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, -1 is returned.</p>\n        </div></emu-note>\n        <p>When the <code>lastIndexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return -1.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> &#8805; 0, then<ol><li>If <var>n</var> is <emu-val>-0</emu-val>, let <var>k</var> be <emu-val>+0</emu-val>; else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <var>k</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>lastIndexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.ln10": {"num": "20.3.1.2", "title": "#sec-math.ln10 Math.LN10", "html": "<emu-clause id=\"sec-math.ln10\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.ln10\">#sec-math.ln10</span> Math.LN10</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the natural logarithm of 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, which is approximately 2.302585092994046.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...arguments )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"db369ee0\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"477fcd23\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"a3f639a9\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>10000<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"33bf537e\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>)) times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var> -<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>-</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-array.prototype.reduce": {"num": "22.1.3.21", "title": "#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-array.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</span> Array.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that takes four arguments. <code>reduce</code> calls the callback, as a function, once for each element after the first element present in the array, in ascending order.</p>\n          <p><var>callbackfn</var> is called with four arguments: the <var>previousValue</var> (value from the previous call to <var>callbackfn</var>), the <var>currentValue</var> (value of the current element), the <var>currentIndex</var>, and the object being traversed. The first time that callback is called, the <var>previousValue</var> and <var>currentValue</var> can be one of two values. If an <var>initialValue</var> was supplied in the call to <code>reduce</code>, then <var>previousValue</var> will be equal to <var>initialValue</var> and <var>currentValue</var> will be equal to the first value in the array. If no <var>initialValue</var> was supplied, then <var>previousValue</var> will be equal to the first value in the array and <var>currentValue</var> will be equal to the second. It is a <emu-val>TypeError</emu-val> if the array contains no elements and <var>initialValue</var> is not provided.</p>\n          <p><code>reduce</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>reduce</code> is set before the first call to <var>callbackfn</var>. Elements that are appended to the array after the call to <code>reduce</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time <code>reduce</code> visits them; elements that are deleted after the call to <code>reduce</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>reduce</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> is 0 and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>kPresent</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>kPresent</var> is <emu-val>false</emu-val> and <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Set <var>kPresent</var> to ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>If <var>kPresent</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>accumulator</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>reduce</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.log10e": {"num": "20.3.1.4", "title": "#sec-math.log10e Math.LOG10E", "html": "<emu-clause id=\"sec-math.log10e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log10e\">#sec-math.log10e</span> Math.LOG10E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the base-10 logarithm of <var>e</var><sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, the base of the natural logarithms; this value is approximately 0.4342944819032518.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.LOG10E</code> is approximately the reciprocal of the value of <code>Math.LN10</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.e": {"num": "20.3.1.1", "title": "#sec-math.e Math.E", "html": "<emu-clause id=\"sec-math.e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.e\">#sec-math.e</span> Math.E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>e</var><sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, the base of the natural logarithms, which is approximately 2.7182818284590452354.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-class-definitions-runtime-semantics-namedevaluation": {"num": "14.6.15", "title": "#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-namedevaluation\">#sec-class-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-capturing-group-number": {"num": "21.2.1.2", "title": "#sec-patterns-static-semantics-capturing-group-number Static Semantics: CapturingGroupNumber", "html": "<emu-clause id=\"sec-patterns-static-semantics-capturing-group-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-capturing-group-number\">#sec-patterns-static-semantics-capturing-group-number</span> Static Semantics: CapturingGroupNumber</h1>\n        <emu-grammar><emu-production name=\"DecimalEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalEscape\">DecimalEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d4c393e5\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalEscape\">DecimalEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3f4b150f\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>n</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215;<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>n</var></sup> plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>).\n        </li></ol></emu-alg>\n        <p>The definitions of &#8220;the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>&#8221; and &#8220;the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>&#8221; are in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n      </emu-clause>\n\n      "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in  <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt>LegacyOctalIntegerLiteral</emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt>NonOctalDecimalIntegerLiteral</emu-nt>.\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt>LegacyOctalEscapeSequence</emu-nt> as described in  <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    \n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    \n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    \n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    \n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    \n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    \n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    \n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a <code>Function</code>, <code>Generator</code>, or <code>AsyncFunction</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>,  <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    \n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    \n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-binaryand": {"num": "6.1.6.2.16", "title": "#sec-binaryand BinaryAnd ( x, y )", "html": "<emu-clause id=\"sec-binaryand\" aoid=\"BinaryAnd\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryand\">#sec-binaryand</span> BinaryAnd ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 and <var>y</var> is 1, return 1.</li><li>Else, return 0.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the arguments <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If the number of actual arguments is 0, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if the number of actual arguments is 1, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of actual arguments minus 2.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are, in left to right order, the portion of the actual argument list starting with the third argument. The list is empty if fewer than three arguments were passed.</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>)<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>)<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step 19 was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.prototype.startswith": {"num": "21.1.3.21", "title": "#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.startswith\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.startswith\">#sec-string.prototype.startswith</span> String.prototype.startsWith ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLength</var> be the length of <var>searchStr</var>.</li><li>If <var>searchLength</var> + <var>start</var> is greater than <var>len</var>, return <emu-val>false</emu-val>.</li><li>If the sequence of code units of <var>S</var> starting at <var>start</var> of length <var>searchLength</var> is the same as the full code unit sequence of <var>searchStr</var>, return <emu-val>true</emu-val>.</li><li>Otherwise, return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method returns <emu-val>true</emu-val> if the sequence of code units of <var>searchString</var> converted to a String is the same as the corresponding code units of this object (converted to a String) starting at index <var>position</var>. Otherwise returns <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>startsWith</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.sqrt2": {"num": "20.3.1.8", "title": "#sec-math.sqrt2 Math.SQRT2", "html": "<emu-clause id=\"sec-math.sqrt2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt2\">#sec-math.sqrt2</span> Math.SQRT2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the square root of 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, which is approximately 1.4142135623730951.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-sourcetext": {"num": "21.2.1.5", "title": "#sec-static-semantics-sourcetext Static Semantics: SourceText", "html": "<emu-clause id=\"sec-static-semantics-sourcetext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sourcetext\">#sec-static-semantics-sourcetext</span> Static Semantics: SourceText</h1>\n        <emu-grammar><emu-production name=\"UnicodePropertyNameCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1247f44\"><emu-nt><a href=\"#prod-UnicodePropertyNameCharacter\">UnicodePropertyNameCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnicodePropertyValueCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5a208aa0\"><emu-nt><a href=\"#prod-UnicodePropertyValueCharacter\">UnicodePropertyValueCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, in source text order, of Unicode code points in the source text matched by this production.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.includes": {"num": "22.1.3.13", "title": "#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</span> Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>includes</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, and if found at any position, returns <emu-val>true</emu-val>; otherwise, <emu-val>false</emu-val> is returned.</p>\n\n          <p>The optional second argument <var>fromIndex</var> defaults to 0 (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>false</emu-val> is returned, i.e. the array will not be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, the whole array will be searched.</p>\n        </div></emu-note>\n\n        <p>When the <code>includes</code> method is called, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>false</emu-val>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>elementK</var> be the result of ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> method intentionally differs from the similar <code>indexOf</code> method in two ways. First, it uses the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, instead of <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref>, allowing it to detect <emu-val>NaN</emu-val> array elements. Second, it does not skip missing array elements, instead treating them as <emu-val>undefined</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-year-number": {"num": "20.4.1.3", "title": "#sec-year-number Year Number", "html": "<emu-clause id=\"sec-year-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-year-number\">#sec-year-number</span> Year Number</h1>\n        <p>ECMAScript uses a proleptic Gregorian calendar to map a day number to a year number and to determine the month and date within that year. In this calendar, leap years are precisely those which are (divisible by 4) and ((not divisible by 100) or (divisible by 400)). The number of days in year number <var>y</var> is therefore defined by</p>\n        <emu-eqn id=\"eqn-DaysInYear\" aoid=\"DaysInYear\"><div>DaysInYear(<var>y</var>)</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) &#8800; 0</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) = 0</div></emu-eqn>\n        <p>All non-leap years have 365 days with the usual number of days per month and leap years have an extra day in February. The day number of the first day of year <var>y</var> is given by:</p>\n        <emu-eqn id=\"eqn-DaysFromYear\" aoid=\"DayFromYear\"><div>DayFromYear(<var>y</var>) = 365 &#215; (<var>y</var> - 1970) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1969) / 4) - <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1901) / 100) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1601) / 400)</div></emu-eqn>\n        <p>The <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of the start of a year is:</p>\n        <emu-eqn id=\"eqn-TimeFromYear\" aoid=\"TimeFromYear\"><div>TimeFromYear(<var>y</var>) = <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> &#215; <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var>)</div></emu-eqn>\n        <p>A <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> determines a year by:</p>\n        <emu-eqn id=\"eqn-YearFromTime\" aoid=\"YearFromTime\"><div>YearFromTime(<var>t</var>) = the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>y</var> (closest to positive infinity) such that <emu-xref aoid=\"TimeFromYear\"><a href=\"#eqn-TimeFromYear\">TimeFromYear</a></emu-xref>(<var>y</var>) &#8804; <var>t</var></div></emu-eqn>\n        <p>The leap-year function is 1 for a time within a leap year and otherwise is zero:</p>\n        <emu-eqn id=\"eqn-InLeapYear\" aoid=\"InLeapYear\"><div>InLeapYear(<var>t</var>)</div><div>          = 0 if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 365</div><div>          = 1 if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 366</div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <span id=\"sec-tostring-applied-to-the-number-type\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString converts a Number <var>x</var> to String format as follows:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)\n          </li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              \n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\n              \n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n            <emu-alg><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            </li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              \n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-math.ln2": {"num": "20.3.1.3", "title": "#sec-math.ln2 Math.LN2", "html": "<emu-clause id=\"sec-math.ln2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.ln2\">#sec-math.ln2</span> Math.LN2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the natural logarithm of 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, which is approximately 0.6931471805599453.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.22", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>prototype</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getsubstitution": {"num": "21.1.3.17.1", "title": "#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> Runtime Semantics: GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>matched</var>) is String.</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captures</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacement</var>) is String.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-45\"><a href=\"#table-45\" class=\"excluded-xref\" excluded-id=\"table-45\">#table-45</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"table-45\" caption=\"Replacement Text Symbol Substitutions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-45\">#table-45</span>: Replacement Text Symbol Substitutions</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                \n                </th>\n                <th>\n                  Unicode Characters\n                \n                </th>\n                <th>\n                  Replacement text\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                \n                </td>\n                <td>\n                  <code>$$</code>\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                \n                </td>\n                <td>\n                  <code>$&amp;</code>\n                \n                </td>\n                <td>\n                  <var>matched</var>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                \n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  If <var>position</var> is 0, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index 0 and whose last code unit is at index <var>position</var> - 1.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                \n                </td>\n                <td>\n                  <code>$'</code>\n                \n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index <var>tailPos</var> and continues to the end of <var>str</var>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$n</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                \n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$nn</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                \n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                \n                </td>\n                <td>\n                  <code>$&lt;</code>\n                \n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed substring.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty string.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).\n                  </li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                \n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-parsefloat-string": {"num": "18.2.4", "title": "#sec-parsefloat-string parseFloat ( string )", "html": "<emu-clause id=\"sec-parsefloat-string\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsefloat-string\">#sec-parsefloat-string</span> parseFloat ( <var>string</var> )</h1>\n      <p>The <code>parseFloat</code> function produces a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> dictated by interpretation of the contents of the <var>string</var> argument as a decimal literal.</p>\n      <p>The <code>parseFloat</code> function is the  <dfn>%parseFloat%</dfn> intrinsic object. When the <code>parseFloat</code> function is called with one argument <var>string</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>trimmedString</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>If neither <var>trimmedString</var> nor any prefix of <var>trimmedString</var> satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> (see <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>), return <emu-val>NaN</emu-val>.</li><li>Let <var>numberString</var> be the longest prefix of <var>trimmedString</var>, which might be <var>trimmedString</var> itself, that satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.</li><li>Let <var>mathFloat</var> be MV of <var>numberString</var>.</li><li>If <var>mathFloat</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If the first code unit of <var>trimmedString</var> is the code unit 0x002D (HYPHEN-MINUS), return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathFloat</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseFloat</code> may interpret only a leading portion of <var>string</var> as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>; it ignores any code units that cannot be interpreted as part of the notation of a decimal literal, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-binaryor": {"num": "6.1.6.2.17", "title": "#sec-binaryor BinaryOr ( x, y )", "html": "<emu-clause id=\"sec-binaryor\" aoid=\"BinaryOr\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryor\">#sec-binaryor</span> BinaryOr ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 or <var>y</var> is 1, return 1.</li><li>Else, return 0.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codePoints</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of <var>nextCP</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "21.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation Runtime Semantics: RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> Runtime Semantics: RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes eight parameters, a Matcher <var>m</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or &#8734;) <var>max</var>, a Boolean <var>greedy</var>, a State <var>x</var>, a Continuation <var>c</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>parenIndex</var>, and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>parenCount</var>, and performs the following steps:</p>\n          <emu-alg><ol><li>If <var>max</var> is zero, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be an internal Continuation closure that takes one State argument <var>y</var> and performs the following steps:<ol><li>If <var>min</var> is zero and <var>y</var>'s <var>endIndex</var> is equal to <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> is zero, let <var>min2</var> be zero; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is &#8734;, let <var>max2</var> be &#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Call <emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>) and return its result.</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> that satisfies <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> is not zero, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Call <var>c</var>(<var>x</var>) and let <var>z</var> be its result.</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Call <var>m</var>(<var>xr</var>, <var>d</var>) and return its result.</li></ol></li><li>Call <var>m</var>(<var>xr</var>, <var>d</var>) and let <var>z</var> be its result.</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?<span class=\"hljs-regexp\">/.exec(\"abcdefghi\")</span></code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*<span class=\"hljs-regexp\">/.exec(\"aabaac\")</span></code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.replace(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step 4 of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*<span class=\"hljs-regexp\">/.exec(\"zaacbbbcac\")</span></code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step 1 of the RepeatMatcher's <var>d</var> closure states that, once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*<span class=\"hljs-regexp\">/.exec(\"b\")</span></code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+<span class=\"hljs-regexp\">/.exec(\"baaaac\")</span></code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-identifiers-static-semantics-early-errors": {"num": "12.1.1", "title": "#sec-identifiers-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-identifiers-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"arguments\"</emu-val> or <emu-val>\"eval\"</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a  <sub>[Yield]</sub> parameter.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has an  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a  <sub>[Yield]</sub> parameter and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"yield\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if this production has an  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"Identifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this phrase is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is: <emu-val>\"implements\"</emu-val>, <emu-val>\"interface\"</emu-val>, <emu-val>\"let\"</emu-val>, <emu-val>\"package\"</emu-val>, <emu-val>\"private\"</emu-val>, <emu-val>\"protected\"</emu-val>, <emu-val>\"public\"</emu-val>, <emu-val>\"static\"</emu-val>, or <emu-val>\"yield\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> and the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is the same String value as the StringValue of any <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> except for <code>yield</code> or <code>await</code>.\n        \n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> normalizes any Unicode escape sequences in <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> hence such escapes cannot be used to write an <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> whose code point sequence is the same as a <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.16", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d022e28b\"><emu-t>class</emu-t><emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>className</var> be <emu-val>undefined</emu-val>.</li><li>Else, let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-sv": {"num": "11.8.4.2", "title": "#sec-static-semantics-sv Static Semantics: SV", "html": "<emu-clause id=\"sec-static-semantics-sv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sv\">#sec-static-semantics-sv</span> Static Semantics: SV</h1>\n        <p>A string literal stands for a value of the String type. The String value (SV) of the literal is described in terms of code unit values contributed by the various parts of the string literal. As part of this process, some Unicode code points within the string literal are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV), as described below or in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a2dff6c6\"><emu-t>\"</emu-t><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"74786b0a\"><emu-t>'</emu-t><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e7eba5c6\"><emu-t>\"</emu-t><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"314db585\"><emu-t>'</emu-t><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3d57705\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9b3f247e\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b4d0b3a\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"89ebe999\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0000 (NULL).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is determined by the <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt> according to  <emu-xref href=\"#table-34\"><a href=\"#table-34\" class=\"excluded-xref\" excluded-id=\"table-34\">#table-34</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <emu-table id=\"table-34\" caption=\"String Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-34\">#table-34</span>: String Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Escape Sequence\n              \n              </th>\n              <th>\n                Code Unit Value\n              \n              </th>\n              <th>\n                Unicode Character Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>\\b</code>\n              \n              </td>\n              <td>\n                <code>0x0008</code>\n              \n              </td>\n              <td>\n                BACKSPACE\n              \n              </td>\n              <td>\n                &lt;BS&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\t</code>\n              \n              </td>\n              <td>\n                <code>0x0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\n</code>\n              \n              </td>\n              <td>\n                <code>0x000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\v</code>\n              \n              </td>\n              <td>\n                <code>0x000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\f</code>\n              \n              </td>\n              <td>\n                <code>0x000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\r</code>\n              \n              </td>\n              <td>\n                <code>0x000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\"</code>\n              \n              </td>\n              <td>\n                <code>0x0022</code>\n              \n              </td>\n              <td>\n                QUOTATION MARK\n              \n              </td>\n              <td>\n                <code>\"</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\'</code>\n              \n              </td>\n              <td>\n                <code>0x0027</code>\n              \n              </td>\n              <td>\n                APOSTROPHE\n              \n              </td>\n              <td>\n                <code>'</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\\</code>\n              \n              </td>\n              <td>\n                <code>0x005C</code>\n              \n              </td>\n              <td>\n                REVERSE SOLIDUS\n              \n              </td>\n              <td>\n                <code>\\</code>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"NonEscapeCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (16<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (0x1000<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus (0x100<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> times the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus (0x10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> times the MV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the fourth <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-math.pi": {"num": "20.3.1.6", "title": "#sec-math.pi Math.PI", "html": "<emu-clause id=\"sec-math.pi\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.pi\">#sec-math.pi</span> Math.PI</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for &#960;<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, the ratio of the circumference of a circle to its diameter, which is approximately 3.1415926535897932.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-toboolean": {"num": "7.1.2", "title": "#sec-toboolean ToBoolean ( argument )", "html": "<emu-clause id=\"sec-toboolean\" aoid=\"ToBoolean\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toboolean\">#sec-toboolean</span> ToBoolean ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBoolean converts <var>argument</var> to a value of type Boolean according to  <emu-xref href=\"#table-10\"><a href=\"#table-10\" class=\"excluded-xref\" excluded-id=\"table-10\">#table-10</a></emu-xref>:</p>\n      <emu-table id=\"table-10\" caption=\"ToBoolean Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-10\">#table-10</span>: <emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> Conversions</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            \n            </th>\n            <th>\n              Result\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            \n            </td>\n            <td>\n              Return <emu-val>false</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            \n            </td>\n            <td>\n              Return <emu-val>false</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            \n            </td>\n            <td>\n              Return <var>argument</var>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            \n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, or <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            \n            </td>\n            <td>\n              If <var>argument</var> is the empty String (its length is zero), return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            \n            </td>\n            <td>\n              Return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            \n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>0n</emu-val>, return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            \n            </td>\n            <td>\n              Return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-array.prototype.pop": {"num": "22.1.3.19", "title": "#sec-array.prototype.pop Array.prototype.pop ( )", "html": "<emu-clause id=\"sec-array.prototype.pop\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.pop\">#sec-array.prototype.pop</span> Array.prototype.pop ( )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The last element of the array is removed from the array and returned.</p>\n        </div></emu-note>\n        <p>When the <code>pop</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is zero, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>len</var> &gt; 0.</li><li>Let <var>newLen</var> be <var>len</var> - 1.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>newLen</var>).</li><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>index</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>index</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>newLen</var>, <emu-val>true</emu-val>).</li><li>Return <var>element</var>.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>pop</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.17", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-array.prototype.indexof": {"num": "22.1.3.14", "title": "#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</span> Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>indexOf</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the smallest such index; otherwise, -1 is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to 0 (i.e. the whole array is searched). If it is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>indexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return -1.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> &#8805; <var>len</var>, return -1.</li><li>If <var>n</var> &#8805; 0, then<ol><li>If <var>n</var> is <emu-val>-0</emu-val>, let <var>k</var> be <emu-val>+0</emu-val>; else let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <var>k</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#247; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            \n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numericvalue": {"num": "11.8.3.2", "title": "#sec-numericvalue Static Semantics: NumericValue", "html": "<emu-clause id=\"sec-numericvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numericvalue\">#sec-numericvalue</span> Static Semantics: NumericValue</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that results from rounding the MV of <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> as described below.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that results from rounding the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> as described below.\n        </li></ol></emu-alg>\n        <p>Once the exact MV for a numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then the rounded value is <emu-val>+0</emu-val>; otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (as specified in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal is a <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a <code>0</code> digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a <code>0</code> digit and then incrementing the literal at the 20th significant digit position. A digit is  <em>significant</em> if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n        <ul>\n          <li>\n            it is not <code>0</code>; or\n          \n          </li>\n          <li>\n            there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n          \n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68def506\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ddee4872\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7641418e\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"93069ccc\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>n</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>mv</var> be (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the BigInt value that represents <var>mv</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n    "}, "sec-math.sqrt1_2": {"num": "20.3.1.7", "title": "#sec-math.sqrt1_2 Math.SQRT1_2", "html": "<emu-clause id=\"sec-math.sqrt1_2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt1_2\">#sec-math.sqrt1_2</span> Math.SQRT1_2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the square root of &#189;<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, which is approximately 0.7071067811865476.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.SQRT1_2</code> is approximately the reciprocal of the value of <code>Math.SQRT2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toprecision": {"num": "20.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and  <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = <emu-val>+&#8734;</emu-val>, then<ol><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <emu-val>\"Infinity\"</emu-val>.</li></ol></li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &lt; 10<sup><var>p</var></sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> is larger.</li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>p</var> - 1 code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>e</var> + 1 code units of <var>m</var>, the code unit 0x002E (FULL STOP), and the remaining <var>p</var> - (<var>e</var> + 1) code units of <var>m</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.shift": {"num": "22.1.3.24", "title": "#sec-array.prototype.shift Array.prototype.shift ( )", "html": "<emu-clause id=\"sec-array.prototype.shift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.shift\">#sec-array.prototype.shift</span> Array.prototype.shift ( )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The first element of the array is removed from the array and returned.</p>\n        </div></emu-note>\n        <p>When the <code>shift</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is zero, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>first</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"0\"</emu-val>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromVal</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromVal</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var> - 1)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - 1, <emu-val>true</emu-val>).</li><li>Return <var>first</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>shift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.includes": {"num": "21.1.3.7", "title": "#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.includes\">#sec-string.prototype.includes</span> String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The <code>includes</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> not smaller than <var>start</var> such that <var>k</var> + <var>searchLen</var> is not greater than <var>len</var>, and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>S</var> is the same as the code unit at index <var>j</var> within <var>searchStr</var>, return <emu-val>true</emu-val>; but if there is no such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var>, return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, return <emu-val>true</emu-val>; otherwise, returns <emu-val>false</emu-val>. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, @@replace).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be <emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing substring of <var>string</var> starting at index <var>tailPos</var>. If <var>pos</var> is 0, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-date.parse": {"num": "20.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.valueOf()\n<span class=\"hljs-built_in\">Date</span>.parse(x.toString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toUTCString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toISOString())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Date</span>.parse(x.toLocaleString())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is implementation-dependent when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-date.prototype.tostring": {"num": "20.4.4.41", "title": "#sec-date.prototype.tostring Date.prototype.toString ( )", "html": "<emu-clause id=\"sec-date.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</span> Date.prototype.toString ( )</h1>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"ToDateString\"><a href=\"#sec-todatestring\">ToDateString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>For any Date object <code>d</code> whose milliseconds amount is zero, the result of <code>Date.parse(d.toString())</code> is equal to <code>d.valueOf()</code>. See  <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\" class=\"excluded-xref\" excluded-id=\"sec-date.parse\">#sec-date.parse</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a Date object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-timestring\"><h1><span class=\"secnum\">20.4.4.41.1</span>#sec-timestring Runtime Semantics: TimeString ( tv )</h1>...</div><div id=\"excluded-sec-datestring\"><h1><span class=\"secnum\">20.4.4.41.2</span>#sec-datestring Runtime Semantics: DateString ( tv )</h1>...</div><div id=\"excluded-sec-timezoneestring\"><h1><span class=\"secnum\">20.4.4.41.3</span>#sec-timezoneestring Runtime Semantics: TimeZoneString ( tv )</h1>...</div><div id=\"excluded-sec-todatestring\"><h1><span class=\"secnum\">20.4.4.41.4</span>#sec-todatestring Runtime Semantics: ToDateString ( tv )</h1>...</div></emu-clause>\n\n      "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-1": "Table 1", "table-3": "Table 4", "table-10": "Table 10", "table-34": "Table 36", "table-45": "Table 53", "table-the-typedarray-constructors": "Table 62"}}, "to": {"secList": ["sec-static-semantics-mv", "sec-properties-of-the-string-prototype-object", "sec-binaryxor", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-array.prototype.reduceright", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-string.prototype.repeat", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-string.fromcharcode", "sec-string.prototype.indexof", "sec-number.prototype.toexponential", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-async-function-definitions", "sec-numerictorawbytes", "sec-assertion", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-ecmascript-language-types-number-type", "sec-math.clz32", "sec-math.log2e", "sec-%typedarray%", "sec-array.prototype.lastindexof", "sec-math.ln10", "sec-properties-of-the-array-prototype-object", "sec-runtime-semantics-mv-s", "sec-array.prototype.reduce", "sec-math.log10e", "sec-math.e", "sec-class-definitions-runtime-semantics-namedevaluation", "sec-patterns-static-semantics-capturing-group-number", "sec-strict-mode-of-ecmascript", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-binaryand", "sec-array.prototype.splice", "sec-async-function-definitions-InstantiateFunctionObject", "sec-string.prototype.startswith", "sec-math.sqrt2", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-static-semantics-sourcetext", "sec-array.prototype.includes", "sec-year-number", "sec-numeric-types-number-tostring", "sec-math.ln2", "sec-function-definitions-runtime-semantics-evaluation", "sec-parseint-string-radix", "sec-runtime-semantics-definemethod", "sec-getsubstitution", "sec-parsefloat-string", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-binaryor", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-string.fromcodepoint", "sec-returnifabrupt-shorthands", "sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-identifiers-static-semantics-early-errors", "sec-class-definitions-runtime-semantics-evaluation", "sec-static-semantics-sv", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-math.pi", "sec-toboolean", "sec-array.prototype.pop", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-array.prototype.indexof", "sec-number.prototype.tofixed", "sec-numericvalue", "sec-math.sqrt1_2", "sec-number.prototype.toprecision", "sec-array.prototype.shift", "sec-string.prototype.includes", "sec-asyncgenerator-definitions-evaluation", "sec-string.prototype.replace", "sec-mathematical-operations", "sec-date.parse", "sec-date.prototype.tostring", "sec-async-function-definitions-PropertyDefinitionEvaluation"], "secData": {"sec-static-semantics-mv": {"num": "11.8.3.1", "title": "#sec-static-semantics-mv Static Semantics: MV", "html": "<emu-clause id=\"sec-static-semantics-mv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</span> Static Semantics: MV</h1>\n        <p>A numeric literal stands for a value of the Number type or the BigInt type.</p>\n        <ul>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d3d71ddd\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"832f57ee\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1d0c4a66\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bf0728f3\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8af49841\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"971b5362\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ef115d8a\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>)) &#215; 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup><var>e</var> -<sub>&#8477;</sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b404bcda\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d1f87c1\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d4c393e5\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3f4b150f\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, where <var>n</var> is the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9f250657\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sub>&#8477;</sub>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"ExponentPart\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7f837518\"><emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3bd7fe57\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58000348\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 1<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 2<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 3<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 4<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 5<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 6<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 7<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 8<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 9<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a61fcfde\"><emu-t>a</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9d7d0fdb\"><emu-t>A</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0185ce89\"><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0a26d628\"><emu-t>B</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 11<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d594c144\"><emu-t>c</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f87cc5b\"><emu-t>C</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 12<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"919b1483\"><emu-t>D</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 13<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0d7c9fba\"><emu-t>e</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b15f6792\"><emu-t>E</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 14<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4068cae7\"><emu-t>f</emu-t></emu-rhs>\n</emu-production></emu-grammar> or of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0d544f70\"><emu-t>F</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 15<sub>&#8477;</sub>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"600d7817\"><emu-t>0b</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7c1f17d9\"><emu-t>0B</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5f1ee23\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"82aa7443\"><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2<sub>&#8477;</sub>) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8056cb0\"><emu-t>0o</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3a3652fa\"><emu-t>0O</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"99bc1d53\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37a295fe\"><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8<sub>&#8477;</sub>) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cf154180\"><emu-t>0x</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9ef756f3\"><emu-t>0X</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a0c48a71\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The MV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16<sub>&#8477;</sub>) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-string-prototype-object": {"num": "21.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The String prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%StringPrototype%</dfn>.</li>\n        <li>is a String <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val> and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation  <dfn id=\"sec-thisstringvalue\" aoid=\"thisStringValue\">thisStringValue</dfn>(<var>value</var>) performs the following steps:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">21.1.3.1</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">21.1.3.2</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">21.1.3.3</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">21.1.3.4</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">21.1.3.5</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">21.1.3.6</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">21.1.3.7</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">21.1.3.8</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">21.1.3.9</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">21.1.3.10</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">21.1.3.11</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">21.1.3.12</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">21.1.3.13</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">21.1.3.14</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">21.1.3.15</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">21.1.3.16</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">21.1.3.17</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">21.1.3.18</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">21.1.3.19</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">21.1.3.20</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">21.1.3.21</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">21.1.3.22</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">21.1.3.23</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">21.1.3.24</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">21.1.3.25</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">21.1.3.26</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">21.1.3.27</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">21.1.3.28</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">21.1.3.29</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">21.1.3.30</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">21.1.3.31</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">21.1.3.32</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-binaryxor": {"num": "6.1.6.2.18", "title": "#sec-binaryxor BinaryXor ( x, y )", "html": "<emu-clause id=\"sec-binaryxor\" aoid=\"BinaryXor\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryxor\">#sec-binaryxor</span> BinaryXor ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li>If <var>x</var> is <emu-val>1n</emu-val> and <var>y</var> is <emu-val>0n</emu-val>, return <emu-val>1n</emu-val>.</li><li>Else if <var>x</var> is <emu-val>0n</emu-val> and <var>y</var> is <emu-val>1n</emu-val>, return <emu-val>1n</emu-val>.</li><li>Else, return <emu-val>0n</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-array.prototype.reduceright": {"num": "22.1.3.22", "title": "#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-array.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</span> Array.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that takes four arguments. <code>reduceRight</code> calls the callback, as a function, once for each element after the first element present in the array, in descending order.</p>\n          <p><var>callbackfn</var> is called with four arguments: the <var>previousValue</var> (value from the previous call to <var>callbackfn</var>), the <var>currentValue</var> (value of the current element), the <var>currentIndex</var>, and the object being traversed. The first time the function is called, the <var>previousValue</var> and <var>currentValue</var> can be one of two values. If an <var>initialValue</var> was supplied in the call to <code>reduceRight</code>, then <var>previousValue</var> will be equal to <var>initialValue</var> and <var>currentValue</var> will be equal to the last value in the array. If no <var>initialValue</var> was supplied, then <var>previousValue</var> will be equal to the last value in the array and <var>currentValue</var> will be equal to the second-to-last value. It is a <emu-val>TypeError</emu-val> if the array contains no elements and <var>initialValue</var> is not provided.</p>\n          <p><code>reduceRight</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>reduceRight</code> is set before the first call to <var>callbackfn</var>. Elements that are appended to the array after the call to <code>reduceRight</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed by <var>callbackfn</var>, their value as passed to <var>callbackfn</var> will be the value at the time <code>reduceRight</code> visits them; elements that are deleted after the call to <code>reduceRight</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>reduceRight</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> is <emu-val>+0</emu-val> and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be <var>len</var> - 1.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>kPresent</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>kPresent</var> is <emu-val>false</emu-val> and <var>k</var> &#8805; 0<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Set <var>kPresent</var> to ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>If <var>kPresent</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <var>accumulator</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>reduceRight</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.repeat": {"num": "21.1.3.16", "title": "#sec-string.prototype.repeat String.prototype.repeat ( count )", "html": "<emu-clause id=\"sec-string.prototype.repeat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.repeat\">#sec-string.prototype.repeat</span> String.prototype.repeat ( <var>count</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>If <var>n</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is <emu-val>+&#8734;</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is <emu-val>&#177;0</emu-val>, return the empty String.</li><li>Return the String value that is made from <var>n</var> copies of <var>S</var> appended together.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method creates the String value consisting of the code units of the <emu-val>this</emu-val> object (converted to String) repeated <var>count</var> times.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>repeat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-string.fromcharcode": {"num": "21.1.2.1", "title": "#sec-string.fromcharcode String.fromCharCode ( ...codeUnits )", "html": "<emu-clause id=\"sec-string.fromcharcode\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcharcode\">#sec-string.fromcharcode</span> String.fromCharCode ( ...<var>codeUnits</var> )</h1>\n        <p>The <code>String.fromCharCode</code> function may be called with any number of arguments which form the rest parameter <var>codeUnits</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codeUnits</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codeUnits</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codeUnits</var>[<var>nextIndex</var>].</li><li>Let <var>nextCU</var> be ?&#160;<emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextCU</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is <emu-val>+0</emu-val>, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCharCode</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.indexof": {"num": "21.1.3.8", "title": "#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.indexof\">#sec-string.prototype.indexof</span> String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, then the smallest such index is returned; otherwise, -1 is returned. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <p>The <code>indexOf</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is <emu-val>+0</emu-val>.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>Return the smallest possible <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> not smaller than <var>start</var> such that <var>k</var> + <var>searchLen</var> is not greater than <var>len</var>, and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>S</var> is the same as the code unit at index <var>j</var> within <var>searchStr</var>; but if there is no such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var>, return the value -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toexponential": {"num": "20.1.3.2", "title": "#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.toexponential\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toexponential\">#sec-number.prototype.toexponential</span> Number.prototype.toExponential ( <var>fractionDigits</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal exponential notation with one digit before the significand's decimal point and <var>fractionDigits</var> digits after the significand's decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, include as many significand digits as necessary to uniquely specify the Number (just like in <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> except that in this case the Number is always output in exponential notation). Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = <emu-val>+&#8734;</emu-val>, then<ol><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <emu-val>\"Infinity\"</emu-val>.</li></ol></li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>f</var> + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>If <var>fractionDigits</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is larger.</li></ol></li><li>Else,<ol><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. Note that the decimal representation of <var>n</var> has <var>f</var> + 1<sub>&#8477;</sub> digits, <var>n</var> is not divisible by 10, and the least significant digit of <var>n</var> is not necessarily uniquely determined by these criteria.</li></ol></li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li></ol></li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> = 0, then<ol><li>Let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>d</var> be <emu-val>\"0\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>e</var> &gt; 0, let <var>c</var> be <emu-val>\"+\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be <emu-val>\"-\"</emu-val>.</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li></ol></li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>m</var>, <emu-val>\"e\"</emu-val>, <var>c</var>, and <var>d</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 10.b.i be used as a guideline:</p>\n          <emu-alg type=\"i\"><ol><li>Let <var>e</var>, <var>n</var>, and <var>f</var> be integers such that <var>f</var> &#8805; 0, 10<sup><var>f</var></sup> &#8804; <var>n</var> &lt; 10<sup><var>f</var> + 1</sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is <var>x</var>, and <var>f</var> is as small as possible. If there are multiple possibilities for <var>n</var>, choose the value of <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> is closest in value to <var>x</var>. If there are two such possible values of <var>n</var>, choose the one that is even.\n          </li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See  <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f512250e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c25b1d19\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"be6457e0\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a922691e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the  <sub>[Await]</sub> parameter is present. The  <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the  <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the  <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-PropertyDefinitionEvaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.14</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a TypedArray element type <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to IEEE 754-2008 binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub>&#8477;</sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-assertion": {"num": "21.2.2.6", "title": "#sec-assertion Assertion", "html": "<emu-clause id=\"sec-assertion\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assertion\">#sec-assertion</span> Assertion</h1>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5878811\"><emu-t>^</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>If <var>e</var> is <emu-val>+0</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>Multiline</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the character <var>Input</var>[<var>e</var> - 1] is one of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Even when the <code>y</code> flag is used with a pattern, <code>^</code> always matches only at the beginning of <var>Input</var>, or (if <var>Multiline</var> is <emu-val>true</emu-val>) at the beginning of a line.</p>\n        </div></emu-note>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>If <var>e</var> is equal to <var>InputLength</var>, return <emu-val>true</emu-val>.</li><li>If <var>Multiline</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the character <var>Input</var>[<var>e</var>] is one of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1e228da5\"><emu-t>\\</emu-t><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var> - 1) and let <var>a</var> be the Boolean result.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var>) and let <var>b</var> be the Boolean result.</li><li>If <var>a</var> is <emu-val>true</emu-val> and <var>b</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>a</var> is <emu-val>false</emu-val> and <var>b</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a5dc97fa\"><emu-t>\\</emu-t><emu-t>B</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return an internal AssertionTester closure that takes a State argument <var>x</var> and performs the following steps:<ol><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var> - 1) and let <var>a</var> be the Boolean result.</li><li>Call <emu-xref aoid=\"IsWordChar\"><a href=\"#sec-runtime-semantics-iswordchar-abstract-operation\">IsWordChar</a></emu-xref>(<var>e</var>) and let <var>b</var> be the Boolean result.</li><li>If <var>a</var> is <emu-val>true</emu-val> and <var>b</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>a</var> is <emu-val>false</emu-val> and <var>b</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cfb94f94\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>=</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be <var>r</var>'s State.</li><li>Let <var>cap</var> be <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>z</var> be the State (<var>xe</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ba98f6e2\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>!</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with +1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8db9fbbe\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with -1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be <var>r</var>'s State.</li><li>Let <var>cap</var> be <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>z</var> be the State (<var>xe</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b07b2c0\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>&lt;!</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with -1 as its <var>direction</var> argument to obtain a Matcher <var>m</var>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be a Continuation that always returns its State argument as a successful MatchResult.</li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and let <var>r</var> be its result.</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <emu-const>failure</emu-const>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-wordcharacters-abstract-operation\"><h1><span class=\"secnum\">21.2.2.6.1</span>#sec-runtime-semantics-wordcharacters-abstract-operation Runtime Semantics: WordCharacters ( )</h1>...</div><div id=\"excluded-sec-runtime-semantics-iswordchar-abstract-operation\"><h1><span class=\"secnum\">21.2.2.6.2</span>#sec-runtime-semantics-iswordchar-abstract-operation Runtime Semantics: IsWordChar ( e )</h1>...</div></emu-clause>\n      "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> + 3<sub>&#8477;</sub></emu-eqn>) values, representing the double-precision 64-bit format IEEE 754-2008 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>54<sub>&#8477;</sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> but not less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub>&#8477;</sub> to 971<sub>&#8477;</sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is -1074<sub>&#8477;</sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the IEEE 754-2008 roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-math.clz32": {"num": "20.3.2.11", "title": "#sec-math.clz32 Math.clz32 ( x )", "html": "<emu-clause id=\"sec-math.clz32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.clz32\">#sec-math.clz32</span> Math.clz32 ( <var>x</var> )</h1>\n        <p>When <code>Math.clz32</code> is called with one argument <var>x</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be the number of leading zero bits in the 32-bit binary representation of <var>n</var>.</li><li>Return <var>p</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <var>n</var> is <emu-val>+0</emu-val>, <var>p</var> will be 32. If the most significant bit of the 32-bit binary encoding of <var>n</var> is 1, <var>p</var> will be <emu-val>+0</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.log2e": {"num": "20.3.1.5", "title": "#sec-math.log2e Math.LOG2E", "html": "<emu-clause id=\"sec-math.log2e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log2e\">#sec-math.log2e</span> Math.LOG2E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the base-2 logarithm of <var>e</var><sub>&#8477;</sub>, the base of the natural logarithms; this value is approximately 1.4426950408889634.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.LOG2E</code> is approximately the reciprocal of the value of <code>Math.LN2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%": {"num": "22.2.1.1", "title": "#sec-%typedarray% %TypedArray% ( )", "html": "<emu-clause id=\"sec-%typedarray%\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%\">#sec-%typedarray%</span> %TypedArray% ( )</h1>\n        <p>The <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> performs the following steps:</p>\n        <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function is <emu-val>+0</emu-val>.</p>\n      </emu-clause>\n    "}, "sec-array.prototype.lastindexof": {"num": "22.1.3.17", "title": "#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</span> Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>lastIndexOf</code> compares <var>searchElement</var> to the elements of the array in descending order using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the largest such index; otherwise, -1 is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, -1 is returned.</p>\n        </div></emu-note>\n        <p>When the <code>lastIndexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> &#8805; 0, then<ol><li>If <var>n</var> is <emu-val>-0</emu-val>, let <var>k</var> be <emu-val>+0</emu-val>; else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <var>k</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>lastIndexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.ln10": {"num": "20.3.1.2", "title": "#sec-math.ln10 Math.LN10", "html": "<emu-clause id=\"sec-math.ln10\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.ln10\">#sec-math.ln10</span> Math.LN10</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the natural logarithm of 10<sub>&#8477;</sub>, which is approximately 2.302585092994046.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The Array prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%ArrayPrototype%</dfn>.</li>\n        <li>is an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val> and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an Array <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...arguments )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"db369ee0\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"477fcd23\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"a3f639a9\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub>&#8477;</sub><sup>10000<sub>&#8477;</sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"33bf537e\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>)) times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var> -<sub>&#8477;</sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>-</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-array.prototype.reduce": {"num": "22.1.3.21", "title": "#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-array.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</span> Array.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that takes four arguments. <code>reduce</code> calls the callback, as a function, once for each element after the first element present in the array, in ascending order.</p>\n          <p><var>callbackfn</var> is called with four arguments: the <var>previousValue</var> (value from the previous call to <var>callbackfn</var>), the <var>currentValue</var> (value of the current element), the <var>currentIndex</var>, and the object being traversed. The first time that callback is called, the <var>previousValue</var> and <var>currentValue</var> can be one of two values. If an <var>initialValue</var> was supplied in the call to <code>reduce</code>, then <var>previousValue</var> will be equal to <var>initialValue</var> and <var>currentValue</var> will be equal to the first value in the array. If no <var>initialValue</var> was supplied, then <var>previousValue</var> will be equal to the first value in the array and <var>currentValue</var> will be equal to the second. It is a <emu-val>TypeError</emu-val> if the array contains no elements and <var>initialValue</var> is not provided.</p>\n          <p><code>reduce</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>The range of elements processed by <code>reduce</code> is set before the first call to <var>callbackfn</var>. Elements that are appended to the array after the call to <code>reduce</code> begins will not be visited by <var>callbackfn</var>. If existing elements of the array are changed, their value as passed to <var>callbackfn</var> will be the value at the time <code>reduce</code> visits them; elements that are deleted after the call to <code>reduce</code> begins and before being visited are not visited.</p>\n        </div></emu-note>\n        <p>When the <code>reduce</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>len</var> is <emu-val>+0</emu-val> and <var>initialValue</var> is not present, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>k</var> be 0.</li><li>Let <var>accumulator</var> be <emu-val>undefined</emu-val>.</li><li>If <var>initialValue</var> is present, then<ol><li>Set <var>accumulator</var> to <var>initialValue</var>.</li></ol></li><li>Else,<ol><li>Let <var>kPresent</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>kPresent</var> is <emu-val>false</emu-val> and <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Set <var>kPresent</var> to ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>If <var>kPresent</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Set <var>accumulator</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <emu-val>undefined</emu-val>, &#171; <var>accumulator</var>, <var>kValue</var>, <var>k</var>, <var>O</var> &#187;).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>accumulator</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>reduce</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.log10e": {"num": "20.3.1.4", "title": "#sec-math.log10e Math.LOG10E", "html": "<emu-clause id=\"sec-math.log10e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.log10e\">#sec-math.log10e</span> Math.LOG10E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the base-10 logarithm of <var>e</var><sub>&#8477;</sub>, the base of the natural logarithms; this value is approximately 0.4342944819032518.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.LOG10E</code> is approximately the reciprocal of the value of <code>Math.LN10</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.e": {"num": "20.3.1.1", "title": "#sec-math.e Math.E", "html": "<emu-clause id=\"sec-math.e\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.e\">#sec-math.e</span> Math.E</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>e</var><sub>&#8477;</sub>, the base of the natural logarithms, which is approximately 2.7182818284590452354.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-class-definitions-runtime-semantics-namedevaluation": {"num": "14.6.15", "title": "#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-namedevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-namedevaluation\">#sec-class-definitions-runtime-semantics-namedevaluation</span> Runtime Semantics: NamedEvaluation</h1>\n      <p>With parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <var>name</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-patterns-static-semantics-capturing-group-number": {"num": "21.2.1.2", "title": "#sec-patterns-static-semantics-capturing-group-number Static Semantics: CapturingGroupNumber", "html": "<emu-clause id=\"sec-patterns-static-semantics-capturing-group-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-capturing-group-number\">#sec-patterns-static-semantics-capturing-group-number</span> Static Semantics: CapturingGroupNumber</h1>\n        <emu-grammar><emu-production name=\"DecimalEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalEscape\">DecimalEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d4c393e5\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalEscape\">DecimalEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"3f4b150f\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>n</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215;<sub>&#8477;</sub> 10<sub>&#8477;</sub><sup><var>n</var></sup> plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>).\n        </li></ol></emu-alg>\n        <p>The definitions of &#8220;the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>&#8221; and &#8220;the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>&#8221; are in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n      </emu-clause>\n\n      "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in  <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> as described in  <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    \n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    \n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    \n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    \n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    \n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    \n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    \n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a <code>Function</code>, <code>Generator</code>, or <code>AsyncFunction</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>,  <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    \n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    \n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-binaryand": {"num": "6.1.6.2.16", "title": "#sec-binaryand BinaryAnd ( x, y )", "html": "<emu-clause id=\"sec-binaryand\" aoid=\"BinaryAnd\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryand\">#sec-binaryand</span> BinaryAnd ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li>If <var>x</var> is <emu-val>1n</emu-val> and <var>y</var> is <emu-val>1n</emu-val>, return <emu-val>1n</emu-val>.</li><li>Else, return <emu-val>0n</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-array.prototype.splice": {"num": "22.1.3.28", "title": "#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )", "html": "<emu-clause id=\"sec-array.prototype.splice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.splice\">#sec-array.prototype.splice</span> Array.prototype.splice ( <var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>splice</code> method is called with two or more arguments <var>start</var>, <var>deleteCount</var> and zero or more <var>items</var>, the <var>deleteCount</var> elements of the array starting at <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> <var>start</var> are replaced by the arguments <var>items</var>. An Array object containing the deleted elements (if any) is returned.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>actualStart</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>actualStart</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If the number of actual arguments is <emu-val>+0</emu-val>, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be 0.</li></ol></li><li>Else if the number of actual arguments is 1, then<ol><li>Let <var>insertCount</var> be 0.</li><li>Let <var>actualDeleteCount</var> be <var>len</var> - <var>actualStart</var>.</li></ol></li><li>Else,<ol><li>Let <var>insertCount</var> be the number of actual arguments minus 2.</li><li>Let <var>dc</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>deleteCount</var>).</li><li>Let <var>actualDeleteCount</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>dc</var>, 0), <var>len</var> - <var>actualStart</var>).</li></ol></li><li>If <var>len</var> + <var>insertCount</var> - <var>actualDeleteCount</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>actualDeleteCount</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>actualDeleteCount</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>actualStart</var> + <var>k</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>fromValue</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>actualDeleteCount</var>, <emu-val>true</emu-val>).</li><li>Let <var>items</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are, in left to right order, the portion of the actual argument list starting with the third argument. The list is empty if fewer than three arguments were passed.</li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li>If <var>itemCount</var> &lt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>k</var> &lt; (<var>len</var> - <var>actualDeleteCount</var>)<ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Set <var>k</var> to <var>len</var>.</li><li>Repeat, while <var>k</var> &gt; (<var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>)<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1)).</li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Else if <var>itemCount</var> &gt; <var>actualDeleteCount</var>, then<ol><li>Set <var>k</var> to (<var>len</var> - <var>actualDeleteCount</var>).</li><li>Repeat, while <var>k</var> &gt; <var>actualStart</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>actualDeleteCount</var> - 1).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> + <var>itemCount</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li></ol></li><li>Set <var>k</var> to <var>actualStart</var>.</li><li>Repeat, while <var>items</var> is not empty<ol><li>Remove the first element from <var>items</var> and let <var>E</var> be the value of that element.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>), <var>E</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - <var>actualDeleteCount</var> + <var>itemCount</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property of the result Array in step 19 was necessary in previous editions of ECMAScript to ensure that its length was correct in situations where the trailing elements of the result Array were not present. Setting <emu-val>\"length\"</emu-val> became unnecessary starting in ES2015 when the result Array was initialized to its proper length rather than an empty Array but is carried forward to preserve backward compatibility.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>splice</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.prototype.startswith": {"num": "21.1.3.21", "title": "#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.startswith\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.startswith\">#sec-string.prototype.startswith</span> String.prototype.startsWith ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is <emu-val>+0</emu-val>.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLength</var> be the length of <var>searchStr</var>.</li><li>If <var>searchLength</var> + <var>start</var> is greater than <var>len</var>, return <emu-val>false</emu-val>.</li><li>If the sequence of code units of <var>S</var> starting at <var>start</var> of length <var>searchLength</var> is the same as the full code unit sequence of <var>searchStr</var>, return <emu-val>true</emu-val>.</li><li>Otherwise, return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method returns <emu-val>true</emu-val> if the sequence of code units of <var>searchString</var> converted to a String is the same as the corresponding code units of this object (converted to a String) starting at index <var>position</var>. Otherwise returns <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>startsWith</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math.sqrt2": {"num": "20.3.1.8", "title": "#sec-math.sqrt2 Math.SQRT2", "html": "<emu-clause id=\"sec-math.sqrt2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt2\">#sec-math.sqrt2</span> Math.SQRT2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the square root of 2<sub>&#8477;</sub>, which is approximately 1.4142135623730951.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-sourcetext": {"num": "21.2.1.5", "title": "#sec-static-semantics-sourcetext Static Semantics: SourceText", "html": "<emu-clause id=\"sec-static-semantics-sourcetext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sourcetext\">#sec-static-semantics-sourcetext</span> Static Semantics: SourceText</h1>\n        <emu-grammar><emu-production name=\"UnicodePropertyNameCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c1247f44\"><emu-nt><a href=\"#prod-UnicodePropertyNameCharacter\">UnicodePropertyNameCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyNameCharacters\">UnicodePropertyNameCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnicodePropertyValueCharacters\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5a208aa0\"><emu-nt><a href=\"#prod-UnicodePropertyValueCharacter\">UnicodePropertyValueCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-UnicodePropertyValueCharacters\">UnicodePropertyValueCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, in source text order, of Unicode code points in the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> this production.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.includes": {"num": "22.1.3.13", "title": "#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</span> Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>includes</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, and if found at any position, returns <emu-val>true</emu-val>; otherwise, <emu-val>false</emu-val> is returned.</p>\n\n          <p>The optional second argument <var>fromIndex</var> defaults to 0 (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>false</emu-val> is returned, i.e. the array will not be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, the whole array will be searched.</p>\n        </div></emu-note>\n\n        <p>When the <code>includes</code> method is called, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is <emu-val>+0</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is <emu-val>+0</emu-val>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>elementK</var> be the result of ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> method intentionally differs from the similar <code>indexOf</code> method in two ways. First, it uses the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, instead of <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref>, allowing it to detect <emu-val>NaN</emu-val> array elements. Second, it does not skip missing array elements, instead treating them as <emu-val>undefined</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-year-number": {"num": "20.4.1.3", "title": "#sec-year-number Year Number", "html": "<emu-clause id=\"sec-year-number\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-year-number\">#sec-year-number</span> Year Number</h1>\n        <p>ECMAScript uses a proleptic Gregorian calendar to map a day number to a year number and to determine the month and date within that year. In this calendar, leap years are precisely those which are (divisible by 4) and ((not divisible by 100) or (divisible by 400)). The number of days in year number <var>y</var> is therefore defined by</p>\n        <emu-eqn id=\"eqn-DaysInYear\" aoid=\"DaysInYear\"><div>DaysInYear(<var>y</var>)</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 4) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) &#8800; 0</div><div>          = 365 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 100) = 0 and (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) &#8800; 0</div><div>          = 366 if (<var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 400) = 0</div></emu-eqn>\n        <p>All non-leap years have 365 days with the usual number of days per month and leap years have an extra day in February. The day number of the first day of year <var>y</var> is given by:</p>\n        <emu-eqn id=\"eqn-DaysFromYear\" aoid=\"DayFromYear\"><div>DayFromYear(<var>y</var>) = 365 &#215; (<var>y</var> - 1970) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1969) / 4) - <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1901) / 100) + <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>y</var> - 1601) / 400)</div></emu-eqn>\n        <p>The <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of the start of a year is:</p>\n        <emu-eqn id=\"eqn-TimeFromYear\" aoid=\"TimeFromYear\"><div>TimeFromYear(<var>y</var>) = <emu-xref aoid=\"msPerDay\"><a href=\"#eqn-msPerDay\">msPerDay</a></emu-xref> &#215; <emu-xref aoid=\"DayFromYear\"><a href=\"#eqn-DaysFromYear\">DayFromYear</a></emu-xref>(<var>y</var>)</div></emu-eqn>\n        <p>A <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> determines a year by:</p>\n        <emu-eqn id=\"eqn-YearFromTime\" aoid=\"YearFromTime\"><div>YearFromTime(<var>t</var>) = the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>y</var> (closest to positive infinity) such that <emu-xref aoid=\"TimeFromYear\"><a href=\"#eqn-TimeFromYear\">TimeFromYear</a></emu-xref>(<var>y</var>) &#8804; <var>t</var></div></emu-eqn>\n        <p>The leap-year function is <emu-val>1</emu-val> for a time within a leap year and otherwise is <emu-val>+0</emu-val>:</p>\n        <emu-eqn id=\"eqn-InLeapYear\" aoid=\"InLeapYear\"><div>InLeapYear(<var>t</var>)</div><div>          = <emu-val>+0</emu-val> if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 365</div><div>          = <emu-val>1</emu-val> if <emu-xref aoid=\"DaysInYear\"><a href=\"#eqn-DaysInYear\">DaysInYear</a></emu-xref>(<emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>t</var>)) = 366</div></emu-eqn>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <span id=\"sec-tostring-applied-to-the-number-type\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString converts a Number <var>x</var> to String format as follows:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub>&#8477;</sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)\n          </li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              \n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\n              \n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n            <emu-alg><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub>&#8477;</sub>.\n            </li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              \n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-math.ln2": {"num": "20.3.1.3", "title": "#sec-math.ln2 Math.LN2", "html": "<emu-clause id=\"sec-math.ln2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.ln2\">#sec-math.ln2</span> Math.LN2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the natural logarithm of 2<sub>&#8477;</sub>, which is approximately 0.6931471805599453.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.22", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <emu-val>\"0x\"</emu-val> or <emu-val>\"0X\"</emu-val>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub>&#8477;</sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>prototype</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getsubstitution": {"num": "21.1.3.17.1", "title": "#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> Runtime Semantics: GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>matched</var>) is String.</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> is a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captures</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacement</var>) is String.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>If <var>namedCaptures</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>namedCaptures</var> to ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>namedCaptures</var>).</li></ol></li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-45\"><a href=\"#table-45\" class=\"excluded-xref\" excluded-id=\"table-45\">#table-45</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"table-45\" caption=\"Replacement Text Symbol Substitutions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-45\">#table-45</span>: Replacement Text Symbol Substitutions</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                \n                </th>\n                <th>\n                  Unicode Characters\n                \n                </th>\n                <th>\n                  Replacement text\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                \n                </td>\n                <td>\n                  <code>$$</code>\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                \n                </td>\n                <td>\n                  <code>$&amp;</code>\n                \n                </td>\n                <td>\n                  <var>matched</var>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                \n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  If <var>position</var> is <emu-val>+0</emu-val>, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index 0 and whose last code unit is at index <var>position</var> - 1.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                \n                </td>\n                <td>\n                  <code>$'</code>\n                \n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the substring of <var>str</var> that starts at index <var>tailPos</var> and continues to the end of <var>str</var>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$n</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                \n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  \n                  <br>\n                  Where\n                  \n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                \n                </td>\n                <td>\n                  <code>$nn</code> where\n                  \n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                \n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                \n                </td>\n                <td>\n                  <code>$&lt;</code>\n                \n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed substring.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty string.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).\n                  </li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                \n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                \n                </td>\n                <td>\n                  <code>$</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-parsefloat-string": {"num": "18.2.4", "title": "#sec-parsefloat-string parseFloat ( string )", "html": "<emu-clause id=\"sec-parsefloat-string\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsefloat-string\">#sec-parsefloat-string</span> parseFloat ( <var>string</var> )</h1>\n      <p>The <code>parseFloat</code> function produces a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> dictated by interpretation of the contents of the <var>string</var> argument as a decimal literal.</p>\n      <p>The <code>parseFloat</code> function is the  <dfn>%parseFloat%</dfn> intrinsic object. When the <code>parseFloat</code> function is called with one argument <var>string</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>trimmedString</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>If neither <var>trimmedString</var> nor any prefix of <var>trimmedString</var> satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> (see <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>), return <emu-val>NaN</emu-val>.</li><li>Let <var>numberString</var> be the longest prefix of <var>trimmedString</var>, which might be <var>trimmedString</var> itself, that satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.</li><li>Let <var>mathFloat</var> be MV of <var>numberString</var>.</li><li>If <var>mathFloat</var> = 0<sub>&#8477;</sub>, then<ol><li>If the first code unit of <var>trimmedString</var> is the code unit 0x002D (HYPHEN-MINUS), return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathFloat</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseFloat</code> may interpret only a leading portion of <var>string</var> as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>; it ignores any code units that cannot be interpreted as part of the notation of a decimal literal, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-binaryor": {"num": "6.1.6.2.17", "title": "#sec-binaryor BinaryOr ( x, y )", "html": "<emu-clause id=\"sec-binaryor\" aoid=\"BinaryOr\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryor\">#sec-binaryor</span> BinaryOr ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is <emu-val>0n</emu-val> or <emu-val>1n</emu-val>.</li><li>If <var>x</var> is <emu-val>1n</emu-val> or <var>y</var> is <emu-val>1n</emu-val>, return <emu-val>1n</emu-val>.</li><li>Else, return <emu-val>0n</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codePoints</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of <var>nextCP</var> to the end of <var>elements</var>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is <emu-val>+0</emu-val>, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).\n        </li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">syntax-directed operation</a></emu-xref> will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().\n        </li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].\n        </li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "21.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation Runtime Semantics: RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> Runtime Semantics: RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes eight parameters, a Matcher <var>m</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or &#8734;) <var>max</var>, a Boolean <var>greedy</var>, a State <var>x</var>, a Continuation <var>c</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>parenIndex</var>, and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>parenCount</var>, and performs the following steps:</p>\n          <emu-alg><ol><li>If <var>max</var> is <emu-val>+0</emu-val>, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be an internal Continuation closure that takes one State argument <var>y</var> and performs the following steps:<ol><li>If <var>min</var> is <emu-val>+0</emu-val> and <var>y</var>'s <var>endIndex</var> is equal to <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> is <emu-val>+0</emu-val>, let <var>min2</var> be <emu-val>+0</emu-val>; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is &#8734;, let <var>max2</var> be &#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Call <emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>) and return its result.</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> that satisfies <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> is not <emu-val>&#177;0</emu-val>, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Call <var>c</var>(<var>x</var>) and let <var>z</var> be its result.</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Call <var>m</var>(<var>xr</var>, <var>d</var>) and return its result.</li></ol></li><li>Call <var>m</var>(<var>xr</var>, <var>d</var>) and let <var>z</var> be its result.</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Call <var>c</var>(<var>x</var>) and return its result.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?<span class=\"hljs-regexp\">/.exec(\"abcdefghi\")</span></code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*<span class=\"hljs-regexp\">/.exec(\"aabaac\")</span></code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.replace(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step 4 of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*<span class=\"hljs-regexp\">/.exec(\"zaacbbbcac\")</span></code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step 1 of the RepeatMatcher's <var>d</var> closure states that, once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*<span class=\"hljs-regexp\">/.exec(\"b\")</span></code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+<span class=\"hljs-regexp\">/.exec(\"baaaac\")</span></code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-identifiers-static-semantics-early-errors": {"num": "12.1.1", "title": "#sec-identifiers-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-identifiers-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"arguments\"</emu-val> or <emu-val>\"eval\"</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the code matched by this production is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a  <sub>[Yield]</sub> parameter.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has an  <sub>[Await]</sub> parameter.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"IdentifierReference\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LabelIdentifier\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this production has a  <sub>[Yield]</sub> parameter and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"yield\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if this production has an  <sub>[Await]</sub> parameter and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"Identifier\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if this phrase is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is: <emu-val>\"implements\"</emu-val>, <emu-val>\"interface\"</emu-val>, <emu-val>\"let\"</emu-val>, <emu-val>\"package\"</emu-val>, <emu-val>\"private\"</emu-val>, <emu-val>\"protected\"</emu-val>, <emu-val>\"public\"</emu-val>, <emu-val>\"static\"</emu-val>, or <emu-val>\"yield\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> of the syntactic grammar is <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> and the StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is <emu-val>\"await\"</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> is the same String value as the StringValue of any <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> except for <code>yield</code> or <code>await</code>.\n        \n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> normalizes any Unicode escape sequences in <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> hence such escapes cannot be used to write an <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> whose code point sequence is the same as a <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.16", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d022e28b\"><emu-t>class</emu-t><emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>className</var> be <emu-val>undefined</emu-val>.</li><li>Else, let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-sv": {"num": "11.8.4.2", "title": "#sec-static-semantics-sv Static Semantics: SV", "html": "<emu-clause id=\"sec-static-semantics-sv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sv\">#sec-static-semantics-sv</span> Static Semantics: SV</h1>\n        <p>A string literal stands for a value of the String type. The String value (SV) of the literal is described in terms of code unit values contributed by the various parts of the string literal. As part of this process, some Unicode code points within the string literal are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV), as described below or in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a2dff6c6\"><emu-t>\"</emu-t><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"74786b0a\"><emu-t>'</emu-t><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e7eba5c6\"><emu-t>\"</emu-t><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"314db585\"><emu-t>'</emu-t><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3d57705\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9b3f247e\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b4d0b3a\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"89ebe999\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0000 (NULL).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is determined by the <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt> according to  <emu-xref href=\"#table-34\"><a href=\"#table-34\" class=\"excluded-xref\" excluded-id=\"table-34\">#table-34</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <emu-table id=\"table-34\" caption=\"String Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-34\">#table-34</span>: String Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Escape Sequence\n              \n              </th>\n              <th>\n                Code Unit Value\n              \n              </th>\n              <th>\n                Unicode Character Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>\\b</code>\n              \n              </td>\n              <td>\n                <code>0x0008</code>\n              \n              </td>\n              <td>\n                BACKSPACE\n              \n              </td>\n              <td>\n                &lt;BS&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\t</code>\n              \n              </td>\n              <td>\n                <code>0x0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\n</code>\n              \n              </td>\n              <td>\n                <code>0x000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\v</code>\n              \n              </td>\n              <td>\n                <code>0x000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\f</code>\n              \n              </td>\n              <td>\n                <code>0x000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\r</code>\n              \n              </td>\n              <td>\n                <code>0x000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\"</code>\n              \n              </td>\n              <td>\n                <code>0x0022</code>\n              \n              </td>\n              <td>\n                QUOTATION MARK\n              \n              </td>\n              <td>\n                <code>\"</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\'</code>\n              \n              </td>\n              <td>\n                <code>0x0027</code>\n              \n              </td>\n              <td>\n                APOSTROPHE\n              \n              </td>\n              <td>\n                <code>'</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\\</code>\n              \n              </td>\n              <td>\n                <code>0x005C</code>\n              \n              </td>\n              <td>\n                REVERSE SOLIDUS\n              \n              </td>\n              <td>\n                <code>\\</code>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"NonEscapeCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (16<sub>&#8477;</sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (0x1000<sub>&#8477;</sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus (0x100<sub>&#8477;</sub> times the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus (0x10<sub>&#8477;</sub> times the MV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the fourth <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-math.pi": {"num": "20.3.1.6", "title": "#sec-math.pi Math.PI", "html": "<emu-clause id=\"sec-math.pi\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.pi\">#sec-math.pi</span> Math.PI</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for &#960;<sub>&#8477;</sub>, the ratio of the circumference of a circle to its diameter, which is approximately 3.1415926535897932.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-toboolean": {"num": "7.1.2", "title": "#sec-toboolean ToBoolean ( argument )", "html": "<emu-clause id=\"sec-toboolean\" aoid=\"ToBoolean\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toboolean\">#sec-toboolean</span> ToBoolean ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBoolean converts <var>argument</var> to a value of type Boolean according to  <emu-xref href=\"#table-10\"><a href=\"#table-10\" class=\"excluded-xref\" excluded-id=\"table-10\">#table-10</a></emu-xref>:</p>\n      <emu-table id=\"table-10\" caption=\"ToBoolean Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-10\">#table-10</span>: <emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> Conversions</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            \n            </th>\n            <th>\n              Result\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            \n            </td>\n            <td>\n              Return <emu-val>false</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            \n            </td>\n            <td>\n              Return <emu-val>false</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            \n            </td>\n            <td>\n              Return <var>argument</var>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            \n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, or <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            \n            </td>\n            <td>\n              If <var>argument</var> is the empty String (its length is <emu-val>+0</emu-val>), return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            \n            </td>\n            <td>\n              Return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            \n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>0n</emu-val>, return <emu-val>false</emu-val>; otherwise return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            \n            </td>\n            <td>\n              Return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-array.prototype.pop": {"num": "22.1.3.19", "title": "#sec-array.prototype.pop Array.prototype.pop ( )", "html": "<emu-clause id=\"sec-array.prototype.pop\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.pop\">#sec-array.prototype.pop</span> Array.prototype.pop ( )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The last element of the array is removed from the array and returned.</p>\n        </div></emu-note>\n        <p>When the <code>pop</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is <emu-val>+0</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>len</var> &gt; 0.</li><li>Let <var>newLen</var> be <var>len</var> - 1.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>newLen</var>).</li><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>index</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>index</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>newLen</var>, <emu-val>true</emu-val>).</li><li>Return <var>element</var>.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>pop</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.17", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-array.prototype.indexof": {"num": "22.1.3.14", "title": "#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</span> Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>indexOf</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the smallest such index; otherwise, -1 is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to 0 (i.e. the whole array is searched). If it is greater than or equal to the length of the array, -1 is returned, i.e. the array will not be searched. If it is negative, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than 0, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>indexOf</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is <emu-val>+0</emu-val>, return -1.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is <emu-val>+0</emu-val>.</li><li>If <var>n</var> &#8805; <var>len</var>, return -1.</li><li>If <var>n</var> &#8805; 0, then<ol><li>If <var>n</var> is <emu-val>-0</emu-val>, let <var>k</var> be <emu-val>+0</emu-val>; else let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>)).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <var>k</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return -1.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#247; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>f</var>)</sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>, and let <var>b</var> be the remaining <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            \n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numericvalue": {"num": "11.8.3.2", "title": "#sec-numericvalue Static Semantics: NumericValue", "html": "<emu-clause id=\"sec-numericvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numericvalue\">#sec-numericvalue</span> Static Semantics: NumericValue</h1>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that results from rounding the MV of <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> as described below.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that results from rounding the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> as described below.\n        </li></ol></emu-alg>\n        <p>Once the exact MV for a numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0<sub>&#8477;</sub>, then the rounded value is <emu-val>+0</emu-val>; otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (as specified in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal is a <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a <code>0</code> digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a <code>0</code> digit and then incrementing the literal at the 20th significant digit position. A digit is  <em>significant</em> if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n        <ul>\n          <li>\n            it is not <code>0</code>; or\n          \n          </li>\n          <li>\n            there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n          \n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68def506\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ddee4872\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents 0<sub>&#8477;</sub>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7641418e\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the BigInt value that represents the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"DecimalBigIntegerLiteral\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DecimalBigIntegerLiteral\">DecimalBigIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"93069ccc\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>n</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>mv</var> be (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sub>&#8477;</sub><sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the BigInt value that represents <var>mv</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n    "}, "sec-math.sqrt1_2": {"num": "20.3.1.7", "title": "#sec-math.sqrt1_2 Math.SQRT1_2", "html": "<emu-clause id=\"sec-math.sqrt1_2\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.sqrt1_2\">#sec-math.sqrt1_2</span> Math.SQRT1_2</h1>\n        <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the square root of &#189;<sub>&#8477;</sub>, which is approximately 0.7071067811865476.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value of <code>Math.SQRT1_2</code> is approximately the reciprocal of the value of <code>Math.SQRT2</code>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-number.prototype.toprecision": {"num": "20.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and  <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#sec-thisnumbervalue\"><a href=\"#sec-thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = <emu-val>+&#8734;</emu-val>, then<ol><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <emu-val>\"Infinity\"</emu-val>.</li></ol></li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &lt; 10<sup><var>p</var></sup> and for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>e</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>p</var>) + 1<sub>&#8477;</sub></sup> is larger.</li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>, and let <var>b</var> be the remaining <var>p</var> - 1 code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>e</var> + 1 code units of <var>m</var>, the code unit 0x002E (FULL STOP), and the remaining <var>p</var> - (<var>e</var> + 1) code units of <var>m</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.shift": {"num": "22.1.3.24", "title": "#sec-array.prototype.shift Array.prototype.shift ( )", "html": "<emu-clause id=\"sec-array.prototype.shift\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.shift\">#sec-array.prototype.shift</span> Array.prototype.shift ( )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The first element of the array is removed from the array and returned.</p>\n        </div></emu-note>\n        <p>When the <code>shift</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is <emu-val>+0</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>first</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"0\"</emu-val>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>to</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var> - 1).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromVal</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>from</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>to</var>, <var>fromVal</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>to</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>len</var> - 1)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <emu-val>\"length\"</emu-val>, <var>len</var> - 1, <emu-val>true</emu-val>).</li><li>Return <var>first</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>shift</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.includes": {"num": "21.1.3.7", "title": "#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.includes\">#sec-string.prototype.includes</span> String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The <code>includes</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is <emu-val>+0</emu-val>.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> not smaller than <var>start</var> such that <var>k</var> + <var>searchLen</var> is not greater than <var>len</var>, and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>S</var> is the same as the code unit at index <var>j</var> within <var>searchStr</var>, return <emu-val>true</emu-val>; but if there is no such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var>, return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a substring of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, return <emu-val>true</emu-val>; otherwise, returns <emu-val>false</emu-val>. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, @@replace).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be <emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing substring of <var>string</var> starting at index <var>tailPos</var>. If <var>pos</var> is <emu-val>+0</emu-val>, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub>&#120125;</sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub>&#8477;</sub> + 2<sub>&#8477;</sub> = 3<sub>&#8477;</sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub>&#120125;</sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub>&#8477;</sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-date.parse": {"num": "20.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is <emu-val>&#177;0</emu-val> within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.valueOf()\n<span class=\"hljs-built_in\">Date</span>.parse(x.toString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toUTCString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toISOString())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Date</span>.parse(x.toLocaleString())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is implementation-dependent when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-date.prototype.tostring": {"num": "20.4.4.41", "title": "#sec-date.prototype.tostring Date.prototype.toString ( )", "html": "<emu-clause id=\"sec-date.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</span> Date.prototype.toString ( )</h1>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"ToDateString\"><a href=\"#sec-todatestring\">ToDateString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>For any Date object <code>d</code> whose milliseconds amount is <emu-val>&#177;0</emu-val>, the result of <code>Date.parse(d.toString())</code> is equal to <code>d.valueOf()</code>. See  <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\" class=\"excluded-xref\" excluded-id=\"sec-date.parse\">#sec-date.parse</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>toString</code> function is not generic; it throws a <emu-val>TypeError</emu-val> exception if its <emu-val>this</emu-val> value is not a Date object. Therefore, it cannot be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-timestring\"><h1><span class=\"secnum\">20.4.4.41.1</span>#sec-timestring Runtime Semantics: TimeString ( tv )</h1>...</div><div id=\"excluded-sec-datestring\"><h1><span class=\"secnum\">20.4.4.41.2</span>#sec-datestring Runtime Semantics: DateString ( tv )</h1>...</div><div id=\"excluded-sec-timezoneestring\"><h1><span class=\"secnum\">20.4.4.41.3</span>#sec-timezoneestring Runtime Semantics: TimeZoneString ( tv )</h1>...</div><div id=\"excluded-sec-todatestring\"><h1><span class=\"secnum\">20.4.4.41.4</span>#sec-todatestring Runtime Semantics: ToDateString ( tv )</h1>...</div></emu-clause>\n\n      "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-1": "Table 1", "table-3": "Table 4", "table-10": "Table 10", "table-34": "Table 36", "table-45": "Table 53", "table-the-typedarray-constructors": "Table 62"}}}