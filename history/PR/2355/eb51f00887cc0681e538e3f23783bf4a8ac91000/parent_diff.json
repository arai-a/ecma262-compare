{"from": {"secList": ["sec-weakmap.prototype.set", "sec-get-sharedarraybuffer.prototype.bytelength", "sec-set.prototype.has", "sec-weak-ref.prototype.deref", "sec-map.prototype.foreach", "sec-sharedarraybuffer.prototype.slice", "sec-get-%typedarray%.prototype.byteoffset", "sec-get-map.prototype.size", "sec-weakset.prototype.delete", "sec-arraybuffer.prototype.slice", "sec-get-%typedarray%.prototype.buffer", "sec-weakmap.prototype.get", "sec-get-dataview.prototype.bytelength", "sec-map.prototype.get", "sec-regexp.prototype.exec", "sec-regexp.prototype.compile", "sec-requireinternalslot", "sec-set.prototype.clear", "sec-weakset.prototype.add", "sec-finalization-registry.prototype.unregister", "sec-map.prototype.clear", "sec-get-dataview.prototype.byteoffset", "sec-finalization-registry.prototype.register", "sec-%typedarray%.prototype.subarray", "sec-map.prototype.delete", "sec-weakmap.prototype.has", "sec-%typedarray%.prototype.set", "sec-get-arraybuffer.prototype.bytelength", "sec-weakmap.prototype.delete", "sec-map.prototype.set", "sec-weakset.prototype.has", "sec-get-dataview.prototype.buffer", "sec-get-%typedarray%.prototype.length", "sec-get-%typedarray%.prototype.bytelength", "sec-get-set.prototype.size", "sec-set.prototype.delete", "sec-map.prototype.has", "sec-set.prototype.add", "sec-set.prototype.foreach"], "secData": {"sec-weakmap.prototype.set": {"num": "24.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-sharedarraybuffer.prototype.bytelength": {"num": "25.2.4.1", "title": "#sec-get-sharedarraybuffer.prototype.bytelength get SharedArrayBuffer.prototype.byteLength", "html": "<emu-clause id=\"sec-get-sharedarraybuffer.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-sharedarraybuffer.prototype.bytelength\">#sec-get-sharedarraybuffer.prototype.bytelength</span> get SharedArrayBuffer.prototype.byteLength</h1>\n        <p><code>SharedArrayBuffer.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.has": {"num": "24.2.3.7", "title": "#sec-set.prototype.has Set.prototype.has ( value )", "html": "<emu-clause id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.has\">#sec-set.prototype.has</span> Set.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weak-ref.prototype.deref": {"num": "26.1.3.2", "title": "#sec-weak-ref.prototype.deref WeakRef.prototype.deref ( )", "html": "<emu-clause id=\"sec-weak-ref.prototype.deref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.deref\">#sec-weak-ref.prototype.deref</span> WeakRef.prototype.deref ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>weakRef</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>weakRef</var>, [[WeakRefTarget]]).</li><li>Return !&#160;<emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref>(<var>weakRef</var>).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> returns a <var>target</var> Object that is not <emu-val>undefined</emu-val>, then this <var>target</var> object should not be garbage collected until the current execution of ECMAScript code has completed. The <emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref> operation makes sure read consistency is maintained.</p>\n\n          <pre><code class=\"javascript hljs\">target = { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{} };\n<span class=\"hljs-keyword\">let</span> weakRef = <span class=\"hljs-keyword\">new</span> WeakRef(target);\n\n... later ...\n\n<span class=\"hljs-keyword\">if</span> (weakRef.deref()) {\n  weakRef.deref().foo();\n}</code></pre>\n\n          <p>In the above example, if the first deref does not evaluate to <emu-val>undefined</emu-val> then the second deref cannot either.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.foreach": {"num": "24.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer.prototype.slice": {"num": "25.2.4.3", "title": "#sec-sharedarraybuffer.prototype.slice SharedArrayBuffer.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-sharedarraybuffer.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer.prototype.slice\">#sec-sharedarraybuffer.prototype.slice</span> SharedArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> is -&#8734;, let <var>first</var> be 0.</li><li>Else if <var>relativeStart</var> &lt; 0, let <var>first</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeStart</var>, 0).</li><li>Else, let <var>first</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>final</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>newLen</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>first</var>, 0).</li><li>Let <var>ctor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-sharedarraybuffer-constructor\"><a href=\"#sec-sharedarraybuffer-constructor\">%SharedArrayBuffer%</a></emu-xref>).</li><li>Let <var>new</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>ctor</var>, &#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLen</var>) &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>new</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>new</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferData]] and <var>O</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferByteLength]] &lt; <var>newLen</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>fromBuf</var> be <var>O</var>.[[ArrayBufferData]].</li><li>Let <var>toBuf</var> be <var>new</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>toBuf</var>, 0, <var>fromBuf</var>, <var>first</var>, <var>newLen</var>).</li><li>Return <var>new</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.byteoffset": {"num": "23.2.3.3", "title": "#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.byteoffset\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.byteoffset\">#sec-get-%typedarray%.prototype.byteoffset</span> get %TypedArray%.prototype.byteOffset</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.byteOffset</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>offset</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-map.prototype.size": {"num": "24.1.3.10", "title": "#sec-get-map.prototype.size get Map.prototype.size", "html": "<emu-clause id=\"sec-get-map.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map.prototype.size\">#sec-get-map.prototype.size</span> get Map.prototype.size</h1>\n        <p><code>Map.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>Let <var>count</var> be 0.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>count</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "24.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-arraybuffer.prototype.slice": {"num": "25.1.5.3", "title": "#sec-arraybuffer.prototype.slice ArrayBuffer.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-arraybuffer.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer.prototype.slice\">#sec-arraybuffer.prototype.slice</span> ArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> is -&#8734;, let <var>first</var> be 0.</li><li>Else if <var>relativeStart</var> &lt; 0, let <var>first</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeStart</var>, 0).</li><li>Else, let <var>first</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>final</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>newLen</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>first</var>, 0).</li><li>Let <var>ctor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>Let <var>new</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>ctor</var>, &#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLen</var>) &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>new</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>new</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>new</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>new</var>, <var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferByteLength]] &lt; <var>newLen</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>NOTE: Side-effects of the above steps may have detached <var>O</var>.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>fromBuf</var> be <var>O</var>.[[ArrayBufferData]].</li><li>Let <var>toBuf</var> be <var>new</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>toBuf</var>, 0, <var>fromBuf</var>, <var>first</var>, <var>newLen</var>).</li><li>Return <var>new</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.buffer": {"num": "23.2.3.1", "title": "#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.buffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.buffer\">#sec-get-%typedarray%.prototype.buffer</span> get %TypedArray%.prototype.buffer</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.buffer</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "24.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.bytelength": {"num": "25.3.4.2", "title": "#sec-get-dataview.prototype.bytelength get DataView.prototype.byteLength", "html": "<emu-clause id=\"sec-get-dataview.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.bytelength\">#sec-get-dataview.prototype.bytelength</span> get DataView.prototype.byteLength</h1>\n        <p><code>DataView.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>size</var> be <var>O</var>.[[ByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>size</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.get": {"num": "24.1.3.6", "title": "#sec-map.prototype.get Map.prototype.get ( key )", "html": "<emu-clause id=\"sec-map.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.get\">#sec-map.prototype.get</span> Map.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype.exec": {"num": "22.2.5.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">22.2.5.2.1</span>#sec-regexpexec RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">22.2.5.2.2</span>#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">22.2.5.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp.prototype.compile": {"num": "B.2.5.1", "title": "#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )", "html": "<emu-annex id=\"sec-regexp.prototype.compile\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.compile\">#sec-regexp.prototype.compile</span> RegExp.prototype.compile ( <var>pattern</var>, <var>flags</var> )</h1>\n        <p>When the <code>compile</code> method is called with arguments <var>pattern</var> and <var>flags</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[RegExpMatcher]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>pattern</var>) is Object and <var>pattern</var> has a [[RegExpMatcher]] internal slot, then<ol><li>If <var>flags</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>P</var> be <var>pattern</var>.[[OriginalSource]].</li><li>Let <var>F</var> be <var>pattern</var>.[[OriginalFlags]].</li></ol></li><li>Else,<ol><li>Let <var>P</var> be <var>pattern</var>.</li><li>Let <var>F</var> be <var>flags</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"RegExpInitialize\"><a href=\"#sec-regexpinitialize\">RegExpInitialize</a></emu-xref>(<var>O</var>, <var>P</var>, <var>F</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>compile</code> method completely reinitializes the <emu-val>this</emu-val> value RegExp with a new pattern and flags. An implementation may interpret use of this method as an assertion that the resulting RegExp object will be used multiple times and hence is a candidate for extra optimization.</p>\n        </div></emu-note>\n      </emu-annex>\n    "}, "sec-requireinternalslot": {"num": "10.1.15", "title": "#sec-requireinternalslot RequireInternalSlot ( O, internalSlot )", "html": "<emu-clause id=\"sec-requireinternalslot\" aoid=\"RequireInternalSlot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-requireinternalslot\">#sec-requireinternalslot</span> RequireInternalSlot ( <var>O</var>, <var>internalSlot</var> )</h1>\n      <p>The abstract operation RequireInternalSlot takes arguments <var>O</var> and <var>internalSlot</var>. It throws an exception unless <var>O</var> is an Object and has the given internal slot. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have an <var>internalSlot</var> internal slot, throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-set.prototype.clear": {"num": "24.2.3.2", "title": "#sec-set.prototype.clear Set.prototype.clear ( )", "html": "<emu-clause id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.clear\">#sec-set.prototype.clear</span> Set.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[SetData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Set Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.add": {"num": "24.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.unregister": {"num": "26.2.3.3", "title": "#sec-finalization-registry.prototype.unregister FinalizationRegistry.prototype.unregister ( unregisterToken )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.unregister\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.unregister\">#sec-finalization-registry.prototype.unregister</span> FinalizationRegistry.prototype.unregister ( <var>unregisterToken</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>removed</var> be <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } <var>cell</var> of <var>finalizationRegistry</var>.[[Cells]], do<ol><li>If <var>cell</var>.[[UnregisterToken]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>cell</var>.[[UnregisterToken]], <var>unregisterToken</var>) is <emu-val>true</emu-val>, then<ol><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Set <var>removed</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>removed</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.clear": {"num": "24.1.3.1", "title": "#sec-map.prototype.clear Map.prototype.clear ( )", "html": "<emu-clause id=\"sec-map.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.clear\">#sec-map.prototype.clear</span> Map.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[MapData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.byteoffset": {"num": "25.3.4.3", "title": "#sec-get-dataview.prototype.byteoffset get DataView.prototype.byteOffset", "html": "<emu-clause id=\"sec-get-dataview.prototype.byteoffset\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.byteoffset\">#sec-get-dataview.prototype.byteoffset</span> get DataView.prototype.byteOffset</h1>\n        <p><code>DataView.prototype.byteOffset</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>offset</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.register": {"num": "26.2.3.2", "title": "#sec-finalization-registry.prototype.register FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.register\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.register\">#sec-finalization-registry.prototype.register</span> FinalizationRegistry.prototype.register ( <var>target</var>, <var>heldValue</var> [ , <var>unregisterToken</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>target</var>, <var>heldValue</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, then<ol><li>If <var>unregisterToken</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>unregisterToken</var> to <emu-const>empty</emu-const>.</li></ol></li><li>Let <var>cell</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]]: <var>target</var>, [[HeldValue]]: <var>heldValue</var>, [[UnregisterToken]]: <var>unregisterToken</var> }.</li><li>Append <var>cell</var> to <var>finalizationRegistry</var>.[[Cells]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Based on the algorithms and definitions in this specification, <var>cell</var>.[[HeldValue]] is <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> when <var>cell</var> is in <var>finalizationRegistry</var>.[[Cells]]; however, this does not necessarily mean that <var>cell</var>.[[UnregisterToken]] or <var>cell</var>.[[Target]] are <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. For example, registering an object with itself as its unregister token would not keep the object alive forever.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.subarray": {"num": "23.2.3.27", "title": "#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.subarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.subarray\">#sec-%typedarray%.prototype.subarray</span> %TypedArray%.prototype.subarray ( <var>begin</var>, <var>end</var> )</h1>\n        <p>Returns a new <var>TypedArray</var> object whose element type is the same as this <var>TypedArray</var> and whose ArrayBuffer is the same as the ArrayBuffer of this <var>TypedArray</var>, referencing the elements at <var>begin</var>, inclusive, up to <var>end</var>, exclusive. If either <var>begin</var> or <var>end</var> is negative, it refers to an index from the end of the array, as opposed to from the beginning.</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Let <var>srcLength</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeBegin</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>begin</var>).</li><li>If <var>relativeBegin</var> is -&#8734;, let <var>beginIndex</var> be 0.</li><li>Else if <var>relativeBegin</var> &lt; 0, let <var>beginIndex</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>srcLength</var> + <var>relativeBegin</var>, 0).</li><li>Else, let <var>beginIndex</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeBegin</var>, <var>srcLength</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>srcLength</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>endIndex</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>endIndex</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>srcLength</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>endIndex</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>srcLength</var>).</li><li>Let <var>newLength</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>endIndex</var> - <var>beginIndex</var>, 0).</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>srcByteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>beginByteOffset</var> be <var>srcByteOffset</var> + <var>beginIndex</var> &#215; <var>elementSize</var>.</li><li>Let <var>argumentsList</var> be &#171; <var>buffer</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>beginByteOffset</var>), <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLength</var>) &#187;.</li><li>Return ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-map.prototype.delete": {"num": "24.1.3.3", "title": "#sec-map.prototype.delete Map.prototype.delete ( key )", "html": "<emu-clause id=\"sec-map.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.delete\">#sec-map.prototype.delete</span> Map.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "24.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.23", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <emu-alg><ol><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.23.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.23.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-get-arraybuffer.prototype.bytelength": {"num": "25.1.5.1", "title": "#sec-get-arraybuffer.prototype.bytelength get ArrayBuffer.prototype.byteLength", "html": "<emu-clause id=\"sec-get-arraybuffer.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer.prototype.bytelength\">#sec-get-arraybuffer.prototype.bytelength</span> get ArrayBuffer.prototype.byteLength</h1>\n        <p><code>ArrayBuffer.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "24.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.set": {"num": "24.1.3.9", "title": "#sec-map.prototype.set Map.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-map.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.set\">#sec-map.prototype.set</span> Map.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>If <var>key</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>key</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "24.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.buffer": {"num": "25.3.4.1", "title": "#sec-get-dataview.prototype.buffer get DataView.prototype.buffer", "html": "<emu-clause id=\"sec-get-dataview.prototype.buffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.buffer\">#sec-get-dataview.prototype.buffer</span> get DataView.prototype.buffer</h1>\n        <p><code>DataView.prototype.buffer</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.length": {"num": "23.2.3.18", "title": "#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.length\">#sec-get-%typedarray%.prototype.length</span> get %TypedArray%.prototype.length</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.length</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.bytelength": {"num": "23.2.3.2", "title": "#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.bytelength\">#sec-get-%typedarray%.prototype.bytelength</span> get %TypedArray%.prototype.byteLength</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>O</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>size</var> be <var>O</var>.[[ByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>size</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-set.prototype.size": {"num": "24.2.3.9", "title": "#sec-get-set.prototype.size get Set.prototype.size", "html": "<emu-clause id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set.prototype.size\">#sec-get-set.prototype.size</span> get Set.prototype.size</h1>\n        <p><code>Set.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>Let <var>count</var> be 0.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>count</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.delete": {"num": "24.2.3.4", "title": "#sec-set.prototype.delete Set.prototype.delete ( value )", "html": "<emu-clause id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.delete\">#sec-set.prototype.delete</span> Set.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.has": {"num": "24.1.3.7", "title": "#sec-map.prototype.has Map.prototype.has ( key )", "html": "<emu-clause id=\"sec-map.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.has\">#sec-map.prototype.has</span> Map.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.add": {"num": "24.2.3.1", "title": "#sec-set.prototype.add Set.prototype.add ( value )", "html": "<emu-clause id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.add\">#sec-set.prototype.add</span> Set.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>value</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "24.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-the-typedarray-constructors": "Table 61"}}, "to": {"secList": ["sec-weakmap.prototype.set", "sec-get-sharedarraybuffer.prototype.bytelength", "sec-set.prototype.has", "sec-weak-ref.prototype.deref", "sec-map.prototype.foreach", "sec-sharedarraybuffer.prototype.slice", "sec-get-%typedarray%.prototype.byteoffset", "sec-get-map.prototype.size", "sec-weakset.prototype.delete", "sec-arraybuffer.prototype.slice", "sec-get-%typedarray%.prototype.buffer", "sec-weakmap.prototype.get", "sec-get-dataview.prototype.bytelength", "sec-map.prototype.get", "sec-regexp.prototype.exec", "sec-regexp.prototype.compile", "sec-requireinternalslot", "sec-set.prototype.clear", "sec-weakset.prototype.add", "sec-finalization-registry.prototype.unregister", "sec-map.prototype.clear", "sec-get-dataview.prototype.byteoffset", "sec-finalization-registry.prototype.register", "sec-%typedarray%.prototype.subarray", "sec-map.prototype.delete", "sec-weakmap.prototype.has", "sec-%typedarray%.prototype.set", "sec-get-arraybuffer.prototype.bytelength", "sec-weakmap.prototype.delete", "sec-map.prototype.set", "sec-weakset.prototype.has", "sec-get-dataview.prototype.buffer", "sec-get-%typedarray%.prototype.length", "sec-get-%typedarray%.prototype.bytelength", "sec-get-set.prototype.size", "sec-set.prototype.delete", "sec-map.prototype.has", "sec-set.prototype.add", "sec-set.prototype.foreach"], "secData": {"sec-weakmap.prototype.set": {"num": "24.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-sharedarraybuffer.prototype.bytelength": {"num": "25.2.4.1", "title": "#sec-get-sharedarraybuffer.prototype.bytelength get SharedArrayBuffer.prototype.byteLength", "html": "<emu-clause id=\"sec-get-sharedarraybuffer.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-sharedarraybuffer.prototype.bytelength\">#sec-get-sharedarraybuffer.prototype.bytelength</span> get SharedArrayBuffer.prototype.byteLength</h1>\n        <p><code>SharedArrayBuffer.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.has": {"num": "24.2.3.7", "title": "#sec-set.prototype.has Set.prototype.has ( value )", "html": "<emu-clause id=\"sec-set.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.has\">#sec-set.prototype.has</span> Set.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weak-ref.prototype.deref": {"num": "26.1.3.2", "title": "#sec-weak-ref.prototype.deref WeakRef.prototype.deref ( )", "html": "<emu-clause id=\"sec-weak-ref.prototype.deref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.deref\">#sec-weak-ref.prototype.deref</span> WeakRef.prototype.deref ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>weakRef</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakRefTarget]]).</li><li>Return !&#160;<emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref>(<var>weakRef</var>).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> returns a <var>target</var> Object that is not <emu-val>undefined</emu-val>, then this <var>target</var> object should not be garbage collected until the current execution of ECMAScript code has completed. The <emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref> operation makes sure read consistency is maintained.</p>\n\n          <pre><code class=\"javascript hljs\">target = { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{} };\n<span class=\"hljs-keyword\">let</span> weakRef = <span class=\"hljs-keyword\">new</span> WeakRef(target);\n\n... later ...\n\n<span class=\"hljs-keyword\">if</span> (weakRef.deref()) {\n  weakRef.deref().foo();\n}</code></pre>\n\n          <p>In the above example, if the first deref does not evaluate to <emu-val>undefined</emu-val> then the second deref cannot either.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.foreach": {"num": "24.1.3.5", "title": "#sec-map.prototype.foreach Map.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-map.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.foreach\">#sec-map.prototype.foreach</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>.[[Value]], <var>e</var>.[[Key]], <var>M</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each key/value pair present in the map object, in key insertion order. <var>callbackfn</var> is called only for keys of the map which actually exist; it is not called for keys that have been deleted from the map.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the value of the item, the key of the item, and the Map object being traversed.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>. Each entry of a map's [[MapData]] is only visited once. New keys added after the call to <code>forEach</code> begins are visited. A key will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Keys that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the key is added again before the <code>forEach</code> call completes.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer.prototype.slice": {"num": "25.2.4.3", "title": "#sec-sharedarraybuffer.prototype.slice SharedArrayBuffer.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-sharedarraybuffer.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer.prototype.slice\">#sec-sharedarraybuffer.prototype.slice</span> SharedArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> is -&#8734;, let <var>first</var> be 0.</li><li>Else if <var>relativeStart</var> &lt; 0, let <var>first</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeStart</var>, 0).</li><li>Else, let <var>first</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>final</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>newLen</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>first</var>, 0).</li><li>Let <var>ctor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-sharedarraybuffer-constructor\"><a href=\"#sec-sharedarraybuffer-constructor\">%SharedArrayBuffer%</a></emu-xref>).</li><li>Let <var>new</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>ctor</var>, &#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLen</var>) &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>new</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>new</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferData]] and <var>O</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferByteLength]] &lt; <var>newLen</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>fromBuf</var> be <var>O</var>.[[ArrayBufferData]].</li><li>Let <var>toBuf</var> be <var>new</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>toBuf</var>, 0, <var>fromBuf</var>, <var>first</var>, <var>newLen</var>).</li><li>Return <var>new</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.byteoffset": {"num": "23.2.3.3", "title": "#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.byteoffset\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.byteoffset\">#sec-get-%typedarray%.prototype.byteoffset</span> get %TypedArray%.prototype.byteOffset</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.byteOffset</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>offset</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-map.prototype.size": {"num": "24.1.3.10", "title": "#sec-get-map.prototype.size get Map.prototype.size", "html": "<emu-clause id=\"sec-get-map.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map.prototype.size\">#sec-get-map.prototype.size</span> get Map.prototype.size</h1>\n        <p><code>Map.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>Let <var>count</var> be 0.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>count</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "24.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-arraybuffer.prototype.slice": {"num": "25.1.5.3", "title": "#sec-arraybuffer.prototype.slice ArrayBuffer.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-arraybuffer.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer.prototype.slice\">#sec-arraybuffer.prototype.slice</span> ArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> is -&#8734;, let <var>first</var> be 0.</li><li>Else if <var>relativeStart</var> &lt; 0, let <var>first</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeStart</var>, 0).</li><li>Else, let <var>first</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>final</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>len</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>newLen</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>first</var>, 0).</li><li>Let <var>ctor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>Let <var>new</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>ctor</var>, &#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLen</var>) &#187;).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>new</var>, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>new</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>new</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>new</var>, <var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>new</var>.[[ArrayBufferByteLength]] &lt; <var>newLen</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>NOTE: Side-effects of the above steps may have detached <var>O</var>.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>fromBuf</var> be <var>O</var>.[[ArrayBufferData]].</li><li>Let <var>toBuf</var> be <var>new</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>toBuf</var>, 0, <var>fromBuf</var>, <var>first</var>, <var>newLen</var>).</li><li>Return <var>new</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.buffer": {"num": "23.2.3.1", "title": "#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.buffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.buffer\">#sec-get-%typedarray%.prototype.buffer</span> get %TypedArray%.prototype.buffer</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.buffer</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "24.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.bytelength": {"num": "25.3.4.2", "title": "#sec-get-dataview.prototype.bytelength get DataView.prototype.byteLength", "html": "<emu-clause id=\"sec-get-dataview.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.bytelength\">#sec-get-dataview.prototype.bytelength</span> get DataView.prototype.byteLength</h1>\n        <p><code>DataView.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>size</var> be <var>O</var>.[[ByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>size</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.get": {"num": "24.1.3.6", "title": "#sec-map.prototype.get Map.prototype.get ( key )", "html": "<emu-clause id=\"sec-map.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.get\">#sec-map.prototype.get</span> Map.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype.exec": {"num": "22.2.5.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">22.2.5.2.1</span>#sec-regexpexec RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">22.2.5.2.2</span>#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">22.2.5.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp.prototype.compile": {"num": "B.2.5.1", "title": "#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )", "html": "<emu-annex id=\"sec-regexp.prototype.compile\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.compile\">#sec-regexp.prototype.compile</span> RegExp.prototype.compile ( <var>pattern</var>, <var>flags</var> )</h1>\n        <p>When the <code>compile</code> method is called with arguments <var>pattern</var> and <var>flags</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[RegExpMatcher]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>pattern</var>) is Object and <var>pattern</var> has a [[RegExpMatcher]] internal slot, then<ol><li>If <var>flags</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>P</var> be <var>pattern</var>.[[OriginalSource]].</li><li>Let <var>F</var> be <var>pattern</var>.[[OriginalFlags]].</li></ol></li><li>Else,<ol><li>Let <var>P</var> be <var>pattern</var>.</li><li>Let <var>F</var> be <var>flags</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"RegExpInitialize\"><a href=\"#sec-regexpinitialize\">RegExpInitialize</a></emu-xref>(<var>O</var>, <var>P</var>, <var>F</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>compile</code> method completely reinitializes the <emu-val>this</emu-val> value RegExp with a new pattern and flags. An implementation may interpret use of this method as an assertion that the resulting RegExp object will be used multiple times and hence is a candidate for extra optimization.</p>\n        </div></emu-note>\n      </emu-annex>\n    "}, "sec-requireinternalslot": {"num": "10.1.15", "title": "#sec-requireinternalslot RequireInternalSlot ( O, internalSlot )", "html": "<emu-clause id=\"sec-requireinternalslot\" aoid=\"RequireInternalSlot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-requireinternalslot\">#sec-requireinternalslot</span> RequireInternalSlot ( <var>O</var>, <var>internalSlot</var> )</h1>\n      <p>The abstract operation RequireInternalSlot takes arguments <var>O</var> and <var>internalSlot</var>. It throws an exception unless <var>O</var> is an Object and has the given internal slot. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have an <var>internalSlot</var> internal slot, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-set.prototype.clear": {"num": "24.2.3.2", "title": "#sec-set.prototype.clear Set.prototype.clear ( )", "html": "<emu-clause id=\"sec-set.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.clear\">#sec-set.prototype.clear</span> Set.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[SetData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Set Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.add": {"num": "24.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.unregister": {"num": "26.2.3.3", "title": "#sec-finalization-registry.prototype.unregister FinalizationRegistry.prototype.unregister ( unregisterToken )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.unregister\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.unregister\">#sec-finalization-registry.prototype.unregister</span> FinalizationRegistry.prototype.unregister ( <var>unregisterToken</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>removed</var> be <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]], [[HeldValue]], [[UnregisterToken]] } <var>cell</var> of <var>finalizationRegistry</var>.[[Cells]], do<ol><li>If <var>cell</var>.[[UnregisterToken]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>cell</var>.[[UnregisterToken]], <var>unregisterToken</var>) is <emu-val>true</emu-val>, then<ol><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Set <var>removed</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>removed</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.clear": {"num": "24.1.3.1", "title": "#sec-map.prototype.clear Map.prototype.clear ( )", "html": "<emu-clause id=\"sec-map.prototype.clear\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.clear\">#sec-map.prototype.clear</span> Map.prototype.clear ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The existing [[MapData]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is preserved because there may be existing Map Iterator objects that are suspended midway through iterating over that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.byteoffset": {"num": "25.3.4.3", "title": "#sec-get-dataview.prototype.byteoffset get DataView.prototype.byteOffset", "html": "<emu-clause id=\"sec-get-dataview.prototype.byteoffset\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.byteoffset\">#sec-get-dataview.prototype.byteoffset</span> get DataView.prototype.byteOffset</h1>\n        <p><code>DataView.prototype.byteOffset</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>offset</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-finalization-registry.prototype.register": {"num": "26.2.3.2", "title": "#sec-finalization-registry.prototype.register FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.register\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.register\">#sec-finalization-registry.prototype.register</span> FinalizationRegistry.prototype.register ( <var>target</var>, <var>heldValue</var> [ , <var>unregisterToken</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>target</var>, <var>heldValue</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, then<ol><li>If <var>unregisterToken</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>unregisterToken</var> to <emu-const>empty</emu-const>.</li></ol></li><li>Let <var>cell</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]]: <var>target</var>, [[HeldValue]]: <var>heldValue</var>, [[UnregisterToken]]: <var>unregisterToken</var> }.</li><li>Append <var>cell</var> to <var>finalizationRegistry</var>.[[Cells]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Based on the algorithms and definitions in this specification, <var>cell</var>.[[HeldValue]] is <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> when <var>cell</var> is in <var>finalizationRegistry</var>.[[Cells]]; however, this does not necessarily mean that <var>cell</var>.[[UnregisterToken]] or <var>cell</var>.[[Target]] are <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. For example, registering an object with itself as its unregister token would not keep the object alive forever.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.subarray": {"num": "23.2.3.27", "title": "#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.subarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.subarray\">#sec-%typedarray%.prototype.subarray</span> %TypedArray%.prototype.subarray ( <var>begin</var>, <var>end</var> )</h1>\n        <p>Returns a new <var>TypedArray</var> object whose element type is the same as this <var>TypedArray</var> and whose ArrayBuffer is the same as the ArrayBuffer of this <var>TypedArray</var>, referencing the elements at <var>begin</var>, inclusive, up to <var>end</var>, exclusive. If either <var>begin</var> or <var>end</var> is negative, it refers to an index from the end of the array, as opposed to from the beginning.</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Let <var>srcLength</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeBegin</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>begin</var>).</li><li>If <var>relativeBegin</var> is -&#8734;, let <var>beginIndex</var> be 0.</li><li>Else if <var>relativeBegin</var> &lt; 0, let <var>beginIndex</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>srcLength</var> + <var>relativeBegin</var>, 0).</li><li>Else, let <var>beginIndex</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeBegin</var>, <var>srcLength</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>srcLength</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> is -&#8734;, let <var>endIndex</var> be 0.</li><li>Else if <var>relativeEnd</var> &lt; 0, let <var>endIndex</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>srcLength</var> + <var>relativeEnd</var>, 0).</li><li>Else, let <var>endIndex</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>srcLength</var>).</li><li>Let <var>newLength</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>endIndex</var> - <var>beginIndex</var>, 0).</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>srcByteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>beginByteOffset</var> be <var>srcByteOffset</var> + <var>beginIndex</var> &#215; <var>elementSize</var>.</li><li>Let <var>argumentsList</var> be &#171; <var>buffer</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>beginByteOffset</var>), <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>newLength</var>) &#187;.</li><li>Return ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-map.prototype.delete": {"num": "24.1.3.3", "title": "#sec-map.prototype.delete Map.prototype.delete ( key )", "html": "<emu-clause id=\"sec-map.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.delete\">#sec-map.prototype.delete</span> Map.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "24.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.23", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <emu-alg><ol><li>Let <var>target</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.23.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.23.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-get-arraybuffer.prototype.bytelength": {"num": "25.1.5.1", "title": "#sec-get-arraybuffer.prototype.bytelength get ArrayBuffer.prototype.byteLength", "html": "<emu-clause id=\"sec-get-arraybuffer.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer.prototype.bytelength\">#sec-get-arraybuffer.prototype.bytelength</span> get ArrayBuffer.prototype.byteLength</h1>\n        <p><code>ArrayBuffer.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[ArrayBufferData]]).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayBufferByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "24.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.set": {"num": "24.1.3.9", "title": "#sec-map.prototype.set Map.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-map.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.set\">#sec-map.prototype.set</span> Map.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>If <var>key</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>key</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "24.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-dataview.prototype.buffer": {"num": "25.3.4.1", "title": "#sec-get-dataview.prototype.buffer get DataView.prototype.buffer", "html": "<emu-clause id=\"sec-get-dataview.prototype.buffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-dataview.prototype.buffer\">#sec-get-dataview.prototype.buffer</span> get DataView.prototype.buffer</h1>\n        <p><code>DataView.prototype.buffer</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.length": {"num": "23.2.3.18", "title": "#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.length\">#sec-get-%typedarray%.prototype.length</span> get %TypedArray%.prototype.length</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.length</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>length</var>).</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-get-%typedarray%.prototype.bytelength": {"num": "23.2.3.2", "title": "#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength", "html": "<emu-clause id=\"sec-get-%typedarray%.prototype.bytelength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%.prototype.bytelength\">#sec-get-%typedarray%.prototype.bytelength</span> get %TypedArray%.prototype.byteLength</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.byteLength</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>size</var> be <var>O</var>.[[ByteLength]].</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>size</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-set.prototype.size": {"num": "24.2.3.9", "title": "#sec-get-set.prototype.size get Set.prototype.size", "html": "<emu-clause id=\"sec-get-set.prototype.size\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set.prototype.size\">#sec-get-set.prototype.size</span> get Set.prototype.size</h1>\n        <p><code>Set.prototype.size</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>Let <var>count</var> be 0.</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, set <var>count</var> to <var>count</var> + 1.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>count</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.delete": {"num": "24.2.3.4", "title": "#sec-set.prototype.delete Set.prototype.delete ( value )", "html": "<emu-clause id=\"sec-set.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.delete\">#sec-set.prototype.delete</span> Set.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-map.prototype.has": {"num": "24.1.3.7", "title": "#sec-map.prototype.has Map.prototype.has ( key )", "html": "<emu-clause id=\"sec-map.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.has\">#sec-map.prototype.has</span> Map.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[MapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[MapData]].</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.add": {"num": "24.2.3.1", "title": "#sec-set.prototype.add Set.prototype.add ( value )", "html": "<emu-clause id=\"sec-set.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.add\">#sec-set.prototype.add</span> Set.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>value</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.foreach": {"num": "24.2.3.6", "title": "#sec-set.prototype.foreach Set.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-set.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.foreach\">#sec-set.prototype.foreach</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>forEach</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<emu-val>this</emu-val> value, [[SetData]]).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callbackfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[SetData]].</li><li>For each element <var>e</var> of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callbackfn</var>, <var>thisArg</var>, &#171; <var>e</var>, <var>e</var>, <var>S</var> &#187;).</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><var>callbackfn</var> should be a function that accepts three arguments. <code>forEach</code> calls <var>callbackfn</var> once for each value present in the set object, in value insertion order. <var>callbackfn</var> is called only for values of the Set which actually exist; it is not called for keys that have been deleted from the set.</p>\n          <p>If a <var>thisArg</var> parameter is provided, it will be used as the <emu-val>this</emu-val> value for each invocation of <var>callbackfn</var>. If it is not provided, <emu-val>undefined</emu-val> is used instead.</p>\n          <p><var>callbackfn</var> is called with three arguments: the first two arguments are a value contained in the Set. The same value is passed for both arguments. The Set object being traversed is passed as the third argument.</p>\n          <p>The <var>callbackfn</var> is called with three arguments to be consistent with the call back functions used by <code>forEach</code> methods for Map and Array. For Sets, each item value is considered to be both the key and the value.</p>\n          <p><code>forEach</code> does not directly mutate the object on which it is called but the object may be mutated by the calls to <var>callbackfn</var>.</p>\n          <p>Each value is normally visited only once. However, a value will be revisited if it is deleted after it has been visited and then re-added before the <code>forEach</code> call completes. Values that are deleted after the call to <code>forEach</code> begins and before being visited are not visited unless the value is added again before the <code>forEach</code> call completes. New values added after the call to <code>forEach</code> begins are visited.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-the-typedarray-constructors": "Table 61"}}}