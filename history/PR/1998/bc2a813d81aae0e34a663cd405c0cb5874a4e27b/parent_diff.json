{"from": {"secList": ["sec-bytelistbitwiseop", "sec-atomics.and", "sec-atomics.xor", "sec-numeric-types-number-bitwiseOR", "sec-ecmascript-language-types-number-type", "sec-numeric-types-number-bitwiseXOR", "sec-numeric-types-number-bitwiseAND", "sec-atomics.or", "sec-numberbitwiseop"], "secData": {"sec-bytelistbitwiseop": {"num": "24.4.1.13", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (a <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref>), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>Let <var>resultByte</var> be the result of applying the bitwise operator <var>op</var> to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.and": {"num": "24.4.3", "title": "#sec-atomics.and Atomics.and ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.and\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.and\">#sec-atomics.and</span> Atomics.and ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>and</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>&amp;</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>and</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.xor": {"num": "24.4.13", "title": "#sec-atomics.xor Atomics.xor ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.xor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.xor\">#sec-atomics.xor</span> Atomics.xor ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>xor</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>^</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>xor</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-bitwiseOR": {"num": "6.1.6.1.19", "title": "#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseOR\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseOR\">#sec-numeric-types-number-bitwiseOR</span> Number::bitwiseOR ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseOR takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<code>|</code>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> + 3<sub>&#8477;</sub></emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>54<sub>&#8477;</sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> but not less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub>&#8477;</sub> to 971<sub>&#8477;</sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is -1074<sub>&#8477;</sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-numeric-types-number-bitwiseXOR": {"num": "6.1.6.1.18", "title": "#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseXOR\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseXOR\">#sec-numeric-types-number-bitwiseXOR</span> Number::bitwiseXOR ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseXOR takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<code>^</code>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-bitwiseAND": {"num": "6.1.6.1.17", "title": "#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseAND\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseAND\">#sec-numeric-types-number-bitwiseAND</span> Number::bitwiseAND ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseAND takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<code>&amp;</code>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atomics.or": {"num": "24.4.8", "title": "#sec-atomics.or Atomics.or ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.or\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.or\">#sec-atomics.or</span> Atomics.or ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>or</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<code>|</code>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>or</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var>, <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Return the result of applying the bitwise operator <var>op</var> to <var>lnum</var> and <var>rnum</var>. The result is a signed 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-bytelistbitwiseop", "sec-atomics.and", "sec-atomics.xor", "sec-numeric-types-number-bitwiseOR", "sec-ecmascript-language-types-number-type", "sec-numeric-types-number-bitwiseXOR", "sec-numeric-types-number-bitwiseAND", "sec-atomics.or", "sec-numberbitwiseop"], "secData": {"sec-bytelistbitwiseop": {"num": "24.4.1.13", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (a <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref>), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <emu-val>\"&amp;\"</emu-val>, <emu-val>\"|\"</emu-val>, or <emu-val>\"^\"</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>Let <var>resultByte</var> be the result of applying the bitwise operator <var>op</var> to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.and": {"num": "24.4.3", "title": "#sec-atomics.and Atomics.and ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.and\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.and\">#sec-atomics.and</span> Atomics.and ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>and</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<emu-val>\"&amp;\"</emu-val>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>and</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-atomics.xor": {"num": "24.4.13", "title": "#sec-atomics.xor Atomics.xor ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.xor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.xor\">#sec-atomics.xor</span> Atomics.xor ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>xor</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<emu-val>\"^\"</emu-val>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>xor</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-bitwiseOR": {"num": "6.1.6.1.18", "title": "#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseOR\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseOR\">#sec-numeric-types-number-bitwiseOR</span> Number::bitwiseOR ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseOR takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<emu-val>\"|\"</emu-val>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-language-types-number-type": {"num": "6.1.6.1", "title": "#sec-ecmascript-language-types-number-type The Number Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-number-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</span> The Number Type</h1>\n        <p>The Number type has exactly 18437736874454810627<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> + 3<sub>&#8477;</sub></emu-eqn>) values, representing the double-precision 64-bit format <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) distinct &#8220;Not-a-Number&#8221; values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>) or a SharedArrayBuffer (see  <emu-xref href=\"#sec-sharedarraybuffer-objects\"><a href=\"#sec-sharedarraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-sharedarraybuffer-objects\">#sec-sharedarraybuffer-objects</a></emu-xref>) after a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> has been stored into it is not necessarily the same as the internal representation of that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> used by the ECMAScript implementation.</p>\n        </div></emu-note>\n        <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>\n        <p>The other 18437736874454810624<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup></emu-eqn>) values are called the finite numbers. Half of these are positive numbers and half are negative numbers; for every finite positive <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> there is a corresponding negative value having the same magnitude.</p>\n        <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>\n        <p>The 18437736874454810622<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) finite nonzero values are of two kinds:</p>\n        <p>18428729675200069632<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>64<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub><sup>54<sub>&#8477;</sub></sup></emu-eqn>) of them are normalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> but not less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is a <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> ranging from -1074<sub>&#8477;</sub> to 971<sub>&#8477;</sub>, inclusive.</p>\n        <p>The remaining 9007199254740990<sub>&#8477;</sub> (that is,  <emu-eqn class=\"inline\">2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> - 2<sub>&#8477;</sub></emu-eqn>) values are denormalized, having the form</p>\n        <div class=\"math-display\">\n          <var>s</var> &#215; <var>m</var> &#215; 2<sup><var>e</var></sup>\n        </div>\n        <p>where <var>s</var> is +1<sub>&#8477;</sub> or -1<sub>&#8477;</sub>, <var>m</var> is a positive <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> less than 2<sub>&#8477;</sub><sup>52<sub>&#8477;</sub></sup>, and <var>e</var> is -1074<sub>&#8477;</sub>.</p>\n        <p>Note that all the positive and negative mathematical integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>\n        <p>A finite number has an  <em>odd significand</em> if it is nonzero and the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>\n        <p>In this specification, the phrase &#8220;the  <dfn id=\"number-value\">Number value</dfn> for <var>x</var>&#8221; where <var>x</var> represents an exact real mathematical quantity (which might even be an irrational number such as &#960;) means a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> chosen in the following manner. Consider the set of all finite values of the Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> (which is  <emu-eqn class=\"inline\">+1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>) and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> (which is  <emu-eqn class=\"inline\">-1<sub>&#8477;</sub> &#215; 2<sub>&#8477;</sub><sup>53<sub>&#8477;</sub></sup> &#215; 2<sub>&#8477;</sub><sup>971<sub>&#8477;</sub></sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>. If two values of the set are equally close, then the one with an even significand is chosen; for this purpose, the two extra values 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> and  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> are considered to have even significands. Finally, if 2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup> was chosen, replace it with <emu-val>+&#8734;</emu-val>; if  <emu-eqn class=\"inline\">-2<sub>&#8477;</sub><sup>1024<sub>&#8477;</sub></sup></emu-eqn> was chosen, replace it with <emu-val>-&#8734;</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>. (This procedure corresponds exactly to the behaviour of the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.)</p>\n        <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class=\"inline\">-2<sup>31</sup></emu-eqn> through  <emu-eqn class=\"inline\">2<sup>31</sup> - 1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class=\"inline\">2<sup>16</sup> - 1</emu-eqn>, inclusive. These operators accept any value of the Number type but first convert each such value to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the expected range. See the descriptions of the numeric conversion operations in  <emu-xref href=\"#sec-type-conversion\"><a href=\"#sec-type-conversion\" class=\"excluded-xref\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</a></emu-xref>.</p>\n\n        <p>The Number::unit value is <emu-val>1</emu-val>.</p>\n\n        <div id=\"excluded-sec-numeric-types-number-unaryMinus\"><h1><span class=\"secnum\">6.1.6.1.1</span>#sec-numeric-types-number-unaryMinus Number::unaryMinus ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseNOT\"><h1><span class=\"secnum\">6.1.6.1.2</span>#sec-numeric-types-number-bitwiseNOT Number::bitwiseNOT ( x )</h1>...</div><div id=\"excluded-sec-numeric-types-number-exponentiate\"><h1><span class=\"secnum\">6.1.6.1.3</span>#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )</h1>...</div><div id=\"excluded-sec-numeric-types-number-multiply\"><h1><span class=\"secnum\">6.1.6.1.4</span>#sec-numeric-types-number-multiply Number::multiply ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-divide\"><h1><span class=\"secnum\">6.1.6.1.5</span>#sec-numeric-types-number-divide Number::divide ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-remainder\"><h1><span class=\"secnum\">6.1.6.1.6</span>#sec-numeric-types-number-remainder Number::remainder ( n, d )</h1>...</div><div id=\"excluded-sec-numeric-types-number-add\"><h1><span class=\"secnum\">6.1.6.1.7</span>#sec-numeric-types-number-add Number::add ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-subtract\"><h1><span class=\"secnum\">6.1.6.1.8</span>#sec-numeric-types-number-subtract Number::subtract ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-leftShift\"><h1><span class=\"secnum\">6.1.6.1.9</span>#sec-numeric-types-number-leftShift Number::leftShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-signedRightShift\"><h1><span class=\"secnum\">6.1.6.1.10</span>#sec-numeric-types-number-signedRightShift Number::signedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-unsignedRightShift\"><h1><span class=\"secnum\">6.1.6.1.11</span>#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-lessThan\"><h1><span class=\"secnum\">6.1.6.1.12</span>#sec-numeric-types-number-lessThan Number::lessThan ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-equal\"><h1><span class=\"secnum\">6.1.6.1.13</span>#sec-numeric-types-number-equal Number::equal ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValue\"><h1><span class=\"secnum\">6.1.6.1.14</span>#sec-numeric-types-number-sameValue Number::sameValue ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-sameValueZero\"><h1><span class=\"secnum\">6.1.6.1.15</span>#sec-numeric-types-number-sameValueZero Number::sameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-numberbitwiseop\"><h1><span class=\"secnum\">6.1.6.1.16</span>#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseAND\"><h1><span class=\"secnum\">6.1.6.1.17</span>#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseOR\"><h1><span class=\"secnum\">6.1.6.1.18</span>#sec-numeric-types-number-bitwiseOR Number::bitwiseOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-bitwiseXOR\"><h1><span class=\"secnum\">6.1.6.1.19</span>#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )</h1>...</div><div id=\"excluded-sec-numeric-types-number-tostring\"><h1><span class=\"secnum\">6.1.6.1.20</span>#sec-numeric-types-number-tostring Number::toString ( x )</h1>...</div></emu-clause>\n\n      "}, "sec-numeric-types-number-bitwiseXOR": {"num": "6.1.6.1.19", "title": "#sec-numeric-types-number-bitwiseXOR Number::bitwiseXOR ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseXOR\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseXOR\">#sec-numeric-types-number-bitwiseXOR</span> Number::bitwiseXOR ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseXOR takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<emu-val>\"^\"</emu-val>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-bitwiseAND": {"num": "6.1.6.1.17", "title": "#sec-numeric-types-number-bitwiseAND Number::bitwiseAND ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-bitwiseAND\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-bitwiseAND\">#sec-numeric-types-number-bitwiseAND</span> Number::bitwiseAND ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::bitwiseAND takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"NumberBitwiseOp\"><a href=\"#sec-numberbitwiseop\">NumberBitwiseOp</a></emu-xref>(<emu-val>\"&amp;\"</emu-val>, <var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atomics.or": {"num": "24.4.8", "title": "#sec-atomics.or Atomics.or ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.or\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.or\">#sec-atomics.or</span> Atomics.or ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>or</var> be a new <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref> with parameters (<var>xBytes</var>, <var>yBytes</var>) that captures nothing and performs the following steps atomically when called:<ol><li>Return <emu-xref aoid=\"ByteListBitwiseOp\"><a href=\"#sec-bytelistbitwiseop\">ByteListBitwiseOp</a></emu-xref>(<emu-val>\"|\"</emu-val>, <var>xBytes</var>, <var>yBytes</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"AtomicReadModifyWrite\"><a href=\"#sec-atomicreadmodifywrite\">AtomicReadModifyWrite</a></emu-xref>(<var>typedArray</var>, <var>index</var>, <var>value</var>, <var>or</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var>, <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <emu-val>\"&amp;\"</emu-val>, <emu-val>\"|\"</emu-val>, or <emu-val>\"^\"</emu-val>.</li><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Return the result of applying the bitwise operator <var>op</var> to <var>lnum</var> and <var>rnum</var>. The result is a signed 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}