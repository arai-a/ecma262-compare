{"from": {"secList": ["sec-applystringornumericbinaryoperator", "sec-abstract-relational-comparison", "sec-IsHTMLDDA-internal-slot", "sec-runtime-semantics-caseclauseisselected", "sec-math.min", "sec-numeric-types", "sec-relational-operators-runtime-semantics-evaluation", "sec-%typedarray%.prototype.lastindexof", "sec-math.max", "sec-array.prototype.includes", "sec-samevalue", "sec-strict-equality-comparison", "sec-array.prototype.indexof", "sec-array.prototype.lastindexof", "sec-IsHTMLDDA-internal-slot-aec", "sec-equality-operators-runtime-semantics-evaluation", "sec-%typedarray%.prototype.indexof", "sec-abstract-equality-comparison", "sec-testing-and-comparison-operations", "sec-sortcompare"], "secData": {"sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <var>operation</var>             </th></tr>\n                <tr><td> <code>**</code>           </td><td> <var>T</var>::exponentiate       </td></tr>\n                <tr><td> <code>*</code>            </td><td> <var>T</var>::multiply           </td></tr>\n                <tr><td> <code>/</code>            </td><td> <var>T</var>::divide             </td></tr>\n                <tr><td> <code>%</code>            </td><td> <var>T</var>::remainder          </td></tr>\n                <tr><td> <code>+</code>            </td><td> <var>T</var>::add                </td></tr>\n                <tr><td> <code>-</code>            </td><td> <var>T</var>::subtract           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> <var>T</var>::leftShift          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> <var>T</var>::signedRightShift   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> <var>T</var>::unsignedRightShift </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> <var>T</var>::bitwiseAND         </td></tr>\n                <tr><td> <code>^</code>            </td><td> <var>T</var>::bitwiseXOR         </td></tr>\n                <tr><td> <code>|</code>            </td><td> <var>T</var>::bitwiseOR          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Date objects handle the absence of a hint as if <emu-const>number</emu-const> were given; Date objects handle the absence of a hint as if <emu-const>string</emu-const> were given. Exotic objects may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.13", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-runtime-semantics-caseclauseisselected": {"num": "14.12.3", "title": "#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" aoid=\"CaseClauseIsSelected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\"><span id=\"sec-runtime-semantics-caseselectorevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-math.min": {"num": "21.3.2.25", "title": "#sec-math.min Math.min ( ...args )", "html": "<emu-clause id=\"sec-math.min\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.min\">#sec-math.min</span> Math.min ( ...<var>args</var> )</h1>\n        <p>Given zero or more arguments, calls <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> on each of the arguments and returns the smallest of the resulting values.</p>\n        <p>When the <code>Math.min</code> method is called with zero or more arguments which form the rest parameter ...<var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>coerced</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>arg</var> of <var>args</var>, do<ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>arg</var>).</li><li>Append <var>n</var> to <var>coerced</var>.</li></ol></li><li>Let <var>lowest</var> be <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li><li>For each element <var>number</var> of <var>coerced</var>, do<ol><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>number</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <var>lowest</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>lowest</var> to <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>If <var>number</var> &lt; <var>lowest</var>, set <var>lowest</var> to <var>number</var>.</li></ol></li><li>Return <var>lowest</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The comparison of values to determine the largest value is done using the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm except that <emu-val>+0</emu-val><sub>&#120125;</sub> is considered to be larger than <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        </div></emu-note>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>min</code> method is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      </emu-clause>\n\n      "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-abstract-relational-comparison\" title=\"\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-strict-equality-comparison\" title=\"\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences among members of the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%typedarray%.prototype.lastindexof": {"num": "23.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> are the same as for <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref>.</p>\n        <p>When the <code>lastIndexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> is -&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-math.max": {"num": "21.3.2.24", "title": "#sec-math.max Math.max ( ...args )", "html": "<emu-clause id=\"sec-math.max\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.max\">#sec-math.max</span> Math.max ( ...<var>args</var> )</h1>\n        <p>Given zero or more arguments, calls <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> on each of the arguments and returns the largest of the resulting values.</p>\n        <p>When the <code>Math.max</code> method is called with zero or more arguments which form the rest parameter ...<var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>coerced</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>arg</var> of <var>args</var>, do<ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>arg</var>).</li><li>Append <var>n</var> to <var>coerced</var>.</li></ol></li><li>Let <var>highest</var> be <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</li><li>For each element <var>number</var> of <var>coerced</var>, do<ol><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>number</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <var>highest</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>highest</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>number</var> &gt; <var>highest</var>, set <var>highest</var> to <var>number</var>.</li></ol></li><li>Return <var>highest</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The comparison of values to determine the largest value is done using the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm except that <emu-val>+0</emu-val><sub>&#120125;</sub> is considered to be larger than <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        </div></emu-note>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>max</code> method is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.includes": {"num": "23.1.3.13", "title": "#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</span> Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>includes</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, and if found at any position, returns <emu-val>true</emu-val>; otherwise, <emu-val>false</emu-val> is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to <emu-val>+0</emu-val><sub>&#120125;</sub> (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>false</emu-val> is returned, i.e. the array will not be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>includes</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>false</emu-val>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>false</emu-val>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> method intentionally differs from the similar <code>indexOf</code> method in two ways. First, it uses the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, instead of <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref>, allowing it to detect <emu-val>NaN</emu-val> array elements. Second, it does not skip missing array elements, instead treating them as <emu-val>undefined</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValue(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-strict-equality-comparison": {"num": "7.2.15", "title": "#sec-strict-equality-comparison Strict Equality Comparison", "html": "<emu-clause id=\"sec-strict-equality-comparison\" aoid=\"Strict Equality Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-equality-comparison\">#sec-strict-equality-comparison</span> Strict Equality Comparison</h1>\n      <p>The comparison <var>x</var> === <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::equal(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-array.prototype.indexof": {"num": "23.1.3.14", "title": "#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</span> Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><code>indexOf</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the smallest such index; otherwise, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The optional second argument <var>fromIndex</var> defaults to <emu-val>+0</emu-val><sub>&#120125;</sub> (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned, i.e. the array will not be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>indexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.lastindexof": {"num": "23.1.3.17", "title": "#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</span> Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>lastIndexOf</code> compares <var>searchElement</var> to the elements of the array in descending order using the <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> algorithm, and if found at one or more indices, returns the largest such index; otherwise, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n        </div></emu-note>\n        <p>When the <code>lastIndexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> is -&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>lastIndexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot-aec": {"num": "B.3.7.2", "title": "#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-aec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</span> Changes to Abstract Equality Comparison</h1>\n        <p>The following steps replace step <emu-xref href=\"#step-abstract-equality-comparison-web-compat-insertion-point\"><a href=\"#step-abstract-equality-comparison-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-abstract-equality-comparison-web-compat-insertion-point\">#step-abstract-equality-comparison-web-compat-insertion-point</a></emu-xref> of the <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> algorithm:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <var>x</var> has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref> and <var>y</var> is either <emu-val>null</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is either <emu-val>null</emu-val> or <emu-val>undefined</emu-val> and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object and <var>y</var> has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-annex>\n\n      "}, "sec-equality-operators-runtime-semantics-evaluation": {"num": "13.11.1", "title": "#sec-equality-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-equality-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-runtime-semantics-evaluation\">#sec-equality-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dxo0lfgu\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>==</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cn2twrby\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>!=</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4hu79ipe\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>===</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"irptryux\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>!==</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a normal completion.</li><li>If <var>r</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Given the above definition of equality:</p>\n        <ul>\n          <li>\n            String comparison can be forced by: <code>`${a}` == `${b}`</code>.\n          </li>\n          <li>\n            Numeric comparison can be forced by: <code>+a == +b</code>.\n          </li>\n          <li>\n            Boolean comparison can be forced by: <code>!a == !b</code>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The equality operators maintain the following invariants:</p>\n        <ul>\n          <li>\n            <code>A != B</code> is equivalent to <code>!(A == B)</code>.\n          </li>\n          <li>\n            <code>A == B</code> is equivalent to <code>B == A</code>, except in the order of evaluation of <code>A</code> and <code>B</code>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The equality operator is not always transitive. For example, there might be two distinct String objects, each representing the same String value; each String object would be considered equal to the String value by the <code>==</code> operator, but the two String objects would not be equal to each other. For example:</p>\n        <ul>\n          <li>\n            <code>new String(\"a\") == \"a\"</code> and <code>\"a\" == new String(\"a\")</code> are both <emu-val>true</emu-val>.\n          </li>\n          <li>\n            <code>new String(\"a\") == new String(\"a\")</code> is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-%typedarray%.prototype.indexof": {"num": "23.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> are the same as for <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref>.</p>\n        <p>When the <code>indexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>searchElement</var> === <var>elementK</var>.</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-abstract-equality-comparison": {"num": "7.2.14", "title": "#sec-abstract-equality-comparison Abstract Equality Comparison", "html": "<emu-clause id=\"sec-abstract-equality-comparison\" aoid=\"Abstract Equality Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-equality-comparison\">#sec-abstract-equality-comparison</span> Abstract Equality Comparison</h1>\n      <p>The comparison <var>x</var> == <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>x</var> === <var>y</var>.</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li id=\"step-abstract-equality-comparison-web-compat-insertion-point\">NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"><a href=\"#sec-IsHTMLDDA-internal-slot-aec\" class=\"excluded-xref\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>Return the result of the comparison <var>x</var> == <var>n</var>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return the result of the comparison <var>y</var> == <var>x</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return the result of the comparison <var>x</var> == ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return the result of the comparison ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isintegralnumber\"><h1><span class=\"secnum\">7.2.6</span>#sec-isintegralnumber IsIntegralNumber ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.7</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.8</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-isstringprefix\"><h1><span class=\"secnum\">7.2.9</span>#sec-isstringprefix IsStringPrefix ( p, q )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.10</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-abstract-relational-comparison\"><h1><span class=\"secnum\">7.2.13</span>#sec-abstract-relational-comparison Abstract Relational Comparison</h1>...</div><div id=\"excluded-sec-abstract-equality-comparison\"><h1><span class=\"secnum\">7.2.14</span>#sec-abstract-equality-comparison Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-strict-equality-comparison\"><h1><span class=\"secnum\">7.2.15</span>#sec-strict-equality-comparison Strict Equality Comparison</h1>...</div></emu-clause>\n\n  "}, "sec-sortcompare": {"num": "23.1.3.27.1", "title": "#sec-sortcompare SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation SortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li id=\"step-sortcompare-tostring-x\">Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li id=\"step-sortcompare-tostring-y\">Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>xString</var> &lt; <var>yString</var>.</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>ySmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>yString</var> &lt; <var>xString</var>.</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps <emu-xref href=\"#step-sortcompare-tostring-x\"><a href=\"#step-sortcompare-tostring-x\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-x\">#step-sortcompare-tostring-x</a></emu-xref> and <emu-xref href=\"#step-sortcompare-tostring-y\"><a href=\"#step-sortcompare-tostring-y\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-y\">#step-sortcompare-tostring-y</a></emu-xref> have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}}, "figData": {"table-numeric-type-ops": "Table 2"}}, "to": {"secList": ["sec-applystringornumericbinaryoperator", "sec-abstract-relational-comparison", "sec-IsHTMLDDA-internal-slot", "sec-runtime-semantics-caseclauseisselected", "sec-math.min", "sec-numeric-types", "sec-relational-operators-runtime-semantics-evaluation", "sec-%typedarray%.prototype.lastindexof", "sec-math.max", "sec-array.prototype.includes", "sec-samevalue", "sec-strict-equality-comparison", "sec-array.prototype.indexof", "sec-array.prototype.lastindexof", "sec-IsHTMLDDA-internal-slot-aec", "sec-equality-operators-runtime-semantics-evaluation", "sec-%typedarray%.prototype.indexof", "sec-abstract-equality-comparison", "sec-testing-and-comparison-operations", "sec-sortcompare"], "secData": {"sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <var>operation</var>             </th></tr>\n                <tr><td> <code>**</code>           </td><td> <var>T</var>::exponentiate       </td></tr>\n                <tr><td> <code>*</code>            </td><td> <var>T</var>::multiply           </td></tr>\n                <tr><td> <code>/</code>            </td><td> <var>T</var>::divide             </td></tr>\n                <tr><td> <code>%</code>            </td><td> <var>T</var>::remainder          </td></tr>\n                <tr><td> <code>+</code>            </td><td> <var>T</var>::add                </td></tr>\n                <tr><td> <code>-</code>            </td><td> <var>T</var>::subtract           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> <var>T</var>::leftShift          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> <var>T</var>::signedRightShift   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> <var>T</var>::unsignedRightShift </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> <var>T</var>::bitwiseAND         </td></tr>\n                <tr><td> <code>^</code>            </td><td> <var>T</var>::bitwiseXOR         </td></tr>\n                <tr><td> <code>|</code>            </td><td> <var>T</var>::bitwiseOR          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Date objects handle the absence of a hint as if <emu-const>number</emu-const> were given; Date objects handle the absence of a hint as if <emu-const>string</emu-const> were given. Exotic objects may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.13", "title": "#sec-abstract-relational-comparison AbstractRelationalComparison ( x, y [ , LeftFirst ] )", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"AbstractRelationalComparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> AbstractRelationalComparison ( <var>x</var>, <var>y</var> [ , <var>LeftFirst</var> ] )</h1>\n      <p>The abstract operation AbstractRelationalComparison takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and optional argument <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to AbstractEqualityComparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-runtime-semantics-caseclauseisselected": {"num": "14.12.3", "title": "#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" aoid=\"CaseClauseIsSelected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\"><span id=\"sec-runtime-semantics-caseselectorevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>input</var>, <var>clauseSelector</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-math.min": {"num": "21.3.2.25", "title": "#sec-math.min Math.min ( ...args )", "html": "<emu-clause id=\"sec-math.min\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.min\">#sec-math.min</span> Math.min ( ...<var>args</var> )</h1>\n        <p>Given zero or more arguments, calls <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> on each of the arguments and returns the smallest of the resulting values.</p>\n        <p>When the <code>Math.min</code> method is called with zero or more arguments which form the rest parameter ...<var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>coerced</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>arg</var> of <var>args</var>, do<ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>arg</var>).</li><li>Append <var>n</var> to <var>coerced</var>.</li></ol></li><li>Let <var>lowest</var> be <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li><li>For each element <var>number</var> of <var>coerced</var>, do<ol><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>number</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <var>lowest</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>lowest</var> to <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>If <var>number</var> &lt; <var>lowest</var>, set <var>lowest</var> to <var>number</var>.</li></ol></li><li>Return <var>lowest</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The comparison of values to determine the largest value is done using the <emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref> algorithm except that <emu-val>+0</emu-val><sub>&#120125;</sub> is considered to be larger than <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        </div></emu-note>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>min</code> method is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      </emu-clause>\n\n      "}, "sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-abstract-relational-comparison\" title=\"\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison ( <var>x</var>, <var>y</var> [ , <var>LeftFirst</var> ] )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-strict-equality-comparison\" title=\"\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences among members of the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%typedarray%.prototype.lastindexof": {"num": "23.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> are the same as for <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref>.</p>\n        <p>When the <code>lastIndexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> is -&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-math.max": {"num": "21.3.2.24", "title": "#sec-math.max Math.max ( ...args )", "html": "<emu-clause id=\"sec-math.max\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.max\">#sec-math.max</span> Math.max ( ...<var>args</var> )</h1>\n        <p>Given zero or more arguments, calls <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> on each of the arguments and returns the largest of the resulting values.</p>\n        <p>When the <code>Math.max</code> method is called with zero or more arguments which form the rest parameter ...<var>args</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>coerced</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>arg</var> of <var>args</var>, do<ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>arg</var>).</li><li>Append <var>n</var> to <var>coerced</var>.</li></ol></li><li>Let <var>highest</var> be <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</li><li>For each element <var>number</var> of <var>coerced</var>, do<ol><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>number</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <var>highest</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, set <var>highest</var> to <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>number</var> &gt; <var>highest</var>, set <var>highest</var> to <var>number</var>.</li></ol></li><li>Return <var>highest</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The comparison of values to determine the largest value is done using the <emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref> algorithm except that <emu-val>+0</emu-val><sub>&#120125;</sub> is considered to be larger than <emu-val>-0</emu-val><sub>&#120125;</sub>.</p>\n        </div></emu-note>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>max</code> method is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.includes": {"num": "23.1.3.13", "title": "#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</span> Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>includes</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, and if found at any position, returns <emu-val>true</emu-val>; otherwise, <emu-val>false</emu-val> is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to <emu-val>+0</emu-val><sub>&#120125;</sub> (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>false</emu-val> is returned, i.e. the array will not be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>includes</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>false</emu-val>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>false</emu-val>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> method intentionally differs from the similar <code>indexOf</code> method in two ways. First, it uses the <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref> algorithm, instead of <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>, allowing it to detect <emu-val>NaN</emu-val> array elements. Second, it does not skip missing array elements, instead treating them as <emu-val>undefined</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-samevalue": {"num": "7.2.10", "title": "#sec-samevalue SameValue ( x, y )", "html": "<emu-clause id=\"sec-samevalue\" aoid=\"SameValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevalue\">#sec-samevalue</span> SameValue ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValue takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::sameValue(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-strict-equality-comparison": {"num": "7.2.15", "title": "#sec-strict-equality-comparison StrictEqualityComparison ( x, y )", "html": "<emu-clause id=\"sec-strict-equality-comparison\" aoid=\"StrictEqualityComparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-equality-comparison\">#sec-strict-equality-comparison</span> StrictEqualityComparison ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation StrictEqualityComparison takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> === <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number or BigInt, then<ol><li>Return !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>)::equal(<var>x</var>, <var>y</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"SameValueNonNumeric\"><a href=\"#sec-samevaluenonnumeric\">SameValueNonNumeric</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This algorithm differs from the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-array.prototype.indexof": {"num": "23.1.3.14", "title": "#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</span> Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><code>indexOf</code> compares <var>searchElement</var> to the elements of the array, in ascending order, using the <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref> algorithm, and if found at one or more indices, returns the smallest such index; otherwise, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The optional second argument <var>fromIndex</var> defaults to <emu-val>+0</emu-val><sub>&#120125;</sub> (i.e. the whole array is searched). If it is greater than or equal to the length of the array, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned, i.e. the array will not be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, the whole array will be searched.</p>\n        </div></emu-note>\n        <p>When the <code>indexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array.prototype.lastindexof": {"num": "23.1.3.17", "title": "#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-array.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</span> Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>lastIndexOf</code> compares <var>searchElement</var> to the elements of the array in descending order using the <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref> algorithm, and if found at one or more indices, returns the largest such index; otherwise, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n          <p>The optional second argument <var>fromIndex</var> defaults to the array's length minus one (i.e. the whole array is searched). If it is greater than or equal to the length of the array, the whole array will be searched. If it is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, it is used as the offset from the end of the array to compute <var>fromIndex</var>. If the computed index is less than <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>-1</emu-val><sub>&#120125;</sub> is returned.</p>\n        </div></emu-note>\n        <p>When the <code>lastIndexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>fromIndex</var> is present, let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>); else let <var>n</var> be <var>len</var> - 1.</li><li>If <var>n</var> is -&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>n</var>, <var>len</var> - 1).</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li></ol></li><li>Repeat, while <var>k</var> &#8805; 0,<ol><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> - 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>lastIndexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot-aec": {"num": "B.3.7.2", "title": "#sec-IsHTMLDDA-internal-slot-aec Changes to AbstractEqualityComparison", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-aec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</span> Changes to AbstractEqualityComparison</h1>\n        <p>The following steps replace step <emu-xref href=\"#step-abstract-equality-comparison-web-compat-insertion-point\"><a href=\"#step-abstract-equality-comparison-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-abstract-equality-comparison-web-compat-insertion-point\">#step-abstract-equality-comparison-web-compat-insertion-point</a></emu-xref> of the <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref> algorithm:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <var>x</var> has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref> and <var>y</var> is either <emu-val>null</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is either <emu-val>null</emu-val> or <emu-val>undefined</emu-val> and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object and <var>y</var> has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-annex>\n\n      "}, "sec-equality-operators-runtime-semantics-evaluation": {"num": "13.11.1", "title": "#sec-equality-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-equality-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-runtime-semantics-evaluation\">#sec-equality-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dxo0lfgu\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>==</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cn2twrby\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>!=</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4hu79ipe\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>===</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"irptryux\">\n        <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>\n        <emu-t>!==</emu-t>\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>rval</var>, <var>lval</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a normal completion.</li><li>If <var>r</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Given the above definition of equality:</p>\n        <ul>\n          <li>\n            String comparison can be forced by: <code>`${a}` == `${b}`</code>.\n          </li>\n          <li>\n            Numeric comparison can be forced by: <code>+a == +b</code>.\n          </li>\n          <li>\n            Boolean comparison can be forced by: <code>!a == !b</code>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The equality operators maintain the following invariants:</p>\n        <ul>\n          <li>\n            <code>A != B</code> is equivalent to <code>!(A == B)</code>.\n          </li>\n          <li>\n            <code>A == B</code> is equivalent to <code>B == A</code>, except in the order of evaluation of <code>A</code> and <code>B</code>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The equality operator is not always transitive. For example, there might be two distinct String objects, each representing the same String value; each String object would be considered equal to the String value by the <code>==</code> operator, but the two String objects would not be equal to each other. For example:</p>\n        <ul>\n          <li>\n            <code>new String(\"a\") == \"a\"</code> and <code>\"a\" == new String(\"a\")</code> are both <emu-val>true</emu-val>.\n          </li>\n          <li>\n            <code>new String(\"a\") == new String(\"a\")</code> is <emu-val>false</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-%typedarray%.prototype.indexof": {"num": "23.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> are the same as for <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref>.</p>\n        <p>When the <code>indexOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>len</var> is 0, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fromIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fromIndex</var> is <emu-val>undefined</emu-val>, then <var>n</var> is 0.</li><li>If <var>n</var> is +&#8734;, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Else if <var>n</var> is -&#8734;, set <var>n</var> to 0.</li><li>If <var>n</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>n</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>n</var>.</li><li>If <var>k</var> &lt; 0, set <var>k</var> to 0.</li></ol></li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>kPresent</var> be !&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>elementK</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li><li>Let <var>same</var> be <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>searchElement</var>, <var>elementK</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>).</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-abstract-equality-comparison": {"num": "7.2.14", "title": "#sec-abstract-equality-comparison AbstractEqualityComparison ( x, y )", "html": "<emu-clause id=\"sec-abstract-equality-comparison\" aoid=\"AbstractEqualityComparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-equality-comparison\">#sec-abstract-equality-comparison</span> AbstractEqualityComparison ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation AbstractEqualityComparison takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> == <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return <emu-xref aoid=\"StrictEqualityComparison\"><a href=\"#sec-strict-equality-comparison\">StrictEqualityComparison</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li id=\"step-abstract-equality-comparison-web-compat-insertion-point\">NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"><a href=\"#sec-IsHTMLDDA-internal-slot-aec\" class=\"excluded-xref\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>x</var>, <var>n</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>y</var>, <var>x</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(<var>x</var>, ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return <emu-xref aoid=\"AbstractEqualityComparison\"><a href=\"#sec-abstract-equality-comparison\">AbstractEqualityComparison</a></emu-xref>(? <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isintegralnumber\"><h1><span class=\"secnum\">7.2.6</span>#sec-isintegralnumber IsIntegralNumber ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.7</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.8</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-isstringprefix\"><h1><span class=\"secnum\">7.2.9</span>#sec-isstringprefix IsStringPrefix ( p, q )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.10</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-abstract-relational-comparison\"><h1><span class=\"secnum\">7.2.13</span>#sec-abstract-relational-comparison AbstractRelationalComparison ( x, y [ , LeftFirst ] )</h1>...</div><div id=\"excluded-sec-abstract-equality-comparison\"><h1><span class=\"secnum\">7.2.14</span>#sec-abstract-equality-comparison AbstractEqualityComparison ( x, y )</h1>...</div><div id=\"excluded-sec-strict-equality-comparison\"><h1><span class=\"secnum\">7.2.15</span>#sec-strict-equality-comparison StrictEqualityComparison ( x, y )</h1>...</div></emu-clause>\n\n  "}, "sec-sortcompare": {"num": "23.1.3.27.1", "title": "#sec-sortcompare SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation SortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li id=\"step-sortcompare-tostring-x\">Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li id=\"step-sortcompare-tostring-y\">Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be <emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>xString</var>, <var>yString</var>).</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>ySmaller</var> be <emu-xref aoid=\"AbstractRelationalComparison\"><a href=\"#sec-abstract-relational-comparison\">AbstractRelationalComparison</a></emu-xref>(<var>yString</var>, <var>xString</var>).</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps <emu-xref href=\"#step-sortcompare-tostring-x\"><a href=\"#step-sortcompare-tostring-x\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-x\">#step-sortcompare-tostring-x</a></emu-xref> and <emu-xref href=\"#step-sortcompare-tostring-y\"><a href=\"#step-sortcompare-tostring-y\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-y\">#step-sortcompare-tostring-y</a></emu-xref> have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}}, "figData": {"table-numeric-type-ops": "Table 2"}}}