{"from": {"secList": ["sec-destructuring-assignment", "sec-assignment-operators", "sec-left-shift-operator-runtime-semantics-evaluation", "sec-assignment-operators-runtime-semantics-evaluation", "sec-subtraction-operator-minus-runtime-semantics-evaluation", "sec-binary-bitwise-operators-runtime-semantics-evaluation", "sec-exp-operator-runtime-semantics-evaluation", "sec-signed-right-shift-operator-runtime-semantics-evaluation", "sec-addition-operator-plus-runtime-semantics-evaluation", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "sec-abstract-relational-comparison"], "secData": {"sec-destructuring-assignment": {"num": "12.15.5", "title": "#sec-destructuring-assignment Destructuring Assignment", "html": "<emu-clause id=\"sec-destructuring-assignment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-assignment\">#sec-destructuring-assignment</span> Destructuring Assignment</h1>\n      <h2>Supplemental Syntax</h2>\n      <p>In certain circumstances when processing an instance of the production  <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"AssignmentPattern\" params=\"Yield, Await\" id=\"prod-AssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ed6d3857\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4b6571dd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectAssignmentPattern\" params=\"Yield, Await\" id=\"prod-ObjectAssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"6cdfdd77\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"a1f0237d\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"740e1b2f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrayAssignmentPattern\" params=\"Yield, Await\" id=\"prod-ArrayAssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4b8cdf0a\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"9852bd8c\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"01eac6e6\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentRestProperty\" params=\"Yield, Await\" id=\"prod-AssignmentRestProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentPropertyList\" params=\"Yield, Await\" id=\"prod-AssignmentPropertyList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0fb6d7ae\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37340e0a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElementList\" params=\"Yield, Await\" id=\"prod-AssignmentElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e75e8ef0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6d59619d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElisionElement\" params=\"Yield, Await\" id=\"prod-AssignmentElisionElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"72fd00bc\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentProperty\" params=\"Yield, Await\" id=\"prod-AssignmentProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c02b6a90\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37ae7a6f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElement\" params=\"Yield, Await\" id=\"prod-AssignmentElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8c5631c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentRestElement\" params=\"Yield, Await\" id=\"prod-AssignmentRestElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DestructuringAssignmentTarget\" params=\"Yield, Await\" id=\"prod-DestructuringAssignmentTarget\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-destructuring-assignment-static-semantics-early-errors\"><h1><span class=\"secnum\">12.15.5.1</span>#sec-destructuring-assignment-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-destructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.5.2</span>#sec-runtime-semantics-destructuringassignmentevaluation Runtime Semantics: DestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-propertydestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.5.3</span>#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-restdestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.5.4</span>#sec-runtime-semantics-restdestructuringassignmentevaluation Runtime Semantics: RestDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-iteratordestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.5.5</span>#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-keyeddestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.5.6</span>#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>...</div></emu-clause>\n  "}, "sec-assignment-operators": {"num": "12.15", "title": "#sec-assignment-operators Assignment Operators", "html": "<emu-clause id=\"sec-assignment-operators\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</span> Assignment Operators</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\" id=\"prod-AssignmentExpression\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82aa12dc\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5d4d9305\" constraints=\"+Yield\"><emu-constraints>[+Yield]</emu-constraints><emu-nt params=\"?In, ?Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[?In, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"336dea1a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"de1f51e8\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dc2bc97e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentOperator\" oneof=\"\" id=\"prod-AssignmentOperator\">\n    <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*=</emu-t><emu-t>/=</emu-t><emu-t>%=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>^=</emu-t><emu-t>|=</emu-t><emu-t>**=</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-assignment-operators-static-semantics-early-errors\"><h1><span class=\"secnum\">12.15.1</span>#sec-assignment-operators-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-assignment-operators-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">12.15.2</span>#sec-assignment-operators-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-assignment-operators-static-semantics-assignmenttargettype\"><h1><span class=\"secnum\">12.15.3</span>#sec-assignment-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType</h1>...</div><div id=\"excluded-sec-assignment-operators-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.15.4</span>#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-destructuring-assignment\"><h1><span class=\"secnum\">12.15.5</span>#sec-destructuring-assignment Destructuring Assignment</h1>...</div></emu-clause>\n\n  "}, "sec-left-shift-operator-runtime-semantics-evaluation": {"num": "12.9.3.1", "title": "#sec-left-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-left-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-shift-operator-runtime-semantics-evaluation\">#sec-left-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Return <var>T</var>::leftShift(<var>lnum</var>, <var>rnum</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>op</var> be the <code>@</code> where <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt> is <code>@=</code>.</li><li>Let <var>r</var> be the result of applying <var>op</var> to <var>lval</var> and <var>rval</var> as if evaluating the expression <var>lval</var> <var>op</var> <var>rval</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When an assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step 1.e of the first algorithm or step 7 of the second algorithm is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-subtraction-operator-minus-runtime-semantics-evaluation": {"num": "12.8.4.1", "title": "#sec-subtraction-operator-minus-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-subtraction-operator-minus-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-subtraction-operator-minus-runtime-semantics-evaluation\">#sec-subtraction-operator-minus-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"AdditiveExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Return <var>T</var>::subtract(<var>lnum</var>, <var>rnum</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <p>The production  <emu-grammar><emu-production name=\"A\" collapsed=\"\" id=\"prod-A\" class=\" inline\">\n    <emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"262863af\"><emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-t placeholder=\"\">@</emu-t><emu-nt>B</emu-nt></emu-rhs>\n</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If @ is <code>&amp;</code>, return <var>T</var>::bitwiseAND(<var>lnum</var>, <var>rnum</var>).</li><li>If @ is <code>|</code>, return <var>T</var>::bitwiseOR(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: @ is <code>^</code>.</li><li>Return <var>T</var>::bitwiseXOR(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-exp-operator-runtime-semantics-evaluation": {"num": "12.6.3", "title": "#sec-exp-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exp-operator-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exp-operator-runtime-semantics-evaluation\">#sec-exp-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ExponentiationExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li><li>Let <var>leftValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>.</li><li>Let <var>rightValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>base</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>exponent</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rightValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>base</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>exponent</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>base</var>)::exponentiate(<var>base</var>, <var>exponent</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-signed-right-shift-operator-runtime-semantics-evaluation": {"num": "12.9.4.1", "title": "#sec-signed-right-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-signed-right-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-signed-right-shift-operator-runtime-semantics-evaluation\">#sec-signed-right-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Return <var>T</var>::signedRightShift(<var>lnum</var>, <var>rnum</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-addition-operator-plus-runtime-semantics-evaluation": {"num": "12.8.3.1", "title": "#sec-addition-operator-plus-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-addition-operator-plus-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-addition-operator-plus-runtime-semantics-evaluation\">#sec-addition-operator-plus-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"AdditiveExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rprim</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Return <var>T</var>::add(<var>lnum</var>, <var>rnum</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps 5 and 6. All standard objects except Date objects handle the absence of a hint as if the hint Number were given; Date objects handle the absence of a hint as if the hint String were given. Exotic objects may handle the absence of a hint in some other manner.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Step 7 differs from step 3 of the <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>leftValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>.</li><li>Let <var>rightValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rightValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>*</code>, return <var>T</var>::multiply(<var>lnum</var>, <var>rnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>/</code>, return <var>T</var>::divide(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>%</code>.</li><li>Return <var>T</var>::remainder(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-unsigned-right-shift-operator-runtime-semantics-evaluation": {"num": "12.9.5.1", "title": "#sec-unsigned-right-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-unsigned-right-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unsigned-right-shift-operator-runtime-semantics-evaluation\">#sec-unsigned-right-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>Return <var>T</var>::unsignedRightShift(<var>lnum</var>, <var>rnum</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.14", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.\n      </li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step 3 differs from step 7 in the algorithm for the addition operator <code>+</code> (<emu-xref href=\"#sec-addition-operator-plus\"><a href=\"#sec-addition-operator-plus\" class=\"excluded-xref\" excluded-id=\"sec-addition-operator-plus\">#sec-addition-operator-plus</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-destructuring-assignment", "sec-assignment-operators", "sec-left-shift-operator-runtime-semantics-evaluation", "sec-assignment-operators-runtime-semantics-evaluation", "sec-subtraction-operator-minus-runtime-semantics-evaluation", "sec-binary-bitwise-operators-runtime-semantics-evaluation", "sec-exp-operator-runtime-semantics-evaluation", "sec-signed-right-shift-operator-runtime-semantics-evaluation", "sec-addition-operator-plus-runtime-semantics-evaluation", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-unsigned-right-shift-operator-runtime-semantics-evaluation", "sec-abstract-relational-comparison"], "secData": {"sec-destructuring-assignment": {"num": "12.15.7", "title": "#sec-destructuring-assignment Destructuring Assignment", "html": "<emu-clause id=\"sec-destructuring-assignment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-destructuring-assignment\">#sec-destructuring-assignment</span> Destructuring Assignment</h1>\n      <h2>Supplemental Syntax</h2>\n      <p>In certain circumstances when processing an instance of the production  <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"AssignmentPattern\" params=\"Yield, Await\" id=\"prod-AssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ed6d3857\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4b6571dd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectAssignmentPattern\" params=\"Yield, Await\" id=\"prod-ObjectAssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"6cdfdd77\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"a1f0237d\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"740e1b2f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrayAssignmentPattern\" params=\"Yield, Await\" id=\"prod-ArrayAssignmentPattern\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4b8cdf0a\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"9852bd8c\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"01eac6e6\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentRestProperty\" params=\"Yield, Await\" id=\"prod-AssignmentRestProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentPropertyList\" params=\"Yield, Await\" id=\"prod-AssignmentPropertyList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0fb6d7ae\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37340e0a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElementList\" params=\"Yield, Await\" id=\"prod-AssignmentElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e75e8ef0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6d59619d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElisionElement\" params=\"Yield, Await\" id=\"prod-AssignmentElisionElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"72fd00bc\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentProperty\" params=\"Yield, Await\" id=\"prod-AssignmentProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c02b6a90\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37ae7a6f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentElement\" params=\"Yield, Await\" id=\"prod-AssignmentElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8c5631c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentRestElement\" params=\"Yield, Await\" id=\"prod-AssignmentRestElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"DestructuringAssignmentTarget\" params=\"Yield, Await\" id=\"prod-DestructuringAssignmentTarget\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-destructuring-assignment-static-semantics-early-errors\"><h1><span class=\"secnum\">12.15.7.1</span>#sec-destructuring-assignment-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-destructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.7.2</span>#sec-runtime-semantics-destructuringassignmentevaluation Runtime Semantics: DestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-propertydestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.7.3</span>#sec-runtime-semantics-propertydestructuringassignmentevaluation Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-restdestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.7.4</span>#sec-runtime-semantics-restdestructuringassignmentevaluation Runtime Semantics: RestDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-iteratordestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.7.5</span>#sec-runtime-semantics-iteratordestructuringassignmentevaluation Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-keyeddestructuringassignmentevaluation\"><h1><span class=\"secnum\">12.15.7.6</span>#sec-runtime-semantics-keyeddestructuringassignmentevaluation Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>...</div></emu-clause>\n  "}, "sec-assignment-operators": {"num": "12.15", "title": "#sec-assignment-operators Assignment Operators", "html": "<emu-clause id=\"sec-assignment-operators\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</span> Assignment Operators</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\" id=\"prod-AssignmentExpression\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82aa12dc\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5d4d9305\" constraints=\"+Yield\"><emu-constraints>[+Yield]</emu-constraints><emu-nt params=\"?In, ?Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[?In, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"336dea1a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"de1f51e8\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dc2bc97e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AssignmentOperator\" oneof=\"\" id=\"prod-AssignmentOperator\">\n    <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*=</emu-t><emu-t>/=</emu-t><emu-t>%=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>^=</emu-t><emu-t>|=</emu-t><emu-t>**=</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-assignment-operators-static-semantics-early-errors\"><h1><span class=\"secnum\">12.15.1</span>#sec-assignment-operators-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-assignment-operators-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">12.15.2</span>#sec-assignment-operators-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-assignment-operators-static-semantics-assignmenttargettype\"><h1><span class=\"secnum\">12.15.3</span>#sec-assignment-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType</h1>...</div><div id=\"excluded-sec-assignment-operators-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.15.4</span>#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-applynumericbinaryoperator\"><h1><span class=\"secnum\">12.15.5</span>#sec-applynumericbinaryoperator Runtime Semantics: ApplyNumericBinaryOperator ( lval, opText, rval )</h1>...</div><div id=\"excluded-sec-evaluatenumericbinaryexpression\"><h1><span class=\"secnum\">12.15.6</span>#sec-evaluatenumericbinaryexpression Runtime Semantics: EvaluateNumericBinaryExpression ( leftOperand, opText, rightOperand )</h1>...</div><div id=\"excluded-sec-destructuring-assignment\"><h1><span class=\"secnum\">12.15.7</span>#sec-destructuring-assignment Destructuring Assignment</h1>...</div></emu-clause>\n\n  "}, "sec-left-shift-operator-runtime-semantics-evaluation": {"num": "12.9.3.1", "title": "#sec-left-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-left-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-shift-operator-runtime-semantics-evaluation\">#sec-left-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>, <code>&lt;&lt;</code>, <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points corresponding to <var>assignmentOpText</var> according to the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr>\n                  <th>\n                    <var>assignmentOpText</var>\n                  </th>\n                  <th>\n                    <var>opText</var>\n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>**=</code>\n                  </td>\n                  <td>\n                    <code>**</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>*=</code>\n                  </td>\n                  <td>\n                    <code>*</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>/=</code>\n                  </td>\n                  <td>\n                    <code>/</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>%=</code>\n                  </td>\n                  <td>\n                    <code>%</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>+=</code>\n                  </td>\n                  <td>\n                    <code>+</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>-=</code>\n                  </td>\n                  <td>\n                    <code>-</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>&lt;&lt;=</code>\n                  </td>\n                  <td>\n                    <code>&lt;&lt;</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>&gt;&gt;=</code>\n                  </td>\n                  <td>\n                    <code>&gt;&gt;</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>&gt;&gt;&gt;=</code>\n                  </td>\n                  <td>\n                    <code>&gt;&gt;&gt;</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>&amp;=</code>\n                  </td>\n                  <td>\n                    <code>&amp;</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>^=</code>\n                  </td>\n                  <td>\n                    <code>^</code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>|=</code>\n                  </td>\n                  <td>\n                    <code>|</code>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyNumericBinaryOperator\"><a href=\"#sec-applynumericbinaryoperator\">ApplyNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When an assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step 1.e of the first algorithm or step 8 of the second algorithm is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-subtraction-operator-minus-runtime-semantics-evaluation": {"num": "12.8.4.1", "title": "#sec-subtraction-operator-minus-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-subtraction-operator-minus-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-subtraction-operator-minus-runtime-semantics-evaluation\">#sec-subtraction-operator-minus-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"AdditiveExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>, <code>-</code>, <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"BitwiseANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a90dedc2\"><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt>, <code>&amp;</code>, <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BitwiseXORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b463172c\"><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt>, <code>^</code>, <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BitwiseORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"016dfa90\"><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt>, <code>|</code>, <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-exp-operator-runtime-semantics-evaluation": {"num": "12.6.3", "title": "#sec-exp-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exp-operator-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exp-operator-runtime-semantics-evaluation\">#sec-exp-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ExponentiationExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>, <code>**</code>, <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-signed-right-shift-operator-runtime-semantics-evaluation": {"num": "12.9.4.1", "title": "#sec-signed-right-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-signed-right-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-signed-right-shift-operator-runtime-semantics-evaluation\">#sec-signed-right-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>, <code>&gt;&gt;</code>, <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-addition-operator-plus-runtime-semantics-evaluation": {"num": "12.8.3.1", "title": "#sec-addition-operator-plus-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-addition-operator-plus-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-addition-operator-plus-runtime-semantics-evaluation\">#sec-addition-operator-plus-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"AdditiveExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>, <code>+</code>, <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>opText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>, <var>opText</var>, <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-unsigned-right-shift-operator-runtime-semantics-evaluation": {"num": "12.9.5.1", "title": "#sec-unsigned-right-shift-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-unsigned-right-shift-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unsigned-right-shift-operator-runtime-semantics-evaluation\">#sec-unsigned-right-shift-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ShiftExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"EvaluateNumericBinaryExpression\"><a href=\"#sec-evaluatenumericbinaryexpression\">EvaluateNumericBinaryExpression</a></emu-xref>(<emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>, <code>&gt;&gt;&gt;</code>, <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.14", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.\n      </li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step 3 differs from step 1.c in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applynumericbinaryoperator\"><a href=\"#sec-applynumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applynumericbinaryoperator\">#sec-applynumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}}