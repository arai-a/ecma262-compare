{"from": {"secList": ["sec-moduleevaluation", "sec-ecmascript-language-types-null-type", "sec-primitive-value", "sec-typeof-operator-runtime-semantics-evaluation", "sec-typeof-operator"], "secData": {"sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-ecmascript-language-types-null-type": {"num": "6.1.2", "title": "#sec-ecmascript-language-types-null-type The Null Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-null-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-null-type\">#sec-ecmascript-language-types-null-type</span> The Null Type</h1>\n      <p>The Null type has exactly one value, called <emu-val>null</emu-val>.</p>\n    </emu-clause>\n\n    "}, "sec-primitive-value": {"num": "4.3.2", "title": "#sec-primitive-value primitive value", "html": "<emu-clause id=\"sec-primitive-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primitive-value\">#sec-primitive-value</span> primitive value</h1>\n      <p>member of one of the types Undefined, Null, Boolean, Number, BigInt, Symbol, or String as defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref></p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-typeof-operator-runtime-semantics-evaluation": {"num": "12.5.5.1", "title": "#sec-typeof-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-typeof-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typeof-operator-runtime-semantics-evaluation\">#sec-typeof-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>val</var>) is <emu-val>true</emu-val>, return <emu-val>\"undefined\"</emu-val>.</li></ol></li><li>Set <var>val</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>).</li><li>Return a String according to <emu-xref href=\"#table-35\"><a href=\"#table-35\" class=\"excluded-xref\" excluded-id=\"table-35\">#table-35</a></emu-xref>.\n        </li></ol></emu-alg>\n        <emu-table id=\"table-35\" caption=\"typeof Operator Results\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-35\">#table-35</span>: typeof Operator Results</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Type of <var>val</var>\n              \n              </th>\n              <th>\n                Result\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              \n              </td>\n              <td>\n                <emu-val>\"undefined\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              \n              </td>\n              <td>\n                <emu-val>\"object\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              \n              </td>\n              <td>\n                <emu-val>\"boolean\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              \n              </td>\n              <td>\n                <emu-val>\"number\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              \n              </td>\n              <td>\n                <emu-val>\"string\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              \n              </td>\n              <td>\n                <emu-val>\"symbol\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              \n              </td>\n              <td>\n                <emu-val>\"bigint\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Object (does not implement [[Call]])\n              \n              </td>\n              <td>\n                <emu-val>\"object\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Object (implements [[Call]])\n              \n              </td>\n              <td>\n                <emu-val>\"function\"</emu-val>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-typeof-operator": {"num": "12.5.5", "title": "#sec-typeof-operator The typeof Operator", "html": "<emu-clause id=\"sec-typeof-operator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typeof-operator\">#sec-typeof-operator</span> The <code>typeof</code> Operator</h1>\n\n      <div id=\"excluded-sec-typeof-operator-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.5.5.1</span>#sec-typeof-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n\n    "}}, "figData": {"table-3": "Table 4", "table-35": "Table 35"}}, "to": {"secList": ["sec-moduleevaluation", "sec-ecmascript-language-types-null-type", "sec-primitive-value", "sec-typeof-operator-runtime-semantics-evaluation", "sec-typeof-operator"], "secData": {"sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-ecmascript-language-types-null-type": {"num": "6.1.2", "title": "#sec-ecmascript-language-types-null-type The Null Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-null-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-null-type\">#sec-ecmascript-language-types-null-type</span> The Null Type</h1>\n      <p>The Null type has exactly one value, called <emu-val>null</emu-val>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Among being one of primitive types Null type has special usage for it's value <emu-val>null</emu-val>, which used as a root of prototype chain for objects which are not inherited from anything else. Keep in mind that <emu-val>typeof</emu-val> operator also returns \"object\" for <emu-val>null</emu-val> value, and there was no other reason but sequence of random historical events:  <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\" class=\"excluded-xref\" excluded-id=\"sec-typeof-operator\">#sec-typeof-operator</a></emu-xref></p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-primitive-value": {"num": "4.3.2", "title": "#sec-primitive-value primitive value", "html": "<emu-clause id=\"sec-primitive-value\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primitive-value\">#sec-primitive-value</span> primitive value</h1>\n      <p>member of one of the types Undefined, Null, Boolean, Number, BigInt, Symbol, or String as defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref></p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The value of Null type has additional usage besides being one of primitive values:  <emu-xref href=\"#sec-ecmascript-language-types-null-type\"><a href=\"#sec-ecmascript-language-types-null-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-null-type\">#sec-ecmascript-language-types-null-type</a></emu-xref></p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-typeof-operator-runtime-semantics-evaluation": {"num": "12.5.5.1", "title": "#sec-typeof-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-typeof-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typeof-operator-runtime-semantics-evaluation\">#sec-typeof-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>val</var>) is <emu-val>true</emu-val>, return <emu-val>\"undefined\"</emu-val>.</li></ol></li><li>Set <var>val</var> to ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>).</li><li>Return a String according to <emu-xref href=\"#table-35\"><a href=\"#table-35\" class=\"excluded-xref\" excluded-id=\"table-35\">#table-35</a></emu-xref>.\n        </li></ol></emu-alg>\n        <emu-table id=\"table-35\" caption=\"typeof Operator Results\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-35\">#table-35</span>: typeof Operator Results</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Type of <var>val</var>\n              \n              </th>\n              <th>\n                Result\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              \n              </td>\n              <td>\n                <emu-val>\"undefined\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              \n              </td>\n              <td>\n                <emu-val>\"object\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              \n              </td>\n              <td>\n                <emu-val>\"boolean\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              \n              </td>\n              <td>\n                <emu-val>\"number\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              \n              </td>\n              <td>\n                <emu-val>\"string\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              \n              </td>\n              <td>\n                <emu-val>\"symbol\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              \n              </td>\n              <td>\n                <emu-val>\"bigint\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Object (does not implement [[Call]])\n              \n              </td>\n              <td>\n                <emu-val>\"object\"</emu-val>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Object (implements [[Call]])\n              \n              </td>\n              <td>\n                <emu-val>\"function\"</emu-val>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-typeof-operator": {"num": "12.5.5", "title": "#sec-typeof-operator The typeof Operator", "html": "<emu-clause id=\"sec-typeof-operator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typeof-operator\">#sec-typeof-operator</span> The <code>typeof</code> Operator</h1>\n\n      <div id=\"excluded-sec-typeof-operator-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.5.5.1</span>#sec-typeof-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Backing to the history the result of typeof <emu-val>null</emu-val> is \"object\" was mostly used for backward compatibility requirements. Meanwhile there was a sequence of related events allowed us to express some parts of inheritance model throgh the value <emu-val>null</emu-val>, which is now used as a root of prototype chain for objects being not inherited from anything else. And since we must maintain this connection between <emu-val>null</emu-val> and <emu-val>object</emu-val>, we caution you against looking for some deep meaning in this behavior, although it may in fact satisfy the reasons you need.</p>\n      </div></emu-note>\n\n    </emu-clause>\n\n\n    "}}, "figData": {"table-3": "Table 4", "table-35": "Table 35"}}}