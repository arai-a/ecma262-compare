{"from": {"secList": ["sec-bytelistbitwiseop", "sec-numberbitwiseop"], "secData": {"sec-bytelistbitwiseop": {"num": "24.4.1.13", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp ( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp ( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>Let <var>resultByte</var> be the result of applying the bitwise operator <var>op</var> to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Return the result of applying the bitwise operator <var>op</var> to <var>lnum</var> and <var>rnum</var>. The result is a signed 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-bytelistbitwiseop", "sec-numberbitwiseop"], "secData": {"sec-bytelistbitwiseop": {"num": "24.4.1.13", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp ( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp ( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>If <var>op</var> is <code>&amp;</code>, let <var>resultByte</var> be the result of applying the bitwise AND operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>resultByte</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>resultByte</var> be the result of applying the bitwise inclusive OR operation to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Let <var>lbits</var> be the 32-bit two's complement bit string representing the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>lnum</var>.</li><li>Let <var>rbits</var> be the 32-bit two's complement bit string representing the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>rnum</var>.</li><li>If <var>op</var> is <code>&amp;</code>, let <var>result</var> be the result of applying the bitwise AND operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>result</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>result</var> be the result of applying the bitwise inclusive OR operation to <var>lbits</var> and <var>rbits</var>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the 32-bit two's complement bit string <var>result</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}