{"from": {"secList": ["sec-number.prototype.toprecision"], "secData": {"sec-number.prototype.toprecision": {"num": "21.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> and <var>n</var> be integers such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &lt; 10<sup><var>p</var></sup> and for which <var>n</var> &#215; 10<sup><var>e</var> - <var>p</var> + 1</sup> - <var>x</var> is as close to zero as possible. If there are two such sets of <var>e</var> and <var>n</var>, pick the <var>e</var> and <var>n</var> for which <var>n</var> &#215; 10<sup><var>e</var> - <var>p</var> + 1</sup> is larger.</li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the first code unit of <var>m</var>.</li><li>Let <var>b</var> be the other <var>p</var> - 1 code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the first <var>e</var> + 1 code units of <var>m</var>, the code unit 0x002E (FULL STOP), and the remaining <var>p</var> - (<var>e</var> + 1) code units of <var>m</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-number.prototype.toprecision"], "secData": {"sec-number.prototype.toprecision": {"num": "21.1.3.5", "title": "#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )", "html": "<emu-clause id=\"sec-number.prototype.toprecision\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.toprecision\">#sec-number.prototype.toprecision</span> Number.prototype.toPrecision ( <var>precision</var> )</h1>\n        <p>Return a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented either in decimal exponential notation with one digit before the significand's decimal point and <emu-eqn class=\"inline\"><var>precision</var> - 1</emu-eqn> digits after the significand's decimal point or in decimal fixed notation with <var>precision</var> significant digits. If <var>precision</var> is <emu-val>undefined</emu-val>, call <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> instead. Specifically, perform the following steps:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>precision</var> is <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>p</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>precision</var>).</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>If <var>p</var> &lt; 1 or <var>p</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> = 0, then<ol><li>Let <var>m</var> be the String value consisting of <var>p</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Let <var>e</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>e</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(the base 10 logarithm of <var>x</var>).</li><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 10<sup><var>p</var> - 1</sup> &#8804; <var>n</var> &#8804; 10<sup><var>p</var></sup> and for which (<var>n</var> / 10<sup><var>p</var> - 1</sup>) &#215; 10<sup>e</sup> - <var>x</var> is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>. Note that 1 &#8804; (<var>n</var> / 10<sup><var>p</var> - 1</sup>) &#8804; 10.</li><li>If <var>n</var> = 10<sup><var>p</var></sup>, then<ol><li>Set <var>e</var> to <var>e</var> + 1.</li><li>Set <var>n</var> to 10<sup><var>p</var> - 1</sup>.</li></ol></li><li>Let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The length of <var>m</var> is <var>p</var>.</li><li>If <var>e</var> &lt; -6 or <var>e</var> &#8805; <var>p</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &#8800; 0.</li><li>If <var>p</var> &#8800; 1, then<ol><li>Let <var>a</var> be the code unit at index 0 within <var>m</var>.</li><li>Let <var>b</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>m</var> from 1.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>If <var>e</var> &gt; 0, then<ol><li>Let <var>c</var> be the code unit 0x002B (PLUS SIGN).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> &lt; 0.</li><li>Let <var>c</var> be the code unit 0x002D (HYPHEN-MINUS).</li><li>Set <var>e</var> to -<var>e</var>.</li></ol></li><li>Let <var>d</var> be the String value consisting of the digits of the decimal representation of <var>e</var> (in order, with no leading zeroes).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var>, <var>m</var>, the code unit 0x0065 (LATIN SMALL LETTER E), <var>c</var>, and <var>d</var>.</li></ol></li></ol></li><li>If <var>e</var> = <var>p</var> - 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li><li>If <var>e</var> &#8805; 0, then<ol><li>Let <var>a</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>m</var> from 0 to <var>e</var> + 1.</li><li>Let <var>b</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>m</var> from <var>e</var> + 1.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li><li>Else,<ol><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(<var>e</var> + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String <var>m</var>.</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}