{"from": {"secList": ["sec-static-semantics-toplevellexicallydeclarednames", "sec-static-semantics-lexicallydeclarednames", "sec-static-semantics-toplevelvarscopeddeclarations", "sec-static-semantics-mv", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-toplevelvardeclarednames", "sec-static-semantics-toplevellexicallyscopeddeclarations", "sec-static-semantics-vardeclarednames", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-static-semantics-varscopeddeclarations", "sec-initializers-in-forin-statement-heads"], "secData": {"sec-static-semantics-toplevellexicallydeclarednames": {"num": "8.1.8", "title": "#sec-static-semantics-toplevellexicallydeclarednames Static Semantics: TopLevelLexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" oldids=\"sec-block-static-semantics-toplevellexicallydeclarednames,sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" aoid=\"TopLevelLexicallyDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-toplevellexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallydeclarednames\">#sec-static-semantics-toplevellexicallydeclarednames</span> Static Semantics: TopLevelLexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-s6Vb3QUL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-DWksqgz-\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ReRATT6e\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function, or script, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-vPjzf01U\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names1</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevelvarscopeddeclarations": {"num": "8.1.11", "title": "#sec-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevelvarscopeddeclarations,sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelVarScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvarscopeddeclarations\">#sec-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ELUpDRIL\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-MxUpZ-t-\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-wmlLZdyg\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OvMm0IpZ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Let <var>declaration</var> be <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Return &#171; <var>declaration</var> &#187;.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-sPvwm3DB\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-h55yOiCC\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-aZ77pE36\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-mv": {"num": "12.8.3.2", "title": "#sec-static-semantics-mv Static Semantics: MV", "html": "<emu-clause id=\"sec-static-semantics-mv\" oldids=\"sec-additional-syntax-numeric-literals-status-semantics\"><span id=\"sec-additional-syntax-numeric-literals-status-semantics\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</span> Static Semantics: MV</h1>\n        <p>A numeric literal stands for a value of the Number type or the BigInt type.</p>\n        <ul>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NumericLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gma1bw5s\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"09cd3aiw\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gy9x7snd\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"hqxkzjla\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"vwco8x9w\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ivsyqs2o\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>), where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"lxttymd7\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7xfditit\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>)) &#215; 10<sup><var>e</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"wfmzcqw1\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dnxzw8a4\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup><var>e</var> - <var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>, and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"tas82k13\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"br-hwd5f\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 0.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1mot5ut_\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1lnbu1ra\">\n        <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"s4me4hlz\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nyugv7lw\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"oilcxnyi\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"ExponentPart\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"f4n1gm76\">\n        <emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt>\n        <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bxtox5eb\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"o9f-v3mh\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waadsnwo\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"LegacyOctalEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 0.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 1.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 2.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 3.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 4.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 5.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 6.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 7.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonOctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 8.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonOctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 9.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ph_p3jt-\"><emu-t>a</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nx0p29ri\"><emu-t>A</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 10.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ayxoiyyq\"><emu-t>b</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cibwka8w\"><emu-t>B</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 11.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1ztbra35\"><emu-t>c</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"x4fmw88j\"><emu-t>C</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 12.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8pmnkw2i\"><emu-t>d</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"kzsugx0d\"><emu-t>D</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 13.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dxyfuoqh\"><emu-t>e</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sv9nkvwp\"><emu-t>E</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 14.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qgjk5yjy\"><emu-t>f</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dvrpcls0\"><emu-t>F</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 15.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ya14f57w\">\n        <emu-t>0b</emu-t>\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fb8x2bgl\">\n        <emu-t>0B</emu-t>\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"5fhui2lc\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gqp0qw4u\">\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gtcavmjz\">\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qavsshas\">\n        <emu-t>0o</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ojzs-r9-\">\n        <emu-t>0O</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"mbwdu1ji\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"n6kv_lqw\">\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"twqvafmk\">\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rsu9eufh\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"tx3hz6c8\">\n        <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> times 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rmz1yyb9\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"yq78icb2\">\n        <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qxebmbch\">\n        <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalLikeDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rsu9eufh\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalLikeDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sk7h1nbk\">\n        <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"zxvbgn4l\">\n        <emu-t>0x</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nvdw81s7\">\n        <emu-t>0X</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"omskcs0d\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"yciymy2l\">\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gza2ktug\">\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations1</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevelvardeclarednames": {"num": "8.1.10", "title": "#sec-static-semantics-toplevelvardeclarednames Static Semantics: TopLevelVarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" oldids=\"sec-block-static-semantics-toplevelvardeclarednames,sec-labelled-statements-static-semantics-toplevelvardeclarednames\" type=\"sdo\" aoid=\"TopLevelVarDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevelvardeclarednames\"></span><span id=\"sec-block-static-semantics-toplevelvardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvardeclarednames\">#sec-static-semantics-toplevelvardeclarednames</span> Static Semantics: TopLevelVarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ie-RAx6L\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-_Kx3fMtB\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-l-2kGEcB\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-CxIyq9Kn\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-gviukyGv\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-jtk1iKc9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-5RFYGz0t\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevellexicallyscopeddeclarations": {"num": "8.1.9", "title": "#sec-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations,sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelLexicallyScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\">#sec-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-ZOlGIUjg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-fSl8sbck\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-68OgfJw9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod--BAI6AhR\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-VoYdAOt3\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names1</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>names3</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-YneO94W1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "15.8.5", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionexpression\">InstantiateAsyncFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7ylag141\">\n        <emu-t>await</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and &#171; <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations1</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>declarations3</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.5", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> production in <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ouav8kzt\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>declarations2</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"ForInOfLoopEvaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\">ForInOfLoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-forinofloopevaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-forinofloopevaluation\">#sec-runtime-semantics-forinofloopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-static-semantics-toplevellexicallydeclarednames", "sec-static-semantics-lexicallydeclarednames", "sec-static-semantics-toplevelvarscopeddeclarations", "sec-static-semantics-mv", "sec-static-semantics-lexicallyscopeddeclarations", "sec-static-semantics-toplevelvardeclarednames", "sec-static-semantics-toplevellexicallyscopeddeclarations", "sec-static-semantics-vardeclarednames", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-static-semantics-varscopeddeclarations", "sec-initializers-in-forin-statement-heads"], "secData": {"sec-static-semantics-toplevellexicallydeclarednames": {"num": "8.1.8", "title": "#sec-static-semantics-toplevellexicallydeclarednames Static Semantics: TopLevelLexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallydeclarednames\" oldids=\"sec-block-static-semantics-toplevellexicallydeclarednames,sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\" type=\"sdo\" aoid=\"TopLevelLexicallyDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-toplevellexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallydeclarednames\">#sec-static-semantics-toplevellexicallydeclarednames</span> Static Semantics: TopLevelLexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-s6Vb3QUL\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-DWksqgz-\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-ReRATT6e\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function, or script, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-lexicallydeclarednames": {"num": "8.1.4", "title": "#sec-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-lexicallydeclarednames\" oldids=\"sec-block-static-semantics-lexicallydeclarednames,sec-switch-statement-static-semantics-lexicallydeclarednames,sec-labelled-statements-static-semantics-lexicallydeclarednames,sec-function-definitions-static-semantics-lexicallydeclarednames,sec-arrow-function-definitions-static-semantics-lexicallydeclarednames,sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames,sec-scripts-static-semantics-lexicallydeclarednames,sec-module-semantics-static-semantics-lexicallydeclarednames\" type=\"sdo\" aoid=\"LexicallyDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-scripts-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-lexicallydeclarednames\"></span><span id=\"sec-block-static-semantics-lexicallydeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallydeclarednames\">#sec-static-semantics-lexicallydeclarednames</span> Static Semantics: LexicallyDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-mPEvRR9d\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ZFtxhsq0\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-Rrf-OST4\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-9AEMspNg\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--_BgAjEq\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-mSnfTK7z\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names1</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-7Gkp_Ikd\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-LyDmmUT5\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-JWPhP_ev\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-BptUBlCG\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-FwgSl19M\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-_jhHTL9Z\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-8YrmfaA1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-yRWpcHmG\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-2xZloP4O\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-tdMR5_9c\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-pGIh8pZc\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-m6bh3GpA\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyDeclaredNames\"><a href=\"#sec-static-semantics-toplevellexicallydeclarednames\">TopLevelLexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The LexicallyDeclaredNames of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> includes the names of all of its imported bindings.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-t-OtLQL7\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-vXiSx9wh\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-v-PqD2SJ\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"15hryu6r\" id=\"prod-XYalkd2A\"><emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>At the top level of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevelvarscopeddeclarations": {"num": "8.1.11", "title": "#sec-static-semantics-toplevelvarscopeddeclarations Static Semantics: TopLevelVarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevelvarscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevelvarscopeddeclarations,sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelVarScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvarscopeddeclarations\">#sec-static-semantics-toplevelvarscopeddeclarations</span> Static Semantics: TopLevelVarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-MxUpZ-t-\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-wmlLZdyg\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-OvMm0IpZ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Let <var>declaration</var> be <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li><li>Return &#171; <var>declaration</var> &#187;.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-sPvwm3DB\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-h55yOiCC\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-aZ77pE36\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-mv": {"num": "12.8.3.2", "title": "#sec-static-semantics-mv Static Semantics: MV", "html": "<emu-clause id=\"sec-static-semantics-mv\" oldids=\"sec-additional-syntax-numeric-literals-status-semantics\"><span id=\"sec-additional-syntax-numeric-literals-status-semantics\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</span> Static Semantics: MV</h1>\n        <p>A numeric literal stands for a value of the Number type or the BigInt type.</p>\n        <ul>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"09cd3aiw\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gy9x7snd\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"hqxkzjla\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"vwco8x9w\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ivsyqs2o\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>), where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"lxttymd7\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7xfditit\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>)) &#215; 10<sup><var>e</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"wfmzcqw1\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dnxzw8a4\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10<sup><var>e</var> - <var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>, and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"tas82k13\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"br-hwd5f\">\n        <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> &#215; 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 0.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1mot5ut_\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1lnbu1ra\">\n        <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> &#215; 10<sup><var>n</var></sup>) plus the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, where <var>n</var> is the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>, excluding all occurrences of <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"s4me4hlz\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nyugv7lw\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"oilcxnyi\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> &#215; 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"ExponentPart\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"f4n1gm76\">\n        <emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt>\n        <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bxtox5eb\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"o9f-v3mh\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"SignedInteger\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waadsnwo\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"LegacyOctalEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ulmkmvlx\"><emu-t>0</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 0.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"BinaryDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ksql3txo\"><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 1.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"xkcxbwmk\"><emu-t>2</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 2.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"7gu2shc1\"><emu-t>3</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 3.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"woxkczx2\"><emu-t>4</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 4.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"j83vdwqk\"><emu-t>5</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 5.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c2shfb68\"><emu-t>6</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 6.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"OctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6l4hpim_\"><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 7.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonOctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"elvyw2lo\"><emu-t>8</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 8.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonZeroDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"NonOctalDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fj9dcfsf\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 9.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ph_p3jt-\"><emu-t>a</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nx0p29ri\"><emu-t>A</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 10.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ayxoiyyq\"><emu-t>b</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cibwka8w\"><emu-t>B</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 11.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1ztbra35\"><emu-t>c</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"x4fmw88j\"><emu-t>C</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 12.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"8pmnkw2i\"><emu-t>d</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"kzsugx0d\"><emu-t>D</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 13.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dxyfuoqh\"><emu-t>e</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sv9nkvwp\"><emu-t>E</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 14.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qgjk5yjy\"><emu-t>f</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> or of <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dvrpcls0\"><emu-t>F</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> is 15.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ya14f57w\">\n        <emu-t>0b</emu-t>\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fb8x2bgl\">\n        <emu-t>0B</emu-t>\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"5fhui2lc\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gqp0qw4u\">\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"BinaryDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gtcavmjz\">\n        <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt> &#215; 2) plus the MV of <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qavsshas\">\n        <emu-t>0o</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ojzs-r9-\">\n        <emu-t>0O</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"mbwdu1ji\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"n6kv_lqw\">\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"OctalDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"twqvafmk\">\n        <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt> &#215; 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rsu9eufh\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"tx3hz6c8\">\n        <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt> times 8) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rmz1yyb9\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"yq78icb2\">\n        <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-NonOctalDigit\">NonOctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"NonOctalDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qxebmbch\">\n        <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalLikeDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rsu9eufh\">\n        <emu-t>0</emu-t>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"LegacyOctalLikeDecimalIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sk7h1nbk\">\n        <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-LegacyOctalLikeDecimalIntegerLiteral\">LegacyOctalLikeDecimalIntegerLiteral</a></emu-nt> times 10) plus the MV of <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"zxvbgn4l\">\n        <emu-t>0x</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexIntegerLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"nvdw81s7\">\n        <emu-t>0X</emu-t>\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"omskcs0d\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> is the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"yciymy2l\">\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n          <li>\n            The MV of <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gza2ktug\">\n        <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-NumericLiteralSeparator\">NumericLiteralSeparator</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> is (the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#215; 16) plus the MV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-static-semantics-lexicallyscopeddeclarations": {"num": "8.1.5", "title": "#sec-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-lexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-lexicallyscopeddeclarations,sec-switch-statement-static-semantics-lexicallyscopeddeclarations,sec-labelled-statements-static-semantics-lexicallyscopeddeclarations,sec-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations,sec-scripts-static-semantics-lexicallyscopeddeclarations,sec-module-semantics-static-semantics-lexicallyscopeddeclarations,sec-exports-static-semantics-lexicallyscopeddeclarations\" type=\"sdo\" aoid=\"LexicallyScopedDeclarations\"><span id=\"sec-exports-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-lexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-lexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-lexicallyscopeddeclarations\">#sec-static-semantics-lexicallyscopeddeclarations</span> Static Semantics: LexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-dqBS0eQw\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-MlufDCPG\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-IYBZJ2CF\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-bhogjJ1W\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-am_Z4H66\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations1</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-LxvbRJKF\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-tORmzQQv\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-84xBBiJA\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-V7zVpmtw\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-3Vc5meav\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-nL_6JlM9\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-gtaAB-x7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-aKFk9Ijn\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-4B0l6Nwq\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-0qrVz5hX\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-h6iH_dVj\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-1WkoNRM_\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-eWnfpwM7\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-rZF3AogZ\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-zqmuSkfM\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-IxEr0QE9\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod-DEMJzdJ7\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bg3oaw2m\" id=\"prod-cMreMYU5\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\" id=\"prod-xsgJyOoQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\" id=\"prod-cRTDqnfl\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-xref aoid=\"DeclarationPart\"><a href=\"#sec-static-semantics-declarationpart\">DeclarationPart</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\" id=\"prod-4yMGuqEs\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\" id=\"prod-XTfiw-G1\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is this <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevelvardeclarednames": {"num": "8.1.10", "title": "#sec-static-semantics-toplevelvardeclarednames Static Semantics: TopLevelVarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-toplevelvardeclarednames\" oldids=\"sec-block-static-semantics-toplevelvardeclarednames,sec-labelled-statements-static-semantics-toplevelvardeclarednames\" type=\"sdo\" aoid=\"TopLevelVarDeclaredNames\"><span id=\"sec-labelled-statements-static-semantics-toplevelvardeclarednames\"></span><span id=\"sec-block-static-semantics-toplevelvardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevelvardeclarednames\">#sec-static-semantics-toplevelvardeclarednames</span> Static Semantics: TopLevelVarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-_Kx3fMtB\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-l-2kGEcB\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-CxIyq9Kn\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-gviukyGv\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-jtk1iKc9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is <emu-grammar><emu-production name=\"Statement\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cij_anje\"><emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-5RFYGz0t\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-toplevellexicallyscopeddeclarations": {"num": "8.1.9", "title": "#sec-static-semantics-toplevellexicallyscopeddeclarations Static Semantics: TopLevelLexicallyScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\" oldids=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations,sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\" type=\"sdo\" aoid=\"TopLevelLexicallyScopedDeclarations\"><span id=\"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations\"></span><span id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-toplevellexicallyscopeddeclarations\">#sec-static-semantics-toplevellexicallyscopeddeclarations</span> Static Semantics: TopLevelLexicallyScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-fSl8sbck\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"TopLevelLexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-toplevellexicallyscopeddeclarations\">TopLevelLexicallyScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pyyivtxj\" id=\"prod-68OgfJw9\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod--BAI6AhR\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> is <emu-grammar><emu-production name=\"Declaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ykusttdk\"><emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> , then<ol><li>Return &#171; &#187;.</li></ol></li><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-vardeclarednames": {"num": "8.1.6", "title": "#sec-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames", "html": "<emu-clause id=\"sec-static-semantics-vardeclarednames\" oldids=\"sec-statement-semantics-static-semantics-vardeclarednames,sec-block-static-semantics-vardeclarednames,sec-variable-statement-static-semantics-vardeclarednames,sec-if-statement-static-semantics-vardeclarednames,sec-do-while-statement-static-semantics-vardeclarednames,sec-while-statement-static-semantics-vardeclarednames,sec-for-statement-static-semantics-vardeclarednames,sec-for-in-and-for-of-statements-static-semantics-vardeclarednames,sec-with-statement-static-semantics-vardeclarednames,sec-switch-statement-static-semantics-vardeclarednames,sec-labelled-statements-static-semantics-vardeclarednames,sec-try-statement-static-semantics-vardeclarednames,sec-function-definitions-static-semantics-vardeclarednames,sec-arrow-function-definitions-static-semantics-vardeclarednames,sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames,sec-scripts-static-semantics-vardeclarednames,sec-module-semantics-static-semantics-vardeclarednames\" type=\"sdo\" aoid=\"VarDeclaredNames\"><span id=\"sec-module-semantics-static-semantics-vardeclarednames\"></span><span id=\"sec-scripts-static-semantics-vardeclarednames\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"></span><span id=\"sec-arrow-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-function-definitions-static-semantics-vardeclarednames\"></span><span id=\"sec-try-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-labelled-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-switch-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-with-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"></span><span id=\"sec-for-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-do-while-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-if-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-variable-statement-static-semantics-vardeclarednames\"></span><span id=\"sec-block-static-semantics-vardeclarednames\"></span><span id=\"sec-statement-semantics-static-semantics-vardeclarednames\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</span> Static Semantics: VarDeclaredNames</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-TvRo0Jzz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-x3WiVh1X\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-cXTIOEn1\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-PhLm_cqX\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-bMjWoX52\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-OPyZZ0FU\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-6wmxzhRC\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-4f3fXSme\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-ikslLJyV\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-mb72lTih\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\" id=\"prod-_o07UyGN\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-5Ab4YMrd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-Jj9iNkQT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-MQNHAeo7\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-6MiGg7LY\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-22bMsY8a\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-iNfrCk_F\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-N2GkbzwH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-polenv5I\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-cQmWs6F4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-6rXrz7RR\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-LH0otfP0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-UE8msfiB\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-Xl42xW5D\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-eiN5tOgj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-dkeW5WMH\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-dXd3oD1j\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-kf6BzwpI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-lB_U5kUv\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-DTgBd2wQ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-e2BPI-N_\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names1</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>names3</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-_zisH9m7\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-Gdv5Uzyo\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ocDhl-eB\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-xypmC2Rc\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-TKnUh23n\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-K6wLfAiN\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-naQihl7z\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-F1kslF5t\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>names3</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var>, <var>names2</var>, and <var>names3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-1jr14zqX\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-ic6_wi6x\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-Fovz-BpD\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-kKbHUs1e\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-IDrLWHWU\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-AiQH2RJz\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-_GPKA3Cb\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarDeclaredNames\"><a href=\"#sec-static-semantics-toplevelvardeclarednames\">TopLevelVarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-WMKjW5iz\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>names2</var> be <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-lGybrnks\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-5uRXjJj7\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "15.8.5", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1_djgdhl\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"InstantiateAsyncFunctionExpression\"><a href=\"#sec-runtime-semantics-instantiateasyncfunctionexpression\">InstantiateAsyncFunctionExpression</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7ylag141\">\n        <emu-t>await</emu-t>\n        <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-static-semantics-varscopeddeclarations": {"num": "8.1.7", "title": "#sec-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations", "html": "<emu-clause id=\"sec-static-semantics-varscopeddeclarations\" oldids=\"sec-statement-semantics-static-semantics-varscopeddeclarations,sec-block-static-semantics-varscopeddeclarations,sec-variable-statement-static-semantics-varscopeddeclarations,sec-if-statement-static-semantics-varscopeddeclarations,sec-do-while-statement-static-semantics-varscopeddeclarations,sec-while-statement-static-semantics-varscopeddeclarations,sec-for-statement-static-semantics-varscopeddeclarations,sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations,sec-with-statement-static-semantics-varscopeddeclarations,sec-switch-statement-static-semantics-varscopeddeclarations,sec-labelled-statements-static-semantics-varscopeddeclarations,sec-try-statement-static-semantics-varscopeddeclarations,sec-function-definitions-static-semantics-varscopeddeclarations,sec-arrow-function-definitions-static-semantics-varscopeddeclarations,sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations,sec-scripts-static-semantics-varscopeddeclarations,sec-module-semantics-static-semantics-varscopeddeclarations\" type=\"sdo\" aoid=\"VarScopedDeclarations\"><span id=\"sec-module-semantics-static-semantics-varscopeddeclarations\"></span><span id=\"sec-scripts-static-semantics-varscopeddeclarations\"></span><span id=\"sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"></span><span id=\"sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-function-definitions-static-semantics-varscopeddeclarations\"></span><span id=\"sec-try-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-labelled-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-switch-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-with-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"></span><span id=\"sec-for-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-do-while-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-if-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-variable-statement-static-semantics-varscopeddeclarations\"></span><span id=\"sec-block-static-semantics-varscopeddeclarations\"></span><span id=\"sec-statement-semantics-static-semantics-varscopeddeclarations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</span> Static Semantics: VarScopedDeclarations</h1>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cziqu-45\" id=\"prod-CXBIcQtz\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gsqkt2bv\" id=\"prod-4cf8z78V\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hx0ynljx\" id=\"prod-UIiAeivR\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"q4uv-sm3\" id=\"prod-R2NCFAfM\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qm95e4wi\" id=\"prod-8C3zNXp6\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"hntake-o\" id=\"prod-QgvbQ6qN\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-nkERSk1r\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod--ycd0kFi\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\" id=\"prod-r8z3UV58\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1vn3ibwe\" id=\"prod-zHpAsUUQ\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n3piepmh\" id=\"prod-r4VwMPwM\"><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\" id=\"prod-HsuXutdb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and &#171; <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fuhqe2xq\" id=\"prod-B7KHfByo\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ogvciaf\" id=\"prod-yyIeKAQ3\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DoWhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jocmqoht\" id=\"prod-QkEPe1CC\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WhileStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"92j78-b5\" id=\"prod-jrq4eHFJ\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-5lKKTAkN\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-13ohOiCm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-eqKiNSk1\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v1ibcd1w\" id=\"prod-KgxDtGf4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jzctgxkp\" id=\"prod-AWnFzjE8\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"jqzgi_en\" id=\"prod-5TY9-yea\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b3wzboyu\" id=\"prod-t9Ps-Sf3\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"mhrux1r7\" id=\"prod-IEEeV8La\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uatmda3j\" id=\"prod-WOgH08rb\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ForInOfStatement\">\n    <emu-nt><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7pgjrcn-\" id=\"prod-SyVO6l8T\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7m-adytu\" id=\"prod-o2HaUKnD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cyt_lv_1\" id=\"prod-kZcYMT8d\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\" id=\"prod-otI6GMSS\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\" id=\"prod-FjNXiCI7\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-BX82yRxg\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ududlhou\" id=\"prod-aW8QiumN\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations1</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations1</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, let <var>declarations3</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations3</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"addji9rs\" id=\"prod-nuKGUlOU\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\" id=\"prod-mzP2If-y\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ihpgum\" id=\"prod-ZPHZRUV6\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ubbvtbun\" id=\"prod-i-A4iWeY\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"-nqupnlb\" id=\"prod-ntkJlgei\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"qhfov2lc\" id=\"prod-RhYCwWQZ\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xsakufa6\" id=\"prod-0GInHInm\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxlzfd5s\" id=\"prod-pi8GJ951\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>.</li><li>Let <var>declarations3</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var>, <var>declarations2</var>, and <var>declarations3</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-H8Sf_rsN\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-vvqmH-2l\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-x8eD4P1T\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-UWG_9qGM\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncConciseBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39f4t7jo\" id=\"prod-VllrABp8\"><emu-nt><a href=\"#prod-ExpressionBody\">ExpressionBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-se4Mco-N\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z0a6dhkf\" id=\"prod-MCeJZE_U\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"TopLevelVarScopedDeclarations\"><a href=\"#sec-static-semantics-toplevelvarscopeddeclarations\">TopLevelVarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Module\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\" id=\"prod-g_wYfia1\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd23jrxs\" id=\"prod-oVpqQZka\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.</li><li>Let <var>declarations2</var> be <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-TBDbISuB\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ky6bsn7x\" id=\"prod-f75VYPkN\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>, return <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.5", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> production in <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ouav8kzt\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names1</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>names2</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>names1</var> and <var>names2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations1</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>declarations2</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declarations1</var> and <var>declarations2</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"ForInOfLoopEvaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\">ForInOfLoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-forinofloopevaluation\"><a href=\"#sec-runtime-semantics-forinofloopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-forinofloopevaluation\">#sec-runtime-semantics-forinofloopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"ForInOfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ForInOfStatement\">ForInOfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ux2wyuaj\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of Evaluation are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bras6mo_\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d8zyjn8\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"hx1dvlrw\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}}, "figData": {}}}