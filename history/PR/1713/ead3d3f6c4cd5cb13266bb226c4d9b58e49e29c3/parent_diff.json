{"from": {"secList": ["sec-regexpbuiltinexec", "sec-regexp.prototype.exec", "sec-regexp-constructor", "sec-advancestringindex", "sec-properties-of-the-regexp-prototype-object", "sec-properties-of-regexp-instances", "sec-notation", "sec-backreference-matcher", "sec-regexp-regular-expression-objects", "sec-atom", "sec-regexp-prototype-matchall", "sec-%regexpstringiteratorprototype%-object", "sec-abstract-operations-for-the-regexp-constructor", "sec-properties-of-the-regexp-constructor", "sec-regexp-string-iterator-objects"], "secData": {"sec-regexpbuiltinexec": {"num": "21.2.5.2.2", "title": "#sec-regexpbuiltinexec Runtime Semantics: RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> Runtime Semantics: RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec with arguments <var>R</var> and <var>S</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is an initialized RegExp instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"y\"</code>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val><ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, <var>e</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>A</var>'s <code>\"length\"</code> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"index\"</code>, <var>lastIndex</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"input\"</code>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the matched substring (i.e. the portion of <var>S</var> between offset <var>lastIndex</var> inclusive and offset <var>e</var> exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"0\"</code>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"groups\"</code>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &gt; 0 and <var>i</var> &#8804; <var>n</var>, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be the String value whose code units are the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code points of <var>captureI</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the StringValue of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-regexp.prototype.exec": {"num": "21.2.5.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">21.2.5.2.1</span>#sec-regexpexec Runtime Semantics: RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">21.2.5.2.2</span>#sec-regexpbuiltinexec Runtime Semantics: RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">21.2.5.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp-constructor": {"num": "21.2.3", "title": "#sec-regexp-constructor The RegExp Constructor", "html": "<emu-clause id=\"sec-regexp-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-constructor\">#sec-regexp-constructor</span> The RegExp Constructor</h1>\n      <p>The RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%RegExp%</dfn>.</li>\n        <li>is the initial value of the <code>RegExp</code> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n        <li>creates and initializes a new RegExp object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>RegExp(&#8230;)</code> is equivalent to the object creation expression <code>new RegExp(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified <code>RegExp</code> behaviour must include a <code>super</code> call to the <code>RegExp</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the necessary internal slots.</li>\n      </ul>\n\n      <div id=\"excluded-sec-regexp-pattern-flags\"><h1><span class=\"secnum\">21.2.3.1</span>#sec-regexp-pattern-flags RegExp ( pattern, flags )</h1>...</div><div id=\"excluded-sec-abstract-operations-for-the-regexp-constructor\"><h1><span class=\"secnum\">21.2.3.2</span>#sec-abstract-operations-for-the-regexp-constructor Abstract Operations for the RegExp Constructor</h1>...</div></emu-clause>\n\n    "}, "sec-advancestringindex": {"num": "21.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>index</var>).</li><li>Return <var>index</var> + <var>cp</var>.[[CodeUnitCount]].\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-properties-of-the-regexp-prototype-object": {"num": "21.2.5", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The RegExp prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%RegExpPrototype%</dfn>.</li>\n        <li>is an ordinary object.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <code>valueOf</code> property of its own; however, it inherits the <code>valueOf</code> property from the Object prototype object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">21.2.5.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">21.2.5.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">21.2.5.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">21.2.5.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">21.2.5.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">21.2.5.6</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">21.2.5.7</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">21.2.5.8</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">21.2.5.9</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">21.2.5.10</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">21.2.5.11</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">21.2.5.12</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">21.2.5.13</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">21.2.5.14</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">21.2.5.15</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">21.2.5.16</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">21.2.5.17</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-regexp-instances": {"num": "21.2.6", "title": "#sec-properties-of-regexp-instances Properties of RegExp Instances", "html": "<emu-clause id=\"sec-properties-of-regexp-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-regexp-instances\">#sec-properties-of-regexp-instances</span> Properties of RegExp Instances</h1>\n      <p>RegExp instances are ordinary objects that inherit properties from the RegExp prototype object. RegExp instances have internal slots [[RegExpMatcher]], [[OriginalSource]], and [[OriginalFlags]]. The value of the [[RegExpMatcher]] internal slot is an implementation-dependent representation of the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> of the RegExp object.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Prior to ECMAScript 2015, <code>RegExp</code> instances were specified as having the own data properties <code>source</code>, <code>global</code>, <code>ignoreCase</code>, and <code>multiline</code>. Those properties are now specified as accessor properties of RegExp.prototype.</p>\n      </div></emu-note>\n      <p>RegExp instances also have the following property:</p>\n\n      <div id=\"excluded-sec-lastindex\"><h1><span class=\"secnum\">21.2.6.1</span>#sec-lastindex lastIndex</h1>...</div></emu-clause>\n\n    "}, "sec-notation": {"num": "21.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following variables:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the characters, in order, of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          \n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          \n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> production.\n          \n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"s\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"i\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"m\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"u\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A  <em>CharSet</em> is a mathematical set of characters, either code units or code points depending up the state of the <var>Unicode</var> flag. &#8220;All characters&#8221; means either all code unit values or all code point values also depending upon the state of <var>Unicode</var>.\n          \n          </li>\n          <li>\n            A  <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          \n          </li>\n          <li>\n            A  <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          \n          </li>\n          <li>\n            A  <em>Continuation</em> procedure is an internal closure (i.e. an internal procedure with some arguments already bound to values) that takes one State argument and returns a MatchResult result. If an internal closure references variables which are bound in the function that creates the closure, the closure uses the values that these variables had at the time the closure was created. The Continuation attempts to match the remaining portion (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          \n          </li>\n          <li>\n            A  <em>Matcher</em> procedure is an internal closure that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          \n          </li>\n          <li>\n            An  <em>AssertionTester</em> procedure is an internal closure that takes a State argument and returns a Boolean result. The assertion tester tests a specific condition (specified by the closure's already-bound arguments) against the current place in <var>Input</var> and returns <emu-val>true</emu-val> if the condition matched or <emu-val>false</emu-val> if not.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-backreference-matcher": {"num": "21.2.2.9.1", "title": "#sec-backreference-matcher Runtime Semantics: BackreferenceMatcher ( n, direction )", "html": "<emu-clause id=\"sec-backreference-matcher\" aoid=\"BackreferenceMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-backreference-matcher\">#sec-backreference-matcher</span> Runtime Semantics: BackreferenceMatcher ( <var>n</var>, <var>direction</var> )</h1>\n          <p>The abstract operation BackreferenceMatcher takes two arguments, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>n</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>direction</var>, and performs the following steps:</p>\n          <emu-alg><ol><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>s</var> be <var>cap</var>[<var>n</var>].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <var>c</var>(<var>x</var>).</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>len</var> be the number of elements in <var>s</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var> &#215; <var>len</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>g</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>If there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> between 0 (inclusive) and <var>len</var> (exclusive) such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>s</var>[<var>i</var>]) is not the same character value as <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>g</var> + <var>i</var>]), return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>y</var>) and return its result.\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexp-regular-expression-objects": {"num": "21.2", "title": "#sec-regexp-regular-expression-objects RegExp (Regular Expression) Objects", "html": "<emu-clause id=\"sec-regexp-regular-expression-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-regular-expression-objects\">#sec-regexp-regular-expression-objects</span> RegExp (Regular Expression) Objects</h1>\n    <p>A RegExp object contains a regular expression and the associated flags.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The form and functionality of regular expressions is modelled after the regular expression facility in the Perl 5 programming language.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-patterns\"><h1><span class=\"secnum\">21.2.1</span>#sec-patterns Patterns</h1>...</div><div id=\"excluded-sec-pattern-semantics\"><h1><span class=\"secnum\">21.2.2</span>#sec-pattern-semantics Pattern Semantics</h1>...</div><div id=\"excluded-sec-regexp-constructor\"><h1><span class=\"secnum\">21.2.3</span>#sec-regexp-constructor The RegExp Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-regexp-constructor\"><h1><span class=\"secnum\">21.2.4</span>#sec-properties-of-the-regexp-constructor Properties of the RegExp Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-regexp-prototype-object\"><h1><span class=\"secnum\">21.2.5</span>#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-instances\"><h1><span class=\"secnum\">21.2.6</span>#sec-properties-of-regexp-instances Properties of RegExp Instances</h1>...</div><div id=\"excluded-sec-regexp-string-iterator-objects\"><h1><span class=\"secnum\">21.2.7</span>#sec-regexp-string-iterator-objects RegExp String Iterator Objects</h1>...</div></emu-clause>\n"}, "sec-atom": {"num": "21.2.2.8", "title": "#sec-atom Atom", "html": "<emu-clause id=\"sec-atom\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atom\">#sec-atom</span> Atom</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"beff52c4\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character matched by <emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9658e473\"><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>If <var>DotAll</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be the set of all characters.</li></ol></li><li>Otherwise, let <var>A</var> be the set of all characters except <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9ce67ea4\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt> with argument <var>direction</var>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"66aaa8b9\"><emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt> to obtain a CharSet <var>A</var> and a Boolean <var>invert</var>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <var>invert</var>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes prior to or enclosing this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be an internal Continuation closure that takes one State argument <var>y</var> and performs the following steps:<ol><li>Let <var>cap</var> be a copy of <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>ye</var> be <var>y</var>'s <var>endIndex</var>.</li><li>If <var>direction</var> is equal to +1, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xe</var> &#8804; <var>ye</var>.</li><li>Let <var>s</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of <var>Input</var> at indices <var>xe</var> (inclusive) through <var>ye</var> (exclusive).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>direction</var> is equal to -1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ye</var> &#8804; <var>xe</var>.</li><li>Let <var>s</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of <var>Input</var> at indices <var>ye</var> (inclusive) through <var>xe</var> (exclusive).</li></ol></li><li>Set <var>cap</var>[<var>parenIndex</var> + 1] to <var>s</var>.</li><li>Let <var>z</var> be the State (<var>ye</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.</li></ol></li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d76db7c5\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>:</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-charactersetmatcher-abstract-operation\"><h1><span class=\"secnum\">21.2.2.8.1</span>#sec-runtime-semantics-charactersetmatcher-abstract-operation Runtime Semantics: CharacterSetMatcher ( A, invert, direction )</h1>...</div><div id=\"excluded-sec-runtime-semantics-canonicalize-ch\"><h1><span class=\"secnum\">21.2.2.8.2</span>#sec-runtime-semantics-canonicalize-ch Runtime Semantics: Canonicalize ( ch )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchproperty-p\"><h1><span class=\"secnum\">21.2.2.8.3</span>#sec-runtime-semantics-unicodematchproperty-p Runtime Semantics: UnicodeMatchProperty ( p )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchpropertyvalue-p-v\"><h1><span class=\"secnum\">21.2.2.8.4</span>#sec-runtime-semantics-unicodematchpropertyvalue-p-v Runtime Semantics: UnicodeMatchPropertyValue ( p, v )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp-prototype-matchall": {"num": "21.2.5.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"flags\"</code>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <code>\"lastIndex\"</code>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>name</emu-val> property of this function is <code>\"[Symbol.matchAll]\"</code>.</p>\n\n        <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.5.8.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div></emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.1", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The  <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an ordinary object.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.1.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.1.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-abstract-operations-for-the-regexp-constructor": {"num": "21.2.3.2", "title": "#sec-abstract-operations-for-the-regexp-constructor Abstract Operations for the RegExp Constructor", "html": "<emu-clause id=\"sec-abstract-operations-for-the-regexp-constructor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-the-regexp-constructor\">#sec-abstract-operations-for-the-regexp-constructor</span> Abstract Operations for the RegExp Constructor</h1>\n\n        <div id=\"excluded-sec-regexpalloc\"><h1><span class=\"secnum\">21.2.3.2.1</span>#sec-regexpalloc Runtime Semantics: RegExpAlloc ( newTarget )</h1>...</div><div id=\"excluded-sec-regexpinitialize\"><h1><span class=\"secnum\">21.2.3.2.2</span>#sec-regexpinitialize Runtime Semantics: RegExpInitialize ( obj, pattern, flags )</h1>...</div><div id=\"excluded-sec-regexpcreate\"><h1><span class=\"secnum\">21.2.3.2.3</span>#sec-regexpcreate Runtime Semantics: RegExpCreate ( P, F )</h1>...</div><div id=\"excluded-sec-escaperegexppattern\"><h1><span class=\"secnum\">21.2.3.2.4</span>#sec-escaperegexppattern Runtime Semantics: EscapeRegExpPattern ( P, F )</h1>...</div></emu-clause>\n    "}, "sec-properties-of-the-regexp-constructor": {"num": "21.2.4", "title": "#sec-properties-of-the-regexp-constructor Properties of the RegExp Constructor", "html": "<emu-clause id=\"sec-properties-of-the-regexp-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-constructor\">#sec-properties-of-the-regexp-constructor</span> Properties of the RegExp Constructor</h1>\n      <p>The RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-regexp.prototype\"><h1><span class=\"secnum\">21.2.4.1</span>#sec-regexp.prototype RegExp.prototype</h1>...</div><div id=\"excluded-sec-get-regexp-@@species\"><h1><span class=\"secnum\">21.2.4.2</span>#sec-get-regexp-@@species get RegExp [ @@species ]</h1>...</div></emu-clause>\n\n    "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-regexpbuiltinexec", "sec-regexp.prototype.exec", "sec-regexp-constructor", "sec-advancestringindex", "sec-properties-of-the-regexp-prototype-object", "sec-properties-of-regexp-instances", "sec-notation", "sec-backreference-matcher", "sec-regexp-regular-expression-objects", "sec-atom", "sec-regexp-prototype-matchall", "sec-%regexpstringiteratorprototype%-object", "sec-abstract-operations-for-the-regexp-constructor", "sec-properties-of-the-regexp-constructor", "sec-regexp-string-iterator-objects"], "secData": {"sec-regexpbuiltinexec": {"num": "21.2.6.2.2", "title": "#sec-regexpbuiltinexec Runtime Semantics: RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> Runtime Semantics: RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec with arguments <var>R</var> and <var>S</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is an initialized RegExp instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"y\"</code>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val><ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, 0, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, 0, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, set <var>e</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>e</var>).</li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>, <var>e</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>A</var>'s <code>\"length\"</code> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"index\"</code>, <var>lastIndex</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"input\"</code>, <var>S</var>).</li><li>Let <var>indices</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>match</var> be the <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match</a></emu-xref> { [[StartIndex]]: <var>lastIndex</var>, [[EndIndex]]: <var>e</var> }.</li><li>Add <var>match</var> as the last element of <var>indices</var>.</li><li>Let <var>matchedSubstr</var> be !&#160;<emu-xref aoid=\"GetMatchString\"><a href=\"#sec-getmatchstring\">GetMatchString</a></emu-xref>(<var>S</var>, <var>match</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"0\"</code>, <var>matchedSubstr</var>).<ol><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then</li><li>Let <var>groupNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>groups</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>groupNames</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, <code>\"groups\"</code>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &gt; 0 and <var>i</var> &#8804; <var>n</var>, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Add <emu-val>undefined</emu-val> as the last element of <var>indices</var>.</li></ol></li><li>Else,<ol><li>Let <var>captureStart</var> be <var>captureI</var>'s <var>startIndex</var>.</li><li>Let <var>captureEnd</var> be <var>captureI</var>'s <var>endIndex</var>.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>captureStart</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>captureStart</var>).</li><li>Set <var>captureEnd</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>captureEnd</var>).</li></ol></li><li>Let <var>capture</var> be the <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match</a></emu-xref> { [[StartIndex]]: <var>captureStart</var>, [[EndIndex]:: <var>captureEnd</var> }.</li><li>Append <var>capture</var> to <var>indices</var>.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"GetMatchString\"><a href=\"#sec-getmatchstring\">GetMatchString</a></emu-xref>(<var>S</var>, <var>capture</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>i</var>), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the StringValue of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>groupNames</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append <var>s</var> to <var>groupNames</var>.</li></ol></li><li>Else,<ol><li>If <var>groupNames</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, append <emu-val>undefined</emu-val> to <var>groupNames</var>.</li></ol></li></ol></li><li>Let <var>indicesArray</var> be !&#160;<emu-xref aoid=\"MakeIndicesArray\"><a href=\"#sec-makeindicesarray\">MakeIndicesArray</a></emu-xref>(<var>S</var>, <var>indices</var>, <var>groupNames</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <code>\"indices\"</code>, <var>indicesArray</var>).</li><li>Return <var>A</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-regexp.prototype.exec": {"num": "21.2.6.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">21.2.6.2.1</span>#sec-regexpexec Runtime Semantics: RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">21.2.6.2.2</span>#sec-regexpbuiltinexec Runtime Semantics: RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">21.2.6.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div><div id=\"excluded-sec-getstringindex\"><h1><span class=\"secnum\">21.2.6.2.4</span>#sec-getstringindex GetStringIndex ( S, Input, e )</h1>...</div><div id=\"excluded-sec-getmatchstring\"><h1><span class=\"secnum\">21.2.6.2.5</span>#sec-getmatchstring GetMatchString ( S, match )</h1>...</div><div id=\"excluded-sec-getmatchindicesarray\"><h1><span class=\"secnum\">21.2.6.2.6</span>#sec-getmatchindicesarray GetMatchIndicesArray ( S, match )</h1>...</div><div id=\"excluded-sec-makeindicesarray\"><h1><span class=\"secnum\">21.2.6.2.7</span>#sec-makeindicesarray MakeIndicesArray ( S , indices, groupNames )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp-constructor": {"num": "21.2.4", "title": "#sec-regexp-constructor The RegExp Constructor", "html": "<emu-clause id=\"sec-regexp-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-constructor\">#sec-regexp-constructor</span> The RegExp Constructor</h1>\n      <p>The RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%RegExp%</dfn>.</li>\n        <li>is the initial value of the <code>RegExp</code> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n        <li>creates and initializes a new RegExp object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>RegExp(&#8230;)</code> is equivalent to the object creation expression <code>new RegExp(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified <code>RegExp</code> behaviour must include a <code>super</code> call to the <code>RegExp</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the necessary internal slots.</li>\n      </ul>\n\n      <div id=\"excluded-sec-regexp-pattern-flags\"><h1><span class=\"secnum\">21.2.4.1</span>#sec-regexp-pattern-flags RegExp ( pattern, flags )</h1>...</div><div id=\"excluded-sec-abstract-operations-for-the-regexp-constructor\"><h1><span class=\"secnum\">21.2.4.2</span>#sec-abstract-operations-for-the-regexp-constructor Abstract Operations for the RegExp Constructor</h1>...</div></emu-clause>\n\n    "}, "sec-advancestringindex": {"num": "21.2.6.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex with arguments <var>S</var>, <var>index</var>, and <var>unicode</var> performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that 0 &#8804; <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unicode</var>) is Boolean.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>index</var>).</li><li>Return <var>index</var> + <var>cp</var>.[[CodeUnitCount]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-properties-of-the-regexp-prototype-object": {"num": "21.2.6", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The RegExp prototype object:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%RegExpPrototype%</dfn>.</li>\n        <li>is an ordinary object.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <code>valueOf</code> property of its own; however, it inherits the <code>valueOf</code> property from the Object prototype object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">21.2.6.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">21.2.6.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">21.2.6.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">21.2.6.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">21.2.6.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">21.2.6.6</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">21.2.6.7</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">21.2.6.8</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">21.2.6.9</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">21.2.6.10</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">21.2.6.11</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">21.2.6.12</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">21.2.6.13</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">21.2.6.14</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">21.2.6.15</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">21.2.6.16</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">21.2.6.17</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-regexp-instances": {"num": "21.2.7", "title": "#sec-properties-of-regexp-instances Properties of RegExp Instances", "html": "<emu-clause id=\"sec-properties-of-regexp-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-regexp-instances\">#sec-properties-of-regexp-instances</span> Properties of RegExp Instances</h1>\n      <p>RegExp instances are ordinary objects that inherit properties from the RegExp prototype object. RegExp instances have internal slots [[RegExpMatcher]], [[OriginalSource]], and [[OriginalFlags]]. The value of the [[RegExpMatcher]] internal slot is an implementation-dependent representation of the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> of the RegExp object.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Prior to ECMAScript 2015, <code>RegExp</code> instances were specified as having the own data properties <code>source</code>, <code>global</code>, <code>ignoreCase</code>, and <code>multiline</code>. Those properties are now specified as accessor properties of RegExp.prototype.</p>\n      </div></emu-note>\n      <p>RegExp instances also have the following property:</p>\n\n      <div id=\"excluded-sec-lastindex\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-lastindex lastIndex</h1>...</div></emu-clause>\n\n    "}, "sec-notation": {"num": "21.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following variables:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the characters, in order, of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          \n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          \n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> production.\n          \n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"s\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"i\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"m\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"u\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A  <em>CharSet</em> is a mathematical set of characters, either code units or code points depending up the state of the <var>Unicode</var> flag. &#8220;All characters&#8221; means either all code unit values or all code point values also depending upon the state of <var>Unicode</var>.\n          \n          </li>\n          <li>\n            A  <em>Range</em> is an ordered pair (<var>startIndex</var>, <var>endIndex</var>) that represents the range of characters included in a capture, where <var>startIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing the start index (inclusive) of the range within <var>Input</var> and <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing the end index (exclusive) of the range within <var>Input</var>. For any  <em>Range</em>, these indices must satisfy the invariant that <var>startIndex</var> &#8804; <var>endIndex</var>.\n          \n          </li>\n          <li>\n            A  <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that represents the  <em>Range</em> obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          \n          </li>\n          <li>\n            A  <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          \n          </li>\n          <li>\n            A  <em>Continuation</em> procedure is an internal closure (i.e. an internal procedure with some arguments already bound to values) that takes one State argument and returns a MatchResult result. If an internal closure references variables which are bound in the function that creates the closure, the closure uses the values that these variables had at the time the closure was created. The Continuation attempts to match the remaining portion (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          \n          </li>\n          <li>\n            A  <em>Matcher</em> procedure is an internal closure that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          \n          </li>\n          <li>\n            An  <em>AssertionTester</em> procedure is an internal closure that takes a State argument and returns a Boolean result. The assertion tester tests a specific condition (specified by the closure's already-bound arguments) against the current place in <var>Input</var> and returns <emu-val>true</emu-val> if the condition matched or <emu-val>false</emu-val> if not.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-backreference-matcher": {"num": "21.2.2.9.1", "title": "#sec-backreference-matcher Runtime Semantics: BackreferenceMatcher ( n, direction )", "html": "<emu-clause id=\"sec-backreference-matcher\" aoid=\"BackreferenceMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-backreference-matcher\">#sec-backreference-matcher</span> Runtime Semantics: BackreferenceMatcher ( <var>n</var>, <var>direction</var> )</h1>\n          <p>The abstract operation BackreferenceMatcher takes two arguments, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>n</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>direction</var>, and performs the following steps:</p>\n          <emu-alg><ol><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>r</var> be <var>cap</var>[<var>n</var>].</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <var>c</var>(<var>x</var>).</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>rs</var> be <var>r</var>'s <var>startIndex</var>.</li><li>Let <var>re</var> be <var>r</var>'s <var>endIndex</var>.</li><li>Let <var>len</var> be <var>re</var> - <var>rs</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var> &#215; <var>len</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>g</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>If there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> between 0 (inclusive) and <var>len</var> (exclusive) such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>rs</var> + <var>i</var>]) is not the same character value as <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>g</var> + <var>i</var>]), return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>y</var>) and return its result.\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexp-regular-expression-objects": {"num": "21.2", "title": "#sec-regexp-regular-expression-objects RegExp (Regular Expression) Objects", "html": "<emu-clause id=\"sec-regexp-regular-expression-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-regular-expression-objects\">#sec-regexp-regular-expression-objects</span> RegExp (Regular Expression) Objects</h1>\n    <p>A RegExp object contains a regular expression and the associated flags.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The form and functionality of regular expressions is modelled after the regular expression facility in the Perl 5 programming language.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-patterns\"><h1><span class=\"secnum\">21.2.1</span>#sec-patterns Patterns</h1>...</div><div id=\"excluded-sec-pattern-semantics\"><h1><span class=\"secnum\">21.2.2</span>#sec-pattern-semantics Pattern Semantics</h1>...</div><div id=\"excluded-sec-regexp-abstract-operations\"><h1><span class=\"secnum\">21.2.3</span>#sec-regexp-abstract-operations RegExp Abstract Operations</h1>...</div><div id=\"excluded-sec-regexp-constructor\"><h1><span class=\"secnum\">21.2.4</span>#sec-regexp-constructor The RegExp Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-regexp-constructor\"><h1><span class=\"secnum\">21.2.5</span>#sec-properties-of-the-regexp-constructor Properties of the RegExp Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-regexp-prototype-object\"><h1><span class=\"secnum\">21.2.6</span>#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-instances\"><h1><span class=\"secnum\">21.2.7</span>#sec-properties-of-regexp-instances Properties of RegExp Instances</h1>...</div><div id=\"excluded-sec-regexp-string-iterator-objects\"><h1><span class=\"secnum\">21.2.8</span>#sec-regexp-string-iterator-objects RegExp String Iterator Objects</h1>...</div></emu-clause>\n"}, "sec-atom": {"num": "21.2.2.8", "title": "#sec-atom Atom", "html": "<emu-clause id=\"sec-atom\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atom\">#sec-atom</span> Atom</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"beff52c4\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character matched by <emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9658e473\"><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>If <var>DotAll</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be the set of all characters.</li></ol></li><li>Otherwise, let <var>A</var> be the set of all characters except <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9ce67ea4\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt> with argument <var>direction</var>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"66aaa8b9\"><emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt> to obtain a CharSet <var>A</var> and a Boolean <var>invert</var>.</li><li>Call <emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <var>invert</var>, <var>direction</var>) and return its Matcher result.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes prior to or enclosing this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return an internal Matcher closure that takes two arguments, a State <var>x</var> and a Continuation <var>c</var>, and performs the following steps:<ol><li>Let <var>d</var> be an internal Continuation closure that takes one State argument <var>y</var> and performs the following steps:<ol><li>Let <var>cap</var> be a copy of <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>ye</var> be <var>y</var>'s <var>endIndex</var>.</li><li>If <var>direction</var> is equal to +1, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xe</var> &#8804; <var>ye</var>.</li><li>Let <var>r</var> be the Range (<var>xe</var>, <var>ye</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>direction</var> is equal to -1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ye</var> &#8804; <var>xe</var>.</li><li>Let <var>r</var> be the Range (<var>ye</var>, <var>xe</var>).</li></ol></li><li>Set <var>cap</var>[<var>parenIndex</var> + 1] to <var>r</var>.</li><li>Let <var>z</var> be the State (<var>ye</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>z</var>) and return its result.</li></ol></li><li>Call <var>m</var>(<var>x</var>, <var>d</var>) and return its result.\n        </li></ol></li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d76db7c5\"><emu-t>(</emu-t><emu-t>?</emu-t><emu-t>:</emu-t><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-charactersetmatcher-abstract-operation\"><h1><span class=\"secnum\">21.2.2.8.1</span>#sec-runtime-semantics-charactersetmatcher-abstract-operation Runtime Semantics: CharacterSetMatcher ( A, invert, direction )</h1>...</div><div id=\"excluded-sec-runtime-semantics-canonicalize-ch\"><h1><span class=\"secnum\">21.2.2.8.2</span>#sec-runtime-semantics-canonicalize-ch Runtime Semantics: Canonicalize ( ch )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchproperty-p\"><h1><span class=\"secnum\">21.2.2.8.3</span>#sec-runtime-semantics-unicodematchproperty-p Runtime Semantics: UnicodeMatchProperty ( p )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchpropertyvalue-p-v\"><h1><span class=\"secnum\">21.2.2.8.4</span>#sec-runtime-semantics-unicodematchpropertyvalue-p-v Runtime Semantics: UnicodeMatchPropertyValue ( p, v )</h1>...</div></emu-clause>\n\n      "}, "sec-regexp-prototype-matchall": {"num": "21.2.6.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"flags\"</code>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <code>\"lastIndex\"</code>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <code>\"lastIndex\"</code>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <code>\"g\"</code>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <code>\"u\"</code>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).\n        </li></ol></emu-alg>\n        <p>The value of the <emu-val>name</emu-val> property of this function is <code>\"[Symbol.matchAll]\"</code>.</p>\n\n        <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.6.8.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div></emu-clause>\n\n      "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.8.1", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The  <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an ordinary object.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.8.1.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.8.1.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}, "sec-abstract-operations-for-the-regexp-constructor": {"num": "21.2.4.2", "title": "#sec-abstract-operations-for-the-regexp-constructor Abstract Operations for the RegExp Constructor", "html": "<emu-clause id=\"sec-abstract-operations-for-the-regexp-constructor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-the-regexp-constructor\">#sec-abstract-operations-for-the-regexp-constructor</span> Abstract Operations for the RegExp Constructor</h1>\n\n        <div id=\"excluded-sec-regexpalloc\"><h1><span class=\"secnum\">21.2.4.2.1</span>#sec-regexpalloc Runtime Semantics: RegExpAlloc ( newTarget )</h1>...</div><div id=\"excluded-sec-regexpinitialize\"><h1><span class=\"secnum\">21.2.4.2.2</span>#sec-regexpinitialize Runtime Semantics: RegExpInitialize ( obj, pattern, flags )</h1>...</div><div id=\"excluded-sec-regexpcreate\"><h1><span class=\"secnum\">21.2.4.2.3</span>#sec-regexpcreate Runtime Semantics: RegExpCreate ( P, F )</h1>...</div><div id=\"excluded-sec-escaperegexppattern\"><h1><span class=\"secnum\">21.2.4.2.4</span>#sec-escaperegexppattern Runtime Semantics: EscapeRegExpPattern ( P, F )</h1>...</div></emu-clause>\n    "}, "sec-properties-of-the-regexp-constructor": {"num": "21.2.5", "title": "#sec-properties-of-the-regexp-constructor Properties of the RegExp Constructor", "html": "<emu-clause id=\"sec-properties-of-the-regexp-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-constructor\">#sec-properties-of-the-regexp-constructor</span> Properties of the RegExp Constructor</h1>\n      <p>The RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li>\n        <li>has the following properties:</li>\n      </ul>\n\n      <div id=\"excluded-sec-regexp.prototype\"><h1><span class=\"secnum\">21.2.5.1</span>#sec-regexp.prototype RegExp.prototype</h1>...</div><div id=\"excluded-sec-get-regexp-@@species\"><h1><span class=\"secnum\">21.2.5.2</span>#sec-get-regexp-@@species get RegExp [ @@species ]</h1>...</div></emu-clause>\n\n    "}, "sec-regexp-string-iterator-objects": {"num": "21.2.8", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.8.1</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.8.2</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}}, "figData": {}}}