{"from": {"secList": ["sec-regexpbuiltinexec", "sec-atom", "sec-regexpinitialize", "sec-regexp.prototype.exec", "sec-statements", "sec-examples-of-automatic-semicolon-insertion", "sec-backreference-matcher", "sec-interesting-cases-of-automatic-semicolon-insertion", "sec-ecmascript-language-lexical-grammar", "sec-notation", "sec-properties-of-the-regexp-prototype-object", "sec-automatic-semicolon-insertion", "sec-for-in-and-for-of-statements", "sec-no-lineterminator-here-automatic-semicolon-insertion-list", "sec-asi-cases-with-no-lineterminator-here", "sec-get-regexp.prototype.flags", "sec-asi-interesting-cases-in-statement-lists", "sec-advancestringindex"], "secData": {"sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> and <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is an initialized RegExp instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>lastIndex</var> to <var>e</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>captureI</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atom": {"num": "22.2.2.8", "title": "#sec-atom Atom", "html": "<emu-clause id=\"sec-atom\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atom\">#sec-atom</span> Atom</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"vv9sxhyc\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character matched by <emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"lljkc4zd\"><emu-t>.</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>A</var> be the CharSet of all characters.</li><li>If <var>DotAll</var> is not <emu-val>true</emu-val>, then<ol><li>Remove from <var>A</var> all characters corresponding to a code point on the right-hand side of the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> production.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"noz-pdyz\">\n        <emu-t>\\</emu-t>\n        <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"zqqoud41\"><emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt> to obtain a CharSet <var>A</var> and a Boolean <var>invert</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <var>invert</var>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> Parse Nodes prior to or enclosing this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>direction</var>, <var>m</var>, and <var>parenIndex</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>x</var>, <var>c</var>, <var>direction</var>, and <var>parenIndex</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Let <var>cap</var> be a copy of <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>ye</var> be <var>y</var>'s <var>endIndex</var>.</li><li>If <var>direction</var> = 1, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xe</var> &#8804; <var>ye</var>.</li><li>Let <var>s</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of <var>Input</var> at indices <var>xe</var> (inclusive) through <var>ye</var> (exclusive).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>direction</var> is -1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ye</var> &#8804; <var>xe</var>.</li><li>Let <var>s</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of <var>Input</var> at indices <var>ye</var> (inclusive) through <var>xe</var> (exclusive).</li></ol></li><li>Set <var>cap</var>[<var>parenIndex</var> + 1] to <var>s</var>.</li><li>Let <var>z</var> be the State (<var>ye</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>z</var>).</li></ol></li><li>Return <var>m</var>(<var>x</var>, <var>d</var>).</li></ol></li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1223xxig\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-charactersetmatcher-abstract-operation\"><h1><span class=\"secnum\">22.2.2.8.1</span>#sec-runtime-semantics-charactersetmatcher-abstract-operation CharacterSetMatcher ( A, invert, direction )</h1>...</div><div id=\"excluded-sec-runtime-semantics-canonicalize-ch\"><h1><span class=\"secnum\">22.2.2.8.2</span>#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchproperty-p\"><h1><span class=\"secnum\">22.2.2.8.3</span>#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchpropertyvalue-p-v\"><h1><span class=\"secnum\">22.2.2.8.4</span>#sec-runtime-semantics-unicodematchpropertyvalue-p-v UnicodeMatchPropertyValue ( p, v )</h1>...</div></emu-clause>\n\n      "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var>, <var>pattern</var>, and <var>flags</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-regexp.prototype.exec": {"num": "22.2.5.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">22.2.5.2.1</span>#sec-regexpexec RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">22.2.5.2.2</span>#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">22.2.5.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div></emu-clause>\n\n      "}, "sec-statements": {"num": "A.3", "title": "#sec-statements Statements", "html": "<emu-annex id=\"sec-statements\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statements\">#sec-statements</span> Statements</h1>\n    <emu-production name=\"Statement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ktzsppzs\" id=\"prod-_RzUocsc\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xumq1cs6\" id=\"prod-zzZIrcve\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-tLSm97IT\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"vt4s4xgg\" id=\"prod--E29oaLq\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"vpvr9yr3\" id=\"prod--LiPad3T\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"3kwmhgcn\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-BreakableStatement\">BreakableStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"klxmhdlm\" id=\"prod-3eO1A4mA\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"vtt-myod\" id=\"prod-1mMhFDto\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1sriw0nt\" constraints=\"+Return\" id=\"prod-bep3gsuf\"><emu-constraints>[+Return]</emu-constraints><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"_gejjak9\" id=\"prod-6V6m-A5U\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"90_gq6ig\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ukgcnqlt\" id=\"prod-3chu9X3V\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"z7s8kfe1\" id=\"prod--yHlyxIy\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-5Kl0FUSw\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Declaration\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i6hr6ytb\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"jfshu5d-\" id=\"prod-atbkfQ3e\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dl5lsw3w\" id=\"prod-DEQYio0_\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HoistableDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pm1iqgpt\" id=\"prod-L8T23W53\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"rhqaxmir\" id=\"prod-CsuSm934\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"3nfjki-g\" id=\"prod-Mj0BF5Ng\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e-_qp6dd\" id=\"prod-_n4x_0B4\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BreakableStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BreakableStatement\">BreakableStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"olmcy7ih\" id=\"prod-00LpqzuX\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"uzjzv-di\" id=\"prod-Uwt2E06k\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BlockStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zwpfwt4j\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Block\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uij9rcu7\" id=\"prod-30nvN6ck\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"StatementList\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"owubwn_s\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"21clqs0p\" id=\"prod--OFVjnjw\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"StatementListItem\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"septp5sa\" id=\"prod-EQzE7F8u\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"mtktetk8\" id=\"prod-GRF71K6E\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jsmbgalx\" id=\"prod-10DUWE8d\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"laxrvawy\" id=\"prod-YHzPmgz1\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"nim_d4hb\" id=\"prod-G1Hf7gBn\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingList\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ned6hkwu\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"fdx7nvya\" id=\"prod-FYQ2Ly4e\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-l3Hg2UJ0\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-FppJpMK8\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tbwjaldb\" id=\"prod-03w8p9mr\">\n        <emu-t>var</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ps4sw3ys\" id=\"prod-b7kFpx81\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xsh3skws\" id=\"prod-kqbqpKlK\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-IeHby7A3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-MhsdViui\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fwd2jmee\" id=\"prod-XzywOrpN\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"hpyn1kot\" id=\"prod-0Q02W-YD\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectBindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-Zq1KBCx2\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"u51ece_j\" id=\"prod-5lmgiaFr\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sd_sxlxl\" id=\"prod-xrMoI6uo\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"98sthfnw\" id=\"prod-ZImPf3XQ\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayBindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82yazf9m\" id=\"prod-GTLtfjt0\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"tz2jlcig\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ezfh7oge\" id=\"prod-ZEEMEcAo\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingRestProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nldxez3v\" id=\"prod-ltwW708a\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingPropertyList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8baidhkc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ewlfehxq\" id=\"prod-TkJ_upuv\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lpaw4nny\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5z8zw101\" id=\"prod-QAGJVJ9v\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElisionElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5jbcqvdg\" id=\"prod-eAKFkNTn\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"01jnavb_\" id=\"prod-_67MBf2R\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xcksc8qh\" id=\"prod-VmvTFDAY\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"01jnavb_\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"eyv5t9mz\" id=\"prod-qY39_uPQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleNameBinding\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mg7mmvow\" id=\"prod-8lbkfoVZ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingRestElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nldxez3v\" id=\"prod-0fOwNHr-\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"lb7grnzq\" id=\"prod-iBHkClE5\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"EmptyStatement\">\n    <emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w4jv_4at\">\n        <emu-gann>[lookahead &#8713; { <emu-t>{</emu-t>, <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t>, <emu-t>let</emu-t>\n        <emu-t>[</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"IfStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gvkksvw-\" id=\"prod-_lf1EvXT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"x9p_cd-n\" id=\"prod--e2u-nCd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfhtf2jt\" id=\"prod-_iKWbsbc\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"v6obhs7z\" id=\"prod-APtduKCe\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-WhileStatement\">WhileStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cito49hq\" id=\"prod-GF3bPj7n\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-ForStatement\">ForStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ysjy7ne3\" id=\"prod-6JGUK4CB\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoWhileStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eiknjnpu\" id=\"prod-9vnoeXX4\">\n        <emu-t>do</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"WhileStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WhileStatement\">WhileStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"awcw0xuh\" id=\"prod-Tx40AFG0\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForStatement\">ForStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"honbm3zg\" id=\"prod-NvPgd2yM\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"~In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"frhzdc45\" id=\"prod-pYXfSJG_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ibe-o3pw\" id=\"prod-0Y0bZAvD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w0xbna_a\" id=\"prod-Za8VIr4f\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7ml0tbdi\" id=\"prod-_N8Q-kim\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"zchtsyje\" id=\"prod-xutvwaXc\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"unjmpjqp\" id=\"prod-ZCBgWI75\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"58n_2ihn\" id=\"prod-M1zjKbr6\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pfvjbka1\" id=\"prod-EoyoF5LI\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"oprokwwm\" constraints=\"+Await\" id=\"prod-ReDwT2-b\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9bsmrb_a\" constraints=\"+Await\" id=\"prod-ut_uoPzp\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fxca1-1x\" constraints=\"+Await\" id=\"prod-jY1gwM9V\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForDeclaration\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k6i8qvu4\" id=\"prod-ygJ0cdk1\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForBinding\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-Od4pejmC\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\" id=\"prod-bASH00Dp\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ContinueStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-rfM2mnQY\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fiwlh1nt\" id=\"prod-w6m19zWs\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BreakStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-Jyx4vreG\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"nio0l2c9\" id=\"prod-_aoH2Ltk\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ReturnStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cykzgrgr\">\n        <emu-t>return</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"tybfdyhl\">\n        <emu-t>return</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"WithStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lo7bccts\" id=\"prod-3HlNX-pI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"SwitchStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drlywp4w\" id=\"prod-3xRnqKfC\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseBlock\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v-h2atfk\" id=\"prod-q66ZlOHI\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"00sitdqr\" id=\"prod-JuWwIrcZ\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseClauses\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xpjvtgza\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8r6dchoz\" id=\"prod-sjZo1Z65\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseClause\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zpq23qtn\" id=\"prod-A-5Q_6I5\">\n        <emu-t>case</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"DefaultClause\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"djnlaxcj\" id=\"prod-HPF3iA_C\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelledStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vhxkapdt\" id=\"prod-0GG8m5VC\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelledItem\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"septp5sa\" id=\"prod-ZdaBUa3q\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d0nwjyav\" id=\"prod-9bKQMexM\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ThrowStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"q_cybpdb\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"TryStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eqx7gx8m\" id=\"prod-wD-TPYub\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ayio9dod\" id=\"prod-EYIEedje\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"yfzmez3t\" id=\"prod-cfkI0NCS\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"Catch\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gk6mks18\" id=\"prod-IbvHsEaf\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vi_srlx8\" id=\"prod-ybInUotF\">\n        <emu-t>catch</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"Finally\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9akqlxo\">\n        <emu-t>finally</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CatchParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DebuggerStatement\">\n    <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ns5hclvt\">\n        <emu-t>debugger</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-examples-of-automatic-semicolon-insertion": {"num": "12.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).print()</code></pre>\n      <p>is <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + c(d + e).print()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n  "}, "sec-backreference-matcher": {"num": "22.2.2.9.1", "title": "#sec-backreference-matcher BackreferenceMatcher ( n, direction )", "html": "<emu-clause id=\"sec-backreference-matcher\" aoid=\"BackreferenceMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-backreference-matcher\">#sec-backreference-matcher</span> BackreferenceMatcher ( <var>n</var>, <var>direction</var> )</h1>\n          <p>The abstract operation BackreferenceMatcher takes arguments <var>n</var> (a positive <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>) and <var>direction</var> (1 or -1). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &#8805; 1.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>n</var> and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>s</var> be <var>cap</var>[<var>n</var>].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <var>c</var>(<var>x</var>).</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>len</var> be the number of elements in <var>s</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var> &#215; <var>len</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>g</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>If there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> between 0 (inclusive) and <var>len</var> (exclusive) such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>s</var>[<var>i</var>]) is not the same character value as <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>g</var> + <var>i</var>]), return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>y</var>).</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-interesting-cases-of-automatic-semicolon-insertion": {"num": "12.10", "title": "#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">#sec-interesting-cases-of-automatic-semicolon-insertion</span> Interesting Cases of Automatic Semicolon Insertion</h1>\n    <em>This section is non-normative.</em>\n    <p>ECMAScript programs can be written in a style with very few semicolons by relying on automatic semicolon insertion. As described above, semicolons are not inserted at every newline, and automatic semicolon insertion can depend on multiple tokens across line terminators.</p>\n\n    <p>As new syntactic features are added to ECMAScript, additional grammar productions could be added that cause lines relying on automatic semicolon insertion preceding them to change grammar productions when parsed.</p>\n\n    <p>For the purposes of this section, a case of automatic semicolon insertion is considered interesting if it is a place where a semicolon may or may not be inserted, depending on the source text which precedes it. The rest of this section describes a number of interesting cases of automatic semicolon insertion in this version of ECMAScript.</p>\n    <div id=\"excluded-sec-asi-interesting-cases-in-statement-lists\"><h1><span class=\"secnum\">12.10.1</span>#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>...</div></emu-clause>\n  "}, "sec-ecmascript-language-lexical-grammar": {"num": "12", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.exec(c).map(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.exec(c).map(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">12.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">12.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">12.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">12.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">12.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">12.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">12.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">12.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-interesting-cases-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.10</span>#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-asi-cases-with-no-lineterminator-here\"><h1><span class=\"secnum\">12.11</span>#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n\n"}, "sec-notation": {"num": "22.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following aliases:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> production.\n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"s\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"i\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"m\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"u\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li oldids=\"sec-runtime-semantics-wordcharacters-abstract-operation\"><span id=\"sec-runtime-semantics-wordcharacters-abstract-operation\"></span>\n            <var>WordCharacters</var> is the mathematical set that is the union of all sixty-three characters in <emu-val>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\"</emu-val> (letters, numbers, and U+005F (LOW LINE) in the Unicode Basic Latin block) and all characters <var>c</var> for which <var>c</var> is not in that set but <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>c</var>) is. <var>WordCharacters</var> cannot contain more than sixty-three characters unless <var>Unicode</var> and <var>IgnoreCase</var> are both <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A <em>CharSet</em> is a mathematical set of characters. When the <var>Unicode</var> flag is <emu-val>true</emu-val>, &#8220;all characters&#8221; means the CharSet containing all code point values; otherwise &#8220;all characters&#8221; means the CharSet containing all code unit values.\n          </li>\n          <li>\n            A <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of characters that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          </li>\n          <li>\n            A <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          </li>\n          <li>\n            A <em>Continuation</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes one State argument and returns a MatchResult result. The Continuation attempts to match the remaining portion (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          </li>\n          <li>\n            A <em>Matcher</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-regexp-prototype-object": {"num": "22.2.5", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The <dfn>RegExp prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%RegExp.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <emu-val>\"valueOf\"</emu-val> property of its own; however, it inherits the <emu-val>\"valueOf\"</emu-val> property from the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">22.2.5.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">22.2.5.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">22.2.5.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">22.2.5.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">22.2.5.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">22.2.5.6</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">22.2.5.7</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">22.2.5.8</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">22.2.5.9</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">22.2.5.10</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">22.2.5.11</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">22.2.5.12</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">22.2.5.13</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">22.2.5.14</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">22.2.5.15</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">22.2.5.16</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">22.2.5.17</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div></emu-clause>\n\n    "}, "sec-automatic-semicolon-insertion": {"num": "12.9", "title": "#sec-automatic-semicolon-insertion Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</span> Automatic Semicolon Insertion</h1>\n    <p>Most ECMAScript statements and declarations must be terminated with a semicolon. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.</p>\n\n    <div id=\"excluded-sec-rules-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9.1</span>#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-examples-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9.2</span>#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion</h1>...</div></emu-clause>\n  "}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w0xbna_a\" id=\"prod-Za8VIr4f\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7ml0tbdi\" id=\"prod-_N8Q-kim\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"zchtsyje\" id=\"prod-xutvwaXc\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"unjmpjqp\" id=\"prod-ZCBgWI75\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"58n_2ihn\" id=\"prod-M1zjKbr6\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pfvjbka1\" id=\"prod-EoyoF5LI\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"oprokwwm\" constraints=\"+Await\" id=\"prod-ReDwT2-b\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9bsmrb_a\" constraints=\"+Await\" id=\"prod-ut_uoPzp\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fxca1-1x\" constraints=\"+Await\" id=\"prod-jY1gwM9V\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForDeclaration\" params=\"Yield, Await\" id=\"prod-ForDeclaration\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k6i8qvu4\" id=\"prod-ygJ0cdk1\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForBinding\" params=\"Yield, Await\" id=\"prod-ForBinding\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-Od4pejmC\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\" id=\"prod-bASH00Dp\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginstantiation\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-runtime-semantics-fordeclarationbindinginstantiation Runtime Semantics: ForDeclarationBindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofloopevaluation\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-runtime-semantics-forinofloopevaluation Runtime Semantics: ForInOfLoopEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.10</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-no-lineterminator-here-automatic-semicolon-insertion-list": {"num": "12.11.1", "title": "#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">#sec-no-lineterminator-here-automatic-semicolon-insertion-list</span> List of Grammar Productions with Optional Operands and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n      <ul>\n        <li><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>.</li>\n        <li>Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>) with relation to Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>)</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-asi-cases-with-no-lineterminator-here": {"num": "12.11", "title": "#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-asi-cases-with-no-lineterminator-here\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-cases-with-no-lineterminator-here\">#sec-asi-cases-with-no-lineterminator-here</span> Cases of Automatic Semicolon Insertion and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n    <em>This section is non-normative.</em>\n    <p>ECMAScript contains grammar productions which include &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;. These productions are sometimes a means to have optional operands in the grammar. Introducing a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> in these locations would change the grammar production of a source text by using the grammar production without the optional operand.</p>\n\n    <p>The rest of this section describes a number of productions using &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; in this version of ECMAScript.</p>\n    <div id=\"excluded-sec-no-lineterminator-here-automatic-semicolon-insertion-list\"><h1><span class=\"secnum\">12.11.1</span>#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n"}, "sec-get-regexp.prototype.flags": {"num": "22.2.5.4", "title": "#sec-get-regexp.prototype.flags get RegExp.prototype.flags", "html": "<emu-clause id=\"sec-get-regexp.prototype.flags\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.flags\">#sec-get-regexp.prototype.flags</span> get RegExp.prototype.flags</h1>\n        <p><code>RegExp.prototype.flags</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be the empty String.</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of <var>result</var>.</li><li>Let <var>ignoreCase</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"ignoreCase\"</emu-val>)).</li><li>If <var>ignoreCase</var> is <emu-val>true</emu-val>, append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of <var>result</var>.</li><li>Let <var>multiline</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"multiline\"</emu-val>)).</li><li>If <var>multiline</var> is <emu-val>true</emu-val>, append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of <var>result</var>.</li><li>Let <var>dotAll</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"dotAll\"</emu-val>)).</li><li>If <var>dotAll</var> is <emu-val>true</emu-val>, append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of <var>result</var>.</li><li>Let <var>unicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>If <var>unicode</var> is <emu-val>true</emu-val>, append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of <var>result</var>.</li><li>Let <var>sticky</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"sticky\"</emu-val>)).</li><li>If <var>sticky</var> is <emu-val>true</emu-val>, append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of <var>result</var>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asi-interesting-cases-in-statement-lists": {"num": "12.10.1", "title": "#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists", "html": "<emu-clause id=\"sec-asi-interesting-cases-in-statement-lists\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-interesting-cases-in-statement-lists\">#sec-asi-interesting-cases-in-statement-lists</span> Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>\n      <p>In a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, many <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s end in semicolons, which may be omitted using automatic semicolon insertion. As a consequence of the rules above, at the end of a line ending an expression, a semicolon is required if the following line begins with any of the following:</p>\n      <ul>\n        <li><strong>An opening parenthesis (<code>(</code>)</strong>. Without a semicolon, the two lines together are treated as a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li>\n        <li><strong>An opening square bracket (<code>[</code>)</strong>. Without a semicolon, the two lines together are treated as property access, rather than an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or <emu-nt><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a></emu-nt>.</li>\n        <li><strong>A template literal (<code>`</code>)</strong>. Without a semicolon, the two lines together are interpreted as a tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>), with the previous expression as the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li>\n        <li><strong>Unary <code>+</code> or <code>-</code></strong>. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.</li>\n        <li><strong>A RegExp literal</strong>. Without a semicolon, the two lines together may be parsed instead as the <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>, for example if the RegExp has flags.</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-advancestringindex": {"num": "22.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex takes arguments <var>S</var> (a String), <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>unicode</var> (a Boolean). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>index</var>).</li><li>Return <var>index</var> + <var>cp</var>.[[CodeUnitCount]].</li></ol></emu-alg>\n        </emu-clause>\n      "}}, "figData": {}}, "to": {"secList": ["sec-makeindicesarray", "sec-regexpbuiltinexec", "sec-atom", "sec-regexpinitialize", "sec-getstringindex", "sec-regexp.prototype.exec", "sec-statements", "sec-examples-of-automatic-semicolon-insertion", "sec-backreference-matcher", "sec-interesting-cases-of-automatic-semicolon-insertion", "sec-ecmascript-language-lexical-grammar", "sec-notation", "sec-properties-of-the-regexp-prototype-object", "sec-get-regexp.prototype.hasIndices", "sec-automatic-semicolon-insertion", "sec-for-in-and-for-of-statements", "sec-getmatchstring", "sec-no-lineterminator-here-automatic-semicolon-insertion-list", "sec-asi-cases-with-no-lineterminator-here", "sec-getmatchindicesarray", "sec-get-regexp.prototype.flags", "sec-asi-interesting-cases-in-statement-lists", "sec-advancestringindex", "sec-match-records"], "secData": {"sec-makeindicesarray": {"num": "22.2.5.2.8", "title": "#sec-makeindicesarray MakeIndicesArray ( S, indices, groupNames, hasGroups )", "html": "<emu-clause id=\"sec-makeindicesarray\" aoid=\"MakeIndicesArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeindicesarray\">#sec-makeindicesarray</span> MakeIndicesArray ( <var>S</var>, <var>indices</var>, <var>groupNames</var>, <var>hasGroups</var> )</h1>\n          <p>The abstract operation MakeIndicesArray takes arguments <var>S</var> (a String), <var>indices</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), <var>groupNames</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>hasGroups</var> (a Boolean). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>n</var> be the number of elements in <var>indices</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>groupNames</var> with <var>n</var> - 1 elements.</li><li>NOTE: The <var>groupNames</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains elements aligned with the <var>indices</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> starting at <var>indices</var>[1].</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>).</li><li>If <var>hasGroups</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 0 and <var>i</var> &lt; <var>n</var>, do<ol><li>Let <var>matchIndices</var> be <var>indices</var>[<var>i</var>].</li><li>If <var>matchIndices</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>matchIndicesArray</var> be !&#160;<emu-xref aoid=\"GetMatchIndicesArray\"><a href=\"#sec-getmatchindicesarray\">GetMatchIndicesArray</a></emu-xref>(<var>S</var>, <var>matchIndices</var>).</li></ol></li><li>Else,<ol><li>Let <var>matchIndicesArray</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>matchIndicesArray</var>).</li><li>If <var>i</var> &gt; 0 and <var>groupNames</var>[<var>i</var> - 1] is not <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>groupNames</var>[<var>i</var> - 1], <var>matchIndicesArray</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> and <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is an initialized RegExp instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"d\"</emu-val>, let <var>hasIndices</var> be <emu-val>true</emu-val>; else let <var>hasIndices</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, set <var>e</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>e</var>).</li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>match</var> be the <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match Record</a></emu-xref> { [[StartIndex]]: <var>lastIndex</var>, [[EndIndex]]: <var>e</var> }.</li><li>Let <var>indices</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>groupNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append <var>match</var> to <var>indices</var>.</li><li>Let <var>matchedSubstr</var> be !&#160;<emu-xref aoid=\"GetMatchString\"><a href=\"#sec-getmatchstring\">GetMatchString</a></emu-xref>(<var>S</var>, <var>match</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>hasGroups</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>hasGroups</var> be <emu-val>false</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Append <emu-val>undefined</emu-val> to <var>indices</var>.</li></ol></li><li>Else,<ol><li>Let <var>captureStart</var> be <var>captureI</var>'s <var>startIndex</var>.</li><li>Let <var>captureEnd</var> be <var>captureI</var>'s <var>endIndex</var>.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>captureStart</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>captureStart</var>).</li><li>Set <var>captureEnd</var> to !&#160;<emu-xref aoid=\"GetStringIndex\"><a href=\"#sec-getstringindex\">GetStringIndex</a></emu-xref>(<var>S</var>, <var>Input</var>, <var>captureEnd</var>).</li></ol></li><li>Let <var>capture</var> be the <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match Record</a></emu-xref> { [[StartIndex]]: <var>captureStart</var>, [[EndIndex]]: <var>captureEnd</var> }.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"GetMatchString\"><a href=\"#sec-getmatchstring\">GetMatchString</a></emu-xref>(<var>S</var>, <var>capture</var>).</li><li>Append <var>capture</var> to <var>indices</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li><li>Append <var>s</var> to <var>groupNames</var>.</li></ol></li><li>Else,<ol><li>Append <emu-val>undefined</emu-val> to <var>groupNames</var>.</li></ol></li></ol></li><li>If <var>hasIndices</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>indicesArray</var> be !&#160;<emu-xref aoid=\"MakeIndicesArray\"><a href=\"#sec-makeindicesarray\">MakeIndicesArray</a></emu-xref>(<var>S</var>, <var>indices</var>, <var>groupNames</var>, <var>hasGroups</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"indices\"</emu-val>, <var>indicesArray</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-atom": {"num": "22.2.2.8", "title": "#sec-atom Atom", "html": "<emu-clause id=\"sec-atom\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atom\">#sec-atom</span> Atom</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"vv9sxhyc\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character matched by <emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"lljkc4zd\"><emu-t>.</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>A</var> be the CharSet of all characters.</li><li>If <var>DotAll</var> is not <emu-val>true</emu-val>, then<ol><li>Remove from <var>A</var> all characters corresponding to a code point on the right-hand side of the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> production.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"noz-pdyz\">\n        <emu-t>\\</emu-t>\n        <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-AtomEscape\">AtomEscape</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"zqqoud41\"><emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-CharacterClass\">CharacterClass</a></emu-nt> to obtain a CharSet <var>A</var> and a Boolean <var>invert</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <var>invert</var>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> Parse Nodes prior to or enclosing this <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>direction</var>, <var>m</var>, and <var>parenIndex</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>x</var>, <var>c</var>, <var>direction</var>, and <var>parenIndex</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li>Let <var>cap</var> be a copy of <var>y</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>xe</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>ye</var> be <var>y</var>'s <var>endIndex</var>.</li><li>If <var>direction</var> = 1, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xe</var> &#8804; <var>ye</var>.</li><li>Let <var>r</var> be the Range (<var>xe</var>, <var>ye</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>direction</var> is -1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ye</var> &#8804; <var>xe</var>.</li><li>Let <var>r</var> be the Range (<var>ye</var>, <var>xe</var>).</li></ol></li><li>Set <var>cap</var>[<var>parenIndex</var> + 1] to <var>r</var>.</li><li>Let <var>z</var> be the State (<var>ye</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>z</var>).</li></ol></li><li>Return <var>m</var>(<var>x</var>, <var>d</var>).</li></ol></li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"1223xxig\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-charactersetmatcher-abstract-operation\"><h1><span class=\"secnum\">22.2.2.8.1</span>#sec-runtime-semantics-charactersetmatcher-abstract-operation CharacterSetMatcher ( A, invert, direction )</h1>...</div><div id=\"excluded-sec-runtime-semantics-canonicalize-ch\"><h1><span class=\"secnum\">22.2.2.8.2</span>#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchproperty-p\"><h1><span class=\"secnum\">22.2.2.8.3</span>#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )</h1>...</div><div id=\"excluded-sec-runtime-semantics-unicodematchpropertyvalue-p-v\"><h1><span class=\"secnum\">22.2.2.8.4</span>#sec-runtime-semantics-unicodematchpropertyvalue-p-v UnicodeMatchPropertyValue ( p, v )</h1>...</div></emu-clause>\n\n      "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var>, <var>pattern</var>, and <var>flags</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"d\"</emu-val>, <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-getstringindex": {"num": "22.2.5.2.4", "title": "#sec-getstringindex GetStringIndex ( S, Input, e )", "html": "<emu-clause id=\"sec-getstringindex\" aoid=\"GetStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getstringindex\">#sec-getstringindex</span> GetStringIndex ( <var>S</var>, <var>Input</var>, <var>e</var> )</h1>\n          <p>The abstract operation GetStringIndex takes arguments <var>S</var> (a String), <var>Input</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>e</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Input</var> contains the code points of <var>S</var> interpreted as a UTF-16 encoded string.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li>If <var>S</var> is the empty String, return 0.</li><li>Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Return <var>eUTF</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-regexp.prototype.exec": {"num": "22.2.5.2", "title": "#sec-regexp.prototype.exec RegExp.prototype.exec ( string )", "html": "<emu-clause id=\"sec-regexp.prototype.exec\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.exec\">#sec-regexp.prototype.exec</span> RegExp.prototype.exec ( <var>string</var> )</h1>\n        <p>Performs a regular expression match of <var>string</var> against the regular expression and returns an Array object containing the results of the match, or <emu-val>null</emu-val> if <var>string</var> did not match.</p>\n        <p>The String <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>) is searched for an occurrence of the regular expression pattern as follows:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-regexpexec\"><h1><span class=\"secnum\">22.2.5.2.1</span>#sec-regexpexec RegExpExec ( R, S )</h1>...</div><div id=\"excluded-sec-regexpbuiltinexec\"><h1><span class=\"secnum\">22.2.5.2.2</span>#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )</h1>...</div><div id=\"excluded-sec-advancestringindex\"><h1><span class=\"secnum\">22.2.5.2.3</span>#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )</h1>...</div><div id=\"excluded-sec-getstringindex\"><h1><span class=\"secnum\">22.2.5.2.4</span>#sec-getstringindex GetStringIndex ( S, Input, e )</h1>...</div><div id=\"excluded-sec-match-records\"><h1><span class=\"secnum\">22.2.5.2.5</span>#sec-match-records Match Records</h1>...</div><div id=\"excluded-sec-getmatchstring\"><h1><span class=\"secnum\">22.2.5.2.6</span>#sec-getmatchstring GetMatchString ( S, match )</h1>...</div><div id=\"excluded-sec-getmatchindicesarray\"><h1><span class=\"secnum\">22.2.5.2.7</span>#sec-getmatchindicesarray GetMatchIndicesArray ( S, match )</h1>...</div><div id=\"excluded-sec-makeindicesarray\"><h1><span class=\"secnum\">22.2.5.2.8</span>#sec-makeindicesarray MakeIndicesArray ( S, indices, groupNames, hasGroups )</h1>...</div></emu-clause>\n\n      "}, "sec-statements": {"num": "A.3", "title": "#sec-statements Statements", "html": "<emu-annex id=\"sec-statements\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statements\">#sec-statements</span> Statements</h1>\n    <emu-production name=\"Statement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ktzsppzs\" id=\"prod-_RzUocsc\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xumq1cs6\" id=\"prod-zzZIrcve\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cziqu-45\" id=\"prod-tLSm97IT\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"vt4s4xgg\" id=\"prod--E29oaLq\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"vpvr9yr3\" id=\"prod--LiPad3T\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"3kwmhgcn\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-BreakableStatement\">BreakableStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"klxmhdlm\" id=\"prod-3eO1A4mA\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"vtt-myod\" id=\"prod-1mMhFDto\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1sriw0nt\" constraints=\"+Return\" id=\"prod-bep3gsuf\"><emu-constraints>[+Return]</emu-constraints><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"_gejjak9\" id=\"prod-6V6m-A5U\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"90_gq6ig\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ukgcnqlt\" id=\"prod-3chu9X3V\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"z7s8kfe1\" id=\"prod--yHlyxIy\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"iseu28qi\" id=\"prod-5Kl0FUSw\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Declaration\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i6hr6ytb\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"jfshu5d-\" id=\"prod-atbkfQ3e\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dl5lsw3w\" id=\"prod-DEQYio0_\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HoistableDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"pm1iqgpt\" id=\"prod-L8T23W53\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"rhqaxmir\" id=\"prod-CsuSm934\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"3nfjki-g\" id=\"prod-Mj0BF5Ng\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e-_qp6dd\" id=\"prod-_n4x_0B4\"><emu-nt params=\"?Yield, ?Await, ?Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BreakableStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BreakableStatement\">BreakableStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"olmcy7ih\" id=\"prod-00LpqzuX\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"uzjzv-di\" id=\"prod-Uwt2E06k\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BlockStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zwpfwt4j\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Block\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uij9rcu7\" id=\"prod-30nvN6ck\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"StatementList\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"owubwn_s\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"21clqs0p\" id=\"prod--OFVjnjw\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"StatementListItem\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"septp5sa\" id=\"prod-EQzE7F8u\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"mtktetk8\" id=\"prod-GRF71K6E\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jsmbgalx\" id=\"prod-10DUWE8d\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"laxrvawy\" id=\"prod-YHzPmgz1\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"nim_d4hb\" id=\"prod-G1Hf7gBn\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingList\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ned6hkwu\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"fdx7nvya\" id=\"prod-FYQ2Ly4e\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-l3Hg2UJ0\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-FppJpMK8\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tbwjaldb\" id=\"prod-03w8p9mr\">\n        <emu-t>var</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ps4sw3ys\" id=\"prod-b7kFpx81\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xsh3skws\" id=\"prod-kqbqpKlK\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-IeHby7A3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-MhsdViui\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fwd2jmee\" id=\"prod-XzywOrpN\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"hpyn1kot\" id=\"prod-0Q02W-YD\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectBindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectBindingPattern\">ObjectBindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-Zq1KBCx2\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"u51ece_j\" id=\"prod-5lmgiaFr\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"sd_sxlxl\" id=\"prod-xrMoI6uo\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"98sthfnw\" id=\"prod-ZImPf3XQ\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayBindingPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82yazf9m\" id=\"prod-GTLtfjt0\">\n        <emu-t>[</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"tz2jlcig\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ezfh7oge\" id=\"prod-ZEEMEcAo\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingRestProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingRestProperty\">BindingRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nldxez3v\" id=\"prod-ltwW708a\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingPropertyList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8baidhkc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ewlfehxq\" id=\"prod-TkJ_upuv\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPropertyList\">BindingPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lpaw4nny\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5z8zw101\" id=\"prod-QAGJVJ9v\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElementList\">BindingElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElisionElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElisionElement\">BindingElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5jbcqvdg\" id=\"prod-eAKFkNTn\">\n        <emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingProperty\">BindingProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"01jnavb_\" id=\"prod-_67MBf2R\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xcksc8qh\" id=\"prod-VmvTFDAY\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"01jnavb_\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"eyv5t9mz\" id=\"prod-qY39_uPQ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleNameBinding\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SingleNameBinding\">SingleNameBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mg7mmvow\" id=\"prod-8lbkfoVZ\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingRestElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"nldxez3v\" id=\"prod-0fOwNHr-\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"lb7grnzq\" id=\"prod-iBHkClE5\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"EmptyStatement\">\n    <emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sg2sawim\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w4jv_4at\">\n        <emu-gann>[lookahead &#8713; { <emu-t>{</emu-t>, <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t>, <emu-t>let</emu-t>\n        <emu-t>[</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"IfStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gvkksvw-\" id=\"prod-_lf1EvXT\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"x9p_cd-n\" id=\"prod--e2u-nCd\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfhtf2jt\" id=\"prod-_iKWbsbc\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"v6obhs7z\" id=\"prod-APtduKCe\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-WhileStatement\">WhileStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cito49hq\" id=\"prod-GF3bPj7n\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-ForStatement\">ForStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ysjy7ne3\" id=\"prod-6JGUK4CB\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoWhileStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DoWhileStatement\">DoWhileStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eiknjnpu\" id=\"prod-9vnoeXX4\">\n        <emu-t>do</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"WhileStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WhileStatement\">WhileStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"awcw0xuh\" id=\"prod-Tx40AFG0\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForStatement\">ForStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"honbm3zg\" id=\"prod-NvPgd2yM\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"~In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"frhzdc45\" id=\"prod-pYXfSJG_\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ibe-o3pw\" id=\"prod-0Y0bZAvD\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w0xbna_a\" id=\"prod-Za8VIr4f\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7ml0tbdi\" id=\"prod-_N8Q-kim\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"zchtsyje\" id=\"prod-xutvwaXc\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e8xfsfow\" id=\"prod-nLtPS4oB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>let</emu-t>, <emu-t>async</emu-t>\n        <emu-t>of</emu-t> }]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"58n_2ihn\" id=\"prod-M1zjKbr6\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pfvjbka1\" id=\"prod-EoyoF5LI\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"oprokwwm\" constraints=\"+Await\" id=\"prod-ReDwT2-b\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9bsmrb_a\" constraints=\"+Await\" id=\"prod-ut_uoPzp\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fxca1-1x\" constraints=\"+Await\" id=\"prod-jY1gwM9V\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForDeclaration\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k6i8qvu4\" id=\"prod-ygJ0cdk1\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ForBinding\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-Od4pejmC\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\" id=\"prod-bASH00Dp\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ContinueStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6qppgxyk\" id=\"prod-rfM2mnQY\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fiwlh1nt\" id=\"prod-w6m19zWs\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"BreakStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tlip5zkt\" id=\"prod-Jyx4vreG\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"nio0l2c9\" id=\"prod-_aoH2Ltk\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ReturnStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cykzgrgr\">\n        <emu-t>return</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"tybfdyhl\">\n        <emu-t>return</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"WithStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lo7bccts\" id=\"prod-3HlNX-pI\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"SwitchStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drlywp4w\" id=\"prod-3xRnqKfC\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseBlock\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"v-h2atfk\" id=\"prod-q66ZlOHI\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"00sitdqr\" id=\"prod-JuWwIrcZ\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseClauses\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xpjvtgza\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8r6dchoz\" id=\"prod-sjZo1Z65\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CaseClause\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"zpq23qtn\" id=\"prod-A-5Q_6I5\">\n        <emu-t>case</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"DefaultClause\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"djnlaxcj\" id=\"prod-HPF3iA_C\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelledStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vhxkapdt\" id=\"prod-0GG8m5VC\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelledItem\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"septp5sa\" id=\"prod-ZdaBUa3q\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d0nwjyav\" id=\"prod-9bKQMexM\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ThrowStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"q_cybpdb\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"TryStatement\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eqx7gx8m\" id=\"prod-wD-TPYub\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ayio9dod\" id=\"prod-EYIEedje\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"yfzmez3t\" id=\"prod-cfkI0NCS\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"Catch\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gk6mks18\" id=\"prod-IbvHsEaf\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"vi_srlx8\" id=\"prod-ybInUotF\">\n        <emu-t>catch</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"Finally\" params=\"Yield, Await, Return\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9akqlxo\">\n        <emu-t>finally</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"CatchParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DebuggerStatement\">\n    <emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ns5hclvt\">\n        <emu-t>debugger</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-examples-of-automatic-semicolon-insertion": {"num": "12.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).print()</code></pre>\n      <p>is <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + c(d + e).print()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n    "}, "sec-backreference-matcher": {"num": "22.2.2.9.1", "title": "#sec-backreference-matcher BackreferenceMatcher ( n, direction )", "html": "<emu-clause id=\"sec-backreference-matcher\" aoid=\"BackreferenceMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-backreference-matcher\">#sec-backreference-matcher</span> BackreferenceMatcher ( <var>n</var>, <var>direction</var> )</h1>\n          <p>The abstract operation BackreferenceMatcher takes arguments <var>n</var> (a positive <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>) and <var>direction</var> (1 or -1). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &#8805; 1.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>n</var> and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>r</var> be <var>cap</var>[<var>n</var>].</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <var>c</var>(<var>x</var>).</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>rs</var> be <var>r</var>'s <var>startIndex</var>.</li><li>Let <var>re</var> be <var>r</var>'s <var>endIndex</var>.</li><li>Let <var>len</var> be <var>re</var> - <var>rs</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var> &#215; <var>len</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>g</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>If there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> between 0 (inclusive) and <var>len</var> (exclusive) such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>rs</var> + <var>i</var>]) is not the same character value as <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>Input</var>[<var>g</var> + <var>i</var>]), return <emu-const>failure</emu-const>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Return <var>c</var>(<var>y</var>).</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-interesting-cases-of-automatic-semicolon-insertion": {"num": "12.9.3", "title": "#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-interesting-cases-of-automatic-semicolon-insertion\">#sec-interesting-cases-of-automatic-semicolon-insertion</span> Interesting Cases of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>ECMAScript programs can be written in a style with very few semicolons by relying on automatic semicolon insertion. As described above, semicolons are not inserted at every newline, and automatic semicolon insertion can depend on multiple tokens across line terminators.</p>\n\n      <p>As new syntactic features are added to ECMAScript, additional grammar productions could be added that cause lines relying on automatic semicolon insertion preceding them to change grammar productions when parsed.</p>\n\n      <p>For the purposes of this section, a case of automatic semicolon insertion is considered interesting if it is a place where a semicolon may or may not be inserted, depending on the source text which precedes it. The rest of this section describes a number of interesting cases of automatic semicolon insertion in this version of ECMAScript.</p>\n      <div id=\"excluded-sec-asi-interesting-cases-in-statement-lists\"><h1><span class=\"secnum\">12.9.3.1</span>#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>...</div><div id=\"excluded-sec-asi-cases-with-no-lineterminator-here\"><h1><span class=\"secnum\">12.9.3.2</span>#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n  "}, "sec-ecmascript-language-lexical-grammar": {"num": "12", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.exec(c).map(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.exec(c).map(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">12.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">12.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">12.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">12.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">12.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">12.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">12.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">12.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div></emu-clause>\n\n"}, "sec-notation": {"num": "22.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following aliases:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the characters of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> production.\n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"s\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"i\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"m\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <emu-val>\"u\"</emu-val> and otherwise is <emu-val>false</emu-val>.\n          </li>\n          <li oldids=\"sec-runtime-semantics-wordcharacters-abstract-operation\"><span id=\"sec-runtime-semantics-wordcharacters-abstract-operation\"></span>\n            <var>WordCharacters</var> is the mathematical set that is the union of all sixty-three characters in <emu-val>\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\"</emu-val> (letters, numbers, and U+005F (LOW LINE) in the Unicode Basic Latin block) and all characters <var>c</var> for which <var>c</var> is not in that set but <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>c</var>) is. <var>WordCharacters</var> cannot contain more than sixty-three characters unless <var>Unicode</var> and <var>IgnoreCase</var> are both <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A <em>CharSet</em> is a mathematical set of characters. When the <var>Unicode</var> flag is <emu-val>true</emu-val>, &#8220;all characters&#8221; means the CharSet containing all code point values; otherwise &#8220;all characters&#8221; means the CharSet containing all code unit values.\n          </li>\n          <li>\n            A <em>Range</em> is an ordered pair (<var>startIndex</var>, <var>endIndex</var>) that represents the range of characters included in a capture, where <var>startIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing the start index (inclusive) of the range within <var>Input</var> and <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing the end index (exclusive) of the range within <var>Input</var>. For any <em>Range</em>, these indices must satisfy the invariant that <var>startIndex</var> &#8804; <var>endIndex</var>.\n          </li>\n          <li>\n            A <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <em>Range</em> representing the range of characters captured by the <var>n</var><sup>th</sup> set of capturing parentheses, or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          </li>\n          <li>\n            A <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          </li>\n          <li>\n            A <em>Continuation</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes one State argument and returns a MatchResult result. The Continuation attempts to match the remaining portion (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          </li>\n          <li>\n            A <em>Matcher</em> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's captured values) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-regexp-prototype-object": {"num": "22.2.5", "title": "#sec-properties-of-the-regexp-prototype-object Properties of the RegExp Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-regexp-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</span> Properties of the RegExp Prototype Object</h1>\n      <p>The <dfn>RegExp prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%RegExp.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a RegExp instance and does not have a [[RegExpMatcher]] internal slot or any of the other internal slots of RegExp instance objects.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The RegExp prototype object does not have a <emu-val>\"valueOf\"</emu-val> property of its own; however, it inherits the <emu-val>\"valueOf\"</emu-val> property from the <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">Object prototype object</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-regexp.prototype.constructor\"><h1><span class=\"secnum\">22.2.5.1</span>#sec-regexp.prototype.constructor RegExp.prototype.constructor</h1>...</div><div id=\"excluded-sec-regexp.prototype.exec\"><h1><span class=\"secnum\">22.2.5.2</span>#sec-regexp.prototype.exec RegExp.prototype.exec ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.dotAll\"><h1><span class=\"secnum\">22.2.5.3</span>#sec-get-regexp.prototype.dotAll get RegExp.prototype.dotAll</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.flags\"><h1><span class=\"secnum\">22.2.5.4</span>#sec-get-regexp.prototype.flags get RegExp.prototype.flags</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.global\"><h1><span class=\"secnum\">22.2.5.5</span>#sec-get-regexp.prototype.global get RegExp.prototype.global</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.hasIndices\"><h1><span class=\"secnum\">22.2.5.6</span>#sec-get-regexp.prototype.hasIndices get RegExp.prototype.hasIndices</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.ignorecase\"><h1><span class=\"secnum\">22.2.5.7</span>#sec-get-regexp.prototype.ignorecase get RegExp.prototype.ignoreCase</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@match\"><h1><span class=\"secnum\">22.2.5.8</span>#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )</h1>...</div><div id=\"excluded-sec-regexp-prototype-matchall\"><h1><span class=\"secnum\">22.2.5.9</span>#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.multiline\"><h1><span class=\"secnum\">22.2.5.10</span>#sec-get-regexp.prototype.multiline get RegExp.prototype.multiline</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@replace\"><h1><span class=\"secnum\">22.2.5.11</span>#sec-regexp.prototype-@@replace RegExp.prototype [ @@replace ] ( string, replaceValue )</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@search\"><h1><span class=\"secnum\">22.2.5.12</span>#sec-regexp.prototype-@@search RegExp.prototype [ @@search ] ( string )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.source\"><h1><span class=\"secnum\">22.2.5.13</span>#sec-get-regexp.prototype.source get RegExp.prototype.source</h1>...</div><div id=\"excluded-sec-regexp.prototype-@@split\"><h1><span class=\"secnum\">22.2.5.14</span>#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.sticky\"><h1><span class=\"secnum\">22.2.5.15</span>#sec-get-regexp.prototype.sticky get RegExp.prototype.sticky</h1>...</div><div id=\"excluded-sec-regexp.prototype.test\"><h1><span class=\"secnum\">22.2.5.16</span>#sec-regexp.prototype.test RegExp.prototype.test ( S )</h1>...</div><div id=\"excluded-sec-regexp.prototype.tostring\"><h1><span class=\"secnum\">22.2.5.17</span>#sec-regexp.prototype.tostring RegExp.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-get-regexp.prototype.unicode\"><h1><span class=\"secnum\">22.2.5.18</span>#sec-get-regexp.prototype.unicode get RegExp.prototype.unicode</h1>...</div></emu-clause>\n\n    "}, "sec-get-regexp.prototype.hasIndices": {"num": "22.2.5.6", "title": "#sec-get-regexp.prototype.hasIndices get RegExp.prototype.hasIndices", "html": "<emu-clause id=\"sec-get-regexp.prototype.hasIndices\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.hasIndices\">#sec-get-regexp.prototype.hasIndices</span> get RegExp.prototype.hasIndices</h1>\n        <p><code>RegExp.prototype.hasIndices</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>R</var> does not have an [[OriginalFlags]] internal slot, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">%RegExp.prototype%</a></emu-xref>) is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Otherwise, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains the code unit 0x0064 (LATIN SMALL LETTER D), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-automatic-semicolon-insertion": {"num": "12.9", "title": "#sec-automatic-semicolon-insertion Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-automatic-semicolon-insertion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</span> Automatic Semicolon Insertion</h1>\n    <p>Most ECMAScript statements and declarations must be terminated with a semicolon. Such semicolons may always appear explicitly in the source text. For convenience, however, such semicolons may be omitted from the source text in certain situations. These situations are described by saying that semicolons are automatically inserted into the source code token stream in those situations.</p>\n\n    <div id=\"excluded-sec-rules-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9.1</span>#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-examples-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9.2</span>#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion</h1>...</div><div id=\"excluded-sec-interesting-cases-of-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9.3</span>#sec-interesting-cases-of-automatic-semicolon-insertion Interesting Cases of Automatic Semicolon Insertion</h1>...</div></emu-clause>\n"}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ForInOfStatement\" params=\"Yield, Await, Return\" id=\"prod-ForInOfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-ForInOfStatement\">ForInOfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w0xbna_a\" id=\"prod-Za8VIr4f\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>\n        <emu-t>[</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7ml0tbdi\" id=\"prod-_N8Q-kim\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"zchtsyje\" id=\"prod-xutvwaXc\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e8xfsfow\" id=\"prod-nLtPS4oB\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>let</emu-t>, <emu-t>async</emu-t>\n        <emu-t>of</emu-t> }]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"58n_2ihn\" id=\"prod-M1zjKbr6\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pfvjbka1\" id=\"prod-EoyoF5LI\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"oprokwwm\" constraints=\"+Await\" id=\"prod-ReDwT2-b\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-gann>[lookahead &#8800; <emu-t>let</emu-t>]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9bsmrb_a\" constraints=\"+Await\" id=\"prod-ut_uoPzp\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"fxca1-1x\" constraints=\"+Await\" id=\"prod-jY1gwM9V\"><emu-constraints>[+Await]</emu-constraints>\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForDeclaration\" params=\"Yield, Await\" id=\"prod-ForDeclaration\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForDeclaration\">ForDeclaration</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k6i8qvu4\" id=\"prod-ygJ0cdk1\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ForBinding\" params=\"Yield, Await\" id=\"prod-ForBinding\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ForBinding\">ForBinding</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ir-rfjfi\" id=\"prod-Od4pejmC\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"nridwfya\" id=\"prod-bASH00Dp\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginstantiation\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-runtime-semantics-fordeclarationbindinginstantiation Runtime Semantics: ForDeclarationBindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofloopevaluation\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-runtime-semantics-forinofloopevaluation Runtime Semantics: ForInOfLoopEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.10</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-getmatchstring": {"num": "22.2.5.2.6", "title": "#sec-getmatchstring GetMatchString ( S, match )", "html": "<emu-clause id=\"sec-getmatchstring\" aoid=\"GetMatchString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmatchstring\">#sec-getmatchstring</span> GetMatchString ( <var>S</var>, <var>match</var> )</h1>\n          <p>The abstract operation GetMatchString takes arguments <var>S</var> (a String) and <var>match</var> (a <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match Record</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>match</var>.[[StartIndex]] is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0 and &#8804; the length of <var>S</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>match</var>.[[EndIndex]] is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; <var>match</var>.[[StartIndex]] and &#8804; the length of <var>S</var>.</li><li>Return the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>match</var>.[[StartIndex]] to <var>match</var>.[[EndIndex]].</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-no-lineterminator-here-automatic-semicolon-insertion-list": {"num": "12.9.3.2.1", "title": "#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">#sec-no-lineterminator-here-automatic-semicolon-insertion-list</span> List of Grammar Productions with Optional Operands and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n          <ul>\n            <li><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li>\n            <li><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt>.</li>\n            <li><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</li>\n            <li><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt>.</li>\n            <li><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>.</li>\n            <li>Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>) with relation to Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>)</li>\n          </ul>\n        </emu-clause>\n      "}, "sec-asi-cases-with-no-lineterminator-here": {"num": "12.9.3.2", "title": "#sec-asi-cases-with-no-lineterminator-here Cases of Automatic Semicolon Insertion and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-asi-cases-with-no-lineterminator-here\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-cases-with-no-lineterminator-here\">#sec-asi-cases-with-no-lineterminator-here</span> Cases of Automatic Semicolon Insertion and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n        <em>This section is non-normative.</em>\n        <p>ECMAScript contains grammar productions which include &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;. These productions are sometimes a means to have optional operands in the grammar. Introducing a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> in these locations would change the grammar production of a source text by using the grammar production without the optional operand.</p>\n\n        <p>The rest of this section describes a number of productions using &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; in this version of ECMAScript.</p>\n        <div id=\"excluded-sec-no-lineterminator-here-automatic-semicolon-insertion-list\"><h1><span class=\"secnum\">12.9.3.2.1</span>#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and &#8220;[no LineTerminator here]&#8221;</h1>...</div></emu-clause>\n    "}, "sec-getmatchindicesarray": {"num": "22.2.5.2.7", "title": "#sec-getmatchindicesarray GetMatchIndicesArray ( S, match )", "html": "<emu-clause id=\"sec-getmatchindicesarray\" aoid=\"GetMatchIndicesArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmatchindicesarray\">#sec-getmatchindicesarray</span> GetMatchIndicesArray ( <var>S</var>, <var>match</var> )</h1>\n          <p>The abstract operation GetMatchIndicesArray takes arguments <var>S</var> (a String) and <var>match</var> (a <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match Record</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>match</var>.[[StartIndex]] is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0 and &lt; the length of <var>S</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>match</var>.[[EndIndex]] is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; <var>match</var>.[[StartIndex]] and &#8804; the length of <var>S</var>.</li><li>Return !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>match</var>.[[StartIndex]]), <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>match</var>.[[EndIndex]]) &#187;).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-get-regexp.prototype.flags": {"num": "22.2.5.4", "title": "#sec-get-regexp.prototype.flags get RegExp.prototype.flags", "html": "<emu-clause id=\"sec-get-regexp.prototype.flags\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp.prototype.flags\">#sec-get-regexp.prototype.flags</span> get RegExp.prototype.flags</h1>\n        <p><code>RegExp.prototype.flags</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>result</var> be the empty String.</li><li>Let <var>hasIndices</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"hasIndices\"</emu-val>)).</li><li>If <var>hasIndices</var> is <emu-val>true</emu-val>, append the code unit 0x0064 (LATIN SMALL LETTER D) as the last code unit of <var>result</var>.</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>true</emu-val>, append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of <var>result</var>.</li><li>Let <var>ignoreCase</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"ignoreCase\"</emu-val>)).</li><li>If <var>ignoreCase</var> is <emu-val>true</emu-val>, append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of <var>result</var>.</li><li>Let <var>multiline</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"multiline\"</emu-val>)).</li><li>If <var>multiline</var> is <emu-val>true</emu-val>, append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of <var>result</var>.</li><li>Let <var>dotAll</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"dotAll\"</emu-val>)).</li><li>If <var>dotAll</var> is <emu-val>true</emu-val>, append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of <var>result</var>.</li><li>Let <var>unicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>If <var>unicode</var> is <emu-val>true</emu-val>, append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of <var>result</var>.</li><li>Let <var>sticky</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"sticky\"</emu-val>)).</li><li>If <var>sticky</var> is <emu-val>true</emu-val>, append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of <var>result</var>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asi-interesting-cases-in-statement-lists": {"num": "12.9.3.1", "title": "#sec-asi-interesting-cases-in-statement-lists Interesting Cases of Automatic Semicolon Insertion in Statement Lists", "html": "<emu-clause id=\"sec-asi-interesting-cases-in-statement-lists\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asi-interesting-cases-in-statement-lists\">#sec-asi-interesting-cases-in-statement-lists</span> Interesting Cases of Automatic Semicolon Insertion in Statement Lists</h1>\n        <p>In a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, many <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s end in semicolons, which may be omitted using automatic semicolon insertion. As a consequence of the rules above, at the end of a line ending an expression, a semicolon is required if the following line begins with any of the following:</p>\n        <ul>\n          <li><strong>An opening parenthesis (<code>(</code>)</strong>. Without a semicolon, the two lines together are treated as a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li>\n          <li><strong>An opening square bracket (<code>[</code>)</strong>. Without a semicolon, the two lines together are treated as property access, rather than an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or <emu-nt><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a></emu-nt>.</li>\n          <li><strong>A template literal (<code>`</code>)</strong>. Without a semicolon, the two lines together are interpreted as a tagged Template (<emu-xref href=\"#sec-tagged-templates\"><a href=\"#sec-tagged-templates\" class=\"excluded-xref\" excluded-id=\"sec-tagged-templates\">#sec-tagged-templates</a></emu-xref>), with the previous expression as the <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li>\n          <li><strong>Unary <code>+</code> or <code>-</code></strong>. Without a semicolon, the two lines together are interpreted as a usage of the corresponding binary operator.</li>\n          <li><strong>A RegExp literal</strong>. Without a semicolon, the two lines together may be parsed instead as the <code>/</code> <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt>, for example if the RegExp has flags.</li>\n        </ul>\n      </emu-clause>\n      "}, "sec-advancestringindex": {"num": "22.2.5.2.3", "title": "#sec-advancestringindex AdvanceStringIndex ( S, index, unicode )", "html": "<emu-clause id=\"sec-advancestringindex\" aoid=\"AdvanceStringIndex\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-advancestringindex\">#sec-advancestringindex</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</h1>\n          <p>The abstract operation AdvanceStringIndex takes arguments <var>S</var> (a String), <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>unicode</var> (a Boolean). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>index</var> &#8804; 2<sup>53</sup> - 1.</li><li>If <var>unicode</var> is <emu-val>false</emu-val>, return <var>index</var> + 1.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>If <var>index</var> + 1 &#8805; <var>length</var>, return <var>index</var> + 1.</li><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>S</var>, <var>index</var>).</li><li>Return <var>index</var> + <var>cp</var>.[[CodeUnitCount]].</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-match-records": {"num": "22.2.5.2.5", "title": "#sec-match-records Match Records", "html": "<emu-clause id=\"sec-match-records\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-match-records\">#sec-match-records</span> Match Records</h1>\n          <p>A <dfn>Match Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to encapsulate the start and end indices of a regular expression match or capture.</p>\n          <p>Match Records have the fields listed in <emu-xref href=\"#table-match-record\"><a href=\"#table-match-record\" class=\"excluded-xref\" excluded-id=\"table-match-record\">#table-match-record</a></emu-xref>.</p>\n          <emu-table id=\"table-match-record\" caption=\"Match Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-match-record\">#table-match-record</span>: <emu-xref href=\"#sec-match-records\"><a href=\"#sec-match-records\">Match Record</a></emu-xref> Fields</figcaption>\n            <table>\n              <tbody>\n                <tr>\n                  <th>Field Name</th>\n                  <th>Value</th>\n                  <th>Meaning</th>\n                </tr>\n                <tr>\n                  <td>[[StartIndex]]</td>\n                  <td>An <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8805; 0.</td>\n                  <td>The number of code units from the start of a string at which the match begins (inclusive).</td>\n                </tr>\n                <tr>\n                  <td>[[EndIndex]]</td>\n                  <td>An <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8805; [[StartIndex]].</td>\n                  <td>The number of code units from the start of a string at which the match ends (exclusive).</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}}, "figData": {"table-match-record": "Table 60"}}}