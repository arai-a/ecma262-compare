{"from": {"secList": ["sec-ecmascript-language-types-string-type"], "secData": {"sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>53</sup> - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined by the Unicode Standard as a <dfn id=\"leading-surrogate\">leading surrogate</dfn>, or more formally as a <dfn id=\"high-surrogate-code-unit\">high-surrogate code unit</dfn>) and every code unit with a numeric value in the inclusive range 0xDC00 to 0xDFFF (defined as a <dfn id=\"trailing-surrogate\">trailing surrogate</dfn>, or more formally as a <dfn id=\"low-surrogate-code-unit\">low-surrogate code unit</dfn>) using the following rules:</p>\n      <ul>\n        <li>\n          A code unit that is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref> is interpreted as a code point with the same value.\n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and the second code unit <var>c2</var> a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, is a <dfn id=\"surrogate-pair\">surrogate pair</dfn> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See <emu-xref href=\"#sec-utf16decodesurrogatepair\"><a href=\"#sec-utf16decodesurrogatepair\" class=\"excluded-xref\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</a></emu-xref>)\n        </li>\n        <li>\n          A code unit that is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        </li>\n      </ul>\n      <p>The function <code>String.prototype.normalize</code> (see <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>In this specification, the phrase \"the <dfn>string-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a String value, a code unit, or a sequence of code units) denotes the String value whose sequence of code units is the concatenation of the code units (in order) of each of the arguments (in order).</p>\n\n      <div id=\"excluded-sec-stringindexof\"><h1><span class=\"secnum\">6.1.4.1</span>#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-ecmascript-language-types-string-type"], "secData": {"sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>53</sup> - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined by the Unicode Standard as a <dfn id=\"leading-surrogate\">leading surrogate</dfn>, or more formally as a <dfn id=\"high-surrogate-code-unit\">high-surrogate code unit</dfn>) and every code unit with a numeric value in the inclusive range 0xDC00 to 0xDFFF (defined as a <dfn id=\"trailing-surrogate\">trailing surrogate</dfn>, or more formally as a <dfn id=\"low-surrogate-code-unit\">low-surrogate code unit</dfn>) using the following rules:</p>\n      <ul>\n        <li>\n          A code unit that is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref> is interpreted as a code point with the same value.\n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and the second code unit <var>c2</var> a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, is a <dfn id=\"surrogate-pair\">surrogate pair</dfn> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See <emu-xref href=\"#sec-utf16decodesurrogatepair\"><a href=\"#sec-utf16decodesurrogatepair\" class=\"excluded-xref\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</a></emu-xref>)\n        </li>\n        <li>\n          A code unit that is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        </li>\n      </ul>\n      <p>The function <code>String.prototype.normalize</code> (see <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>In this specification, the phrase \"the <dfn id=\"string-concatenation\">string-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a String value, a code unit, or a sequence of code units) denotes the String value whose sequence of code units is the concatenation of the code units (in order) of each of the arguments (in order).</p>\n\n      <div id=\"excluded-sec-stringindexof\"><h1><span class=\"secnum\">6.1.4.1</span>#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}}