{"from": {"secList": ["sec-numeric-types-number-leftShift"], "secData": {"sec-numeric-types-number-leftShift": {"num": "6.1.6.1.9", "title": "#sec-numeric-types-number-leftShift Number::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-leftShift\">#sec-numeric-types-number-leftShift</span> Number::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::leftShift takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>y</var>).</li><li>Let <var>shiftCount</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>rnum</var>) <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 32.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the result of left shifting <var>lnum</var> by <var>shiftCount</var> bits. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the result is exactly representable as a 32-bit two's complement bit string.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-numeric-types-number-leftShift"], "secData": {"sec-numeric-types-number-leftShift": {"num": "6.1.6.1.9", "title": "#sec-numeric-types-number-leftShift Number::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-leftShift\">#sec-numeric-types-number-leftShift</span> Number::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::leftShift takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>y</var>).</li><li>Let <var>shiftCount</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>rnum</var>) <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 32.</li><li>Return the result of left shifting <var>lnum</var> by <var>shiftCount</var> bits. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the result is exactly representable as a 32-bit two's complement bit string.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}