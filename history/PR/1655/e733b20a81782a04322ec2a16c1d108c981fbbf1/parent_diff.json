{"from": {"secList": ["sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-copydataproperties", "sec-static-semantics-static-semantics-isfunctiondefinition", "sec-expression-rules", "sec-expressions", "sec-identifier-names-static-semantics-stringvalue", "sec-blockdeclarationinstantiation", "sec-delete-operator-static-semantics-early-errors", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-async-function-definitions-InstantiateFunctionObject", "sec-ecmascript-function-objects", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-getvalue", "sec-lexical-grammar", "sec-identifier-names", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-module-semantics-static-semantics-early-errors", "sec-functions-and-classes", "sec-runtime-semantics-classdefinitionevaluation", "sec-property-accessors-runtime-semantics-evaluation", "sec-setfunctionname", "sec-class-definitions-static-semantics-early-errors", "sec-prepareforordinarycall", "sec-asyncgenerator-definitions-evaluation", "sec-functioninitialize", "sec-createdynamicfunction", "sec-putvalue", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-static-semantics-static-semantics-isdestructuring", "sec-runtime-semantics-scriptevaluation", "sec-class-definitions-static-semantics-computedpropertycontains", "sec-operations-on-objects", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-functiondeclarationinstantiation", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-async-function-definitions", "sec-super-keyword-runtime-semantics-evaluation", "sec-initializereferencedbinding", "sec-generatorfunctioncreate", "sec-class-definitions", "sec-static-semantics-isstatic", "sec-async-function-definitions-EvaluateBody", "sec-runtime-semantics-definemethod", "sec-source-text-module-record-initialize-environment", "sec-functioncreate", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-evaldeclarationinstantiation", "sec-tokens", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-execution-contexts", "sec-async-functions-abstract-operations-async-function-create", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-scripts-static-semantics-early-errors", "sec-reference-specification-type", "sec-asyncgeneratorfunctioncreate", "sec-delete-operator-runtime-semantics-evaluation", "sec-left-hand-side-expressions", "sec-object-internal-methods-and-internal-slots", "sec-class-definitions-static-semantics-propname", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-performeval", "sec-data-blocks", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-static-semantics-static-semantics-isidentifierref", "sec-ecmascript-specification-types"], "secData": {"sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>\"get\"</code>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>\"set\"</code>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-copydataproperties": {"num": "7.3.24", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>When the abstract operation CopyDataProperties is called with arguments <var>target</var>, <var>source</var>, and <var>excludedItems</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>excludedItems</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys.</li><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n  "}, "sec-static-semantics-static-semantics-isfunctiondefinition": {"num": "12.3.1.3", "title": "#sec-static-semantics-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isfunctiondefinition\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isfunctiondefinition\">#sec-static-semantics-static-semantics-isfunctiondefinition</span> Static Semantics: IsFunctionDefinition</h1>\n        <emu-see-also-para op=\"IsFunctionDefinition\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-expression-rules": {"num": "14.9.2.2", "title": "#sec-expression-rules Expression Rules", "html": "<emu-clause id=\"sec-expression-rules\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expression-rules\">#sec-expression-rules</span> Expression Rules</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A potential tail position call that is immediately followed by return <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref> of the call result is also a possible tail position call. Function calls cannot return reference values, so such a <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref> operation will always return the same value as the actual function call result.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentExpression\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5202c84b\"><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2bdf3b10\"><emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b79045b\"><emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a90dedc2\"><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseXORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b463172c\"><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"016dfa90\"><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EqualityExpression\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"RelationalExpression\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ShiftExpression\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AdditiveExpression\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MultiplicativeExpression\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExponentiationExpression\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UpdateExpression\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnaryExpression\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5d8038f\"><emu-t>void</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b49039a\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a03cca5c\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"07d36a79\"><emu-t>~</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8b0af72\"><emu-t>!</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"48794e9a\"><emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Expression\">\n    <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0b039a65\"><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ConditionalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42ec48bb\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>has</var> be HasCallInTailPosition of the first <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasCallInTailPosition of the second <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LogicalANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2186e2aa\"><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LogicalORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b6453dd9\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <var>call</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <var>call</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return HasCallInTailPosition of <var>expr</var> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ParenthesizedExpression\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ba6ef9d\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-expressions": {"num": "A.2", "title": "#sec-expressions Expressions", "html": "<emu-annex id=\"sec-expressions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expressions\">#sec-expressions</span> Expressions</h1>\n    <emu-production name=\"IdentifierReference\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cce6c4d9\" constraints=\"~Yield\"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"7723c826\" constraints=\"~Await\"><emu-constraints>[~Await]</emu-constraints><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingIdentifier\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Identifier\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelIdentifier\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cce6c4d9\" constraints=\"~Yield\"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"7723c826\" constraints=\"~Await\"><emu-constraints>[~Await]</emu-constraints><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PrimaryExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2fcfe2d0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ecf2121c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2508abde\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"493a5b25\"><emu-nt params=\"?Yield, ?Await, ~Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, ~Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverParenthesizedExpressionAndArrowParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"103ea770\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"95866f7d\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"a62ae549\"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"496a4160\"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"db5a5b9b\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"a8ec9f3e\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production  <emu-production name=\"PrimaryExpression\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ParenthesizedExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"103ea770\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"Literal\">\n    <emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"54f84188\"><emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3508e1fd\"><emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayLiteral\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"5d65623a\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"14bb78d1\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"306f3a14\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"05939ab1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e9492888\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9cd00eda\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Elision\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"SpreadElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectLiteral\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"4200417f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"0731c59c\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyDefinitionList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9b4b46b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"afd4e913\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"68f5ac08\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e73ae371\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e71e2304\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f44b65f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LiteralPropertyName\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ComputedPropertyName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e3cff7e5\"><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverInitializedName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"85c0d9fd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Initializer\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc616ce5\"><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"069aff93\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"de941338\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"db7fc148\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6dd46bd2\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MemberExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"669d9e8f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"46700b57\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"fea749a8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e3a714cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"83d44750\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8554289\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SuperProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7f66819f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MetaProperty\">\n    <emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"733bdb20\"><emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NewExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"55b72ef4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8b27ffb1\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CallExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5c60d05\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d766951c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd0d9a85\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"24037841\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f1fcc490\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c4dd808\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production  <emu-production name=\"CallExpression\" params=\"Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"CallMemberExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n\n    <emu-production name=\"SuperCall\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6b5bb3dd\"><emu-t>super</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportCall\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b3f5031f\"><emu-t>import</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Arguments\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"668c9409\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"c520166a\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArgumentList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8f532861\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2ab72a4a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d6f13c65\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LeftHandSideExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a89347cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8699f68d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UpdateExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1063e6f2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"c40a0c36\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"e14f8c68\"><emu-t>++</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"994b46fb\"><emu-t>--</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnaryExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9511ff89\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a87e936a\"><emu-t>delete</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"7774f70f\"><emu-t>void</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"693155d5\"><emu-t>typeof</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d735fe16\"><emu-t>+</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2de86f5f\"><emu-t>-</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"995c05b5\"><emu-t>~</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0a6edf36\"><emu-t>!</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0c541d06\" constraints=\"+Await\"><emu-constraints>[+Await]</emu-constraints><emu-nt params=\"?Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentiationExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f16b387c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"48e152b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>**</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiplicativeExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"677909b0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c0a3a33f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiplicativeOperator\" oneof=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*</emu-t><emu-t>/</emu-t><emu-t>%</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AdditiveExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f6af3d13\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"79f3759c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>+</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e309a7b9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>-</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ShiftExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e6661e6a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"211de3c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0c11aafb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cb144d91\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RelationalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"12fcef98\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4699dc26\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e2226dd2\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"45a2035d\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;=</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8dbaec1\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;=</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a60d81a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>instanceof</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b629d07c\" constraints=\"+In\"><emu-constraints>[+In]</emu-constraints><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"EqualityExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9280448d\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8d7a6c47\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>==</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"20f203e6\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>!=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"17b08b45\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>===</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f9056ff\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>!==</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseANDExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5c5abb87\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"969f6da7\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&amp;</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseXORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a8caf125\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d7124a93\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>^</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"24ec6c16\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad046143\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>|</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LogicalANDExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0bfde639\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1a88a9db\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LogicalORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b886f268\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"276ba099\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>||</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConditionalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71405bab\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa7f1805\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>?</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82aa12dc\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5d4d9305\" constraints=\"+Yield\"><emu-constraints>[+Yield]</emu-constraints><emu-nt params=\"?In, ?Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[?In, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"336dea1a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"de1f51e8\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dc2bc97e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>In certain circumstances when processing an instance of the production  <emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\" a=\"assignment\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>:</p>\n    <emu-production name=\"AssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ed6d3857\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4b6571dd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectAssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"6cdfdd77\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"a1f0237d\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"740e1b2f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayAssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4b8cdf0a\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"9852bd8c\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"01eac6e6\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentRestProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentPropertyList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0fb6d7ae\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37340e0a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e75e8ef0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6d59619d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElisionElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"72fd00bc\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c02b6a90\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37ae7a6f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8c5631c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentRestElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DestructuringAssignmentTarget\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AssignmentOperator\" oneof=\"\">\n    <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*=</emu-t><emu-t>/=</emu-t><emu-t>%=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>^=</emu-t><emu-t>|=</emu-t><emu-t>**=</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Expression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d38e21c\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a2892296\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-identifier-names-static-semantics-stringvalue": {"num": "11.6.1.2", "title": "#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names-static-semantics-stringvalue\">#sec-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the String value consisting of the sequence of code units corresponding to <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>. In determining the sequence any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> are first replaced with the code point represented by the <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> and then the code points of the entire <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are converted to code units by <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> each code point.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>BlockDeclarationInstantiation is performed as follows using arguments <var>code</var> and <var>env</var>. <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> in which bindings are to be created.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-delete-operator-static-semantics-early-errors": {"num": "12.5.3.1", "title": "#sec-delete-operator-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-delete-operator-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the derived <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is  <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n          \n          </li>\n          <li>\n            <p>It is a Syntax Error if the derived <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is\n              \n              <br>\n              <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n              <br>\n              and <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> ultimately derives a phrase that, if used in place of <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>, would produce a Syntax Error according to these rules. This rule is recursively applied.</p>\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The last rule means that expressions such as <code>delete (((foo)))</code> produce early errors because of recursive application of the first rule.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%Object.prototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>\"base\"</code>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>\"base\"</code>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FunctionKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"normal\"</code>, <code>\"classConstructor\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"base\"</code> or <code>\"derived\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            (lexical, strict, global)\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-functionallocate\"><h1><span class=\"secnum\">9.2.3</span>#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )</h1>...</div><div id=\"excluded-sec-functioninitialize\"><h1><span class=\"secnum\">9.2.4</span>#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-functioncreate\"><h1><span class=\"secnum\">9.2.5</span>#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )</h1>...</div><div id=\"excluded-sec-generatorfunctioncreate\"><h1><span class=\"secnum\">9.2.6</span>#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunctioncreate\"><h1><span class=\"secnum\">9.2.7</span>#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-async-functions-abstract-operations-async-function-create\"><h1><span class=\"secnum\">9.2.8</span>#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.9</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.10</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.11</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.12</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.13</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.14</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.15</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-getvalue": {"num": "6.2.4.8", "title": "#sec-getvalue GetValue ( V )", "html": "<emu-clause id=\"sec-getvalue\" aoid=\"GetValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvalue\">#sec-getvalue</span> GetValue ( <var>V</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <var>V</var>.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Set <var>base</var> to !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>Return ? <var>base</var>.[[Get]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.GetBindingValue(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step 5.a.ii is not accessible outside of the above abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-lexical-grammar": {"num": "A.1", "title": "#sec-lexical-grammar Lexical Grammar", "html": "<emu-annex id=\"sec-lexical-grammar\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-grammar\">#sec-lexical-grammar</span> Lexical Grammar</h1>\n    <emu-production name=\"SourceCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementDiv\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementRegExp\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementTemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"WhiteSpace\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"819ea3fd\"><emu-gprose>&lt;TAB&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"156dc7da\"><emu-gprose>&lt;VT&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"77b516c0\"><emu-gprose>&lt;FF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"6a85afed\"><emu-gprose>&lt;SP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"63dd44af\"><emu-gprose>&lt;NBSP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"b09e901a\"><emu-gprose>&lt;ZWNBSP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"e7de22a4\"><emu-gprose>&lt;USP&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineTerminator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"6bb44f60\"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineTerminatorSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"64077750\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gann>[lookahead &#8800; <emu-gprose>&lt;LF&gt;</emu-gprose>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"253de229\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"Comment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b221187a\"><emu-nt><a href=\"#prod-MultiLineComment\">MultiLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"49272b29\"><emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineComment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineComment\">MultiLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1e164ceb\"><emu-t>/*</emu-t><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>*/</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"24a6effb\"><emu-nt><a href=\"#prod-MultiLineNotAsteriskChar\">MultiLineNotAsteriskChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6fcb6b58\"><emu-t>*</emu-t><emu-nt optional=\"\"><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PostAsteriskCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25615007\"><emu-nt><a href=\"#prod-MultiLineNotForwardSlashOrAsteriskChar\">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6fcb6b58\"><emu-t>*</emu-t><emu-nt optional=\"\"><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineNotAsteriskChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineNotAsteriskChar\">MultiLineNotAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9452de17\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-t>*</emu-t></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineNotForwardSlashOrAsteriskChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineNotForwardSlashOrAsteriskChar\">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1dd7e7ae\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>/</emu-t> or <emu-t>*</emu-t></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineComment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"53edd61c\"><emu-t>//</emu-t><emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4521d447\"><emu-nt><a href=\"#prod-SingleLineCommentChar\">SingleLineCommentChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineCommentChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineCommentChar\">SingleLineCommentChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d5bdfa7\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"CommonToken\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee18f3d6\"><emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3ec1ae06\"><emu-nt><a href=\"#prod-Template\">Template</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierStart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0862e30c\"><emu-nt><a href=\"#prod-UnicodeIDStart\">UnicodeIDStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n    <emu-rhs a=\"07564b94\"><emu-t>_</emu-t></emu-rhs>\n    <emu-rhs a=\"6fbc8b19\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierPart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"364ac675\"><emu-nt><a href=\"#prod-UnicodeIDContinue\">UnicodeIDContinue</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n    <emu-rhs a=\"6fbc8b19\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a321d28b\"><emu-gprose>&lt;ZWNJ&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"9543f0aa\"><emu-gprose>&lt;ZWJ&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeIDStart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeIDStart\">UnicodeIDStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e41f30c8\"><emu-gprose>any Unicode code point with the Unicode property &#8220;ID_Start&#8221;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeIDContinue\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeIDContinue\">UnicodeIDContinue</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"db14546f\"><emu-gprose>any Unicode code point with the Unicode property &#8220;ID_Continue&#8221;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"ReservedWord\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a3926e03\"><emu-nt><a href=\"#prod-Keyword\">Keyword</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9d71bdc1\"><emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"54f84188\"><emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3508e1fd\"><emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Keyword\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-Keyword\">Keyword</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>await</emu-t><emu-t>break</emu-t><emu-t>case</emu-t><emu-t>catch</emu-t><emu-t>class</emu-t><emu-t>const</emu-t><emu-t>continue</emu-t><emu-t>debugger</emu-t><emu-t>default</emu-t><emu-t>delete</emu-t><emu-t>do</emu-t><emu-t>else</emu-t><emu-t>export</emu-t><emu-t>extends</emu-t><emu-t>finally</emu-t><emu-t>for</emu-t><emu-t>function</emu-t><emu-t>if</emu-t><emu-t>import</emu-t><emu-t>in</emu-t><emu-t>instanceof</emu-t><emu-t>new</emu-t><emu-t>return</emu-t><emu-t>super</emu-t><emu-t>switch</emu-t><emu-t>this</emu-t><emu-t>throw</emu-t><emu-t>try</emu-t><emu-t>typeof</emu-t><emu-t>var</emu-t><emu-t>void</emu-t><emu-t>while</emu-t><emu-t>with</emu-t><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FutureReservedWord\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4fb2fe95\"><emu-t>enum</emu-t></emu-rhs>\n</emu-production>\n    <p>The following tokens are also considered to be <emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt>s when parsing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>:</p>\n    <p><emu-t>implements</emu-t> &#160;<emu-t>package</emu-t> &#160;<emu-t>protected</emu-t><br>\n      <emu-t>interface</emu-t> &#160;<emu-t>private</emu-t> &#160;<emu-t>public</emu-t>\n    </p>\n    <p>&#160;</p>\n    <emu-production name=\"Punctuator\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>{</emu-t><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>[</emu-t><emu-t>]</emu-t><emu-t>.</emu-t><emu-t>...</emu-t><emu-t>;</emu-t><emu-t>,</emu-t><emu-t>&lt;</emu-t><emu-t>&gt;</emu-t><emu-t>&lt;=</emu-t><emu-t>&gt;=</emu-t><emu-t>==</emu-t><emu-t>!=</emu-t><emu-t>===</emu-t><emu-t>!==</emu-t><emu-t>+</emu-t><emu-t>-</emu-t><emu-t>*</emu-t><emu-t>%</emu-t><emu-t>**</emu-t><emu-t>++</emu-t><emu-t>--</emu-t><emu-t>&lt;&lt;</emu-t><emu-t>&gt;&gt;</emu-t><emu-t>&gt;&gt;&gt;</emu-t><emu-t>&amp;</emu-t><emu-t>|</emu-t><emu-t>^</emu-t><emu-t>!</emu-t><emu-t>~</emu-t><emu-t>&amp;&amp;</emu-t><emu-t>||</emu-t><emu-t>?</emu-t><emu-t>:</emu-t><emu-t>=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>*=</emu-t><emu-t>%=</emu-t><emu-t>**=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>|=</emu-t><emu-t>^=</emu-t><emu-t>=&gt;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"DivPunctuator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d3fd5f53\"><emu-t>/</emu-t></emu-rhs>\n    <emu-rhs a=\"2e077fe3\"><emu-t>/=</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"RightBracePunctuator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"255cb7fd\"><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NullLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"77b50868\"><emu-t>null</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BooleanLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fa30b8c6\"><emu-t>true</emu-t></emu-rhs>\n    <emu-rhs a=\"23d2c69d\"><emu-t>false</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NumericLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d3d71ddd\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"832f57ee\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d0c4a66\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fb5198a6\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cf3aa35\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"13dbaf21\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n    <emu-rhs a=\"2353f0a3\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f250657\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentPart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7f837518\"><emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentIndicator\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>e</emu-t><emu-t>E</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"SignedInteger\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3bd7fe57\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"58000348\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"600d7817\"><emu-t>0b</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7c1f17d9\"><emu-t>0B</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5f1ee23\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82aa7443\"><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8056cb0\"><emu-t>0o</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a3652fa\"><emu-t>0O</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"99bc1d53\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37a295fe\"><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cf154180\"><emu-t>0x</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ef756f3\"><emu-t>0X</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a0c48a71\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t><emu-t>a</emu-t><emu-t>b</emu-t><emu-t>c</emu-t><emu-t>d</emu-t><emu-t>e</emu-t><emu-t>f</emu-t><emu-t>A</emu-t><emu-t>B</emu-t><emu-t>C</emu-t><emu-t>D</emu-t><emu-t>E</emu-t><emu-t>F</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"StringLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"15d8b1f1\"><emu-t>\"</emu-t><emu-nt optional=\"\"><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>\"</emu-t></emu-rhs>\n    <emu-rhs a=\"82ecb3d9\"><emu-t>'</emu-t><emu-nt optional=\"\"><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>'</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoubleStringCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8bdabc77\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleStringCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"17d28457\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoubleStringCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleStringCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineContinuation\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"EscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6964a19d\"><emu-t>0</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CharacterEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleEscapeCharacter\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>\"</emu-t><emu-t>\\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NonEscapeCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"EscapeCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"150383a9\"><emu-t>x</emu-t></emu-rhs>\n    <emu-rhs a=\"8c2e6655\"><emu-t>u</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Hex4Digits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5778053b\"><emu-t>/</emu-t><emu-nt><a href=\"#prod-RegularExpressionBody\">RegularExpressionBody</a></emu-nt><emu-t>/</emu-t><emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionBody\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionBody\">RegularExpressionBody</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bba7969e\"><emu-nt><a href=\"#prod-RegularExpressionFirstChar\">RegularExpressionFirstChar</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a9881cec\"><emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionChar\">RegularExpressionChar</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionFirstChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionFirstChar\">RegularExpressionFirstChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"da1b0c0a\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>*</emu-t> or <emu-t>\\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cc6858e\"><emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionChar\">RegularExpressionChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0c3ff14\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>\\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cc6858e\"><emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionBackslashSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d7656bad\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionNonTerminator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d5bdfa7\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClass\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c1bc40a\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClassChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"76bdcb05\"><emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionClassChar\">RegularExpressionClassChar</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClassChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClassChar\">RegularExpressionClassChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7fd10851\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>]</emu-t> or <emu-t>\\</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionFlags\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"fceefdcd\"><emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Template\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Template\">Template</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab9a4b96\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"056f5c6b\"><emu-t>`</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateHead\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bfb172fc\"><emu-t>`</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateSubstitutionTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ccbc035d\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateMiddle\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37635b4e\"><emu-t>}</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fcef5bc0\"><emu-t>}</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f8c26ac5\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"03c3b542\"><emu-t>$</emu-t><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"544825da\"><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"NotEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c247e196\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"372f5e0d\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-gmod>but not <emu-t>0</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"e6c4f6ee\"><emu-t>x</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"92cdf202\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a16001b3\"><emu-t>u</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"f7d3e8d4\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"4ea47d3d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"45170c27\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"5427e268\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"0c957f40\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"ab5a798c\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>}</emu-t>]</emu-gann></emu-rhs>\n</emu-production>\n    <emu-production name=\"NotCodePoint\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5aeddbfc\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-gmod>but only if MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &gt; 0x10FFFF </emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"CodePoint\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"deeeb60d\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-gmod>but only if MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#8804; 0x10FFFF </emu-gmod></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-identifier-names": {"num": "11.6.1", "title": "#sec-identifier-names Identifier Names", "html": "<emu-clause id=\"sec-identifier-names\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names\">#sec-identifier-names</span> Identifier Names</h1>\n\n      <div id=\"excluded-sec-identifier-names-static-semantics-early-errors\"><h1><span class=\"secnum\">11.6.1.1</span>#sec-identifier-names-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-identifier-names-static-semantics-stringvalue\"><h1><span class=\"secnum\">11.6.1.2</span>#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.6", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-module-semantics-static-semantics-early-errors": {"num": "15.2.1.1", "title": "#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-early-errors\">#sec-module-semantics-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"ModuleBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89010d7d\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          \n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if the ExportedNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          \n          </li>\n          <li>\n            It is a Syntax Error if any element of the ExportedBindings of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> does not also occur in either the VarDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>, or the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <code>super</code>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The duplicate ExportedNames rule implies that multiple <code>export default</code> <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> items within a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> is a Syntax Error. Additional error conditions relating to conflicting or duplicate declarations are checked during module linking prior to evaluation of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. If any such errors are detected the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is not evaluated.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"67ce9873\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Yield, ~Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <p>When the production  <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bb50dce4\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4fc9a6b0\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Yield, +Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6ccf9be6\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <p>When the production  <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c9d14bfe\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"19d49312\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\"><emu-t>get</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"55774850\"><emu-t>set</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"54505152\"><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e7a001a0\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"65253812\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a713bc4f\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bf1795ae\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ca1d1606\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a922691e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f512250e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c25b1d19\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"be6457e0\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"afef225f\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd578cac\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2d0a98e\"><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7989e09f\"><emu-t>extends</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\"><emu-t>static</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.13", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var></li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <code>\"derived\"</code>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-property-accessors-runtime-semantics-evaluation": {"num": "12.3.2.1", "title": "#sec-property-accessors-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-property-accessors-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-accessors-runtime-semantics-evaluation\">#sec-property-accessors-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar> except that the contained <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is evaluated in step 1.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> except that the contained <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is evaluated in step 1.</p>\n      </emu-clause>\n    "}, "sec-setfunctionname": {"num": "9.2.13", "title": "#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )", "html": "<emu-clause id=\"sec-setfunctionname\" aoid=\"SetFunctionName\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setfunctionname\">#sec-setfunctionname</span> SetFunctionName ( <var>F</var>, <var>name</var> [ , <var>prefix</var> ] )</h1>\n      <p>The abstract operation SetFunctionName requires a Function argument <var>F</var>, a String or Symbol argument <var>name</var> and optionally a String argument <var>prefix</var>. This operation adds a <code>name</code> property to <var>F</var> by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <code>name</code> own property.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is either Symbol or String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>prefix</var> is present, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prefix</var>) is String.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is Symbol, then<ol><li>Let <var>description</var> be <var>name</var>'s [[Description]] value.</li><li>If <var>description</var> is <emu-val>undefined</emu-val>, set <var>name</var> to the empty String.</li><li>Else, set <var>name</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"[\"</code>, <var>description</var>, and <code>\"]\"</code>.</li></ol></li><li>If <var>prefix</var> is present, then<ol><li>Set <var>name</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, the code unit 0x0020 (SPACE), and <var>name</var>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"name\"</code>, PropertyDescriptor { [[Value]]: <var>name</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-static-semantics-early-errors": {"num": "14.6.1", "title": "#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2e8467f\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is not present and the following algorithm evaluates to <emu-val>true</emu-val>:</p>\n          <emu-alg><ol><li>Let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, return <emu-val>false</emu-val>.</li><li>Return HasDirectSuper of <var>constructor</var>.\n          </li></ol></emu-alg>\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d72d43ba\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PrototypePropertyNameList of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains more than one occurrence of <code>\"constructor\"</code>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not <code>\"constructor\"</code> and HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <code>\"constructor\"</code> and SpecialMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <code>\"prototype\"</code>.\n        \n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-prepareforordinarycall": {"num": "9.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>When the abstract operation PrepareForOrdinaryCall is called with <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>newTarget</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-functioninitialize": {"num": "9.2.4", "title": "#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-functioninitialize\" aoid=\"FunctionInitialize\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioninitialize\">#sec-functioninitialize</span> FunctionInitialize ( <var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation FunctionInitialize requires the arguments: a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. FunctionInitialize performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <code>\"normal\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <code>\"normal\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Function.prototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"async\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunction.prototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"async generator\"</code>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyText</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <code>\"generator\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <code>\"async\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>).</li><li>If <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"async generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"normal\"</code>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>prototype</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><code>\"normal\"</code></td><td><code>\"function\"</code></td></tr>\n                <tr><td><code>\"generator\"</code></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><code>\"async\"</code></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><code>\"async generator\"</code></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-putvalue": {"num": "6.2.4.9", "title": "#sec-putvalue PutValue ( V, W )", "html": "<emu-clause id=\"sec-putvalue\" aoid=\"PutValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-putvalue\">#sec-putvalue</span> PutValue ( <var>V</var>, <var>W</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Let <var>globalObj</var> be <emu-xref aoid=\"GetGlobalObject\"><a href=\"#sec-getglobalobject\">GetGlobalObject</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObj</var>, <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else if <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Set <var>base</var> to !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>Let <var>succeeded</var> be ? <var>base</var>.[[Set]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.SetMutableBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step 6.a.ii is not accessible outside of the above algorithm and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-isdestructuring": {"num": "12.3.1.4", "title": "#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isdestructuring\">#sec-static-semantics-static-semantics-isdestructuring</span> Static Semantics: IsDestructuring</h1>\n        <emu-see-also-para op=\"IsDestructuring\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ef72f7a\"><emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> is either an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-scriptevaluation": {"num": "15.1.10", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptCxt</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptCxt</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptCxt</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>scriptCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-static-semantics-computedpropertycontains": {"num": "14.6.5", "title": "#sec-class-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-computedpropertycontains\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-computedpropertycontains\">#sec-class-definitions-static-semantics-computedpropertycontains</span> Static Semantics: ComputedPropertyContains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <emu-see-also-para op=\"ComputedPropertyContains\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>inList</var> be ComputedPropertyContains of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>symbol</var>.</li><li>If <var>inList</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.1</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.2</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.3</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.4</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.6</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.9</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.10</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.12</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.13</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.14</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.16</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.17</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.19</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.20</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.21</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.22</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.23</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.24</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div></emu-clause>\n\n  "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.16", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-functiondeclarationinstantiation": {"num": "9.2.15", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>FunctionDeclarationInstantiation is performed as follows using arguments <var>func</var> and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <code>\"arguments\"</code> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <code>\"arguments\"</code> is an element of <var>functionNames</var> or if <code>\"arguments\"</code> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>envRec</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>envRec</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<code>\"arguments\"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<code>\"arguments\"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>envRec</var>.InitializeBinding(<code>\"arguments\"</code>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <code>\"arguments\"</code> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li><li>Let <var>varEnvRec</var> be <var>envRec</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>envRec</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnvRec</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: vars whose names are the same as a formal parameter, initially have the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate lexical <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in  <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.16", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d022e28b\"><emu-t>class</emu-t><emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>className</var> be <emu-val>undefined</emu-val>.</li><li>Else, let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f512250e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c25b1d19\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"be6457e0\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a922691e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present. The  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent, <code>await</code> is parsed as a keyword and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-PropertyDefinitionEvaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.14</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "12.3.5.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b698f30f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a833032f\"><emu-t>super</emu-t><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializereferencedbinding": {"num": "6.2.4.11", "title": "#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )", "html": "<emu-clause id=\"sec-initializereferencedbinding\" aoid=\"InitializeReferencedBinding\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializereferencedbinding\">#sec-initializereferencedbinding</span> InitializeReferencedBinding ( <var>V</var>, <var>W</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>false</emu-val>.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return <var>base</var>.InitializeBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-generatorfunctioncreate": {"num": "9.2.6", "title": "#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-generatorfunctioncreate\" aoid=\"GeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunctioncreate\">#sec-generatorfunctioncreate</span> GeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. GeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions": {"num": "14.6", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"afef225f\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd578cac\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2d0a98e\"><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7989e09f\"><emu-t>extends</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\"><emu-t>static</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.6.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.6.2</span>#sec-class-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">14.6.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.6.4</span>#sec-class-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.6.5</span>#sec-class-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.6.6</span>#sec-class-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.6.7</span>#sec-class-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.6.8</span>#sec-class-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">14.6.9</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructormethoddefinitions\"><h1><span class=\"secnum\">14.6.10</span>#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">14.6.11</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.6.12</span>#sec-class-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">14.6.13</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">14.6.14</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.6.15</span>#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.6.16</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-static-semantics-isstatic": {"num": "14.6.9", "title": "#sec-static-semantics-isstatic Static Semantics: IsStatic", "html": "<emu-clause id=\"sec-static-semantics-isstatic\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isstatic\">#sec-static-semantics-isstatic</span> Static Semantics: IsStatic</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-EvaluateBody": {"num": "14.7.11", "title": "#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-async-function-definitions-EvaluateBody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-EvaluateBody\">#sec-async-function-definitions-EvaluateBody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>declResult</var> be <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>If <var>declResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncFunctionStart\"><a href=\"#sec-async-functions-abstract-operations-async-function-start\">AsyncFunctionStart</a></emu-xref>(<var>promiseCapability</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>declResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>promiseCapability</var>.[[Promise]], [[Target]]: <emu-const>empty</emu-const> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>prototype</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <code>\"ambiguous\"</code>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> in <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <code>\"*\"</code>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <code>\"ambiguous\"</code>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Call <var>envRec</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> in <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-functioncreate": {"num": "9.2.5", "title": "#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )", "html": "<emu-clause id=\"sec-functioncreate\" aoid=\"FunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioncreate\">#sec-functioncreate</span> FunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> [ , <var>prototype</var> ] )</h1>\n      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>If <var>kind</var> is not <emu-const>Normal</emu-const>, let <var>allocKind</var> be <code>\"non-constructor\"</code>.</li><li>Else, let <var>allocKind</var> be <code>\"normal\"</code>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>prototype</var>, <var>allocKind</var>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>When the abstract operation EvalDeclarationInstantiation is called with arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>, the following steps are taken:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnvRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>Let <var>thisEnvRec</var> be <var>thisLex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>thisEnvRec</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisEnvRec</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>'s outer environment reference.</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a Proxy <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-tokens": {"num": "11.5", "title": "#sec-tokens Tokens", "html": "<emu-clause id=\"sec-tokens\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tokens\">#sec-tokens</span> Tokens</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"CommonToken\" type=\"lexical\" id=\"prod-CommonToken\">\n    <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee18f3d6\"><emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3ec1ae06\"><emu-nt><a href=\"#prod-Template\">Template</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt>, <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, <emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt>, and <emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt> productions derive additional tokens that are not included in the <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt> production.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"throw\"</code>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"return\"</code>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An  <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s  <dfn id=\"running-execution-context\">running execution context</dfn>.  All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The  <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in  <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          \n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          \n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called  <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the  <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in  <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> whose <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in  <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          \n          </td>\n          <td>\n            The GeneratorObject that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-async-functions-abstract-operations-async-function-create": {"num": "9.2.8", "title": "#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-create\" aoid=\"AsyncFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-create\">#sec-async-functions-abstract-operations-async-function-create</span> AsyncFunctionCreate ( <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>parameters</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"async\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-scripts-static-semantics-early-errors": {"num": "15.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b78f99cc\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cf403a0c\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in  <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in  <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-reference-specification-type": {"num": "6.2.4", "title": "#sec-reference-specification-type The Reference Specification Type", "html": "<emu-clause id=\"sec-reference-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</span> The Reference Specification Type</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Reference type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> keyword and other language features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>\n      </div></emu-note>\n      <p>A  <dfn>Reference</dfn> is a resolved name or property binding. A Reference consists of three components, the base value component, the referenced name component, and the Boolean-valued strict reference flag. The base value component is either <emu-val>undefined</emu-val>, an Object, a Boolean, a String, a Symbol, a Number, or an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. A base value component of <emu-val>undefined</emu-val> indicates that the Reference could not be resolved to a binding. The referenced name component is a String or Symbol value.</p>\n      <p>A  <dfn id=\"super-reference\">Super Reference</dfn> is a Reference that is used to represent a name binding that was expressed using the super keyword. A <emu-xref href=\"#super-reference\"><a href=\"#super-reference\">Super Reference</a></emu-xref> has an additional thisValue component, and its base value component will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate on references:</p>\n\n      <div id=\"excluded-sec-getbase\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-getbase GetBase ( V )</h1>...</div><div id=\"excluded-sec-getreferencedname\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-getreferencedname GetReferencedName ( V )</h1>...</div><div id=\"excluded-sec-isstrictreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-isstrictreference IsStrictReference ( V )</h1>...</div><div id=\"excluded-sec-hasprimitivebase\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-hasprimitivebase HasPrimitiveBase ( V )</h1>...</div><div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.10</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.11</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div></emu-clause>\n\n    "}, "sec-asyncgeneratorfunctioncreate": {"num": "9.2.7", "title": "#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-asyncgeneratorfunctioncreate\" aoid=\"AsyncGeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunctioncreate\">#sec-asyncgeneratorfunctioncreate</span> AsyncGeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncGeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncGeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-delete-operator-runtime-semantics-evaluation": {"num": "12.5.3.2", "title": "#sec-delete-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-delete-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"IsSuperReference\"><a href=\"#sec-issuperreference\">IsSuperReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>baseObj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>)).</li><li>Let <var>deleteStatus</var> be ? <var>baseObj</var>.[[Delete]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).</li><li>If <var>deleteStatus</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>deleteStatus</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ref</var> is a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> to an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding.</li><li>Let <var>bindings</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Return ? <var>bindings</var>.DeleteBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> exception is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name. In addition, if a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> }, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-left-hand-side-expressions": {"num": "12.3", "title": "#sec-left-hand-side-expressions Left-Hand-Side Expressions", "html": "<emu-clause id=\"sec-left-hand-side-expressions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions\">#sec-left-hand-side-expressions</span> Left-Hand-Side Expressions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MemberExpression\" params=\"Yield, Await\" id=\"prod-MemberExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"669d9e8f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"46700b57\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"fea749a8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e3a714cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"83d44750\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8554289\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SuperProperty\" params=\"Yield, Await\" id=\"prod-SuperProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7f66819f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MetaProperty\" id=\"prod-MetaProperty\">\n    <emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"733bdb20\"><emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\" id=\"prod-NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\" params=\"Yield, Await\" id=\"prod-NewExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"55b72ef4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8b27ffb1\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CallExpression\" params=\"Yield, Await\" id=\"prod-CallExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5c60d05\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d766951c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd0d9a85\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"24037841\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f1fcc490\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c4dd808\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SuperCall\" params=\"Yield, Await\" id=\"prod-SuperCall\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6b5bb3dd\"><emu-t>super</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportCall\" params=\"Yield, Await\" id=\"prod-ImportCall\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b3f5031f\"><emu-t>import</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"Arguments\" params=\"Yield, Await\" id=\"prod-Arguments\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"668c9409\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"c520166a\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArgumentList\" params=\"Yield, Await\" id=\"prod-ArgumentList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8f532861\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2ab72a4a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d6f13c65\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\" params=\"Yield, Await\" id=\"prod-LeftHandSideExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a89347cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8699f68d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production  <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"CallMemberExpression\" params=\"Yield, Await\" id=\"prod-CallMemberExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-static-semantics\"><h1><span class=\"secnum\">12.3.1</span>#sec-static-semantics Static Semantics</h1>...</div><div id=\"excluded-sec-property-accessors\"><h1><span class=\"secnum\">12.3.2</span>#sec-property-accessors Property Accessors</h1>...</div><div id=\"excluded-sec-new-operator\"><h1><span class=\"secnum\">12.3.3</span>#sec-new-operator The new Operator</h1>...</div><div id=\"excluded-sec-function-calls\"><h1><span class=\"secnum\">12.3.4</span>#sec-function-calls Function Calls</h1>...</div><div id=\"excluded-sec-super-keyword\"><h1><span class=\"secnum\">12.3.5</span>#sec-super-keyword The super Keyword</h1>...</div><div id=\"excluded-sec-argument-lists\"><h1><span class=\"secnum\">12.3.6</span>#sec-argument-lists Argument Lists</h1>...</div><div id=\"excluded-sec-import-calls\"><h1><span class=\"secnum\">12.3.7</span>#sec-import-calls Import Calls</h1>...</div><div id=\"excluded-sec-tagged-templates\"><h1><span class=\"secnum\">12.3.8</span>#sec-tagged-templates Tagged Templates</h1>...</div><div id=\"excluded-sec-meta-properties\"><h1><span class=\"secnum\">12.3.9</span>#sec-meta-properties Meta Properties</h1>...</div></emu-clause>\n\n  "}, "sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called  <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> summarizes the  <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>The &#8220;Signature&#8221; column of  <emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.</p>\n        <emu-table id=\"table-5\" caption=\"Essential Internal Methods\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-5\">#table-5</span>: Essential Internal Methods</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Object | Null\n              \n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              \n              </td>\n              <td>\n                (Object | Null)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A  <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A  <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-6\" caption=\"Additional Essential Internal Methods of Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-6\">#table-6</span>: Additional Essential Internal Methods of Function Objects</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              \n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are  <em>callable</em>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              \n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>, Object)  <b>&#8594;</b> Object\n              \n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> or <code>super</code> operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called  <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-class-definitions-static-semantics-propname": {"num": "14.6.12", "title": "#sec-class-definitions-static-semantics-propname Static Semantics: PropName", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-propname\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-propname\">#sec-class-definitions-static-semantics-propname</span> Static Semantics: PropName</h1>\n      <emu-see-also-para op=\"PropName\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval with arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Let <var>inFunction</var> be <emu-val>true</emu-val>.</li><li>Let <var>inMethod</var> be <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <code>\"derived\"</code>, let <var>inDerivedConstructor</var> be <emu-val>true</emu-val>; otherwise, let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing <var>x</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>ctx</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>ctx</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>ctx</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>ctx</var> is not already suspended, suspend <var>ctx</var>.</li><li>Let <var>evalCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the <var>evalCxt</var>'s Function to <emu-val>null</emu-val>.</li><li>Set the <var>evalCxt</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set the <var>evalCxt</var>'s ScriptOrModule to <var>ctx</var>'s ScriptOrModule.</li><li>Set the <var>evalCxt</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set the <var>evalCxt</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-data-blocks": {"num": "6.2.7", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The  <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a  <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is  <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty.  Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.7.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.7.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.7.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n  "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-isidentifierref": {"num": "12.3.1.5", "title": "#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isidentifierref\">#sec-static-semantics-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n        <emu-see-also-para op=\"IsIdentifierRef\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-specification-type The Reference Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Lexical Environment and Environment Record Specification Types</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.7</span>#sec-data-blocks Data Blocks</h1>...</div></emu-clause>\n"}}, "figData": {"table-2": "Table 2", "table-5": "Table 5", "table-6": "Table 6", "table-22": "Table 21", "table-23": "Table 22", "table-24": "Table 23", "table-27": "Table 27", "table-dynamic-function-sourcetext-prefixes": "Table 47"}}, "to": {"secList": ["sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-copydataproperties", "sec-static-semantics-static-semantics-isfunctiondefinition", "sec-expression-rules", "sec-expressions", "sec-identifier-names-static-semantics-stringvalue", "sec-blockdeclarationinstantiation", "sec-delete-operator-static-semantics-early-errors", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-async-function-definitions-InstantiateFunctionObject", "sec-ecmascript-function-objects", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-getvalue", "sec-lexical-grammar", "sec-identifier-names", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-module-semantics-static-semantics-early-errors", "sec-functions-and-classes", "sec-runtime-semantics-classdefinitionevaluation", "sec-property-accessors-runtime-semantics-evaluation", "sec-setfunctionname", "sec-class-definitions-static-semantics-early-errors", "sec-prepareforordinarycall", "sec-asyncgenerator-definitions-evaluation", "sec-functioninitialize", "sec-createdynamicfunction", "sec-putvalue", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-static-semantics-static-semantics-isdestructuring", "sec-runtime-semantics-scriptevaluation", "sec-class-definitions-static-semantics-computedpropertycontains", "sec-operations-on-objects", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-functiondeclarationinstantiation", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-async-function-definitions", "sec-super-keyword-runtime-semantics-evaluation", "sec-initializereferencedbinding", "sec-generatorfunctioncreate", "sec-class-definitions", "sec-static-semantics-isstatic", "sec-async-function-definitions-EvaluateBody", "sec-runtime-semantics-definemethod", "sec-source-text-module-record-initialize-environment", "sec-functioncreate", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-evaldeclarationinstantiation", "sec-tokens", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-execution-contexts", "sec-async-functions-abstract-operations-async-function-create", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-scripts-static-semantics-early-errors", "sec-reference-specification-type", "sec-asyncgeneratorfunctioncreate", "sec-delete-operator-runtime-semantics-evaluation", "sec-left-hand-side-expressions", "sec-object-internal-methods-and-internal-slots", "sec-class-definitions-static-semantics-propname", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-performeval", "sec-data-blocks", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-static-semantics-static-semantics-isidentifierref", "sec-ecmascript-specification-types"], "secData": {"sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameters <var>scope</var> and <var>privateScope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>\"get\"</code>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>\"set\"</code>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-copydataproperties": {"num": "7.3.24", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>When the abstract operation CopyDataProperties is called with arguments <var>target</var>, <var>source</var>, and <var>excludedItems</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>excludedItems</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys.</li><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-isfunctiondefinition": {"num": "12.3.1.3", "title": "#sec-static-semantics-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isfunctiondefinition\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isfunctiondefinition\">#sec-static-semantics-static-semantics-isfunctiondefinition</span> Static Semantics: IsFunctionDefinition</h1>\n        <emu-see-also-para op=\"IsFunctionDefinition\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-expression-rules": {"num": "14.9.2.2", "title": "#sec-expression-rules Expression Rules", "html": "<emu-clause id=\"sec-expression-rules\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expression-rules\">#sec-expression-rules</span> Expression Rules</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A potential tail position call that is immediately followed by return <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref> of the call result is also a possible tail position call. Function calls cannot return reference values, so such a <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref> operation will always return the same value as the actual function call result.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"AssignmentExpression\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5202c84b\"><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2bdf3b10\"><emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b79045b\"><emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a90dedc2\"><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseXORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b463172c\"><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"016dfa90\"><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"EqualityExpression\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"RelationalExpression\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ShiftExpression\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AdditiveExpression\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MultiplicativeExpression\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ExponentiationExpression\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UpdateExpression\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"UnaryExpression\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5d8038f\"><emu-t>void</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b49039a\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a03cca5c\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"07d36a79\"><emu-t>~</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8b0af72\"><emu-t>!</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"48794e9a\"><emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"73248993\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Expression\">\n    <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0b039a65\"><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ConditionalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42ec48bb\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>has</var> be HasCallInTailPosition of the first <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasCallInTailPosition of the second <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LogicalANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2186e2aa\"><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LogicalORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b6453dd9\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is <var>call</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <var>call</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return HasCallInTailPosition of <var>expr</var> with argument <var>call</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ParenthesizedExpression\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ba6ef9d\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return HasCallInTailPosition of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> with argument <var>call</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-expressions": {"num": "A.2", "title": "#sec-expressions Expressions", "html": "<emu-annex id=\"sec-expressions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expressions\">#sec-expressions</span> Expressions</h1>\n    <emu-production name=\"IdentifierReference\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cce6c4d9\" constraints=\"~Yield\"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"7723c826\" constraints=\"~Await\"><emu-constraints>[~Await]</emu-constraints><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BindingIdentifier\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Identifier\">\n    <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LabelIdentifier\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cce6c4d9\" constraints=\"~Yield\"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"7723c826\" constraints=\"~Await\"><emu-constraints>[~Await]</emu-constraints><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PrimaryExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2fcfe2d0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ecf2121c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2508abde\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"493a5b25\"><emu-nt params=\"?Yield, ?Await, ~Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, ~Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverParenthesizedExpressionAndArrowParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"103ea770\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"95866f7d\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"a62ae549\"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"496a4160\"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"db5a5b9b\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"a8ec9f3e\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production  <emu-production name=\"PrimaryExpression\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ParenthesizedExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"103ea770\"><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"Literal\">\n    <emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"54f84188\"><emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3508e1fd\"><emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayLiteral\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"5d65623a\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"14bb78d1\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"306f3a14\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"05939ab1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e9492888\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9cd00eda\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Elision\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"SpreadElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectLiteral\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"4200417f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"0731c59c\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyDefinitionList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9b4b46b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"afd4e913\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"68f5ac08\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e73ae371\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertyName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e71e2304\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f44b65f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LiteralPropertyName\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ComputedPropertyName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e3cff7e5\"><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverInitializedName\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"85c0d9fd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Initializer\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dc616ce5\"><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"069aff93\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"de941338\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"db7fc148\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6dd46bd2\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MemberExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"669d9e8f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"46700b57\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"fea749a8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e3a714cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"83d44750\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8554289\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e1c9c130\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SuperProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7f66819f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MetaProperty\">\n    <emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"733bdb20\"><emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NewExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"55b72ef4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8b27ffb1\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CallExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5c60d05\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d766951c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd0d9a85\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"24037841\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f1fcc490\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c4dd808\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"eb69cf19\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production  <emu-production name=\"CallExpression\" params=\"Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"CallMemberExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n\n    <emu-production name=\"SuperCall\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6b5bb3dd\"><emu-t>super</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportCall\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b3f5031f\"><emu-t>import</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Arguments\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"668c9409\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"c520166a\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArgumentList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8f532861\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2ab72a4a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d6f13c65\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LeftHandSideExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a89347cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8699f68d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UpdateExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1063e6f2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"c40a0c36\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"e14f8c68\"><emu-t>++</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"994b46fb\"><emu-t>--</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnaryExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9511ff89\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a87e936a\"><emu-t>delete</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"7774f70f\"><emu-t>void</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"693155d5\"><emu-t>typeof</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d735fe16\"><emu-t>+</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2de86f5f\"><emu-t>-</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"995c05b5\"><emu-t>~</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0a6edf36\"><emu-t>!</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0c541d06\" constraints=\"+Await\"><emu-constraints>[+Await]</emu-constraints><emu-nt params=\"?Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentiationExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f16b387c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"48e152b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>**</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiplicativeExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"677909b0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c0a3a33f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiplicativeOperator\" oneof=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*</emu-t><emu-t>/</emu-t><emu-t>%</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AdditiveExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f6af3d13\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"79f3759c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>+</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e309a7b9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>-</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ShiftExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e6661e6a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"211de3c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"0c11aafb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cb144d91\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RelationalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"12fcef98\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4699dc26\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e2226dd2\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"45a2035d\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&lt;=</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8dbaec1\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&gt;=</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a60d81a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>instanceof</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b629d07c\" constraints=\"+In\"><emu-constraints>[+In]</emu-constraints><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ShiftExpression\">ShiftExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"EqualityExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9280448d\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8d7a6c47\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>==</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"20f203e6\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>!=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"17b08b45\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>===</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f9056ff\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>!==</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-RelationalExpression\">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseANDExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5c5abb87\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"969f6da7\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&amp;</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-EqualityExpression\">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseXORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a8caf125\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d7124a93\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>^</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BitwiseORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"24ec6c16\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad046143\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>|</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LogicalANDExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0bfde639\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1a88a9db\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LogicalORExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b886f268\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"276ba099\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>||</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConditionalExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"71405bab\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa7f1805\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>?</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82aa12dc\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5d4d9305\" constraints=\"+Yield\"><emu-constraints>[+Yield]</emu-constraints><emu-nt params=\"?In, ?Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[?In, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"336dea1a\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"de1f51e8\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"dc2bc97e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>In certain circumstances when processing an instance of the production  <emu-production name=\"AssignmentExpression\" params=\"In, Yield, Await\" a=\"assignment\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"assignment\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>:</p>\n    <emu-production name=\"AssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ed6d3857\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"4b6571dd\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ObjectAssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81ba5a4a\"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"6cdfdd77\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"a1f0237d\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"740e1b2f\"><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrayAssignmentPattern\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayAssignmentPattern\">ArrayAssignmentPattern</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4b8cdf0a\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"9852bd8c\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"01eac6e6\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentRestProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestProperty\">AssignmentRestProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentPropertyList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0fb6d7ae\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37340e0a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentPropertyList\">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e75e8ef0\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6d59619d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElementList\">AssignmentElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElisionElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElisionElement\">AssignmentElisionElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"72fd00bc\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentProperty\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentProperty\">AssignmentProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c02b6a90\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"37ae7a6f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentElement\">AssignmentElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8c5631c8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AssignmentRestElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AssignmentRestElement\">AssignmentRestElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9e521814\"><emu-t>...</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DestructuringAssignmentTarget\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-DestructuringAssignmentTarget\">DestructuringAssignmentTarget</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7b08c84\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AssignmentOperator\" oneof=\"\">\n    <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*=</emu-t><emu-t>/=</emu-t><emu-t>%=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>^=</emu-t><emu-t>|=</emu-t><emu-t>**=</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Expression\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d38e21c\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"a2892296\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-identifier-names-static-semantics-stringvalue": {"num": "11.6.1.2", "title": "#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue", "html": "<emu-clause id=\"sec-identifier-names-static-semantics-stringvalue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names-static-semantics-stringvalue\">#sec-identifier-names-static-semantics-stringvalue</span> Static Semantics: StringValue</h1>\n        <emu-see-also-para op=\"StringValue\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the String value consisting of the sequence of code units corresponding to <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>. In determining the sequence any occurrences of <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> are first replaced with the code point represented by the <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt> and then the code points of the entire <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are converted to code units by <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> each code point.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>BlockDeclarationInstantiation is performed as follows using arguments <var>code</var> and <var>env</var>. <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> in which bindings are to be created.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-delete-operator-static-semantics-early-errors": {"num": "12.5.3.1", "title": "#sec-delete-operator-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-delete-operator-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the derived <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is  <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>,  <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>, or  <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"73248993\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n          \n          </li>\n          <li>\n            <p>It is a Syntax Error if the derived <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is\n              \n              <br>\n              <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n              <br>\n              and <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> ultimately derives a phrase that, if used in place of <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>, would produce a Syntax Error according to these rules. This rule is recursively applied.</p>\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The last rule means that expressions such as <code>delete (((foo)))</code> produce early errors because of recursive application of the first rule.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%Object.prototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializepublicinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>thisArgument</var>, <var>F</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Remove <var>calleeContext</var> from <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li></ol></li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>\"base\"</code>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameters <var>scope</var> and <var>privateScope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> for Private Names that the function was closed over. Used as the outer environment for Private Names when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FunctionKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"normal\"</code>, <code>\"classConstructor\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"base\"</code> or <code>\"derived\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            (lexical, strict, global)\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Fields]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref aoid=\"ClassFieldDefinition\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition</a></emu-xref> Records\n          \n          </td>\n          <td>\n            If the function is a class with instance field declarations, this is a list of records representing those fields and their initializers.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ClassFieldInitializer]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a class field initializer, <emu-val>false</emu-val> otherwise.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-functionallocate\"><h1><span class=\"secnum\">9.2.3</span>#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )</h1>...</div><div id=\"excluded-sec-functioninitialize\"><h1><span class=\"secnum\">9.2.4</span>#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-functioncreate\"><h1><span class=\"secnum\">9.2.5</span>#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope [ , prototype ] )</h1>...</div><div id=\"excluded-sec-generatorfunctioncreate\"><h1><span class=\"secnum\">9.2.6</span>#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunctioncreate\"><h1><span class=\"secnum\">9.2.7</span>#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-async-functions-abstract-operations-async-function-create\"><h1><span class=\"secnum\">9.2.8</span>#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope, PrivateScope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.9</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.10</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.11</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.12</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.13</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.14</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.15</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-getvalue": {"num": "6.2.4.9", "title": "#sec-getvalue GetValue ( V )", "html": "<emu-clause id=\"sec-getvalue\" aoid=\"GetValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvalue\">#sec-getvalue</span> GetValue ( <var>V</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <var>V</var>.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Set <var>base</var> to !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>), then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateFieldGet\"><a href=\"#sec-privatefieldget\">PrivateFieldGet</a></emu-xref>(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>base</var>).</li></ol></li><li>Return ? <var>base</var>.[[Get]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.GetBindingValue(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step 5.a.ii is not accessible outside of the above abstract operation and the ordinary object [[Get]] internal method. An implementation might choose to avoid the actual creation of the object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-lexical-grammar": {"num": "A.1", "title": "#sec-lexical-grammar Lexical Grammar", "html": "<emu-annex id=\"sec-lexical-grammar\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-grammar\">#sec-lexical-grammar</span> Lexical Grammar</h1>\n    <emu-production name=\"SourceCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementDiv\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementRegExp\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"121314a7\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"InputElementTemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1424dc49\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b331ccd\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"153d7a58\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"83158895\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"28035084\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"62ae6eb9\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"WhiteSpace\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"819ea3fd\"><emu-gprose>&lt;TAB&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"156dc7da\"><emu-gprose>&lt;VT&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"77b516c0\"><emu-gprose>&lt;FF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"6a85afed\"><emu-gprose>&lt;SP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"63dd44af\"><emu-gprose>&lt;NBSP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"b09e901a\"><emu-gprose>&lt;ZWNBSP&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"e7de22a4\"><emu-gprose>&lt;USP&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineTerminator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"6bb44f60\"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineTerminatorSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"64077750\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gann>[lookahead &#8800; <emu-gprose>&lt;LF&gt;</emu-gprose>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"253de229\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"Comment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b221187a\"><emu-nt><a href=\"#prod-MultiLineComment\">MultiLineComment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"49272b29\"><emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineComment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineComment\">MultiLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1e164ceb\"><emu-t>/*</emu-t><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>*/</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"24a6effb\"><emu-nt><a href=\"#prod-MultiLineNotAsteriskChar\">MultiLineNotAsteriskChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6fcb6b58\"><emu-t>*</emu-t><emu-nt optional=\"\"><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"PostAsteriskCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25615007\"><emu-nt><a href=\"#prod-MultiLineNotForwardSlashOrAsteriskChar\">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-MultiLineCommentChars\">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6fcb6b58\"><emu-t>*</emu-t><emu-nt optional=\"\"><a href=\"#prod-PostAsteriskCommentChars\">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineNotAsteriskChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineNotAsteriskChar\">MultiLineNotAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9452de17\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-t>*</emu-t></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"MultiLineNotForwardSlashOrAsteriskChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-MultiLineNotForwardSlashOrAsteriskChar\">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1dd7e7ae\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>/</emu-t> or <emu-t>*</emu-t></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineComment\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineComment\">SingleLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"53edd61c\"><emu-t>//</emu-t><emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineCommentChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4521d447\"><emu-nt><a href=\"#prod-SingleLineCommentChar\">SingleLineCommentChar</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-SingleLineCommentChars\">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleLineCommentChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleLineCommentChar\">SingleLineCommentChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d5bdfa7\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"CommonToken\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee18f3d6\"><emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3ec1ae06\"><emu-nt><a href=\"#prod-Template\">Template</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierName\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"434685ab\"><emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"700c1cee\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierStart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierStart\">IdentifierStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0862e30c\"><emu-nt><a href=\"#prod-UnicodeIDStart\">UnicodeIDStart</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n    <emu-rhs a=\"07564b94\"><emu-t>_</emu-t></emu-rhs>\n    <emu-rhs a=\"6fbc8b19\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"IdentifierPart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"364ac675\"><emu-nt><a href=\"#prod-UnicodeIDContinue\">UnicodeIDContinue</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n    <emu-rhs a=\"6fbc8b19\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a321d28b\"><emu-gprose>&lt;ZWNJ&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"9543f0aa\"><emu-gprose>&lt;ZWJ&gt;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeIDStart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeIDStart\">UnicodeIDStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e41f30c8\"><emu-gprose>any Unicode code point with the Unicode property &#8220;ID_Start&#8221;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeIDContinue\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeIDContinue\">UnicodeIDContinue</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"db14546f\"><emu-gprose>any Unicode code point with the Unicode property &#8220;ID_Continue&#8221;</emu-gprose></emu-rhs>\n</emu-production>\n    <emu-production name=\"ReservedWord\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a3926e03\"><emu-nt><a href=\"#prod-Keyword\">Keyword</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9d71bdc1\"><emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"54f84188\"><emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3508e1fd\"><emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Keyword\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-Keyword\">Keyword</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>await</emu-t><emu-t>break</emu-t><emu-t>case</emu-t><emu-t>catch</emu-t><emu-t>class</emu-t><emu-t>const</emu-t><emu-t>continue</emu-t><emu-t>debugger</emu-t><emu-t>default</emu-t><emu-t>delete</emu-t><emu-t>do</emu-t><emu-t>else</emu-t><emu-t>export</emu-t><emu-t>extends</emu-t><emu-t>finally</emu-t><emu-t>for</emu-t><emu-t>function</emu-t><emu-t>if</emu-t><emu-t>import</emu-t><emu-t>in</emu-t><emu-t>instanceof</emu-t><emu-t>new</emu-t><emu-t>return</emu-t><emu-t>super</emu-t><emu-t>switch</emu-t><emu-t>this</emu-t><emu-t>throw</emu-t><emu-t>try</emu-t><emu-t>typeof</emu-t><emu-t>var</emu-t><emu-t>void</emu-t><emu-t>while</emu-t><emu-t>with</emu-t><emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FutureReservedWord\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4fb2fe95\"><emu-t>enum</emu-t></emu-rhs>\n</emu-production>\n    <p>The following tokens are also considered to be <emu-nt><a href=\"#prod-FutureReservedWord\">FutureReservedWord</a></emu-nt>s when parsing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>:</p>\n    <p><emu-t>implements</emu-t> &#160;<emu-t>package</emu-t> &#160;<emu-t>protected</emu-t><br>\n      <emu-t>interface</emu-t> &#160;<emu-t>private</emu-t> &#160;<emu-t>public</emu-t>\n    </p>\n    <p>&#160;</p>\n    <emu-production name=\"Punctuator\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>{</emu-t><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>[</emu-t><emu-t>]</emu-t><emu-t>.</emu-t><emu-t>...</emu-t><emu-t>;</emu-t><emu-t>,</emu-t><emu-t>&lt;</emu-t><emu-t>&gt;</emu-t><emu-t>&lt;=</emu-t><emu-t>&gt;=</emu-t><emu-t>==</emu-t><emu-t>!=</emu-t><emu-t>===</emu-t><emu-t>!==</emu-t><emu-t>+</emu-t><emu-t>-</emu-t><emu-t>*</emu-t><emu-t>%</emu-t><emu-t>**</emu-t><emu-t>++</emu-t><emu-t>--</emu-t><emu-t>&lt;&lt;</emu-t><emu-t>&gt;&gt;</emu-t><emu-t>&gt;&gt;&gt;</emu-t><emu-t>&amp;</emu-t><emu-t>|</emu-t><emu-t>^</emu-t><emu-t>!</emu-t><emu-t>~</emu-t><emu-t>&amp;&amp;</emu-t><emu-t>||</emu-t><emu-t>?</emu-t><emu-t>:</emu-t><emu-t>=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>*=</emu-t><emu-t>%=</emu-t><emu-t>**=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>|=</emu-t><emu-t>^=</emu-t><emu-t>=&gt;</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"DivPunctuator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d3fd5f53\"><emu-t>/</emu-t></emu-rhs>\n    <emu-rhs a=\"2e077fe3\"><emu-t>/=</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"RightBracePunctuator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"255cb7fd\"><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NullLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NullLiteral\">NullLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"77b50868\"><emu-t>null</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"BooleanLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BooleanLiteral\">BooleanLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fa30b8c6\"><emu-t>true</emu-t></emu-rhs>\n    <emu-rhs a=\"23d2c69d\"><emu-t>false</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NumericLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"18c0356f\"><emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d3d71ddd\"><emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"832f57ee\"><emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d0c4a66\"><emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalLiteral\">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fb5198a6\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cf3aa35\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"13dbaf21\"><emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n    <emu-rhs a=\"2353f0a3\"><emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f250657\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-NonZeroDigit\">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentPart\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7f837518\"><emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExponentIndicator\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-ExponentIndicator\">ExponentIndicator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>e</emu-t><emu-t>E</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"SignedInteger\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SignedInteger\">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3bd7fe57\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"58000348\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"600d7817\"><emu-t>0b</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7c1f17d9\"><emu-t>0B</emu-t><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e5f1ee23\"><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82aa7443\"><emu-nt><a href=\"#prod-BinaryDigits\">BinaryDigits</a></emu-nt><emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"BinaryDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-BinaryDigit\">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8056cb0\"><emu-t>0o</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a3652fa\"><emu-t>0O</emu-t><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"99bc1d53\"><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37a295fe\"><emu-nt><a href=\"#prod-OctalDigits\">OctalDigits</a></emu-nt><emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"OctalDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexIntegerLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexIntegerLiteral\">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"cf154180\"><emu-t>0x</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ef756f3\"><emu-t>0X</emu-t><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexDigits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a0c48a71\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t><emu-t>a</emu-t><emu-t>b</emu-t><emu-t>c</emu-t><emu-t>d</emu-t><emu-t>e</emu-t><emu-t>f</emu-t><emu-t>A</emu-t><emu-t>B</emu-t><emu-t>C</emu-t><emu-t>D</emu-t><emu-t>E</emu-t><emu-t>F</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"StringLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"15d8b1f1\"><emu-t>\"</emu-t><emu-nt optional=\"\"><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>\"</emu-t></emu-rhs>\n    <emu-rhs a=\"82ecb3d9\"><emu-t>'</emu-t><emu-nt optional=\"\"><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>'</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoubleStringCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8bdabc77\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleStringCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"17d28457\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"DoubleStringCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleStringCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n    <emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"LineContinuation\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"EscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6964a19d\"><emu-t>0</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CharacterEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"SingleEscapeCharacter\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>\"</emu-t><emu-t>\\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"NonEscapeCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"EscapeCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"150383a9\"><emu-t>x</emu-t></emu-rhs>\n    <emu-rhs a=\"8c2e6655\"><emu-t>u</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"HexEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"Hex4Digits\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionLiteral\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5778053b\"><emu-t>/</emu-t><emu-nt><a href=\"#prod-RegularExpressionBody\">RegularExpressionBody</a></emu-nt><emu-t>/</emu-t><emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionBody\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionBody\">RegularExpressionBody</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bba7969e\"><emu-nt><a href=\"#prod-RegularExpressionFirstChar\">RegularExpressionFirstChar</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a9881cec\"><emu-nt><a href=\"#prod-RegularExpressionChars\">RegularExpressionChars</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionChar\">RegularExpressionChar</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionFirstChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionFirstChar\">RegularExpressionFirstChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"da1b0c0a\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>*</emu-t> or <emu-t>\\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cc6858e\"><emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionChar\">RegularExpressionChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0c3ff14\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>\\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5cc6858e\"><emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionBackslashSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d7656bad\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionNonTerminator\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d5bdfa7\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClass\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClass\">RegularExpressionClass</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c1bc40a\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClassChars\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"76bdcb05\"><emu-nt><a href=\"#prod-RegularExpressionClassChars\">RegularExpressionClassChars</a></emu-nt><emu-nt><a href=\"#prod-RegularExpressionClassChar\">RegularExpressionClassChar</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionClassChar\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionClassChar\">RegularExpressionClassChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7fd10851\"><emu-nt><a href=\"#prod-RegularExpressionNonTerminator\">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>]</emu-t> or <emu-t>\\</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"9c9579a7\"><emu-nt><a href=\"#prod-RegularExpressionBackslashSequence\">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"RegularExpressionFlags\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"fceefdcd\"><emu-nt><a href=\"#prod-RegularExpressionFlags\">RegularExpressionFlags</a></emu-nt><emu-nt><a href=\"#prod-IdentifierPart\">IdentifierPart</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Template\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-Template\">Template</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab9a4b96\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"056f5c6b\"><emu-t>`</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateHead\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"bfb172fc\"><emu-t>`</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateSubstitutionTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ccbc035d\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateMiddle\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"37635b4e\"><emu-t>}</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateTail\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"fcef5bc0\"><emu-t>}</emu-t><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateCharacters\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f8c26ac5\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"TemplateCharacter\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"03c3b542\"><emu-t>$</emu-t><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"544825da\"><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"NotEscapeSequence\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c247e196\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"372f5e0d\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-gmod>but not <emu-t>0</emu-t></emu-gmod></emu-rhs>\n    <emu-rhs a=\"e6c4f6ee\"><emu-t>x</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"92cdf202\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"a16001b3\"><emu-t>u</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"f7d3e8d4\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"4ea47d3d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"45170c27\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"5427e268\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"0c957f40\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n    <emu-rhs a=\"ab5a798c\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>}</emu-t>]</emu-gann></emu-rhs>\n</emu-production>\n    <emu-production name=\"NotCodePoint\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5aeddbfc\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-gmod>but only if MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &gt; 0x10FFFF </emu-gmod></emu-rhs>\n</emu-production>\n    <emu-production name=\"CodePoint\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"deeeb60d\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-gmod>but only if MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> &#8804; 0x10FFFF </emu-gmod></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-identifier-names": {"num": "11.6.1", "title": "#sec-identifier-names Identifier Names", "html": "<emu-clause id=\"sec-identifier-names\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifier-names\">#sec-identifier-names</span> Identifier Names</h1>\n\n      <div id=\"excluded-sec-identifier-names-static-semantics-early-errors\"><h1><span class=\"secnum\">11.6.1.1</span>#sec-identifier-names-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-identifier-names-static-semantics-stringvalue\"><h1><span class=\"secnum\">11.6.1.2</span>#sec-identifier-names-static-semantics-stringvalue Static Semantics: StringValue</h1>...</div><div id=\"excluded-sec-private-names-static-semantics-stringvalue\"><h1><span class=\"secnum\">11.6.1.3</span>#sec-private-names-static-semantics-stringvalue Static Semantics: StringValue</h1>...</div></emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.6", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"73248993\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-module-semantics-static-semantics-early-errors": {"num": "15.2.1.1", "title": "#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-early-errors\">#sec-module-semantics-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"ModuleBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89010d7d\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          \n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if the ExportedNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          \n          </li>\n          <li>\n            It is a Syntax Error if any element of the ExportedBindings of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> does not also occur in either the VarDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>, or the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <code>super</code>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if AllPrivateIdentifiersValid of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with with argument &#171; &#187; is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The duplicate ExportedNames rule implies that multiple <code>export default</code> <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> items within a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> is a Syntax Error. Additional error conditions relating to conflicting or duplicate declarations are checked during module linking prior to evaluation of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. If any such errors are detected the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is not evaluated.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"67ce9873\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Yield, ~Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <p>When the production  <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bb50dce4\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4fc9a6b0\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Yield, +Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6ccf9be6\"><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <p>When the production  <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production> is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c9d14bfe\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"19d49312\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\"><emu-t>get</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"55774850\"><emu-t>set</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"54505152\"><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e7a001a0\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"65253812\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a713bc4f\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bf1795ae\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ca1d1606\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7d771781\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6767e0c7\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6d58af42\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"afef225f\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd578cac\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2d0a98e\"><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7989e09f\"><emu-t>extends</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\"><emu-t>static</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"814c5932\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.17", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>Let <var>classPrivateEnvRec</var> be <var>classPrivateEnvironment</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each element <var>dn</var> of the PrivateBoundIdentifiers of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>,<ol><li>Perform <var>classPrivateEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li><emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</div></emu-note></li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>Let <var>constructorInfo</var> be DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <code>\"derived\"</code>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> in order from <var>elements</var>, do<ol><li>If IsStatic of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be ClassElementEvaluation of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be ClassElementEvaluation of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>If <var>field</var> is not <emu-const>empty</emu-const>, append <var>field</var> to <var>instanceFields</var>.</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-property-accessors-runtime-semantics-evaluation": {"num": "12.3.2.1", "title": "#sec-property-accessors-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-property-accessors-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-accessors-runtime-semantics-evaluation\">#sec-property-accessors-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>fieldNameString</var> be the StringValue of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>bv</var>, <var>fieldNameString</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar> except that the contained <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is evaluated in step 1.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> except that the contained <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> is evaluated in step 1.</p>\n        <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"73248993\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>fieldNameString</var> be the StringValue of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Return ?&#160;<emu-xref aoid=\"MakePrivateReference\"><a href=\"#sec-makeprivatereference\">MakePrivateReference</a></emu-xref>(<var>bv</var>, <var>fieldNameString</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-setfunctionname": {"num": "9.2.13", "title": "#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )", "html": "<emu-clause id=\"sec-setfunctionname\" aoid=\"SetFunctionName\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setfunctionname\">#sec-setfunctionname</span> SetFunctionName ( <var>F</var>, <var>name</var> [ , <var>prefix</var> ] )</h1>\n      <p>The abstract operation SetFunctionName requires a Function argument <var>F</var>, a String or Symbol argument <var>name</var> and optionally a String argument <var>prefix</var>. This operation adds a <code>name</code> property to <var>F</var> by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <code>name</code> own property.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is either Symbol or String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>prefix</var> is present, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prefix</var>) is String.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is Symbol, then<ol><li>Let <var>description</var> be <var>name</var>'s [[Description]] value.</li><li>If <var>description</var> is <emu-val>undefined</emu-val>, set <var>name</var> to the empty String.</li><li>Else, set <var>name</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"[\"</code>, <var>description</var>, and <code>\"]\"</code>.</li></ol></li><li>Else if <var>name</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>,<ol><li>Set <var>name</var> to <var>name</var>.[[Description]].</li></ol></li><li>If <var>prefix</var> is present, then<ol><li>Set <var>name</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, the code unit 0x0020 (SPACE), and <var>name</var>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"name\"</code>, PropertyDescriptor { [[Value]]: <var>name</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-static-semantics-early-errors": {"num": "14.6.1", "title": "#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2e8467f\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          <p>It is a Syntax Error if <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt> is not present and the following algorithm evaluates to <emu-val>true</emu-val>:</p>\n          <emu-alg><ol><li>Let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, return <emu-val>false</emu-val>.</li><li>Return HasDirectSuper of <var>constructor</var>.\n          </li></ol></emu-alg>\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d72d43ba\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PrototypePropertyNameList of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains more than one occurrence of <code>\"constructor\"</code>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if PrivateBoundIdentifiers of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> contains any duplicate entries.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is not <code>\"constructor\"</code> and HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <code>\"constructor\"</code> and SpecialMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if HasDirectSuper of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <code>\"prototype\"</code>.\n        \n        </li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6f00587f\"><emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if PropName of <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> is <code>\"constructor\"</code>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"46a6730d\"><emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if ContainsArguments of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is <emu-val>true</emu-val>.</li>\n        <li>It is a Syntax Error if <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is present and <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.</li>\n      </ul>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>It is a Syntax Error if StringValue of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt> is <code>\"#constructor\"</code>.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-prepareforordinarycall": {"num": "9.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>When the abstract operation PrepareForOrdinaryCall is called with <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>newTarget</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the PrivateEnvironment of <var>calleeContext</var> to <var>F</var>.[[PrivateEnvironment]].</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-functioninitialize": {"num": "9.2.4", "title": "#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-functioninitialize\" aoid=\"FunctionInitialize\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioninitialize\">#sec-functioninitialize</span> FunctionInitialize ( <var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation FunctionInitialize requires the arguments: a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and a Lexical environment <var>PrivateScope</var>. FunctionInitialize performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <code>\"normal\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <code>\"normal\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Function.prototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"async\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunction.prototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"async generator\"</code>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyText</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <code>\"generator\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <code>\"async\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If AllPrivateIdentifiersValid of <var>body</var> with the argument &#171; &#187; is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If AllPrivateIdentifiersValid of <var>parameters</var> with the argument &#171; &#187; is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>, <var>privateScope</var>).</li><li>If <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"async generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"normal\"</code>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>prototype</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><code>\"normal\"</code></td><td><code>\"function\"</code></td></tr>\n                <tr><td><code>\"generator\"</code></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><code>\"async\"</code></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><code>\"async generator\"</code></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-putvalue": {"num": "6.2.4.10", "title": "#sec-putvalue PutValue ( V, W )", "html": "<emu-clause id=\"sec-putvalue\" aoid=\"PutValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-putvalue\">#sec-putvalue</span> PutValue ( <var>V</var>, <var>W</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Let <var>globalObj</var> be <emu-xref aoid=\"GetGlobalObject\"><a href=\"#sec-getglobalobject\">GetGlobalObject</a></emu-xref>().</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObj</var>, <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else if <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Set <var>base</var> to !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>If <emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>V</var>), then<ol><li>Return ?&#160;<emu-xref aoid=\"PrivateFieldSet\"><a href=\"#sec-privatefieldset\">PrivateFieldSet</a></emu-xref>(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>base</var>, <var>W</var>).</li></ol></li><li>Let <var>succeeded</var> be ? <var>base</var>.[[Set]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>V</var>)).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return ? <var>base</var>.SetMutableBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The object that may be created in step 6.a.ii is not accessible outside of the above algorithm and the ordinary object [[Set]] internal method. An implementation might choose to avoid the actual creation of that object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorPrototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-isdestructuring": {"num": "12.3.1.4", "title": "#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isdestructuring\">#sec-static-semantics-static-semantics-isdestructuring</span> Static Semantics: IsDestructuring</h1>\n        <emu-see-also-para op=\"IsDestructuring\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ef72f7a\"><emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> is either an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-scriptevaluation": {"num": "15.1.10", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptCxt</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptCxt</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptCxt</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li>Let <var>privateEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set the PrivateEnvironment of <var>scriptCxt</var> to <var>privateEnv</var>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>scriptCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-static-semantics-computedpropertycontains": {"num": "14.6.5", "title": "#sec-class-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-computedpropertycontains\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-computedpropertycontains\">#sec-class-definitions-static-semantics-computedpropertycontains</span> Static Semantics: ComputedPropertyContains</h1>\n      <p>With parameter <var>symbol</var>.</p>\n      <emu-see-also-para op=\"ComputedPropertyContains\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ClassElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9ac50b6a\"><emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt><emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>inList</var> be ComputedPropertyContains of <emu-nt><a href=\"#prod-ClassElementList\">ClassElementList</a></emu-nt> with argument <var>symbol</var>.</li><li>If <var>inList</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"46a6730d\"><emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> with argument <var>symbol</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-operations-on-objects": {"num": "7.3", "title": "#sec-operations-on-objects Operations on Objects", "html": "<emu-clause id=\"sec-operations-on-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-operations-on-objects\">#sec-operations-on-objects</span> Operations on Objects</h1>\n\n    <div id=\"excluded-sec-get-o-p\"><h1><span class=\"secnum\">7.3.1</span>#sec-get-o-p Get ( O, P )</h1>...</div><div id=\"excluded-sec-getv\"><h1><span class=\"secnum\">7.3.2</span>#sec-getv GetV ( V, P )</h1>...</div><div id=\"excluded-sec-set-o-p-v-throw\"><h1><span class=\"secnum\">7.3.3</span>#sec-set-o-p-v-throw Set ( O, P, V, Throw )</h1>...</div><div id=\"excluded-sec-createdataproperty\"><h1><span class=\"secnum\">7.3.4</span>#sec-createdataproperty CreateDataProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createmethodproperty\"><h1><span class=\"secnum\">7.3.5</span>#sec-createmethodproperty CreateMethodProperty ( O, P, V )</h1>...</div><div id=\"excluded-sec-createdatapropertyorthrow\"><h1><span class=\"secnum\">7.3.6</span>#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )</h1>...</div><div id=\"excluded-sec-definepropertyorthrow\"><h1><span class=\"secnum\">7.3.7</span>#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )</h1>...</div><div id=\"excluded-sec-deletepropertyorthrow\"><h1><span class=\"secnum\">7.3.8</span>#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )</h1>...</div><div id=\"excluded-sec-getmethod\"><h1><span class=\"secnum\">7.3.9</span>#sec-getmethod GetMethod ( V, P )</h1>...</div><div id=\"excluded-sec-hasproperty\"><h1><span class=\"secnum\">7.3.10</span>#sec-hasproperty HasProperty ( O, P )</h1>...</div><div id=\"excluded-sec-hasownproperty\"><h1><span class=\"secnum\">7.3.11</span>#sec-hasownproperty HasOwnProperty ( O, P )</h1>...</div><div id=\"excluded-sec-call\"><h1><span class=\"secnum\">7.3.12</span>#sec-call Call ( F, V [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-construct\"><h1><span class=\"secnum\">7.3.13</span>#sec-construct Construct ( F [ , argumentsList [ , newTarget ] ] )</h1>...</div><div id=\"excluded-sec-setintegritylevel\"><h1><span class=\"secnum\">7.3.14</span>#sec-setintegritylevel SetIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-testintegritylevel\"><h1><span class=\"secnum\">7.3.15</span>#sec-testintegritylevel TestIntegrityLevel ( O, level )</h1>...</div><div id=\"excluded-sec-createarrayfromlist\"><h1><span class=\"secnum\">7.3.16</span>#sec-createarrayfromlist CreateArrayFromList ( elements )</h1>...</div><div id=\"excluded-sec-lengthofarraylike\"><h1><span class=\"secnum\">7.3.17</span>#sec-lengthofarraylike LengthOfArrayLike ( obj )</h1>...</div><div id=\"excluded-sec-createlistfromarraylike\"><h1><span class=\"secnum\">7.3.18</span>#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )</h1>...</div><div id=\"excluded-sec-invoke\"><h1><span class=\"secnum\">7.3.19</span>#sec-invoke Invoke ( V, P [ , argumentsList ] )</h1>...</div><div id=\"excluded-sec-ordinaryhasinstance\"><h1><span class=\"secnum\">7.3.20</span>#sec-ordinaryhasinstance OrdinaryHasInstance ( C, O )</h1>...</div><div id=\"excluded-sec-speciesconstructor\"><h1><span class=\"secnum\">7.3.21</span>#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )</h1>...</div><div id=\"excluded-sec-enumerableownpropertynames\"><h1><span class=\"secnum\">7.3.22</span>#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )</h1>...</div><div id=\"excluded-sec-getfunctionrealm\"><h1><span class=\"secnum\">7.3.23</span>#sec-getfunctionrealm GetFunctionRealm ( obj )</h1>...</div><div id=\"excluded-sec-copydataproperties\"><h1><span class=\"secnum\">7.3.24</span>#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )</h1>...</div><div id=\"excluded-sec-newprivatename\"><h1><span class=\"secnum\">7.3.25</span>#sec-newprivatename NewPrivateName ( description )</h1>...</div><div id=\"excluded-sec-privatefieldfind\"><h1><span class=\"secnum\">7.3.26</span>#sec-privatefieldfind PrivateFieldFind ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldadd\"><h1><span class=\"secnum\">7.3.27</span>#sec-privatefieldadd PrivateFieldAdd ( P, O, value )</h1>...</div><div id=\"excluded-sec-privatefieldget\"><h1><span class=\"secnum\">7.3.28</span>#sec-privatefieldget PrivateFieldGet ( P, O )</h1>...</div><div id=\"excluded-sec-privatefieldset\"><h1><span class=\"secnum\">7.3.29</span>#sec-privatefieldset PrivateFieldSet ( P, O, value )</h1>...</div><div id=\"excluded-sec-definefield\"><h1><span class=\"secnum\">7.3.30</span>#sec-definefield DefineField ( receiver, fieldRecord )</h1>...</div><div id=\"excluded-sec-initializepublicinstanceelements\"><h1><span class=\"secnum\">7.3.31</span>#sec-initializepublicinstanceelements InitializeInstanceElements ( O, constructor )</h1>...</div></emu-clause>\n\n  "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.16", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-functiondeclarationinstantiation": {"num": "9.2.15", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>FunctionDeclarationInstantiation is performed as follows using arguments <var>func</var> and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <code>\"arguments\"</code> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <code>\"arguments\"</code> is an element of <var>functionNames</var> or if <code>\"arguments\"</code> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>envRec</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>envRec</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<code>\"arguments\"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<code>\"arguments\"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>envRec</var>.InitializeBinding(<code>\"arguments\"</code>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <code>\"arguments\"</code> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li><li>Let <var>varEnvRec</var> be <var>envRec</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>envRec</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnvRec</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: vars whose names are the same as a formal parameter, initially have the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate lexical <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Let <var>privateEnv</var> be the PrivateEnvironment of <var>calleeContext</var>.</li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in  <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "14.6.20", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ee4ae5a\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Perform ? BindingClassDeclarationEvaluation of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d461f28b\"><emu-t>class</emu-t><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d022e28b\"><emu-t>class</emu-t><emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>className</var> be <emu-val>undefined</emu-val>.</li><li>Else, let <var>className</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? ClassDefinitionEvaluation of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"241709ca\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" params=\"Yield, Await\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be StringValue of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>privateName</var> be <emu-xref aoid=\"NewPrivateName\"><a href=\"#sec-newprivatename\">NewPrivateName</a></emu-xref>(<var>privateIdentifier</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>scopeEnvRec</var> be <var>scope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Perform ! <var>scopeEnvRec</var>.InitializeBinding(<var>privateIdentifier</var>, <var>privateName</var>).</li><li>Return <var>privateName</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f512250e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c25b1d19\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"be6457e0\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>function</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a922691e\"><emu-t>async</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c19c56e7\"><emu-t>await</emu-t><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present. The  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent, <code>await</code> is parsed as a keyword and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the  <sub>[<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-PropertyDefinitionEvaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.14</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-super-keyword-runtime-semantics-evaluation": {"num": "12.3.5.1", "title": "#sec-super-keyword-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-super-keyword-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-super-keyword-runtime-semantics-evaluation\">#sec-super-keyword-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b698f30f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperProperty\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>propertyKey</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>If the code matched by this <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"MakeSuperPropertyReference\"><a href=\"#sec-makesuperpropertyreference\">MakeSuperPropertyReference</a></emu-xref>(<var>actualThis</var>, <var>propertyKey</var>, <var>strict</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SuperCall\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a833032f\"><emu-t>super</emu-t><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetSuperConstructor\"><a href=\"#sec-getsuperconstructor\">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Perform ? <var>thisER</var>.BindThisValue(<var>result</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializepublicinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>result</var>, <var>F</var>).</li><li>Return <var>result</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializereferencedbinding": {"num": "6.2.4.12", "title": "#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )", "html": "<emu-clause id=\"sec-initializereferencedbinding\" aoid=\"InitializeReferencedBinding\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializereferencedbinding\">#sec-initializereferencedbinding</span> InitializeReferencedBinding ( <var>V</var>, <var>W</var> )</h1>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>false</emu-val>.</li><li>Let <var>base</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>V</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Return <var>base</var>.InitializeBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorfunctioncreate": {"num": "9.2.6", "title": "#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-generatorfunctioncreate\" aoid=\"GeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunctioncreate\">#sec-generatorfunctioncreate</span> GeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>PrivateScope</var>. GeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-class-definitions": {"num": "14.6", "title": "#sec-class-definitions Class Definitions", "html": "<emu-clause id=\"sec-class-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions\">#sec-class-definitions</span> Class Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\" id=\"prod-ClassDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"afef225f\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassExpression\" params=\"Yield, Await\" id=\"prod-ClassExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd578cac\"><emu-t>class</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassTail\" params=\"Yield, Await\" id=\"prod-ClassTail\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2d0a98e\"><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassHeritage\" params=\"Yield, Await\" id=\"prod-ClassHeritage\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7989e09f\"><emu-t>extends</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassBody\" params=\"Yield, Await\" id=\"prod-ClassBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementList\" params=\"Yield, Await\" id=\"prod-ClassElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElement\" params=\"Yield, Await\" id=\"prod-ClassElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\"><emu-t>static</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"814c5932\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FieldDefinition\" params=\"Yield, Await\" id=\"prod-FieldDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FieldDefinition\">FieldDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"07b63f4d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"In, ~Yield, ~Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[In, ~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ClassElementName\" params=\"Yield, Await\" id=\"prod-ClassElementName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"241709ca\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A class definition is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-class-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.6.1</span>#sec-class-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.6.2</span>#sec-class-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-static-semantics-constructormethod\"><h1><span class=\"secnum\">14.6.3</span>#sec-static-semantics-constructormethod Static Semantics: ConstructorMethod</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.6.4</span>#sec-class-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.6.5</span>#sec-class-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.6.6</span>#sec-class-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.6.7</span>#sec-class-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.6.8</span>#sec-class-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-static-semantics-isstatic\"><h1><span class=\"secnum\">14.6.9</span>#sec-static-semantics-isstatic Static Semantics: IsStatic</h1>...</div><div id=\"excluded-sec-static-semantics-nonconstructormethoddefinitions\"><h1><span class=\"secnum\">14.6.10</span>#sec-static-semantics-nonconstructormethoddefinitions Static Semantics: NonConstructorMethodDefinitions</h1>...</div><div id=\"excluded-sec-static-semantics-prototypepropertynamelist\"><h1><span class=\"secnum\">14.6.11</span>#sec-static-semantics-prototypepropertynamelist Static Semantics: PrototypePropertyNameList</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.6.12</span>#sec-class-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-allprivateidentifiersvalid\"><h1><span class=\"secnum\">14.6.13</span>#sec-class-definitions-static-semantics-allprivateidentifiersvalid Static Semantics: AllPrivateIdentifiersValid</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-classelementevaluation\"><h1><span class=\"secnum\">14.6.14</span>#sec-class-definitions-static-semantics-classelementevaluation Runtime Semantics: ClassElementEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-privateboundidentifiers\"><h1><span class=\"secnum\">14.6.15</span>#sec-class-definitions-static-semantics-privateboundidentifiers Static Semantics: PrivateBoundIdentifiers</h1>...</div><div id=\"excluded-sec-class-definitions-static-semantics-containsarguments\"><h1><span class=\"secnum\">14.6.16</span>#sec-class-definitions-static-semantics-containsarguments Static Semantics: ContainsArguments</h1>...</div><div id=\"excluded-sec-runtime-semantics-classdefinitionevaluation\"><h1><span class=\"secnum\">14.6.17</span>#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindingclassdeclarationevaluation\"><h1><span class=\"secnum\">14.6.18</span>#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.6.19</span>#sec-class-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.6.20</span>#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-class-definitions-runtime-semantics-classfielddefinitionevaluation\"><h1><span class=\"secnum\">14.6.21</span>#sec-class-definitions-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation</h1>...</div></emu-clause>\n\n  "}, "sec-static-semantics-isstatic": {"num": "14.6.9", "title": "#sec-static-semantics-isstatic Static Semantics: IsStatic", "html": "<emu-clause id=\"sec-static-semantics-isstatic\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isstatic\">#sec-static-semantics-isstatic</span> Static Semantics: IsStatic</h1>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4bc22514\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fa58c6b5\"><emu-t>static</emu-t><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0f30cf4f\"><emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-EvaluateBody": {"num": "14.7.11", "title": "#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody", "html": "<emu-clause id=\"sec-async-function-definitions-EvaluateBody\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-EvaluateBody\">#sec-async-function-definitions-EvaluateBody</span> Runtime Semantics: EvaluateBody</h1>\n      <p>With parameters <var>functionObject</var> and <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>argumentsList</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8aa65b90\"><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>declResult</var> be <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref>(<var>functionObject</var>, <var>argumentsList</var>).</li><li>If <var>declResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncFunctionStart\"><a href=\"#sec-async-functions-abstract-operations-async-function-start\">AsyncFunctionStart</a></emu-xref>(<var>promiseCapability</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>declResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>promiseCapability</var>.[[Promise]], [[Target]]: <emu-const>empty</emu-const> }.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"Initializer\">\n    <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fc3d0826\"><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argumentsList</var> is empty.</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>exprValue</var>, [[Target]]: <emu-const>empty</emu-const> }.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\"><emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> would not have any observable behaviour here, so its call is omitted.</div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>, <var>prototype</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n\n          <p>This abstract method performs the following steps:</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <code>\"ambiguous\"</code>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> in <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <code>\"*\"</code>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <code>\"ambiguous\"</code>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Call <var>envRec</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> in <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>Let <var>privateEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<emu-val>null</emu-val>).</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-functioncreate": {"num": "9.2.5", "title": "#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope [ , prototype ] )", "html": "<emu-clause id=\"sec-functioncreate\" aoid=\"FunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioncreate\">#sec-functioncreate</span> FunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var> [ , <var>prototype</var> ] )</h1>\n      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>PrivateScope</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>If <var>kind</var> is not <emu-const>Normal</emu-const>, let <var>allocKind</var> be <code>\"non-constructor\"</code>.</li><li>Else, let <var>allocKind</var> be <code>\"normal\"</code>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>prototype</var>, <var>allocKind</var>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>When the abstract operation EvalDeclarationInstantiation is called with arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>, the following steps are taken:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnvRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>Let <var>thisEnvRec</var> be <var>thisLex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>thisEnvRec</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisEnvRec</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>'s outer environment reference.</li></ol></li></ol></li><li>Let <var>privateIdentifiers</var> be an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>privateEnv</var> be <var>privateEnv</var>.</li><li>Repeat while <var>privateEnv</var> is not <emu-val>null</emu-val>,<ol><li>For each binding named <var>N</var> in <var>privateEnv</var>,<ol><li>If <var>privateIdentifiers</var> does not contain <var>N</var>, append <var>N</var> to <var>privateIdentifiers</var>.</li></ol></li><li>Let <var>privateEnv</var> be <var>privateEnv</var>'s outer environment reference.</li></ol></li><li>If AllPrivateIdentifiersValid of <var>body</var> with the argument <var>privateIdentifiers</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a Proxy <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-tokens": {"num": "11.5", "title": "#sec-tokens Tokens", "html": "<emu-clause id=\"sec-tokens\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tokens\">#sec-tokens</span> Tokens</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"PrivateIdentifier\" type=\"lexical\" id=\"prod-PrivateIdentifier\">\n    <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7821d888\"><emu-t>#</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CommonToken\" type=\"lexical\" id=\"prod-CommonToken\">\n    <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee18f3d6\"><emu-nt><a href=\"#prod-Punctuator\">Punctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3ec1ae06\"><emu-nt><a href=\"#prod-Template\">Template</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt>, <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, <emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt>, and <emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt> productions derive additional tokens that are not included in the <emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt> production.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"throw\"</code>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <code>\"return\"</code>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An  <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s  <dfn id=\"running-execution-context\">running execution context</dfn>.  All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The  <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in  <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          \n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          \n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called  <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the  <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in  <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> whose <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            PrivateEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> whose <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> holds internal Private Names created by <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt>s.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in  <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The PrivateEnvironment Lexical Context is always a chain of Declaration Contexts. Each name begins with <code>\"#\"</code>.</div></emu-note>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          \n          </td>\n          <td>\n            The GeneratorObject that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-async-functions-abstract-operations-async-function-create": {"num": "9.2.8", "title": "#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-create\" aoid=\"AsyncFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-create\">#sec-async-functions-abstract-operations-async-function-create</span> AsyncFunctionCreate ( <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation AsyncFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>parameters</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>PrivateScope</var>. AsyncFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"async\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var>, <var>PrivateScope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameters <var>scope</var> and <var>privateScope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-scripts-static-semantics-early-errors": {"num": "15.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b78f99cc\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        \n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cf403a0c\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in  <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in  <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if AllPrivateIdentifiersValid of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>false</emu-val> unless the source code is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>.\n        \n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-reference-specification-type": {"num": "6.2.4", "title": "#sec-reference-specification-type The Reference Specification Type", "html": "<emu-clause id=\"sec-reference-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</span> The Reference Specification Type</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Reference type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> keyword and other language features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>\n      </div></emu-note>\n      <p>A  <dfn>Reference</dfn> is a resolved name or property binding. A Reference consists of three components, the base value component, the referenced name component, and the Boolean-valued strict reference flag. The base value component is either <emu-val>undefined</emu-val>, an Object, a Boolean, a String, a Symbol, a Number, or an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. A base value component of <emu-val>undefined</emu-val> indicates that the Reference could not be resolved to a binding. The referenced name component is a String or Symbol value.</p>\n      <p>A  <dfn id=\"super-reference\">Super Reference</dfn> is a Reference that is used to represent a name binding that was expressed using the super keyword. A <emu-xref href=\"#super-reference\"><a href=\"#super-reference\">Super Reference</a></emu-xref> has an additional thisValue component, and its base value component will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate on references:</p>\n\n      <div id=\"excluded-sec-getbase\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-getbase GetBase ( V )</h1>...</div><div id=\"excluded-sec-getreferencedname\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-getreferencedname GetReferencedName ( V )</h1>...</div><div id=\"excluded-sec-isstrictreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-isstrictreference IsStrictReference ( V )</h1>...</div><div id=\"excluded-sec-hasprimitivebase\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-hasprimitivebase HasPrimitiveBase ( V )</h1>...</div><div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-isprivatereference\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-isprivatereference IsPrivateReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.10</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.11</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.12</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div><!--\n      1. Replace all occurences of \"Return a value of type Reference...\" with calls to MakeReference\n      2. Rename MakeSuperPropertyReference to MakeSuperReference for consistency.\n\n      <emu-clause id=\"sec-makereference\" aoid=\"MakeReference\">\n        <h1>MakeReference ( _baseValue_, _referencedName_, _strict_ )</h1>\n        <emu-alg>\n          1. Return a value of type Reference whose base value is _baseValue_, whose referenced name is _referencedName_, whose strict reference flag is _strict_, and whose private reference component is *false*.\n        </emu-alg>\n      </emu-clause>\n      -->\n\n      <div id=\"excluded-sec-makeprivatereference\"><h1><span class=\"secnum\">6.2.4.13</span>#sec-makeprivatereference MakePrivateReference ( baseValue, privateIdentifier )</h1>...</div></emu-clause>\n\n    "}, "sec-asyncgeneratorfunctioncreate": {"num": "9.2.7", "title": "#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-asyncgeneratorfunctioncreate\" aoid=\"AsyncGeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunctioncreate\">#sec-asyncgeneratorfunctioncreate</span> AsyncGeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation AsyncGeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>PrivateScope</var>. AsyncGeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>PrivateScope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-delete-operator-runtime-semantics-evaluation": {"num": "12.5.3.2", "title": "#sec-delete-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-delete-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsPrivateReference\"><a href=\"#sec-isprivatereference\">IsPrivateReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsSuperReference\"><a href=\"#sec-issuperreference\">IsSuperReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>baseObj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>)).</li><li>Let <var>deleteStatus</var> be ? <var>baseObj</var>.[[Delete]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).</li><li>If <var>deleteStatus</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>deleteStatus</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ref</var> is a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> to an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding.</li><li>Let <var>bindings</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Return ? <var>bindings</var>.DeleteBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> exception is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name. In addition, if a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> }, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-left-hand-side-expressions": {"num": "12.3", "title": "#sec-left-hand-side-expressions Left-Hand-Side Expressions", "html": "<emu-clause id=\"sec-left-hand-side-expressions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions\">#sec-left-hand-side-expressions</span> Left-Hand-Side Expressions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MemberExpression\" params=\"Yield, Await\" id=\"prod-MemberExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"669d9e8f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"46700b57\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"fea749a8\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e3a714cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"83d44750\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8554289\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e1c9c130\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SuperProperty\" params=\"Yield, Await\" id=\"prod-SuperProperty\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperProperty\">SuperProperty</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7f66819f\"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f690ec4a\"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MetaProperty\" id=\"prod-MetaProperty\">\n    <emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"733bdb20\"><emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\" id=\"prod-NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\" params=\"Yield, Await\" id=\"prod-NewExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"55b72ef4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8b27ffb1\"><emu-t>new</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CallExpression\" params=\"Yield, Await\" id=\"prod-CallExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"callcover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5c60d05\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d766951c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd0d9a85\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"24037841\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"f1fcc490\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c4dd808\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, +Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[?Yield, ?Await, +Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"eb69cf19\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"SuperCall\" params=\"Yield, Await\" id=\"prod-SuperCall\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SuperCall\">SuperCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6b5bb3dd\"><emu-t>super</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportCall\" params=\"Yield, Await\" id=\"prod-ImportCall\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ImportCall\">ImportCall</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b3f5031f\"><emu-t>import</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"Arguments\" params=\"Yield, Await\" id=\"prod-Arguments\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"78e44c33\"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"668c9409\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n    <emu-rhs a=\"c520166a\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>)</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArgumentList\" params=\"Yield, Await\" id=\"prod-ArgumentList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8f532861\"><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"2ab72a4a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d6f13c65\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArgumentList\">ArgumentList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\" params=\"Yield, Await\" id=\"prod-LeftHandSideExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a89347cc\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-NewExpression\">NewExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"8699f68d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CallExpression\">CallExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production  <emu-grammar><emu-production name=\"CallExpression\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"CallMemberExpression\" params=\"Yield, Await\" id=\"prod-CallMemberExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f747be5d\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-static-semantics\"><h1><span class=\"secnum\">12.3.1</span>#sec-static-semantics Static Semantics</h1>...</div><div id=\"excluded-sec-property-accessors\"><h1><span class=\"secnum\">12.3.2</span>#sec-property-accessors Property Accessors</h1>...</div><div id=\"excluded-sec-new-operator\"><h1><span class=\"secnum\">12.3.3</span>#sec-new-operator The new Operator</h1>...</div><div id=\"excluded-sec-function-calls\"><h1><span class=\"secnum\">12.3.4</span>#sec-function-calls Function Calls</h1>...</div><div id=\"excluded-sec-super-keyword\"><h1><span class=\"secnum\">12.3.5</span>#sec-super-keyword The super Keyword</h1>...</div><div id=\"excluded-sec-argument-lists\"><h1><span class=\"secnum\">12.3.6</span>#sec-argument-lists Argument Lists</h1>...</div><div id=\"excluded-sec-import-calls\"><h1><span class=\"secnum\">12.3.7</span>#sec-import-calls Import Calls</h1>...</div><div id=\"excluded-sec-tagged-templates\"><h1><span class=\"secnum\">12.3.8</span>#sec-tagged-templates Tagged Templates</h1>...</div><div id=\"excluded-sec-meta-properties\"><h1><span class=\"secnum\">12.3.9</span>#sec-meta-properties Meta Properties</h1>...</div></emu-clause>\n\n  "}, "sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called  <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>All objects have an internal slot named [[PrivateFieldValues]], which is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref aoid=\"PrivateField\"><a href=\"#sec-privatefield-record-specification-type\">PrivateField</a></emu-xref> Records. This <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> represents the values of the private fields for the object. Initially, it is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> summarizes the  <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>The &#8220;Signature&#8221; column of  <emu-xref href=\"#table-5\"><a href=\"#table-5\" class=\"excluded-xref\" excluded-id=\"table-5\">#table-5</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause  <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.</p>\n        <emu-table id=\"table-5\" caption=\"Essential Internal Methods\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-5\">#table-5</span>: Essential Internal Methods</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Object | Null\n              \n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              \n              </td>\n              <td>\n                (Object | Null)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              \n              </td>\n              <td>\n                (<var>propertyKey</var>)  <b>&#8594;</b> Boolean\n              \n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              \n              </td>\n              <td>\n                ( )  <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              \n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A  <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A  <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or  <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-6\" caption=\"Additional Essential Internal Methods of Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-6\">#table-6</span>: Additional Essential Internal Methods of Function Objects</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              \n              </th>\n              <th>\n                Signature\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              \n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>)  <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are  <em>callable</em>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              \n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of  <em>any</em>, Object)  <b>&#8594;</b> Object\n              \n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> or <code>super</code> operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called  <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-class-definitions-static-semantics-propname": {"num": "14.6.12", "title": "#sec-class-definitions-static-semantics-propname Static Semantics: PropName", "html": "<emu-clause id=\"sec-class-definitions-static-semantics-propname\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-static-semantics-propname\">#sec-class-definitions-static-semantics-propname</span> Static Semantics: PropName</h1>\n      <emu-see-also-para op=\"PropName\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ClassElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"46a6730d\"><emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return PropName of <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"884dbe65\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the PrivateEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval with arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Let <var>inFunction</var> be <emu-val>true</emu-val>.</li><li>Let <var>inMethod</var> be <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <code>\"derived\"</code>, let <var>inDerivedConstructor</var> be <emu-val>true</emu-val>; otherwise, let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>Let <var>inClassFieldInitializer</var> be <var>F</var>.[[ClassFieldInitializer]].</li></ol></li><li>Else,<ol><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>Let <var>inClassFieldInitializer</var> be <emu-val>false</emu-val>.</li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing <var>x</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inClassFieldInitializer</var> is <emu-val>true</emu-val>, and ContainsArguments of <var>body</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>ctx</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>ctx</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>ctx</var>'s VariableEnvironment.</li><li>Let <var>privateEnv</var> be <var>ctx</var>'s PrivateEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li><li>Let <var>privateEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>ctx</var> is not already suspended, suspend <var>ctx</var>.</li><li>Let <var>evalCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the <var>evalCxt</var>'s Function to <emu-val>null</emu-val>.</li><li>Set the <var>evalCxt</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set the <var>evalCxt</var>'s ScriptOrModule to <var>ctx</var>'s ScriptOrModule.</li><li>Set the <var>evalCxt</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set the <var>evalCxt</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Set the <var>evalCxt</var>'s PrivateEnvironment to <var>privateEnv</var>.</li><li>Push <var>evalCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>privateEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-data-blocks": {"num": "6.2.7", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The  <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a  <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is  <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty.  Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.7.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.7.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.7.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameters <var>scope</var> and <var>privateScope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"default\"</code>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-isidentifierref": {"num": "12.3.1.5", "title": "#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isidentifierref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isidentifierref\">#sec-static-semantics-static-semantics-isidentifierref</span> Static Semantics: IsIdentifierRef</h1>\n        <emu-see-also-para op=\"IsIdentifierRef\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d2e2bd68\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-specification-type The Reference Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Lexical Environment and Environment Record Specification Types</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.7</span>#sec-data-blocks Data Blocks</h1>...</div><div id=\"excluded-sec-privatefield-record-specification-type\"><h1><span class=\"secnum\">6.2.8</span>#sec-privatefield-record-specification-type The PrivateField Record Specification Type</h1>...</div><div id=\"excluded-sec-classfielddefinition-record-specification-type\"><h1><span class=\"secnum\">6.2.9</span>#sec-classfielddefinition-record-specification-type The ClassFieldDefinition Record Specification Type</h1>...</div><div id=\"excluded-sec-private-names\"><h1><span class=\"secnum\">6.2.10</span>#sec-private-names Private Names</h1>...</div></emu-clause>\n"}}, "figData": {"table-2": "Table 2", "table-5": "Table 5", "table-6": "Table 6", "table-22": "Table 24", "table-23": "Table 25", "table-24": "Table 26", "table-27": "Table 30", "table-dynamic-function-sourcetext-prefixes": "Table 50"}}}