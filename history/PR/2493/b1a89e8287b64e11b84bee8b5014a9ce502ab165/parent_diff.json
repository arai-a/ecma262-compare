{"from": {"secList": ["sec-array.prototype.concat", "sec-stringgetownproperty", "sec-string.prototype.split", "sec-array.prototype-@@unscopables", "sec-string.prototype.padstart", "sec-array.prototype.sort", "sec-string.prototype.trim", "sec-properties-of-the-string-prototype-object", "sec-array.prototype.flat", "sec-properties-of-the-array-prototype-object", "sec-mathematical-operations", "sec-string.prototype.replace", "sec-%typedarray%.prototype.set", "sec-properties-of-the-%typedarrayprototype%-object", "sec-string.prototype.charat"], "secData": {"sec-array.prototype.concat": {"num": "23.1.3.1", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>Returns an array containing the array elements of the object followed by the array elements of each argument.</p>\n        <p>When the <code>concat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>), <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">23.1.3.1.1</span>#sec-isconcatspreadable IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-stringgetownproperty": {"num": "10.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> and <var>P</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is an Object that has a [[StringData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <var>len</var> &#8804; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>), return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>).</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-string.prototype.split": {"num": "22.1.3.21", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-const>not-matched</emu-const>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">22.1.3.21.1</span>#sec-splitmatch SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.34", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-string.prototype.padstart": {"num": "22.1.3.15", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-const>start</emu-const>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">22.1.3.15.1</span>#sec-stringpad StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "23.1.3.27", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative Number if <var>x</var> &lt; <var>y</var>, a positive Number if <var>x</var> &gt; <var>y</var>, or a zero otherwise.</p>\n        <p>When the <code>sort</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li id=\"step-array-sort-comparefn\">If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li id=\"step-array-sort-len\">Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>items</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>Append <var>kValue</var> to <var>items</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li id=\"step-array-sort\">Sort <var>items</var> using an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> sequence of calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If any such call returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, stop before performing any further calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> or steps in this algorithm and return that completion.</li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>j</var> &lt; <var>itemCount</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>)), <var>items</var>[<var>j</var>], <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Repeat, while <var>j</var> &lt; <var>len</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>))).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>The sort order is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> if any of the following conditions is true:</p>\n        <ul>\n          <li>\n            If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of <var>items</var> (see below).\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>Unless the sort order is specified above to be <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <var>items</var> must satisfy all of the following conditions after executing step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> of the algorithm above:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the non-negative integers less than <var>itemCount</var>, such that for every non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>itemCount</var>, the element <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is exactly the same as <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn>.\n          </li>\n          <li>\n            Then for all non-negative integers <var>j</var> and <var>k</var>, each less than <var>itemCount</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">&#960;(<var>j</var>) &lt; &#960;(<var>k</var>)</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> before step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> after step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">23.1.3.27.1</span>#sec-sortcompare SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "22.1.3.29", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <emu-const>start+end</emu-const>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">22.1.3.29.1</span>#sec-trimstring TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-properties-of-the-string-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The <dfn>String prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%String.prototype%</dfn>.</li>\n        <li>is a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation <dfn id=\"thisstringvalue\" aoid=\"thisStringValue\" oldids=\"sec-thisstringvalue\"><span id=\"sec-thisstringvalue\"></span>thisStringValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.replaceall\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-array.prototype.flat": {"num": "23.1.3.10", "title": "#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )", "html": "<emu-clause id=\"sec-array.prototype.flat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flat\">#sec-array.prototype.flat</span> Array.prototype.flat ( [ <var>depth</var> ] )</h1>\n        <p>When the <code>flat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>depthNum</var> be 1.</li><li>If <var>depth</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>depthNum</var> to ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>depth</var>).</li><li>If <var>depthNum</var> &lt; 0, set <var>depthNum</var> to 0.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, <var>depthNum</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-flattenintoarray\"><h1><span class=\"secnum\">23.1.3.10.1</span>#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )</h1>...</div></emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "23.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The <dfn>Array prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Array.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">23.1.3.1</span>#sec-array.prototype.concat Array.prototype.concat ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">23.1.3.2</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">23.1.3.3</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">23.1.3.4</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">23.1.3.5</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">23.1.3.6</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">23.1.3.7</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">23.1.3.8</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">23.1.3.9</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">23.1.3.10</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">23.1.3.11</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">23.1.3.12</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">23.1.3.13</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">23.1.3.14</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">23.1.3.15</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">23.1.3.16</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">23.1.3.17</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">23.1.3.18</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">23.1.3.19</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">23.1.3.20</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">23.1.3.21</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">23.1.3.22</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">23.1.3.23</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">23.1.3.24</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">23.1.3.25</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">23.1.3.26</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">23.1.3.27</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">23.1.3.28</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">23.1.3.29</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">23.1.3.30</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">23.1.3.31</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">23.1.3.32</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">23.1.3.33</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">23.1.3.34</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to these kinds of numeric values:</p>\n      <ul>\n        <li><em>Mathematical values</em>: Arbitrary real numbers, used as the default numeric type.</li>\n        <li><em>Extended mathematical values</em>: Mathematical values together with +&#8734; and -&#8734;.</li>\n        <li><em>Numbers</em>: <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double-precision floating point values.</li>\n        <li><em>BigInts</em>: ECMAScript values representing arbitrary integers in a one-to-one correspondence.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values are distinguished among different numeric kinds using subscript suffixes. The subscript <sub>&#120125;</sub> refers to Numbers, and the subscript <sub>&#8484;</sub> refers to BigInts. Numeric values without a subscript suffix refer to mathematical values.</p>\n      <p>Numeric operators such as +, &#215;, =, and &#8805; refer to those operations as determined by the type of the operands. When applied to mathematical values, the operators refer to the usual mathematical operations. When applied to Numbers, the operators refer to the relevant operations within <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. When applied to BigInts, the operators refer to the usual mathematical operations applied to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the BigInt.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the number of code points in &#8230;\" or \"the BigInt value for &#8230;\".</p>\n      <p>Numeric operators applied to mixed-type operands (such as a Number and a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>) are not defined and should be considered an editorial error in this specification.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>When the term <dfn id=\"integer\" oldids=\"mathematical integer\"><span id=\"mathematical integer\"></span>integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers, unless otherwise stated. When the term <dfn id=\"integral-number\">integral Number</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers.</p>\n      <p>Conversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> or <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> <var>x</var> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\" or <dfn id=\"&#120125;\">&#120125;</dfn>(<var>x</var>), and is defined in <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>x</var> to a BigInt is denoted as \"the BigInt value for <var>x</var>\" or <dfn id=\"&#8484;\">&#8484;</dfn>(<var>x</var>). A conversion from a Number or BigInt <var>x</var> to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <dfn id=\"&#8477;\">&#8477;</dfn>(<var>x</var>). The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined. The <dfn id=\"extended-mathematical-value\">extended mathematical value</dfn> of <var>x</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> for finite values, and is +&#8734; and -&#8734; for <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> respectively; it is not defined for <emu-val>NaN</emu-val>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> &lt; 0 and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions are the extended mathematical values.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and non-zero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>q</var>.</p>\n      <p>The phrase \"the result of <dfn id=\"clamping\">clamping</dfn> <var>x</var> between <var>lower</var> and <var>upper</var>\" (where <var>x</var> is an <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> and <var>lower</var> and <var>upper</var> are mathematical values such that <var>lower</var> &#8804; <var>upper</var>) produces <var>lower</var> if <var>x</var> &lt; <var>lower</var>, produces <var>upper</var> if <var>x</var> &gt; <var>upper</var>, and otherwise produces <var>x</var>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (closest to +&#8734;) that is not larger than <var>x</var>.</p>\n      <p>Mathematical functions min, max, <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>, and <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref> are not defined for Numbers and BigInts, and any usage of those methods that have non-<emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> arguments would be an editorial error in this specification.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-string.prototype.replace": {"num": "22.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref>).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>searchLength</var> be the length of <var>searchString</var>.</li><li>Let <var>position</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, 0).</li><li>If <var>position</var> is -1, return <var>string</var>.</li><li>Let <var>preserved</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from 0 to <var>position</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>searchString</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>position</var>), <var>string</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replaceValue</var>) is String.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replacement</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>searchString</var>, <var>string</var>, <var>position</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>preserved</var>, <var>replacement</var>, and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>position</var> + <var>searchLength</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">22.1.3.17.1</span>#sec-getsubstitution GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.23", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <p>When the <code>set</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.23.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.23.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-properties-of-the-%typedarrayprototype%-object": {"num": "23.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray% Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray% Prototype Object</h1>\n      <p>The <dfn>%TypedArray% prototype object</dfn>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is <dfn>%TypedArray.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">23.2.3.1</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">23.2.3.2</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">23.2.3.3</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">23.2.3.4</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">23.2.3.5</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">23.2.3.6</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">23.2.3.7</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">23.2.3.8</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">23.2.3.9</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">23.2.3.10</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">23.2.3.11</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">23.2.3.12</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">23.2.3.13</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">23.2.3.14</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">23.2.3.15</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">23.2.3.16</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">23.2.3.17</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">23.2.3.18</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">23.2.3.19</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">23.2.3.20</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">23.2.3.21</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">23.2.3.22</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set\"><h1><span class=\"secnum\">23.2.3.23</span>#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">23.2.3.24</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">23.2.3.25</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">23.2.3.26</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">23.2.3.27</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">23.2.3.28</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">23.2.3.29</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">23.2.3.30</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">23.2.3.31</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">23.2.3.32</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-string.prototype.charat": {"num": "22.1.3.1", "title": "#sec-string.prototype.charat String.prototype.charAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.charat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.charat\">#sec-string.prototype.charat</span> String.prototype.charAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a single element String containing the code unit at index <var>pos</var> within the String value resulting from converting this object to a String. If there is no element at that index, the result is the empty String. The result is a String value, not a String object.</p>\n          <p>If <code>pos</code> is an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, then the result of <code>x.charAt(pos)</code> is equivalent to the result of <code>x.substring(pos, pos + 1)</code>.</p>\n        </div></emu-note>\n        <p>When the <code>charAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return the empty String.</li><li>Return the String value of length 1, containing one code unit from <var>S</var>, namely the code unit at index <var>position</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>charAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-array.prototype.concat", "sec-string.prototype.at", "sec-array.prototype.at", "sec-stringgetownproperty", "sec-string.prototype.split", "sec-array.prototype-@@unscopables", "sec-string.prototype.padstart", "sec-array.prototype.sort", "sec-string.prototype.trim", "sec-properties-of-the-string-prototype-object", "sec-array.prototype.flat", "sec-properties-of-the-array-prototype-object", "sec-mathematical-operations", "sec-string.prototype.replace", "sec-%typedarray%.prototype.set", "sec-%typedarray%.prototype.at", "sec-properties-of-the-%typedarrayprototype%-object", "sec-string.prototype.charat"], "secData": {"sec-array.prototype.concat": {"num": "23.1.3.2", "title": "#sec-array.prototype.concat Array.prototype.concat ( ...items )", "html": "<emu-clause id=\"sec-array.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.concat\">#sec-array.prototype.concat</span> Array.prototype.concat ( ...<var>items</var> )</h1>\n        <p>Returns an array containing the array elements of the object followed by the array elements of each argument.</p>\n        <p>When the <code>concat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Let <var>n</var> be 0.</li><li>Prepend <var>O</var> to <var>items</var>.</li><li>For each element <var>E</var> of <var>items</var>, do<ol><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"IsConcatSpreadable\"><a href=\"#sec-isconcatspreadable\">IsConcatSpreadable</a></emu-xref>(<var>E</var>).</li><li>If <var>spreadable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>k</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>E</var>).</li><li>If <var>n</var> + <var>len</var> &gt; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>subElement</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>E</var>, <var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>subElement</var>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>NOTE: <var>E</var> is added as a single item rather than spread.</li><li>If <var>n</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>E</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li id=\"step-array-proto-concat-set-length\">Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>), <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The explicit setting of the <emu-val>\"length\"</emu-val> property in step <emu-xref href=\"#step-array-proto-concat-set-length\"><a href=\"#step-array-proto-concat-set-length\" class=\"excluded-xref\" excluded-id=\"step-array-proto-concat-set-length\">#step-array-proto-concat-set-length</a></emu-xref> is necessary to ensure that its value is correct in situations where the trailing elements of the result Array are not present.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-isconcatspreadable\"><h1><span class=\"secnum\">23.1.3.2.1</span>#sec-isconcatspreadable IsConcatSpreadable ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.at": {"num": "22.1.3.1", "title": "#sec-string.prototype.at String.prototype.at ( index )", "html": "<emu-clause id=\"sec-string.prototype.at\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.at\">#sec-string.prototype.at</span> String.prototype.at ( <var>index</var> )</h1>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>relativeIndex</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>index</var>).</li><li>If <var>relativeIndex</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>relativeIndex</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>relativeIndex</var>.</li></ol></li><li>If <var>k</var> &lt; 0 or <var>k</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>Return the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>k</var> to <var>k</var> + 1.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.at": {"num": "23.1.3.1", "title": "#sec-array.prototype.at Array.prototype.at ( index )", "html": "<emu-clause id=\"sec-array.prototype.at\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.at\">#sec-array.prototype.at</span> Array.prototype.at ( <var>index</var> )</h1>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeIndex</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>index</var>).</li><li>If <var>relativeIndex</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>relativeIndex</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>relativeIndex</var>.</li></ol></li><li>If <var>k</var> &lt; 0 or <var>k</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-stringgetownproperty": {"num": "10.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> and <var>P</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is an Object that has a [[StringData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <var>len</var> &#8804; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>), return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>str</var> from <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) + 1.</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-string.prototype.split": {"num": "22.1.3.22", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-const>not-matched</emu-const>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">22.1.3.22.1</span>#sec-splitmatch SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype-@@unscopables": {"num": "23.1.3.35", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"at\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-string.prototype.padstart": {"num": "22.1.3.16", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-const>start</emu-const>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">22.1.3.16.1</span>#sec-stringpad StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.sort": {"num": "23.1.3.28", "title": "#sec-array.prototype.sort Array.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-array.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</span> Array.prototype.sort ( <var>comparefn</var> )</h1>\n        <p>The elements of this array are sorted. The sort must be stable (that is, elements that compare equal must remain in their original order). If <var>comparefn</var> is not <emu-val>undefined</emu-val>, it should be a function that accepts two arguments <var>x</var> and <var>y</var> and returns a negative Number if <var>x</var> &lt; <var>y</var>, a positive Number if <var>x</var> &gt; <var>y</var>, or a zero otherwise.</p>\n        <p>When the <code>sort</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li id=\"step-array-sort-comparefn\">If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li id=\"step-array-sort-len\">Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>items</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>If <var>kPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>Pk</var>).</li><li>Append <var>kValue</var> to <var>items</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>itemCount</var> be the number of elements in <var>items</var>.</li><li id=\"step-array-sort\">Sort <var>items</var> using an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> sequence of calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>. If any such call returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, stop before performing any further calls to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> or steps in this algorithm and return that completion.</li><li>Let <var>j</var> be 0.</li><li>Repeat, while <var>j</var> &lt; <var>itemCount</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>)), <var>items</var>[<var>j</var>], <emu-val>true</emu-val>).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Repeat, while <var>j</var> &lt; <var>len</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>j</var>))).</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <p>The <em>sort order</em> is the ordering, after completion of this function, of the <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> property values of <var>obj</var> whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> indexes are less than <var>len</var>. The result of the <code>sort</code> function is then determined as follows:</p>\n        <p>The sort order is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> if any of the following conditions is true:</p>\n        <ul>\n          <li>\n            If <var>comparefn</var> is not <emu-val>undefined</emu-val> and is not a consistent comparison function for the elements of <var>items</var> (see below).\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> does not act as a consistent comparison function.\n          </li>\n          <li>\n            If <var>comparefn</var> is <emu-val>undefined</emu-val> and all applications of <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, to any specific value passed as an argument to <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>, do not produce the same result.\n          </li>\n        </ul>\n        <p>Unless the sort order is specified above to be <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <var>items</var> must satisfy all of the following conditions after executing step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> of the algorithm above:</p>\n        <ul>\n          <li>\n            There must be some mathematical permutation &#960; of the non-negative integers less than <var>itemCount</var>, such that for every non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>j</var> less than <var>itemCount</var>, the element <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is exactly the same as <emu-eqn class=\"inline\">new[&#960;(<var>j</var>)]</emu-eqn>.\n          </li>\n          <li>\n            Then for all non-negative integers <var>j</var> and <var>k</var>, each less than <var>itemCount</var>, if <emu-eqn class=\"inline\"><emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref>(old[<var>j</var>], old[<var>k</var>]) &lt; 0</emu-eqn> (see <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> below), then <emu-eqn class=\"inline\">&#960;(<var>j</var>) &lt; &#960;(<var>k</var>)</emu-eqn>.\n          </li>\n        </ul>\n        <p>Here the notation <emu-eqn class=\"inline\">old[<var>j</var>]</emu-eqn> is used to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> before step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> is executed, and the notation <emu-eqn class=\"inline\">new[<var>j</var>]</emu-eqn> to refer to <emu-eqn class=\"inline\"><var>items</var>[<var>j</var>]</emu-eqn> after step <emu-xref href=\"#step-array-sort\"><a href=\"#step-array-sort\" class=\"excluded-xref\" excluded-id=\"step-array-sort\">#step-array-sort</a></emu-xref> has been executed.</p>\n        <p>A function <var>comparefn</var> is a consistent comparison function for a set of values <var>S</var> if all of the requirements below are met for all values <var>a</var>, <var>b</var>, and <var>c</var> (possibly the same value) in the set <var>S</var>: The notation <emu-eqn class=\"inline\"><var>a</var> &lt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &lt; 0</emu-eqn>; <emu-eqn class=\"inline\"><var>a</var> =<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) = 0</emu-eqn> (of either sign); and <emu-eqn class=\"inline\"><var>a</var> &gt;<sub>CF</sub> <var>b</var></emu-eqn> means <emu-eqn class=\"inline\"><var>comparefn</var>(<var>a</var>, <var>b</var>) &gt; 0</emu-eqn>.</p>\n        <ul>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) always returns the same value <var>v</var> when given a specific pair of values <var>a</var> and <var>b</var> as its two arguments. Furthermore, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, and <var>v</var> is not <emu-val>NaN</emu-val>. Note that this implies that exactly one of <var>a</var> &lt;<sub>CF</sub> <var>b</var>, <var>a</var> =<sub>CF</sub> <var>b</var>, and <var>a</var> &gt;<sub>CF</sub> <var>b</var> will be true for a given pair of <var>a</var> and <var>b</var>.\n          </li>\n          <li>\n            Calling <var>comparefn</var>(<var>a</var>, <var>b</var>) does not modify <var>obj</var> or any object on <var>obj</var>'s prototype chain.\n          </li>\n          <li>\n            <var>a</var> =<sub>CF</sub> <var>a</var> (reflexivity)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var>, then <var>b</var> =<sub>CF</sub> <var>a</var> (symmetry)\n          </li>\n          <li>\n            If <var>a</var> =<sub>CF</sub> <var>b</var> and <var>b</var> =<sub>CF</sub> <var>c</var>, then <var>a</var> =<sub>CF</sub> <var>c</var> (transitivity of =<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &lt;<sub>CF</sub> <var>b</var> and <var>b</var> &lt;<sub>CF</sub> <var>c</var>, then <var>a</var> &lt;<sub>CF</sub> <var>c</var> (transitivity of &lt;<sub>CF</sub>)\n          </li>\n          <li>\n            If <var>a</var> &gt;<sub>CF</sub> <var>b</var> and <var>b</var> &gt;<sub>CF</sub> <var>c</var>, then <var>a</var> &gt;<sub>CF</sub> <var>c</var> (transitivity of &gt;<sub>CF</sub>)\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The above conditions are necessary and sufficient to ensure that <var>comparefn</var> divides the set <var>S</var> into equivalence classes and that these equivalence classes are totally ordered.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>sort</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-sortcompare\"><h1><span class=\"secnum\">23.1.3.28.1</span>#sec-sortcompare SortCompare ( x, y )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "22.1.3.30", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <emu-const>start+end</emu-const>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">22.1.3.30.1</span>#sec-trimstring TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-properties-of-the-string-prototype-object": {"num": "22.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The <dfn>String prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%String.prototype%</dfn>.</li>\n        <li>is a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation <dfn id=\"thisstringvalue\" aoid=\"thisStringValue\" oldids=\"sec-thisstringvalue\"><span id=\"sec-thisstringvalue\"></span>thisStringValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.at\"><h1><span class=\"secnum\">22.1.3.1</span>#sec-string.prototype.at String.prototype.at ( index )</h1>...</div><div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">22.1.3.2</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">22.1.3.3</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">22.1.3.4</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">22.1.3.5</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">22.1.3.6</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">22.1.3.7</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">22.1.3.8</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">22.1.3.9</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">22.1.3.10</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">22.1.3.11</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">22.1.3.12</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">22.1.3.13</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">22.1.3.14</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">22.1.3.15</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">22.1.3.16</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">22.1.3.17</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">22.1.3.18</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.replaceall\"><h1><span class=\"secnum\">22.1.3.19</span>#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">22.1.3.20</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">22.1.3.21</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">22.1.3.22</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">22.1.3.23</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">22.1.3.24</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">22.1.3.25</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">22.1.3.26</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">22.1.3.27</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">22.1.3.28</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">22.1.3.29</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">22.1.3.30</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">22.1.3.31</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">22.1.3.32</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">22.1.3.33</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">22.1.3.34</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-array.prototype.flat": {"num": "23.1.3.11", "title": "#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )", "html": "<emu-clause id=\"sec-array.prototype.flat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flat\">#sec-array.prototype.flat</span> Array.prototype.flat ( [ <var>depth</var> ] )</h1>\n        <p>When the <code>flat</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>depthNum</var> be 1.</li><li>If <var>depth</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>depthNum</var> to ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>depth</var>).</li><li>If <var>depthNum</var> &lt; 0, set <var>depthNum</var> to 0.</li></ol></li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, <var>depthNum</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-flattenintoarray\"><h1><span class=\"secnum\">23.1.3.11.1</span>#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )</h1>...</div></emu-clause>\n\n      "}, "sec-properties-of-the-array-prototype-object": {"num": "23.1.3", "title": "#sec-properties-of-the-array-prototype-object Properties of the Array Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-array-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-array-prototype-object\">#sec-properties-of-the-array-prototype-object</span> Properties of the Array Prototype Object</h1>\n      <p>The <dfn>Array prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Array.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is <emu-val>+0</emu-val><sub>&#120125;</sub> and whose attributes are { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Array prototype object is specified to be an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> to ensure compatibility with ECMAScript code that was created prior to the ECMAScript 2015 specification.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-array.prototype.at\"><h1><span class=\"secnum\">23.1.3.1</span>#sec-array.prototype.at Array.prototype.at ( index )</h1>...</div><div id=\"excluded-sec-array.prototype.concat\"><h1><span class=\"secnum\">23.1.3.2</span>#sec-array.prototype.concat Array.prototype.concat ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.constructor\"><h1><span class=\"secnum\">23.1.3.3</span>#sec-array.prototype.constructor Array.prototype.constructor</h1>...</div><div id=\"excluded-sec-array.prototype.copywithin\"><h1><span class=\"secnum\">23.1.3.4</span>#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-array.prototype.entries\"><h1><span class=\"secnum\">23.1.3.5</span>#sec-array.prototype.entries Array.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-array.prototype.every\"><h1><span class=\"secnum\">23.1.3.6</span>#sec-array.prototype.every Array.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.fill\"><h1><span class=\"secnum\">23.1.3.7</span>#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.filter\"><h1><span class=\"secnum\">23.1.3.8</span>#sec-array.prototype.filter Array.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.find\"><h1><span class=\"secnum\">23.1.3.9</span>#sec-array.prototype.find Array.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.findindex\"><h1><span class=\"secnum\">23.1.3.10</span>#sec-array.prototype.findindex Array.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flat\"><h1><span class=\"secnum\">23.1.3.11</span>#sec-array.prototype.flat Array.prototype.flat ( [ depth ] )</h1>...</div><div id=\"excluded-sec-array.prototype.flatmap\"><h1><span class=\"secnum\">23.1.3.12</span>#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.foreach\"><h1><span class=\"secnum\">23.1.3.13</span>#sec-array.prototype.foreach Array.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.includes\"><h1><span class=\"secnum\">23.1.3.14</span>#sec-array.prototype.includes Array.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.indexof\"><h1><span class=\"secnum\">23.1.3.15</span>#sec-array.prototype.indexof Array.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.join\"><h1><span class=\"secnum\">23.1.3.16</span>#sec-array.prototype.join Array.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-array.prototype.keys\"><h1><span class=\"secnum\">23.1.3.17</span>#sec-array.prototype.keys Array.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-array.prototype.lastindexof\"><h1><span class=\"secnum\">23.1.3.18</span>#sec-array.prototype.lastindexof Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-array.prototype.map\"><h1><span class=\"secnum\">23.1.3.19</span>#sec-array.prototype.map Array.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.pop\"><h1><span class=\"secnum\">23.1.3.20</span>#sec-array.prototype.pop Array.prototype.pop ( )</h1>...</div><div id=\"excluded-sec-array.prototype.push\"><h1><span class=\"secnum\">23.1.3.21</span>#sec-array.prototype.push Array.prototype.push ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.reduce\"><h1><span class=\"secnum\">23.1.3.22</span>#sec-array.prototype.reduce Array.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reduceright\"><h1><span class=\"secnum\">23.1.3.23</span>#sec-array.prototype.reduceright Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-array.prototype.reverse\"><h1><span class=\"secnum\">23.1.3.24</span>#sec-array.prototype.reverse Array.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-array.prototype.shift\"><h1><span class=\"secnum\">23.1.3.25</span>#sec-array.prototype.shift Array.prototype.shift ( )</h1>...</div><div id=\"excluded-sec-array.prototype.slice\"><h1><span class=\"secnum\">23.1.3.26</span>#sec-array.prototype.slice Array.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-array.prototype.some\"><h1><span class=\"secnum\">23.1.3.27</span>#sec-array.prototype.some Array.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-array.prototype.sort\"><h1><span class=\"secnum\">23.1.3.28</span>#sec-array.prototype.sort Array.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-array.prototype.splice\"><h1><span class=\"secnum\">23.1.3.29</span>#sec-array.prototype.splice Array.prototype.splice ( start, deleteCount, ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.tolocalestring\"><h1><span class=\"secnum\">23.1.3.30</span>#sec-array.prototype.tolocalestring Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-array.prototype.tostring\"><h1><span class=\"secnum\">23.1.3.31</span>#sec-array.prototype.tostring Array.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-array.prototype.unshift\"><h1><span class=\"secnum\">23.1.3.32</span>#sec-array.prototype.unshift Array.prototype.unshift ( ...items )</h1>...</div><div id=\"excluded-sec-array.prototype.values\"><h1><span class=\"secnum\">23.1.3.33</span>#sec-array.prototype.values Array.prototype.values ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@iterator\"><h1><span class=\"secnum\">23.1.3.34</span>#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-array.prototype-@@unscopables\"><h1><span class=\"secnum\">23.1.3.35</span>#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]</h1>...</div></emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to these kinds of numeric values:</p>\n      <ul>\n        <li><em>Mathematical values</em>: Arbitrary real numbers, used as the default numeric type.</li>\n        <li><em>Extended mathematical values</em>: Mathematical values together with +&#8734; and -&#8734;.</li>\n        <li><em>Numbers</em>: <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double-precision floating point values.</li>\n        <li><em>BigInts</em>: ECMAScript values representing arbitrary integers in a one-to-one correspondence.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values are distinguished among different numeric kinds using subscript suffixes. The subscript <sub>&#120125;</sub> refers to Numbers, and the subscript <sub>&#8484;</sub> refers to BigInts. Numeric values without a subscript suffix refer to mathematical values.</p>\n      <p>Numeric operators such as +, &#215;, =, and &#8805; refer to those operations as determined by the type of the operands. When applied to mathematical values, the operators refer to the usual mathematical operations. When applied to extended mathematical values, the operators refer to the usual mathematical operations over the extended real numbers; indeterminate forms are not defined and their use in this specification should be considered an editorial error. When applied to Numbers, the operators refer to the relevant operations within <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. When applied to BigInts, the operators refer to the usual mathematical operations applied to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the BigInt.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the number of code points in &#8230;\" or \"the BigInt value for &#8230;\".</p>\n      <p>Numeric operators applied to mixed-type operands (such as a Number and a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>) are not defined and should be considered an editorial error in this specification.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>When the term <dfn id=\"integer\" oldids=\"mathematical integer\"><span id=\"mathematical integer\"></span>integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers, unless otherwise stated. When the term <dfn id=\"integral-number\">integral Number</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers.</p>\n      <p>Conversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> or <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> <var>x</var> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\" or <dfn id=\"&#120125;\">&#120125;</dfn>(<var>x</var>), and is defined in <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>x</var> to a BigInt is denoted as \"the BigInt value for <var>x</var>\" or <dfn id=\"&#8484;\">&#8484;</dfn>(<var>x</var>). A conversion from a Number or BigInt <var>x</var> to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <dfn id=\"&#8477;\">&#8477;</dfn>(<var>x</var>). The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined. The <dfn id=\"extended-mathematical-value\">extended mathematical value</dfn> of <var>x</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> for finite values, and is +&#8734; and -&#8734; for <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> respectively; it is not defined for <emu-val>NaN</emu-val>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> &lt; 0 and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions are the extended mathematical values.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and non-zero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>q</var>.</p>\n      <p>The phrase \"the result of <dfn id=\"clamping\">clamping</dfn> <var>x</var> between <var>lower</var> and <var>upper</var>\" (where <var>x</var> is an <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> and <var>lower</var> and <var>upper</var> are mathematical values such that <var>lower</var> &#8804; <var>upper</var>) produces <var>lower</var> if <var>x</var> &lt; <var>lower</var>, produces <var>upper</var> if <var>x</var> &gt; <var>upper</var>, and otherwise produces <var>x</var>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (closest to +&#8734;) that is not larger than <var>x</var>.</p>\n      <p>Mathematical functions min, max, <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>, and <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref> are not defined for Numbers and BigInts, and any usage of those methods that have non-<emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> arguments would be an editorial error in this specification.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-string.prototype.replace": {"num": "22.1.3.18", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref>).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Let <var>searchLength</var> be the length of <var>searchString</var>.</li><li>Let <var>position</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>string</var>, <var>searchString</var>, 0).</li><li>If <var>position</var> is -1, return <var>string</var>.</li><li>Let <var>preserved</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from 0 to <var>position</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>searchString</var>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>position</var>), <var>string</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replaceValue</var>) is String.</li><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replacement</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>searchString</var>, <var>string</var>, <var>position</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>preserved</var>, <var>replacement</var>, and the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>position</var> + <var>searchLength</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">22.1.3.18.1</span>#sec-getsubstitution GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set": {"num": "23.2.3.24", "title": "#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set\" oldids=\"sec-%typedarray%.prototype.set-overloaded-offset\"><span id=\"sec-%typedarray%.prototype.set-overloaded-offset\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set\">#sec-%typedarray%.prototype.set</span> %TypedArray%.prototype.set ( <var>source</var> [ , <var>offset</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.set</code> is a function whose behaviour differs based upon the type of its first argument.</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Sets multiple values in this <var>TypedArray</var>, reading the values from <var>source</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n        <p>When the <code>set</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>source</var> is an Object that has a [[TypedArrayName]] internal slot, then<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromTypedArray\"><a href=\"#sec-settypedarrayfromtypedarray\">SetTypedArrayFromTypedArray</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"SetTypedArrayFromArrayLike\"><a href=\"#sec-settypedarrayfromarraylike\">SetTypedArrayFromArrayLike</a></emu-xref>(<var>target</var>, <var>targetOffset</var>, <var>source</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-settypedarrayfromtypedarray\"><h1><span class=\"secnum\">23.2.3.24.1</span>#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )</h1>...</div><div id=\"excluded-sec-settypedarrayfromarraylike\"><h1><span class=\"secnum\">23.2.3.24.2</span>#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )</h1>...</div></emu-clause>\n\n      "}, "sec-%typedarray%.prototype.at": {"num": "23.2.3.1", "title": "#sec-%typedarray%.prototype.at %TypedArray%.prototype.at ( index )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.at\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.at\">#sec-%typedarray%.prototype.at</span> %TypedArray%.prototype.at ( <var>index</var> )</h1>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeIndex</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>index</var>).</li><li>If <var>relativeIndex</var> &#8805; 0, then<ol><li>Let <var>k</var> be <var>relativeIndex</var>.</li></ol></li><li>Else,<ol><li>Let <var>k</var> be <var>len</var> + <var>relativeIndex</var>.</li></ol></li><li>If <var>k</var> &lt; 0 or <var>k</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>))).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-the-%typedarrayprototype%-object": {"num": "23.2.3", "title": "#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray% Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-%typedarrayprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-%typedarrayprototype%-object\">#sec-properties-of-the-%typedarrayprototype%-object</span> Properties of the %TypedArray% Prototype Object</h1>\n      <p>The <dfn>%TypedArray% prototype object</dfn>:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is <dfn>%TypedArray.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>does not have a [[ViewedArrayBuffer]] or any other of the internal slots that are specific to <var>TypedArray</var> instance objects.</li>\n      </ul>\n\n      <div id=\"excluded-sec-%typedarray%.prototype.at\"><h1><span class=\"secnum\">23.2.3.1</span>#sec-%typedarray%.prototype.at %TypedArray%.prototype.at ( index )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.buffer\"><h1><span class=\"secnum\">23.2.3.2</span>#sec-get-%typedarray%.prototype.buffer get %TypedArray%.prototype.buffer</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.bytelength\"><h1><span class=\"secnum\">23.2.3.3</span>#sec-get-%typedarray%.prototype.bytelength get %TypedArray%.prototype.byteLength</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.byteoffset\"><h1><span class=\"secnum\">23.2.3.4</span>#sec-get-%typedarray%.prototype.byteoffset get %TypedArray%.prototype.byteOffset</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.constructor\"><h1><span class=\"secnum\">23.2.3.5</span>#sec-%typedarray%.prototype.constructor %TypedArray%.prototype.constructor</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.copywithin\"><h1><span class=\"secnum\">23.2.3.6</span>#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.entries\"><h1><span class=\"secnum\">23.2.3.7</span>#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.every\"><h1><span class=\"secnum\">23.2.3.8</span>#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.fill\"><h1><span class=\"secnum\">23.2.3.9</span>#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.filter\"><h1><span class=\"secnum\">23.2.3.10</span>#sec-%typedarray%.prototype.filter %TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.find\"><h1><span class=\"secnum\">23.2.3.11</span>#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.findindex\"><h1><span class=\"secnum\">23.2.3.12</span>#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.foreach\"><h1><span class=\"secnum\">23.2.3.13</span>#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.includes\"><h1><span class=\"secnum\">23.2.3.14</span>#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.indexof\"><h1><span class=\"secnum\">23.2.3.15</span>#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.join\"><h1><span class=\"secnum\">23.2.3.16</span>#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.keys\"><h1><span class=\"secnum\">23.2.3.17</span>#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.lastindexof\"><h1><span class=\"secnum\">23.2.3.18</span>#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype.length\"><h1><span class=\"secnum\">23.2.3.19</span>#sec-get-%typedarray%.prototype.length get %TypedArray%.prototype.length</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.map\"><h1><span class=\"secnum\">23.2.3.20</span>#sec-%typedarray%.prototype.map %TypedArray%.prototype.map ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduce\"><h1><span class=\"secnum\">23.2.3.21</span>#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reduceright\"><h1><span class=\"secnum\">23.2.3.22</span>#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.reverse\"><h1><span class=\"secnum\">23.2.3.23</span>#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.set\"><h1><span class=\"secnum\">23.2.3.24</span>#sec-%typedarray%.prototype.set %TypedArray%.prototype.set ( source [ , offset ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.slice\"><h1><span class=\"secnum\">23.2.3.25</span>#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.some\"><h1><span class=\"secnum\">23.2.3.26</span>#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.sort\"><h1><span class=\"secnum\">23.2.3.27</span>#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.subarray\"><h1><span class=\"secnum\">23.2.3.28</span>#sec-%typedarray%.prototype.subarray %TypedArray%.prototype.subarray ( begin, end )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tolocalestring\"><h1><span class=\"secnum\">23.2.3.29</span>#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.tostring\"><h1><span class=\"secnum\">23.2.3.30</span>#sec-%typedarray%.prototype.tostring %TypedArray%.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype.values\"><h1><span class=\"secnum\">23.2.3.31</span>#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )</h1>...</div><div id=\"excluded-sec-%typedarray%.prototype-@@iterator\"><h1><span class=\"secnum\">23.2.3.32</span>#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )</h1>...</div><div id=\"excluded-sec-get-%typedarray%.prototype-@@tostringtag\"><h1><span class=\"secnum\">23.2.3.33</span>#sec-get-%typedarray%.prototype-@@tostringtag get %TypedArray%.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-string.prototype.charat": {"num": "22.1.3.2", "title": "#sec-string.prototype.charat String.prototype.charAt ( pos )", "html": "<emu-clause id=\"sec-string.prototype.charat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.charat\">#sec-string.prototype.charat</span> String.prototype.charAt ( <var>pos</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns a single element String containing the code unit at index <var>pos</var> within the String value resulting from converting this object to a String. If there is no element at that index, the result is the empty String. The result is a String value, not a String object.</p>\n          <p>If <code>pos</code> is an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, then the result of <code>x.charAt(pos)</code> is equivalent to the result of <code>x.substring(pos, pos + 1)</code>.</p>\n        </div></emu-note>\n        <p>When the <code>charAt</code> method is called with one argument <var>pos</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>position</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>pos</var>).</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>position</var> &lt; 0 or <var>position</var> &#8805; <var>size</var>, return the empty String.</li><li>Return the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>position</var> to <var>position</var> + 1.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>charAt</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}