{"from": {"secList": ["sec-resolvethisbinding", "sec-built-in-function-objects-call-thisargument-argumentslist", "sec-getactivescriptormodule", "sec-exports-runtime-semantics-evaluation", "sec-blockdeclarationinstantiation", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-asyncgeneratoryield", "sec-let-and-const-declarations-runtime-semantics-evaluation", "sec-runtime-semantics-classfielddefinitionevaluation", "sec-switch-statement-runtime-semantics-evaluation", "sec-asyncgeneratorstart", "sec-runtime-semantics-instantiategeneratorfunctionexpression", "sec-getgeneratorkind", "sec-initializehostdefinedrealm", "sec-completion-record-specification-type", "sec-prepareforordinarycall", "sec-source-text-module-record-initialize-environment", "sec-jobs", "sec-runtime-semantics-instantiatearrowfunctionexpression", "sec-web-compat-evaldeclarationinstantiation", "sec-runtime-semantics-methoddefinitionevaluation", "sec-runtime-semantics-instantiateasyncarrowfunctionexpression", "sec-generatoryield", "sec-with-statement-runtime-semantics-evaluation", "sec-runtime-semantics-scriptevaluation", "sec-runtime-semantics-catchclauseevaluation", "sec-getthisenvironment", "sec-generatorstart", "sec-block-runtime-semantics-evaluation", "sec-hostresolveimportedmodule", "sec-execution-contexts", "sec-runtime-semantics-classdefinitionevaluation", "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression", "sec-runtime-semantics-instantiateordinaryfunctionexpression", "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "sec-runtime-semantics-definemethod", "sec-web-compat-functiondeclarationinstantiation", "sec-createdynamicfunction", "sec-web-compat-globaldeclarationinstantiation", "sec-getnewtarget", "sec-resolvebinding", "sec-runtime-semantics-instantiateasyncfunctionexpression", "sec-createperiterationenvironment", "sec-runtime-semantics-forinofheadevaluation", "sec-runtime-semantics-forloopevaluation", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-eval-x", "sec-variable-statement-runtime-semantics-evaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-makeprivatereference", "sec-functiondeclarationinstantiation", "sec-async-functions-abstract-operations-async-function-start", "sec-ordinarycallbindthis", "sec-variable-statement", "sec-let-and-const-declarations", "sec-performeval"], "secData": {"sec-resolvethisbinding": {"num": "9.4.4", "title": "#sec-resolvethisbinding ResolveThisBinding ( )", "html": "<emu-clause id=\"sec-resolvethisbinding\" aoid=\"ResolveThisBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvethisbinding\">#sec-resolvethisbinding</span> ResolveThisBinding ( )</h1>\n      <p>The abstract operation ResolveThisBinding takes no arguments. It determines the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code> using the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Return ? <var>envRec</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-built-in-function-objects-call-thisargument-argumentslist": {"num": "10.3.1", "title": "#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">#sec-built-in-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Let <var>calleeContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <emu-val>null</emu-val>.</li><li>Perform any necessary <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> initialization of <var>calleeContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-call-builtin-function-result\">Let <var>result</var> be the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in a manner that conforms to the specification of <var>F</var>. <var>thisArgument</var> is the <emu-val>this</emu-val> value, <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getactivescriptormodule": {"num": "9.4.1", "title": "#sec-getactivescriptormodule GetActiveScriptOrModule ( )", "html": "<emu-clause id=\"sec-getactivescriptormodule\" aoid=\"GetActiveScriptOrModule\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getactivescriptormodule\">#sec-getactivescriptormodule</span> GetActiveScriptOrModule ( )</h1>\n      <p>The abstract operation GetActiveScriptOrModule takes no arguments. It is used to determine the running script or module, based on the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>If the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, return <emu-val>null</emu-val>.</li><li>Let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is not <emu-val>null</emu-val>.</li><li>If no such <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> exists, return <emu-val>null</emu-val>. Otherwise, return <var>ec</var>'s ScriptOrModule.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exports-runtime-semantics-evaluation": {"num": "16.2.3.7", "title": "#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exports-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>className</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>className</var> is <emu-val>\"*default*\"</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-val>\"default\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-blockdeclarationinstantiation": {"num": "14.2.3", "title": "#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>For each element <var>d</var> of <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "10.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>initializeResult</var> be <emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>thisArgument</var>, <var>F</var>).</li><li>If <var>initializeResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>initializeResult</var>).</li></ol></li></ol></li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>constructorEnv</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgeneratoryield": {"num": "27.6.3.8", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield takes argument <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-let-and-const-declarations-runtime-semantics-evaluation": {"num": "14.3.1.2", "title": "#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">#sec-let-and-const-declarations-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"deqecbrp\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt40zeyt\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> rule ensures that this form of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> never occurs in a <code>const</code> declaration.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> using <var>value</var> and <var>env</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-classfielddefinitionevaluation": {"num": "15.7.10", "title": "#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classfielddefinitionevaluation\" type=\"sdo\" aoid=\"ClassFieldDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classfielddefinitionevaluation\">#sec-runtime-semantics-classfielddefinitionevaluation</span> Runtime Semantics: ClassFieldDefinitionEvaluation</h1>\n\n      <p>With parameter <var>homeObject</var>.</p>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-deOh_-BS\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>initializer</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>initializer</var>, <var>homeObject</var>).</li><li>Set <var>initializer</var>.[[ClassFieldInitializerName]] to <var>name</var>.</li></ol></li><li>Else,<ol><li>Let <var>initializer</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Return the <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref> { [[Name]]: <var>name</var>, [[Initializer]]: <var>initializer</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The function created for <var>initializer</var> is never directly accessible to ECMAScript code.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-switch-statement-runtime-semantics-evaluation": {"num": "14.12.4", "title": "#sec-switch-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-switch-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>switchValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>blockEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>blockEnv</var>.</li><li>Let <var>R</var> be <emu-xref aoid=\"CaseBlockEvaluation\"><a href=\"#sec-runtime-semantics-caseblockevaluation\">CaseBlockEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>switchValue</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <var>R</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"amgxmkjg\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eencdyk7\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t5rjsefq\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odaivkwk\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-asyncgeneratorstart": {"num": "27.6.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-instantiategeneratorfunctionexpression": {"num": "15.5.4", "title": "#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\">#sec-runtime-semantics-instantiategeneratorfunctionexpression</span> Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-FnOrbSnb\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-sxTe1ywL\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getgeneratorkind": {"num": "27.5.3.5", "title": "#sec-getgeneratorkind GetGeneratorKind ( )", "html": "<emu-clause id=\"sec-getgeneratorkind\" aoid=\"GetGeneratorKind\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getgeneratorkind\">#sec-getgeneratorkind</span> GetGeneratorKind ( )</h1>\n        <p>The abstract operation GetGeneratorKind takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>genContext</var> does not have a Generator component, return <emu-const>non-generator</emu-const>.</li><li>Let <var>generator</var> be the Generator component of <var>genContext</var>.</li><li>If <var>generator</var> has an [[AsyncGeneratorState]] internal slot, return <emu-const>async</emu-const>.</li><li>Else, return <emu-const>sync</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializehostdefinedrealm": {"num": "9.6", "title": "#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )", "html": "<emu-clause id=\"sec-initializehostdefinedrealm\" aoid=\"InitializeHostDefinedRealm\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializehostdefinedrealm\">#sec-initializehostdefinedrealm</span> InitializeHostDefinedRealm ( )</h1>\n    <p>The abstract operation InitializeHostDefinedRealm takes no arguments. It performs the following steps when called:</p>\n\n    <emu-alg><ol><li>Let <var>realm</var> be <emu-xref aoid=\"CreateRealm\"><a href=\"#sec-createrealm\">CreateRealm</a></emu-xref>().</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>newContext</var> to <var>realm</var>.</li><li>Set the ScriptOrModule of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> requires use of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to serve as <var>realm</var>'s <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>global</var> be such an object created in a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>global</var> be <emu-val>undefined</emu-val>, indicating that an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> should be created as the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>If the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> requires that the <code>this</code> binding in <var>realm</var>'s global scope return an object other than the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>thisValue</var> be such an object created in a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>thisValue</var> be <emu-val>undefined</emu-val>, indicating that <var>realm</var>'s global <code>this</code> binding should be the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"SetRealmGlobalObject\"><a href=\"#sec-setrealmglobalobject\">SetRealmGlobalObject</a></emu-xref>(<var>realm</var>, <var>global</var>, <var>thisValue</var>).</li><li>Let <var>globalObj</var> be ?&#160;<emu-xref aoid=\"SetDefaultGlobalBindings\"><a href=\"#sec-setdefaultglobalbindings\">SetDefaultGlobalBindings</a></emu-xref>(<var>realm</var>).</li><li>Create any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties on <var>globalObj</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>lengthFulfilled</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, <var>lengthFulfilled</var>, <emu-val>\"\"</emu-val>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>lengthRejected</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, <var>lengthRejected</var>, <emu-val>\"\"</emu-val>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-prepareforordinarycall": {"num": "10.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation PrepareForOrdinaryCall takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>newTarget</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the PrivateEnvironment of <var>calleeContext</var> to <var>F</var>.[[PrivateEnvironment]].</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "16.2.1.6.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes no arguments. It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> of <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>env</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the PrivateEnvironment of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-jobs": {"num": "9.5", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\"><span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is <var>scriptOrModule</var>. The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">9.5.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">9.5.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">9.5.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">9.5.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-instantiatearrowfunctionexpression": {"num": "15.3.4", "title": "#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\">#sec-runtime-semantics-instantiatearrowfunctionexpression</span> Runtime Semantics: InstantiateArrowFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-C8uAwDLj\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">#step-evaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"11\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnv</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-web-compat-bindingexists\">Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>methodDef</var>.[[Key]], <var>object</var>, <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-instantiateasyncarrowfunctionexpression": {"num": "15.9.4", "title": "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">#sec-runtime-semantics-instantiateasyncarrowfunctionexpression</span> Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-kBFLOl9Q\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-YQv2CZBp\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generatoryield": {"num": "27.5.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-runtime-semantics-evaluation": {"num": "14.11.2", "title": "#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-with-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>)).</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>obj</var>, <emu-val>true</emu-val>, <var>oldEnv</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li><li>Let <var>C</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the embedded <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, whether normally or by some form of <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> or exception, the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-runtime-semantics-scriptevaluation": {"num": "16.1.6", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>scriptContext</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptContext</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptContext</var> to <var>globalEnv</var>.</li><li>Set the PrivateEnvironment of <var>scriptContext</var> to <emu-val>null</emu-val>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-catchclauseevaluation": {"num": "14.15.2", "title": "#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-catchclauseevaluation\" type=\"sdo\" aoid=\"CatchClauseEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-catchclauseevaluation\">#sec-runtime-semantics-catchclauseevaluation</span> Runtime Semantics: CatchClauseEvaluation</h1>\n      <p>With parameter <var>thrownValue</var>.</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-tivA4mFO\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>catchEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each element <var>argName</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>, do<ol><li>Perform ! <var>catchEnv</var>.CreateMutableBinding(<var>argName</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>catchEnv</var>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> with arguments <var>thrownValue</var> and <var>catchEnv</var>.</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>B</var> be the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>B</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oyp2rsut\" id=\"prod-7Gz_IT_v\">\n        <emu-t>catch</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getthisenvironment": {"num": "9.4.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li id=\"step-getthisenvironment-loop\">Repeat,<ol><li>Let <var>exists</var> be <var>env</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>env</var>.</li><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>env</var> to <var>outer</var>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step <emu-xref href=\"#step-getthisenvironment-loop\"><a href=\"#step-getthisenvironment-loop\" class=\"excluded-xref\" excluded-id=\"step-getthisenvironment-loop\">#step-getthisenvironment-loop</a></emu-xref> will always terminate because the list of environments always ends with the global environment which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generatorstart": {"num": "27.5.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-runtime-semantics-evaluation": {"num": "14.2.2", "title": "#sec-block-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-block-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-runtime-semantics-evaluation\">#sec-block-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>blockEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>blockEnv</var>.</li><li>Let <var>blockValue</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <var>blockValue</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sl</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>sl</var>).</li><li>Let <var>s</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>s</var>, <var>sl</var>)).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The value of a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is the value of the last value-producing item in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. For example, the following calls to the <code>eval</code> function all return the value 1:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;;;;;\"</span>)\n<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;{}\"</span>)\n<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;var a;\"</span>)</code></pre>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-execution-contexts": {"num": "9.4", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <dfn id=\"running-execution-context\">running execution context</dfn>. All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in <emu-xref href=\"#table-state-components-for-all-execution-contexts\"><a href=\"#table-state-components-for-all-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-state-components-for-all-execution-contexts\">#table-state-components-for-all-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-state-components-for-all-execution-contexts\" caption=\"State Components for All Execution Contexts\" oldids=\"table-22\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-state-components-for-all-execution-contexts\">#table-state-components-for-all-execution-contexts</span>: State Components for All Execution Contexts</figcaption><span id=\"table-22\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in <emu-xref href=\"#table-additional-state-components-for-ecmascript-code-execution-contexts\"><a href=\"#table-additional-state-components-for-ecmascript-code-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\">#table-additional-state-components-for-ecmascript-code-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\" oldids=\"table-23\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\">#table-additional-state-components-for-ecmascript-code-execution-contexts</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption><span id=\"table-23\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            PrivateEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> that holds Private Names created by <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>s in the nearest containing class. <emu-val>null</emu-val> if there is no containing class.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Environment Records.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in <emu-xref href=\"#table-additional-state-components-for-generator-execution-contexts\"><a href=\"#table-additional-state-components-for-generator-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-additional-state-components-for-generator-execution-contexts\">#table-additional-state-components-for-generator-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-additional-state-components-for-generator-execution-contexts\" caption=\"Additional State Components for Generator Execution Contexts\" oldids=\"table-24\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-state-components-for-generator-execution-contexts\">#table-additional-state-components-for-generator-execution-contexts</span>: Additional State Components for Generator Execution Contexts</figcaption><span id=\"table-24\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          </td>\n          <td>\n            The generator object that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">9.4.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">9.4.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">9.4.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">9.4.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">9.4.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">9.4.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-const>empty</emu-const>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.12.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression": {"num": "15.6.4", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-A3m5kV04\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-7PTlQqLp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateordinaryfunctionexpression": {"num": "15.2.5", "title": "#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\">#sec-runtime-semantics-instantiateordinaryfunctionexpression</span> Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-M2Odxhb_\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-ZT_oXgSx\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "14.7.5.7", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"ForDeclarationBindingInstantiation\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginstantiation\">ForDeclarationBindingInstantiation</a></emu-xref> for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"ForDeclarationBindingInitialization\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginitialization\">ForDeclarationBindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-definemethod": {"num": "15.4.4", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\" type=\"sdo\" aoid=\"DefineMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-VntM4j0E\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-web-compat-functiondeclarationinstantiation": {"num": "B.3.3.1", "title": "#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-functiondeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</span> Changes to FunctionDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-functiondeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-functiondeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">#step-functiondeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-functiondeclarationinstantiation-web-compat-insertion-point\"><ol start=\"29\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>func</var> and <var>F</var> is not an element of <var>parameterNames</var>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter, or another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>initializedBindings</var> does not contain <var>F</var> and <var>F</var> is not <emu-val>\"arguments\"</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>F</var> to <var>instantiatedVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>fenv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ! <var>fenv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function &lt;emu-not-ref&gt;SourceText&lt;/emu-not-ref&gt; Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function <emu-not-ref>SourceText</emu-not-ref> Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"13\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-getnewtarget": {"num": "9.4.5", "title": "#sec-getnewtarget GetNewTarget ( )", "html": "<emu-clause id=\"sec-getnewtarget\" aoid=\"GetNewTarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getnewtarget\">#sec-getnewtarget</span> GetNewTarget ( )</h1>\n      <p>The abstract operation GetNewTarget takes no arguments. It determines the NewTarget value using the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a [[NewTarget]] field.</li><li>Return <var>envRec</var>.[[NewTarget]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncfunctionexpression": {"num": "15.8.3", "title": "#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\">#sec-runtime-semantics-instantiateasyncfunctionexpression</span> Runtime Semantics: InstantiateAsyncFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-3RN98Vrc\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-iEhgnbem\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-createperiterationenvironment": {"num": "14.7.4.4", "title": "#sec-createperiterationenvironment CreatePerIterationEnvironment ( perIterationBindings )", "html": "<emu-clause id=\"sec-createperiterationenvironment\" aoid=\"CreatePerIterationEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createperiterationenvironment\">#sec-createperiterationenvironment</span> CreatePerIterationEnvironment ( <var>perIterationBindings</var> )</h1>\n        <p>The abstract operation CreatePerIterationEnvironment takes argument <var>perIterationBindings</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>perIterationBindings</var> has any elements, then<ol><li>Let <var>lastIterationEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>outer</var> be <var>lastIterationEnv</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Let <var>thisIterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outer</var>).</li><li>For each element <var>bn</var> of <var>perIterationBindings</var>, do<ol><li>Perform ! <var>thisIterationEnv</var>.CreateMutableBinding(<var>bn</var>, <emu-val>false</emu-val>).</li><li>Let <var>lastValue</var> be ? <var>lastIterationEnv</var>.GetBindingValue(<var>bn</var>, <emu-val>true</emu-val>).</li><li>Perform <var>thisIterationEnv</var>.InitializeBinding(<var>bn</var>, <var>lastValue</var>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>thisIterationEnv</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "14.7.5.6", "title": "#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\"><span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each String <var>name</var> of <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-forloopevaluation": {"num": "14.7.4.2", "title": "#sec-runtime-semantics-forloopevaluation Runtime Semantics: ForLoopEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-forloopevaluation\" oldids=\"sec-for-statement-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"ForLoopEvaluation\"><span id=\"sec-for-statement-runtime-semantics-labelledevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forloopevaluation\">#sec-runtime-semantics-forloopevaluation</span> Runtime Semantics: ForLoopEvaluation</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-qUCVnDNm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-HwfL-Win\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-PMtIFugG\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>isConst</var> be <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "15.7.13", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\" type=\"sdo\" aoid=\"BindingClassDeclarationEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\" id=\"prod-JmEOsNvO\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\" id=\"prod-qOUNT0OA\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-eval-x": {"num": "19.2.1", "title": "#sec-eval-x eval ( x )", "html": "<emu-clause id=\"sec-eval-x\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-eval-x\">#sec-eval-x</span> eval ( <var>x</var> )</h1>\n      <p>The <code>eval</code> function is the <dfn>%eval%</dfn> intrinsic object. When the <code>eval</code> function is called with one argument <var>x</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>x</var>, <var>callerRealm</var>, <emu-val>false</emu-val>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-performeval\"><h1><span class=\"secnum\">19.2.1.1</span>#sec-performeval PerformEval ( x, callerRealm, strictCaller, direct )</h1>...</div><div id=\"excluded-sec-hostensurecancompilestrings\"><h1><span class=\"secnum\">19.2.1.2</span>#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )</h1>...</div><div id=\"excluded-sec-evaldeclarationinstantiation\"><h1><span class=\"secnum\">19.2.1.3</span>#sec-evaldeclarationinstantiation EvalDeclarationInstantiation ( body, varEnv, lexEnv, privateEnv, strict )</h1>...</div></emu-clause>\n\n    "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "14.3.2.1", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li id=\"step-vardecllist-evaluation-putvalue\">Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step <emu-xref href=\"#step-vardecllist-evaluation-putvalue\"><a href=\"#step-vardecllist-evaluation-putvalue\" class=\"excluded-xref\" excluded-id=\"step-vardecllist-evaluation-putvalue\">#step-vardecllist-evaluation-putvalue</a></emu-xref> will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "15.7.14", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>privateEnvRec</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>names</var> be <var>privateEnvRec</var>.[[Names]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Exactly one element of <var>names</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>privateIdentifier</var>.</li><li>Let <var>privateName</var> be the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> in <var>names</var> whose [[Description]] is <var>privateIdentifier</var>.</li><li>Return <var>privateName</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-makeprivatereference": {"num": "6.2.4.9", "title": "#sec-makeprivatereference MakePrivateReference ( baseValue, privateIdentifier )", "html": "<emu-clause id=\"sec-makeprivatereference\" aoid=\"MakePrivateReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeprivatereference\">#sec-makeprivatereference</span> MakePrivateReference ( <var>baseValue</var>, <var>privateIdentifier</var> )</h1>\n        <p>The abstract operation MakePrivateReference takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>privateIdentifier</var> (a String). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>privEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>privEnv</var> is not <emu-val>null</emu-val>.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privEnv</var>, <var>privateIdentifier</var>).</li><li>Return the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> { [[Base]]: <var>baseValue</var>, [[ReferencedName]]: <var>privateName</var>, [[Strict]]: <emu-val>true</emu-val>, [[ThisValue]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-functiondeclarationinstantiation": {"num": "10.2.11", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be <emu-xref aoid=\"ContainsExpression\"><a href=\"#sec-static-semantics-containsexpression\">ContainsExpression</a></emu-xref> of <var>formals</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>parameterNames</var>, followed by <emu-val>\"arguments\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Let <var>privateEnv</var> be the PrivateEnvironment of <var>calleeContext</var>.</li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for the step below to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncFunctionBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncfunctionstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a normal completion with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncfunctionstart-return-undefined\"><a href=\"#step-asyncfunctionstart-return-undefined\">4.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarycallbindthis": {"num": "10.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnv</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>localEnv</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>localEnv</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>localEnv</var>.BindThisValue(<var>thisValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variable-statement": {"num": "14.3.2", "title": "#sec-variable-statement Variable Statement", "html": "<emu-clause id=\"sec-variable-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement\">#sec-variable-statement</span> Variable Statement</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <code>var</code> statement declares variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment. Var variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated and are initialized to <emu-val>undefined</emu-val> when created. Within the scope of any VariableEnvironment a common <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> may appear in more than one <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> but those declarations collectively define only one variable. A variable defined by a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is executed, not when the variable is created.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"VariableStatement\" params=\"Yield, Await\" id=\"prod-VariableStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tbwjaldb\" id=\"prod-03w8p9mr\">\n        <emu-t>var</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\" id=\"prod-VariableDeclarationList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ps4sw3ys\" id=\"prod-b7kFpx81\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xsh3skws\" id=\"prod-kqbqpKlK\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\" id=\"prod-VariableDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-IeHby7A3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-MhsdViui\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-variable-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.3.2.1</span>#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-let-and-const-declarations": {"num": "14.3.1", "title": "#sec-let-and-const-declarations Let and Const Declarations", "html": "<emu-clause id=\"sec-let-and-const-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations\">#sec-let-and-const-declarations</span> Let and Const Declarations</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>let</code> and <code>const</code> declarations define variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment. The variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated but may not be accessed in any way until the variable's <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated. A variable defined by a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated, not when the variable is created. If a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> in a <code>let</code> declaration does not have an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> the variable is assigned the value <emu-val>undefined</emu-val> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\" id=\"prod-LexicalDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jsmbgalx\" id=\"prod-10DUWE8d\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LetOrConst\" id=\"prod-LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"laxrvawy\" id=\"prod-YHzPmgz1\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"nim_d4hb\" id=\"prod-G1Hf7gBn\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingList\" params=\"In, Yield, Await\" id=\"prod-BindingList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ned6hkwu\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"fdx7nvya\" id=\"prod-FYQ2Ly4e\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\" id=\"prod-LexicalBinding\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-l3Hg2UJ0\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-FppJpMK8\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-let-and-const-declarations-static-semantics-early-errors\"><h1><span class=\"secnum\">14.3.1.1</span>#sec-let-and-const-declarations-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.3.1.2</span>#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-performeval": {"num": "19.2.1.1", "title": "#sec-performeval PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\"><span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>Let <var>inClassFieldInitializer</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li><li>Let <var>classFieldIntializerName</var> be <var>F</var>.[[ClassFieldInitializerName]].</li><li>If <var>classFieldIntializerName</var> is not <emu-const>empty</emu-const>, set <var>inClassFieldInitializer</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>script</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>script</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inClassFieldInitializer</var> is <emu-val>true</emu-val>, and <emu-xref aoid=\"ContainsArguments\"><a href=\"#sec-static-semantics-containsarguments\">ContainsArguments</a></emu-xref> of <var>body</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li><li>Let <var>privateEnv</var> be <var>runningContext</var>'s PrivateEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Set <var>evalContext</var>'s PrivateEnvironment to <var>privateEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>privateEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-completion-record-fields": "Table 9", "table-state-components-for-all-execution-contexts": "Table 28", "table-additional-state-components-for-ecmascript-code-execution-contexts": "Table 29", "table-additional-state-components-for-generator-execution-contexts": "Table 30", "table-dynamic-function-sourcetext-prefixes": "Table 54"}}, "to": {"secList": ["sec-resolvethisbinding", "sec-built-in-function-objects-call-thisargument-argumentslist", "sec-getactivescriptormodule", "sec-exports-runtime-semantics-evaluation", "sec-blockdeclarationinstantiation", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-asyncgeneratoryield", "sec-let-and-const-declarations-runtime-semantics-evaluation", "sec-runtime-semantics-classfielddefinitionevaluation", "sec-switch-statement-runtime-semantics-evaluation", "sec-asyncgeneratorstart", "sec-runtime-semantics-instantiategeneratorfunctionexpression", "sec-getgeneratorkind", "sec-initializehostdefinedrealm", "sec-completion-record-specification-type", "sec-prepareforordinarycall", "sec-source-text-module-record-initialize-environment", "sec-jobs", "sec-runtime-semantics-instantiatearrowfunctionexpression", "sec-web-compat-evaldeclarationinstantiation", "sec-runtime-semantics-methoddefinitionevaluation", "sec-runtime-semantics-instantiateasyncarrowfunctionexpression", "sec-generatoryield", "sec-with-statement-runtime-semantics-evaluation", "sec-runtime-semantics-scriptevaluation", "sec-runtime-semantics-catchclauseevaluation", "sec-getthisenvironment", "sec-generatorstart", "sec-block-runtime-semantics-evaluation", "sec-hostresolveimportedmodule", "sec-execution-contexts", "sec-runtime-semantics-classdefinitionevaluation", "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression", "sec-runtime-semantics-instantiateordinaryfunctionexpression", "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "sec-runtime-semantics-definemethod", "sec-web-compat-functiondeclarationinstantiation", "sec-createdynamicfunction", "sec-web-compat-globaldeclarationinstantiation", "sec-getnewtarget", "sec-resolvebinding", "sec-runtime-semantics-instantiateasyncfunctionexpression", "sec-createperiterationenvironment", "sec-runtime-semantics-forinofheadevaluation", "sec-runtime-semantics-forloopevaluation", "sec-runtime-semantics-bindingclassdeclarationevaluation", "sec-eval-x", "sec-variable-statement-runtime-semantics-evaluation", "sec-class-definitions-runtime-semantics-evaluation", "sec-makeprivatereference", "sec-functiondeclarationinstantiation", "sec-async-functions-abstract-operations-async-function-start", "sec-ordinarycallbindthis", "sec-variable-statement", "sec-let-and-const-declarations", "sec-performeval"], "secData": {"sec-resolvethisbinding": {"num": "9.4.4", "title": "#sec-resolvethisbinding ResolveThisBinding ( )", "html": "<emu-clause id=\"sec-resolvethisbinding\" aoid=\"ResolveThisBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvethisbinding\">#sec-resolvethisbinding</span> ResolveThisBinding ( )</h1>\n      <p>The abstract operation ResolveThisBinding takes no arguments. It determines the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code> using the [[LexicalEnvironment]] of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>Return ? <var>envRec</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-built-in-function-objects-call-thisargument-argumentslist": {"num": "10.3.1", "title": "#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects-call-thisargument-argumentslist\">#sec-built-in-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Let <var>calleeContext</var> be a new ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>calleeContext</var>.[[Function]] to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set <var>calleeContext</var>.[[Realm]] to <var>calleeRealm</var>.</li><li>Set <var>calleeContext</var>.[[ScriptOrModule]] to <emu-val>null</emu-val>.</li><li>Perform any necessary <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> initialization of <var>calleeContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-call-builtin-function-result\">Let <var>result</var> be the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in a manner that conforms to the specification of <var>F</var>. <var>thisArgument</var> is the <emu-val>this</emu-val> value, <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getactivescriptormodule": {"num": "9.4.1", "title": "#sec-getactivescriptormodule GetActiveScriptOrModule ( )", "html": "<emu-clause id=\"sec-getactivescriptormodule\" aoid=\"GetActiveScriptOrModule\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getactivescriptormodule\">#sec-getactivescriptormodule</span> GetActiveScriptOrModule ( )</h1>\n      <p>The abstract operation GetActiveScriptOrModule takes no arguments. It is used to determine the running script or module, based on the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>If the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, return <emu-val>null</emu-val>.</li><li>Let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose [[ScriptOrModule]] field is not <emu-val>null</emu-val>.</li><li>If no such <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> exists, return <emu-val>null</emu-val>. Otherwise, return <var>ec</var>.[[ScriptOrModule]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exports-runtime-semantics-evaluation": {"num": "16.2.3.7", "title": "#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-exports-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bg3oaw2m\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"go9a4xdq\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cdfbfvfu\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w8pljwgc\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>className</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>If <var>className</var> is <emu-val>\"*default*\"</emu-val>, then<ol><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ExportDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4f6ct71n\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-val>\"default\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<emu-val>\"*default*\"</emu-val>, <var>value</var>, <var>env</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-blockdeclarationinstantiation": {"num": "14.2.3", "title": "#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>For each element <var>d</var> of <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "10.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>initializeResult</var> be <emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>thisArgument</var>, <var>F</var>).</li><li>If <var>initializeResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>initializeResult</var>).</li></ol></li></ol></li><li>Let <var>constructorEnv</var> be <var>calleeContext</var>.[[LexicalEnvironment]].</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>constructorEnv</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgeneratoryield": {"num": "27.6.3.8", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield takes argument <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be <var>genContext</var>.[[Generator]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>genContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-let-and-const-declarations-runtime-semantics-evaluation": {"num": "14.3.1.2", "title": "#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations-runtime-semantics-evaluation\">#sec-let-and-const-declarations-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"LexicalDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"deqecbrp\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"BindingList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt40zeyt\">\n        <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-BindingList\">BindingList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>).</li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>A <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> rule ensures that this form of <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> never occurs in a <code>const</code> declaration.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LexicalBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> using <var>value</var> and <var>env</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-classfielddefinitionevaluation": {"num": "15.7.10", "title": "#sec-runtime-semantics-classfielddefinitionevaluation Runtime Semantics: ClassFieldDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classfielddefinitionevaluation\" type=\"sdo\" aoid=\"ClassFieldDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classfielddefinitionevaluation\">#sec-runtime-semantics-classfielddefinitionevaluation</span> Runtime Semantics: ClassFieldDefinitionEvaluation</h1>\n\n      <p>With parameter <var>homeObject</var>.</p>\n\n      <emu-grammar><emu-production name=\"FieldDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FieldDefinition\">FieldDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rqzzdcte\" id=\"prod-deOh_-BS\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the empty sequence of Unicode code points.</li><li>Let <var>initializer</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>initializer</var>, <var>homeObject</var>).</li><li>Set <var>initializer</var>.[[ClassFieldInitializerName]] to <var>name</var>.</li></ol></li><li>Else,<ol><li>Let <var>initializer</var> be <emu-const>empty</emu-const>.</li></ol></li><li>Return the <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref> { [[Name]]: <var>name</var>, [[Initializer]]: <var>initializer</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        The function created for <var>initializer</var> is never directly accessible to ECMAScript code.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-switch-statement-runtime-semantics-evaluation": {"num": "14.12.4", "title": "#sec-switch-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-switch-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvrp_hkw\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>switchValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>blockEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>blockEnv</var>.</li><li>Let <var>R</var> be <emu-xref aoid=\"CaseBlockEvaluation\"><a href=\"#sec-runtime-semantics-caseblockevaluation\">CaseBlockEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>switchValue</var>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <var>R</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> the [[LexicalEnvironment]] is always restored to its former state.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"amgxmkjg\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"eencdyk7\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t5rjsefq\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"odaivkwk\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-asyncgeneratorstart": {"num": "27.6.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>genContext</var>.[[Generator]] to <var>generator</var>.</li><li>Set <var>genContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-instantiategeneratorfunctionexpression": {"num": "15.5.4", "title": "#sec-runtime-semantics-instantiategeneratorfunctionexpression Runtime Semantics: InstantiateGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiategeneratorfunctionexpression\">#sec-runtime-semantics-instantiategeneratorfunctionexpression</span> Runtime Semantics: InstantiateGeneratorFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dsczygsq\" id=\"prod-FnOrbSnb\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fbyztjbh\" id=\"prod-sxTe1ywL\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getgeneratorkind": {"num": "27.5.3.5", "title": "#sec-getgeneratorkind GetGeneratorKind ( )", "html": "<emu-clause id=\"sec-getgeneratorkind\" aoid=\"GetGeneratorKind\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getgeneratorkind\">#sec-getgeneratorkind</span> GetGeneratorKind ( )</h1>\n        <p>The abstract operation GetGeneratorKind takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>genContext</var> does not have a [[Generator]] field, return <emu-const>non-generator</emu-const>.</li><li>Let <var>generator</var> be <var>genContext</var>.[[Generator]].</li><li>If <var>generator</var> has an [[AsyncGeneratorState]] internal slot, return <emu-const>async</emu-const>.</li><li>Else, return <emu-const>sync</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializehostdefinedrealm": {"num": "9.6", "title": "#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )", "html": "<emu-clause id=\"sec-initializehostdefinedrealm\" aoid=\"InitializeHostDefinedRealm\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializehostdefinedrealm\">#sec-initializehostdefinedrealm</span> InitializeHostDefinedRealm ( )</h1>\n    <p>The abstract operation InitializeHostDefinedRealm takes no arguments. It performs the following steps when called:</p>\n\n    <emu-alg><ol><li>Let <var>realm</var> be <emu-xref aoid=\"CreateRealm\"><a href=\"#sec-createrealm\">CreateRealm</a></emu-xref>().</li><li>Let <var>newContext</var> be a new ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>newContext</var>.[[Function]] to <emu-val>null</emu-val>.</li><li>Set <var>newContext</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>newContext</var>.[[ScriptOrModule]] to <emu-val>null</emu-val>.</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> requires use of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> to serve as <var>realm</var>'s <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>global</var> be such an object created in a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>global</var> be <emu-val>undefined</emu-val>, indicating that an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> should be created as the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>If the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> requires that the <code>this</code> binding in <var>realm</var>'s global scope return an object other than the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, let <var>thisValue</var> be such an object created in a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> manner. Otherwise, let <var>thisValue</var> be <emu-val>undefined</emu-val>, indicating that <var>realm</var>'s global <code>this</code> binding should be the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"SetRealmGlobalObject\"><a href=\"#sec-setrealmglobalobject\">SetRealmGlobalObject</a></emu-xref>(<var>realm</var>, <var>global</var>, <var>thisValue</var>).</li><li>Let <var>globalObj</var> be ?&#160;<emu-xref aoid=\"SetDefaultGlobalBindings\"><a href=\"#sec-setdefaultglobalbindings\">SetDefaultGlobalBindings</a></emu-xref>(<var>realm</var>).</li><li>Create any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties on <var>globalObj</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n\n      <emu-clause id=\"await\" aoid=\"Await\">\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>lengthFulfilled</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#await-fulfilled\" title=\"\"><a href=\"#await-fulfilled\">Await Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, <var>lengthFulfilled</var>, <emu-val>\"\"</emu-val>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onFulfilled</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>lengthRejected</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#await-rejected\" title=\"\"><a href=\"#await-rejected\">Await Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, <var>lengthRejected</var>, <emu-val>\"\"</emu-val>, &#171; [[AsyncContext]] &#187;).</li><li>Set <var>onRejected</var>.[[AsyncContext]] to <var>asyncContext</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>asyncContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n\n        <emu-clause id=\"await-fulfilled\">\n          <h1><span class=\"secnum\">6.2.3.1.1</span> Await Fulfilled Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise fulfillment value to the caller as a normal completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> fulfilled function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n\n        <emu-clause id=\"await-rejected\">\n          <h1><span class=\"secnum\">6.2.3.1.2</span> Await Rejected Functions</h1>\n          <p>An <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> specification device to deliver the promise rejection reason to the caller as an abrupt throw completion. Each <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function has an [[AsyncContext]] internal slot.</p>\n          <p>When an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>asyncContext</var> be <var>F</var>.[[AsyncContext]].</li><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <p>The <emu-val>\"length\"</emu-val> property of an <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> rejected function is <emu-val>1</emu-val><sub>&#120125;</sub>.</p>\n        </emu-clause>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-prepareforordinarycall": {"num": "10.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation PrepareForOrdinaryCall takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>newTarget</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>calleeContext</var>.[[Function]] to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set <var>calleeContext</var>.[[Realm]] to <var>calleeRealm</var>.</li><li>Set <var>calleeContext</var>.[[ScriptOrModule]] to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set <var>calleeContext</var>.[[LexicalEnvironment]] to <var>localEnv</var>.</li><li>Set <var>calleeContext</var>.[[VariableEnvironment]] to <var>localEnv</var>.</li><li>Set <var>calleeContext</var>.[[PrivateEnvironment]] to <var>F</var>.[[PrivateEnvironment]].</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "16.2.1.6.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes no arguments. It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> of <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>env</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>moduleContext</var>.[[Function]] to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set <var>moduleContext</var>.[[Realm]] to <var>module</var>.[[Realm]].</li><li>Set <var>moduleContext</var>.[[ScriptOrModule]] to <var>module</var>.</li><li>Set <var>moduleContext</var>.[[VariableEnvironment]] to <var>module</var>.[[Environment]].</li><li>Set <var>moduleContext</var>.[[LexicalEnvironment]] to <var>module</var>.[[Environment]].</li><li>Set <var>moduleContext</var>.[[PrivateEnvironment]] to <emu-val>null</emu-val>.</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-jobs": {"num": "9.5", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\"><span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose [[ScriptOrModule]] field is <var>scriptOrModule</var>. The [[Realm]] field of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The [[Realm]] field of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">9.5.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">9.5.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">9.5.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">9.5.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-instantiatearrowfunctionexpression": {"num": "15.3.4", "title": "#sec-runtime-semantics-instantiatearrowfunctionexpression Runtime Semantics: InstantiateArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiatearrowfunctionexpression\">#sec-runtime-semantics-instantiatearrowfunctionexpression</span> Runtime Semantics: InstantiateArrowFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ieeod2mi\" id=\"prod-C8uAwDLj\">\n        <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li id=\"step-arrowfunction-evaluation-functioncreate\">Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step <emu-xref href=\"#step-arrowfunction-evaluation-functioncreate\"><a href=\"#step-arrowfunction-evaluation-functioncreate\" class=\"excluded-xref\" excluded-id=\"step-arrowfunction-evaluation-functioncreate\">#step-arrowfunction-evaluation-functioncreate</a></emu-xref> is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-evaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-evaldeclarationinstantiation-web-compat-insertion-point\">#step-evaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"11\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnv</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li id=\"step-evaldeclarationinstantiation-web-compat-bindingexists\">Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the [[VariableEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>benv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-runtime-semantics-methoddefinitionevaluation": {"num": "15.4.5", "title": "#sec-runtime-semantics-methoddefinitionevaluation Runtime Semantics: MethodDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-methoddefinitionevaluation\" oldids=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"MethodDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</span> Runtime Semantics: MethodDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-w_uDCOXP\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>methodDef</var>.[[Key]], <var>object</var>, <var>methodDef</var>.[[Closure]], <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s7vk7pda\" id=\"prod-JtMhObe9\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"n7nathbb\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>closure</var>, [[Set]]: <emu-val>undefined</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"lbu40xzc\" id=\"prod-tr90svxc\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>propKey</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, then<ol><li>Return <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <var>closure</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li><li>Return <emu-const>empty</emu-const>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e6yupcp1\" id=\"prod-qDk-XFAF\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2edb8sar\" id=\"prod-lPECR135\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cfy3_9l8\" id=\"prod-a75_jVUN\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return ?&#160;<emu-xref aoid=\"DefineMethodProperty\"><a href=\"#sec-definemethodproperty\">DefineMethodProperty</a></emu-xref>(<var>propKey</var>, <var>object</var>, <var>closure</var>, <var>enumerable</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-instantiateasyncarrowfunctionexpression": {"num": "15.9.4", "title": "#sec-runtime-semantics-instantiateasyncarrowfunctionexpression Runtime Semantics: InstantiateAsyncArrowFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncArrowFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncarrowfunctionexpression\">#sec-runtime-semantics-instantiateasyncarrowfunctionexpression</span> Runtime Semantics: InstantiateAsyncArrowFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dqxgopsb\" id=\"prod-kBFLOl9Q\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"auwv8gbh\" id=\"prod-YQv2CZBp\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Let <var>head</var> be the <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generatoryield": {"num": "27.5.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be <var>genContext</var>.[[Generator]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>genContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-runtime-semantics-evaluation": {"num": "14.11.2", "title": "#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-with-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i70kview\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>)).</li><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>obj</var>, <emu-val>true</emu-val>, <var>oldEnv</var>).</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>newEnv</var>.</li><li>Let <var>C</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the embedded <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, whether normally or by some form of <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> or exception, the [[LexicalEnvironment]] is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-runtime-semantics-scriptevaluation": {"num": "16.1.6", "title": "#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )", "html": "<emu-clause id=\"sec-runtime-semantics-scriptevaluation\" aoid=\"ScriptEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-scriptevaluation\">#sec-runtime-semantics-scriptevaluation</span> ScriptEvaluation ( <var>scriptRecord</var> )</h1>\n      <p>The abstract operation ScriptEvaluation takes argument <var>scriptRecord</var>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptContext</var> be a new ECMAScript code ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>scriptContext</var>.[[Function]] to <emu-val>null</emu-val>.</li><li>Set <var>scriptContext</var>.[[Realm]] to <var>scriptRecord</var>.[[Realm]].</li><li>Set <var>scriptContext</var>.[[ScriptOrModule]] to <var>scriptRecord</var>.</li><li>Set <var>scriptContext</var>.[[VariableEnvironment]] to <var>globalEnv</var>.</li><li>Set <var>scriptContext</var>.[[LexicalEnvironment]] to <var>globalEnv</var>.</li><li>Set <var>scriptContext</var>.[[PrivateEnvironment]] to <emu-val>null</emu-val>.</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Push <var>scriptContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>scriptContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-catchclauseevaluation": {"num": "14.15.2", "title": "#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-catchclauseevaluation\" type=\"sdo\" aoid=\"CatchClauseEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-catchclauseevaluation\">#sec-runtime-semantics-catchclauseevaluation</span> Runtime Semantics: CatchClauseEvaluation</h1>\n      <p>With parameter <var>thrownValue</var>.</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3ce8nhiw\" id=\"prod-tivA4mFO\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>catchEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each element <var>argName</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>, do<ol><li>Perform ! <var>catchEnv</var>.CreateMutableBinding(<var>argName</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>catchEnv</var>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> with arguments <var>thrownValue</var> and <var>catchEnv</var>.</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>B</var> be the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>B</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oyp2rsut\" id=\"prod-7Gz_IT_v\">\n        <emu-t>catch</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the [[LexicalEnvironment]] is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getthisenvironment": {"num": "9.4.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li id=\"step-getthisenvironment-loop\">Repeat,<ol><li>Let <var>exists</var> be <var>env</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>env</var>.</li><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>env</var> to <var>outer</var>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step <emu-xref href=\"#step-getthisenvironment-loop\"><a href=\"#step-getthisenvironment-loop\" class=\"excluded-xref\" excluded-id=\"step-getthisenvironment-loop\">#step-getthisenvironment-loop</a></emu-xref> will always terminate because the list of environments always ends with the global environment which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-generatorstart": {"num": "27.5.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>genContext</var>.[[Generator]] to <var>generator</var>.</li><li>Set <var>genContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block-runtime-semantics-evaluation": {"num": "14.2.2", "title": "#sec-block-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-block-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-runtime-semantics-evaluation\">#sec-block-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"z4ljp0ar\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>blockEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>blockEnv</var>.</li><li>Let <var>blockValue</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <var>blockValue</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the [[LexicalEnvironment]] is always restored to its former state.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbrzeh7l\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>sl</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>sl</var>).</li><li>Let <var>s</var> be the result of evaluating <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>s</var>, <var>sl</var>)).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The value of a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is the value of the last value-producing item in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. For example, the following calls to the <code>eval</code> function all return the value 1:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;;;;;\"</span>)\n<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;{}\"</span>)\n<span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"1;var a;\"</span>)</code></pre>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes an ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with a <emu-val>null</emu-val> [[ScriptOrModule]] field onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-execution-contexts": {"num": "9.4", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <dfn id=\"running-execution-context\">running execution context</dfn>. All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>Each execution context is represented as an ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, with at least the fields listed in <emu-xref href=\"#table-state-components-for-all-execution-contexts\"><a href=\"#table-state-components-for-all-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-state-components-for-all-execution-contexts\">#table-state-components-for-all-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-state-components-for-all-execution-contexts\" caption=\"ExecutionContext Record Fields\" oldids=\"table-22\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-state-components-for-all-execution-contexts\">#table-state-components-for-all-execution-contexts</span>: ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption><span id=\"table-22\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value Type\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[CodeEvaluationState]]\n          </td>\n          <td>\n            implementation-specific\n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Function]]\n          </td>\n          <td>\n            a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this field is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> | a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> | <emu-val>null</emu-val>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the [[Realm]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the [[Function]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>ExecutionContext Records for ECMAScript code have the additional fields listed in <emu-xref href=\"#table-additional-state-components-for-ecmascript-code-execution-contexts\"><a href=\"#table-additional-state-components-for-ecmascript-code-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\">#table-additional-state-components-for-ecmascript-code-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\" caption=\"Additional Fields of ECMAScript Code ExecutionContext Records\" oldids=\"table-23\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-state-components-for-ecmascript-code-execution-contexts\">#table-additional-state-components-for-ecmascript-code-execution-contexts</span>: Additional Fields of ECMAScript Code ExecutionContext Records</figcaption><span id=\"table-23\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value Type\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[LexicalEnvironment]]\n          </td>\n          <td>\n            an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[VariableEnvironment]]\n          </td>\n          <td>\n            an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PrivateEnvironment]]\n          </td>\n          <td>\n            a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> that holds Private Names created by <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt>s in the nearest containing class. <emu-val>null</emu-val> if there is no containing class.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>ExecutionContext Records representing the evaluation of generator objects have the additional fields listed in <emu-xref href=\"#table-additional-state-components-for-generator-execution-contexts\"><a href=\"#table-additional-state-components-for-generator-execution-contexts\" class=\"excluded-xref\" excluded-id=\"table-additional-state-components-for-generator-execution-contexts\">#table-additional-state-components-for-generator-execution-contexts</a></emu-xref>.</p>\n    <emu-table id=\"table-additional-state-components-for-generator-execution-contexts\" caption=\"Additional Fields of Generator ExecutionContext Records\" oldids=\"table-24\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-state-components-for-generator-execution-contexts\">#table-additional-state-components-for-generator-execution-contexts</span>: Additional Fields of Generator ExecutionContext Records</figcaption><span id=\"table-24\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          </th>\n          <th>\n            Value Type\n          </th>\n          <th>\n            Meaning\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Generator]]\n          </td>\n          <td>\n            an Object\n          </td>\n          <td>\n            The generator object that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">9.4.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">9.4.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">9.4.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">9.4.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">9.4.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">9.4.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s [[PrivateEnvironment]] is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>classScope</var>.</li><li>Set the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-const>empty</emu-const>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>env</var>.</li><li>Set the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.12.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression": {"num": "15.6.4", "title": "#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncGeneratorFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression\">#sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression</span> Runtime Semantics: InstantiateAsyncGeneratorFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xruu4gg0\" id=\"prod-A3m5kV04\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e9lmm5cj\" id=\"prod-7PTlQqLp\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateordinaryfunctionexpression": {"num": "15.2.5", "title": "#sec-runtime-semantics-instantiateordinaryfunctionexpression Runtime Semantics: InstantiateOrdinaryFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\" type=\"sdo\" aoid=\"InstantiateOrdinaryFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateordinaryfunctionexpression\">#sec-runtime-semantics-instantiateordinaryfunctionexpression</span> Runtime Semantics: InstantiateOrdinaryFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"smus6qca\" id=\"prod-M2Odxhb_\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gxoavzvy\" id=\"prod-ZT_oXgSx\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "14.7.5.7", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid=\"ForDeclarationBindingInstantiation\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginstantiation\">ForDeclarationBindingInstantiation</a></emu-xref> for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"ForDeclarationBindingInitialization\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginitialization\">ForDeclarationBindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-definemethod": {"num": "15.4.4", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\" type=\"sdo\" aoid=\"DefineMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2ayx1_q\" id=\"prod-VntM4j0E\">\n        <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-web-compat-functiondeclarationinstantiation": {"num": "B.3.3.1", "title": "#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-functiondeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</span> Changes to FunctionDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-functiondeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-functiondeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">#step-functiondeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-functiondeclarationinstantiation-web-compat-insertion-point\"><ol start=\"29\"><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>func</var> and <var>F</var> is not an element of <var>parameterNames</var>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter, or another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>initializedBindings</var> does not contain <var>F</var> and <var>F</var> is not <emu-val>\"arguments\"</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>F</var> to <var>instantiatedVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>fenv</var> be the [[VariableEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>benv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ! <var>fenv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-createdynamicfunction": {"num": "20.2.1.1.1", "title": "#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>.[[Realm]].</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%GeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>exprSym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Let <var>bodySym</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterSym</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGeneratorFunction.prototype%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1,<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Let <var>sourceText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>sourceString</var>).</li><li>Let <var>parameters</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>), <var>parameterSym</var>).</li><li>If <var>parameters</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>bodyString</var>), <var>bodySym</var>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: The parameters and body are parsed separately to ensure that each is valid alone. For example, <code>new Function(\"/*\", \"*/ ) {\")</code> is not legal.</li><li>NOTE: If this step is reached, <var>sourceText</var> must match <var>exprSym</var> (although the reverse implication does not hold). The purpose of the next two steps is to enforce any Early Error rules which apply to <var>exprSym</var> directly.</li><li>Let <var>expr</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <var>exprSym</var>).</li><li>If <var>expr</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>privateScope</var> be <emu-val>null</emu-val>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>sourceText</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function &lt;emu-not-ref&gt;SourceText&lt;/emu-not-ref&gt; Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function <emu-not-ref>SourceText</emu-not-ref> Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"13\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the [[VariableEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>benv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-getnewtarget": {"num": "9.4.5", "title": "#sec-getnewtarget GetNewTarget ( )", "html": "<emu-clause id=\"sec-getnewtarget\" aoid=\"GetNewTarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getnewtarget\">#sec-getnewtarget</span> GetNewTarget ( )</h1>\n      <p>The abstract operation GetNewTarget takes no arguments. It determines the NewTarget value using the [[LexicalEnvironment]] of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a [[NewTarget]] field.</li><li>Return <var>envRec</var>.[[NewTarget]].</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-instantiateasyncfunctionexpression": {"num": "15.8.3", "title": "#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression", "html": "<emu-clause id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\" type=\"sdo\" aoid=\"InstantiateAsyncFunctionExpression\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-instantiateasyncfunctionexpression\">#sec-runtime-semantics-instantiateasyncfunctionexpression</span> Runtime Semantics: InstantiateAsyncFunctionExpression</h1>\n      <p>With optional parameter <var>name</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"agdmcdye\" id=\"prod-3RN98Vrc\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <var>name</var> is not present, set <var>name</var> to <emu-val>\"\"</emu-val>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>, <var>privateScope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4mmt35rm\" id=\"prod-iEhgnbem\">\n        <emu-t>async</emu-t>\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>name</var> is not present.</li><li>Set <var>name</var> to <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>scope</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>privateScope</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>, <var>privateScope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-createperiterationenvironment": {"num": "14.7.4.4", "title": "#sec-createperiterationenvironment CreatePerIterationEnvironment ( perIterationBindings )", "html": "<emu-clause id=\"sec-createperiterationenvironment\" aoid=\"CreatePerIterationEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createperiterationenvironment\">#sec-createperiterationenvironment</span> CreatePerIterationEnvironment ( <var>perIterationBindings</var> )</h1>\n        <p>The abstract operation CreatePerIterationEnvironment takes argument <var>perIterationBindings</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>perIterationBindings</var> has any elements, then<ol><li>Let <var>lastIterationEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>outer</var> be <var>lastIterationEnv</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Let <var>thisIterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outer</var>).</li><li>For each element <var>bn</var> of <var>perIterationBindings</var>, do<ol><li>Perform ! <var>thisIterationEnv</var>.CreateMutableBinding(<var>bn</var>, <emu-val>false</emu-val>).</li><li>Let <var>lastValue</var> be ? <var>lastIterationEnv</var>.GetBindingValue(<var>bn</var>, <emu-val>true</emu-val>).</li><li>Perform <var>thisIterationEnv</var>.InitializeBinding(<var>bn</var>, <var>lastValue</var>).</li></ol></li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>thisIterationEnv</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "14.7.5.6", "title": "#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\"><span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each String <var>name</var> of <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-forloopevaluation": {"num": "14.7.4.2", "title": "#sec-runtime-semantics-forloopevaluation Runtime Semantics: ForLoopEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-forloopevaluation\" oldids=\"sec-for-statement-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"ForLoopEvaluation\"><span id=\"sec-for-statement-runtime-semantics-labelledevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forloopevaluation\">#sec-runtime-semantics-forloopevaluation</span> Runtime Semantics: ForLoopEvaluation</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"_do88got\" id=\"prod-qUCVnDNm\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sodmtko8\" id=\"prod-HwfL-Win\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForStatement\">ForStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"k8b-ryxj\" id=\"prod-PMtIFugG\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>isConst</var> be <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-bindingclassdeclarationevaluation": {"num": "15.7.13", "title": "#sec-runtime-semantics-bindingclassdeclarationevaluation Runtime Semantics: BindingClassDeclarationEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\" type=\"sdo\" aoid=\"BindingClassDeclarationEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindingclassdeclarationevaluation\">#sec-runtime-semantics-bindingclassdeclarationevaluation</span> Runtime Semantics: BindingClassDeclarationEvaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\" id=\"prod-JmEOsNvO\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Let <var>env</var> be the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"InitializeBoundName\"><a href=\"#sec-initializeboundname\">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\" id=\"prod-qOUNT0OA\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"default\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and establishing its binding is handled as part of the evaluation action for that production. See <emu-xref href=\"#sec-exports-runtime-semantics-evaluation\"><a href=\"#sec-exports-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-exports-runtime-semantics-evaluation\">#sec-exports-runtime-semantics-evaluation</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-eval-x": {"num": "19.2.1", "title": "#sec-eval-x eval ( x )", "html": "<emu-clause id=\"sec-eval-x\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-eval-x\">#sec-eval-x</span> eval ( <var>x</var> )</h1>\n      <p>The <code>eval</code> function is the <dfn>%eval%</dfn> intrinsic object. When the <code>eval</code> function is called with one argument <var>x</var>, the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>.[[Realm]].</li><li>Return ?&#160;<emu-xref aoid=\"PerformEval\"><a href=\"#sec-performeval\">PerformEval</a></emu-xref>(<var>x</var>, <var>callerRealm</var>, <emu-val>false</emu-val>, <emu-val>false</emu-val>).</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-performeval\"><h1><span class=\"secnum\">19.2.1.1</span>#sec-performeval PerformEval ( x, callerRealm, strictCaller, direct )</h1>...</div><div id=\"excluded-sec-hostensurecancompilestrings\"><h1><span class=\"secnum\">19.2.1.2</span>#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )</h1>...</div><div id=\"excluded-sec-evaldeclarationinstantiation\"><h1><span class=\"secnum\">19.2.1.3</span>#sec-evaldeclarationinstantiation EvalDeclarationInstantiation ( body, varEnv, lexEnv, privateEnv, strict )</h1>...</div></emu-clause>\n\n    "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "14.3.2.1", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"m0ehvb8m\">\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oavweevb\">\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uolyom43\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ib7lg1vi\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li id=\"step-vardecllist-evaluation-putvalue\">Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step <emu-xref href=\"#step-vardecllist-evaluation-putvalue\"><a href=\"#step-vardecllist-evaluation-putvalue\" class=\"excluded-xref\" excluded-id=\"step-vardecllist-evaluation-putvalue\">#step-vardecllist-evaluation-putvalue</a></emu-xref> will assign <var>value</var> to the property instead of assigning to the [[VariableEnvironment]] binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd1t5ekf\">\n        <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-class-definitions-runtime-semantics-evaluation": {"num": "15.7.14", "title": "#sec-class-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-class-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-class-definitions-runtime-semantics-evaluation\">#sec-class-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Perform ? <emu-xref aoid=\"BindingClassDeclarationEvaluation\"><a href=\"#sec-runtime-semantics-bindingclassdeclarationevaluation\">BindingClassDeclarationEvaluation</a></emu-xref> of this <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-grammar><emu-production name=\"ClassDeclaration\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> only occurs as part of an <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ghyizwr\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <emu-val>undefined</emu-val> and <emu-val>\"\"</emu-val>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tusuwhcv\">\n        <emu-t>class</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>className</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid=\"ClassDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-classdefinitionevaluation\">ClassDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> with arguments <var>className</var> and <var>className</var>.</li><li>Set <var>value</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt>.</li><li>Return <var>value</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ClassElementName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassElementName\">ClassElementName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ie2-zc1c\"><emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>privateIdentifier</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-PrivateIdentifier\">PrivateIdentifier</a></emu-nt>.</li><li>Let <var>privateEnvRec</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>names</var> be <var>privateEnvRec</var>.[[Names]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Exactly one element of <var>names</var> is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>privateIdentifier</var>.</li><li>Let <var>privateName</var> be the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> in <var>names</var> whose [[Description]] is <var>privateIdentifier</var>.</li><li>Return <var>privateName</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-makeprivatereference": {"num": "6.2.4.9", "title": "#sec-makeprivatereference MakePrivateReference ( baseValue, privateIdentifier )", "html": "<emu-clause id=\"sec-makeprivatereference\" aoid=\"MakePrivateReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeprivatereference\">#sec-makeprivatereference</span> MakePrivateReference ( <var>baseValue</var>, <var>privateIdentifier</var> )</h1>\n        <p>The abstract operation MakePrivateReference takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>privateIdentifier</var> (a String). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>privEnv</var> be the [[PrivateEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>privEnv</var> is not <emu-val>null</emu-val>.</li><li>Let <var>privateName</var> be !&#160;<emu-xref aoid=\"ResolvePrivateIdentifier\"><a href=\"#sec-resolve-private-identifier\">ResolvePrivateIdentifier</a></emu-xref>(<var>privEnv</var>, <var>privateIdentifier</var>).</li><li>Return the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> { [[Base]]: <var>baseValue</var>, [[ReferencedName]]: <var>privateName</var>, [[Strict]]: <emu-val>true</emu-val>, [[ThisValue]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-functiondeclarationinstantiation": {"num": "10.2.11", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be <emu-xref aoid=\"ContainsExpression\"><a href=\"#sec-static-semantics-containsexpression\">ContainsExpression</a></emu-xref> of <var>formals</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be <var>calleeContext</var>.[[LexicalEnvironment]].</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be <var>calleeContext</var>.[[LexicalEnvironment]].</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var>.[[VariableEnvironment]] is <var>calleeEnv</var>.</li><li>Set <var>calleeContext</var>.[[LexicalEnvironment]] to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> of <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>parameterNames</var>, followed by <emu-val>\"arguments\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? <emu-xref aoid=\"IteratorBindingInitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\">IteratorBindingInitialization</a></emu-xref> for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set <var>calleeContext</var>.[[VariableEnvironment]] to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>n</var> of <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li id=\"step-functiondeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set <var>calleeContext</var>.[[LexicalEnvironment]] to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>Let <var>privateEnv</var> be <var>calleeContext</var>.[[PrivateEnvironment]].</li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>lexEnv</var> and <var>privateEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in <emu-xref href=\"#sec-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-iteratorbindinginitialization\">#sec-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for the step below to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Set <var>asyncContext</var>.[[CodeEvaluationState]] such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncFunctionBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncfunctionstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a normal completion with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncfunctionstart-return-undefined\"><a href=\"#step-asyncfunctionstart-return-undefined\">4.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarycallbindthis": {"num": "10.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be <var>calleeContext</var>.[[LexicalEnvironment]].</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnv</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>localEnv</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>localEnv</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>localEnv</var>.BindThisValue(<var>thisValue</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-variable-statement": {"num": "14.3.2", "title": "#sec-variable-statement Variable Statement", "html": "<emu-clause id=\"sec-variable-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement\">#sec-variable-statement</span> Variable Statement</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <code>var</code> statement declares variables that are scoped to the [[VariableEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. Var variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated and are initialized to <emu-val>undefined</emu-val> when created. Within the scope of any [[VariableEnvironment]] a common <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> may appear in more than one <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> but those declarations collectively define only one variable. A variable defined by a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is executed, not when the variable is created.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"VariableStatement\" params=\"Yield, Await\" id=\"prod-VariableStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tbwjaldb\" id=\"prod-03w8p9mr\">\n        <emu-t>var</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\" id=\"prod-VariableDeclarationList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ps4sw3ys\" id=\"prod-b7kFpx81\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"xsh3skws\" id=\"prod-kqbqpKlK\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\" id=\"prod-VariableDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-IeHby7A3\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-MhsdViui\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-variable-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.3.2.1</span>#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-let-and-const-declarations": {"num": "14.3.1", "title": "#sec-let-and-const-declarations Let and Const Declarations", "html": "<emu-clause id=\"sec-let-and-const-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations\">#sec-let-and-const-declarations</span> Let and Const Declarations</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>let</code> and <code>const</code> declarations define variables that are scoped to the [[LexicalEnvironment]] field of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. The variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated but may not be accessed in any way until the variable's <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated. A variable defined by a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated, not when the variable is created. If a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> in a <code>let</code> declaration does not have an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> the variable is assigned the value <emu-val>undefined</emu-val> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\" id=\"prod-LexicalDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jsmbgalx\" id=\"prod-10DUWE8d\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LetOrConst\" id=\"prod-LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"laxrvawy\" id=\"prod-YHzPmgz1\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"nim_d4hb\" id=\"prod-G1Hf7gBn\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingList\" params=\"In, Yield, Await\" id=\"prod-BindingList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ned6hkwu\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"fdx7nvya\" id=\"prod-FYQ2Ly4e\">\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\" id=\"prod-LexicalBinding\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"jut8etgz\" id=\"prod-l3Hg2UJ0\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"sdckvxer\" id=\"prod-FppJpMK8\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-let-and-const-declarations-static-semantics-early-errors\"><h1><span class=\"secnum\">14.3.1.1</span>#sec-let-and-const-declarations-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.3.1.2</span>#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-performeval": {"num": "19.2.1.1", "title": "#sec-performeval PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\"><span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>Let <var>inClassFieldInitializer</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li><li>Let <var>classFieldIntializerName</var> be <var>F</var>.[[ClassFieldInitializerName]].</li><li>If <var>classFieldIntializerName</var> is not <emu-const>empty</emu-const>, set <var>inClassFieldInitializer</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>script</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>script</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inClassFieldInitializer</var> is <emu-val>true</emu-val>, and <emu-xref aoid=\"ContainsArguments\"><a href=\"#sec-static-semantics-containsarguments\">ContainsArguments</a></emu-xref> of <var>body</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>.[[LexicalEnvironment]]).</li><li>Let <var>varEnv</var> be <var>runningContext</var>.[[VariableEnvironment]].</li><li>Let <var>privateEnv</var> be <var>runningContext</var>.[[PrivateEnvironment]].</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code ExecutionContext <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Set <var>evalContext</var>.[[Function]] to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>.[[Realm]] to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>.[[ScriptOrModule]] to <var>runningContext</var>.[[ScriptOrModule]].</li><li>Set <var>evalContext</var>.[[VariableEnvironment]] to <var>varEnv</var>.</li><li>Set <var>evalContext</var>.[[LexicalEnvironment]] to <var>lexEnv</var>.</li><li>Set <var>evalContext</var>.[[PrivateEnvironment]] to <var>privateEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>privateEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new [[VariableEnvironment]] that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new [[LexicalEnvironment]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-completion-record-fields": "Table 9", "table-state-components-for-all-execution-contexts": "Table 28", "table-additional-state-components-for-ecmascript-code-execution-contexts": "Table 29", "table-additional-state-components-for-generator-execution-contexts": "Table 30", "table-dynamic-function-sourcetext-prefixes": "Table 54"}}}