{"from": {"secList": ["sec-testing-and-comparison-operations", "sec-ecmascript-language-types-string-type", "sec-stringindexof", "sec-abstract-relational-comparison", "sec-string.prototype.split", "sec-splitmatch", "sec-isstringprefix"], "secData": {"sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isinteger\"><h1><span class=\"secnum\">7.2.6</span>#sec-isinteger IsInteger ( argument )</h1>...</div><div id=\"excluded-sec-isnonnegativeinteger\"><h1><span class=\"secnum\">7.2.7</span>#sec-isnonnegativeinteger IsNonNegativeInteger ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.8</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.9</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-isstringprefix\"><h1><span class=\"secnum\">7.2.10</span>#sec-isstringprefix IsStringPrefix ( p, q )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.13</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-abstract-relational-comparison\"><h1><span class=\"secnum\">7.2.14</span>#sec-abstract-relational-comparison Abstract Relational Comparison</h1>...</div><div id=\"excluded-sec-abstract-equality-comparison\"><h1><span class=\"secnum\">7.2.15</span>#sec-abstract-equality-comparison Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-strict-equality-comparison\"><h1><span class=\"secnum\">7.2.16</span>#sec-strict-equality-comparison Strict Equality Comparison</h1>...</div></emu-clause>\n\n  "}, "sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>53</sup> - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined by the Unicode Standard as a <dfn id=\"leading-surrogate\">leading surrogate</dfn>, or more formally as a <dfn id=\"high-surrogate-code-unit\">high-surrogate code unit</dfn>) and every code unit with a numeric value in the inclusive range 0xDC00 to 0xDFFF (defined as a <dfn id=\"trailing-surrogate\">trailing surrogate</dfn>, or more formally as a <dfn id=\"low-surrogate-code-unit\">low-surrogate code unit</dfn>) using the following rules:</p>\n      <ul>\n        <li>\n          A code unit that is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref> is interpreted as a code point with the same value.\n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and the second code unit <var>c2</var> a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, is a <dfn id=\"surrogate-pair\">surrogate pair</dfn> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See <emu-xref href=\"#sec-utf16decodesurrogatepair\"><a href=\"#sec-utf16decodesurrogatepair\" class=\"excluded-xref\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</a></emu-xref>)\n        </li>\n        <li>\n          A code unit that is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        </li>\n      </ul>\n      <p>The function <code>String.prototype.normalize</code> (see <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>In this specification, the phrase \"the <dfn id=\"string-concatenation\">string-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a String value, a code unit, or a sequence of code units) denotes the String value whose sequence of code units is the concatenation of the code units (in order) of each of the arguments (in order).</p>\n      <p>The phrase \"the <dfn id=\"substring\">substring</dfn> of <var>S</var> from <var>inclusiveStart</var> to <var>exclusiveEnd</var>\" (where <var>S</var> is a String value or a sequence of code units and <var>inclusiveStart</var> and <var>exclusiveEnd</var> are integers) denotes the String value consisting of the consecutive code units of <var>S</var> beginning at index <var>inclusiveStart</var> and ending immediately before index <var>exclusiveEnd</var> (which is the empty String when <var>inclusiveStart</var> = <var>exclusiveEnd</var>). If the \"to\" suffix is omitted, the length of <var>S</var> is used as the value of <var>exclusiveEnd</var>.</p>\n\n      <div id=\"excluded-sec-stringindexof\"><h1><span class=\"secnum\">6.1.4.1</span>#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )</h1>...</div></emu-clause>\n\n    "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> Runtime Semantics: StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>fromIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>fromIndex</var> &#8804; <var>k</var> &#8804; <var>len</var> - <var>searchLen</var> and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>string</var> is the same as the code unit at index <var>j</var> within <var>searchValue</var>, let <var>pos</var> be the smallest (closest to <emu-val>-&#8734;</emu-val>) such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Otherwise, let <var>pos</var> be -1.</li><li>Return <var>pos</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is empty and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. An empty <var>searchValue</var> is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-abstract-relational-comparison": {"num": "7.2.14", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.split": {"num": "21.1.3.21", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-val>false</emu-val>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">21.1.3.21.1</span>#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-splitmatch": {"num": "21.1.3.21.1", "title": "#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )", "html": "<emu-clause id=\"sec-splitmatch\" aoid=\"SplitMatch\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-splitmatch\">#sec-splitmatch</span> Runtime Semantics: SplitMatch ( <var>S</var>, <var>q</var>, <var>R</var> )</h1>\n          <p>The abstract operation SplitMatch takes arguments <var>S</var> (a String), <var>q</var> (an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>R</var> (a String). It returns either <emu-val>false</emu-val> or the end index of a match. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is String.</li><li>Let <var>r</var> be the number of code units in <var>R</var>.</li><li>Let <var>s</var> be the number of code units in <var>S</var>.</li><li>If <var>q</var> + <var>r</var> &gt; <var>s</var>, return <emu-val>false</emu-val>.</li><li>If there exists an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> between 0 (inclusive) and <var>r</var> (exclusive) such that the code unit at index <var>q</var> + <var>i</var> within <var>S</var> is different from the code unit at index <var>i</var> within <var>R</var>, return <emu-val>false</emu-val>.</li><li>Return <var>q</var> + <var>r</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-isstringprefix": {"num": "7.2.10", "title": "#sec-isstringprefix IsStringPrefix ( p, q )", "html": "<emu-clause id=\"sec-isstringprefix\" aoid=\"IsStringPrefix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstringprefix\">#sec-isstringprefix</span> IsStringPrefix ( <var>p</var>, <var>q</var> )</h1>\n      <p>The abstract operation IsStringPrefix takes arguments <var>p</var> (a String) and <var>q</var> (a String). It determines if <var>p</var> is a prefix of <var>q</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>p</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>q</var>) is String.</li><li>If <var>q</var> can be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>p</var> and some other String <var>r</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Any String is a prefix of itself, because <var>r</var> may be the empty String.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-testing-and-comparison-operations", "sec-ecmascript-language-types-string-type", "sec-stringindexof", "sec-abstract-relational-comparison", "sec-string.prototype.split"], "secData": {"sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isinteger\"><h1><span class=\"secnum\">7.2.6</span>#sec-isinteger IsInteger ( argument )</h1>...</div><div id=\"excluded-sec-isnonnegativeinteger\"><h1><span class=\"secnum\">7.2.7</span>#sec-isnonnegativeinteger IsNonNegativeInteger ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.8</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.9</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.10</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-abstract-relational-comparison\"><h1><span class=\"secnum\">7.2.13</span>#sec-abstract-relational-comparison Abstract Relational Comparison</h1>...</div><div id=\"excluded-sec-abstract-equality-comparison\"><h1><span class=\"secnum\">7.2.14</span>#sec-abstract-equality-comparison Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-strict-equality-comparison\"><h1><span class=\"secnum\">7.2.15</span>#sec-strict-equality-comparison Strict Equality Comparison</h1>...</div></emu-clause>\n\n  "}, "sec-ecmascript-language-types-string-type": {"num": "6.1.4", "title": "#sec-ecmascript-language-types-string-type The String Type", "html": "<emu-clause id=\"sec-ecmascript-language-types-string-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</span> The String Type</h1>\n      <p>The String type is the set of all ordered sequences of zero or more 16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values (&#8220;elements&#8221;) up to a maximum length of 2<sup>53</sup> - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with nonnegative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements.</p>\n      <p>ECMAScript operations that do not interpret String contents apply no further semantics. Operations that do interpret String values treat each element as a single UTF-16 code unit. However, ECMAScript does not restrict the value of or relationships between these code units, so operations that further interpret String contents as sequences of Unicode code points encoded in UTF-16 must account for ill-formed subsequences. Such operations apply special treatment to every code unit with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined by the Unicode Standard as a <dfn id=\"leading-surrogate\">leading surrogate</dfn>, or more formally as a <dfn id=\"high-surrogate-code-unit\">high-surrogate code unit</dfn>) and every code unit with a numeric value in the inclusive range 0xDC00 to 0xDFFF (defined as a <dfn id=\"trailing-surrogate\">trailing surrogate</dfn>, or more formally as a <dfn id=\"low-surrogate-code-unit\">low-surrogate code unit</dfn>) using the following rules:</p>\n      <ul>\n        <li>\n          A code unit that is not a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and not a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref> is interpreted as a code point with the same value.\n        </li>\n        <li>\n          A sequence of two code units, where the first code unit <var>c1</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and the second code unit <var>c2</var> a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, is a <dfn id=\"surrogate-pair\">surrogate pair</dfn> and is interpreted as a code point with the value (<var>c1</var> - 0xD800) &#215; 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See <emu-xref href=\"#sec-utf16decodesurrogatepair\"><a href=\"#sec-utf16decodesurrogatepair\" class=\"excluded-xref\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</a></emu-xref>)\n        </li>\n        <li>\n          A code unit that is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> or <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>, but is not part of a <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>, is interpreted as a code point with the same value.\n        </li>\n      </ul>\n      <p>The function <code>String.prototype.normalize</code> (see <emu-xref href=\"#sec-string.prototype.normalize\"><a href=\"#sec-string.prototype.normalize\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.normalize\">#sec-string.prototype.normalize</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see <emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref>) internally normalizes String values, but no other operations implicitly normalize the strings upon which they operate. Only operations that are explicitly specified to be language or locale sensitive produce language-sensitive results.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The rationale behind this design was to keep the implementation of Strings as simple and high-performing as possible. If ECMAScript source text is in Normalized Form C, string literals are guaranteed to also be normalized, as long as they do not contain any Unicode escape sequences.</p>\n      </div></emu-note>\n      <p>In this specification, the phrase \"the <dfn id=\"string-concatenation\">string-concatenation</dfn> of <var>A</var>, <var>B</var>, ...\" (where each argument is a String value, a code unit, or a sequence of code units) denotes the String value whose sequence of code units is the concatenation of the code units (in order) of each of the arguments (in order).</p>\n      <p>The phrase \"the <dfn id=\"substring\">substring</dfn> of <var>S</var> from <var>inclusiveStart</var> to <var>exclusiveEnd</var>\" (where <var>S</var> is a String value or a sequence of code units and <var>inclusiveStart</var> and <var>exclusiveEnd</var> are integers) denotes the String value consisting of the consecutive code units of <var>S</var> beginning at index <var>inclusiveStart</var> and ending immediately before index <var>exclusiveEnd</var> (which is the empty String when <var>inclusiveStart</var> = <var>exclusiveEnd</var>). If the \"to\" suffix is omitted, the length of <var>S</var> is used as the value of <var>exclusiveEnd</var>.</p>\n\n      <div id=\"excluded-sec-stringindexof\"><h1><span class=\"secnum\">6.1.4.1</span>#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )</h1>...</div><div id=\"excluded-sec-stringincludesat\"><h1><span class=\"secnum\">6.1.4.2</span>#sec-stringincludesat Runtime Semantics: StringIncludesAt ( string, substring, atIndex )</h1>...</div></emu-clause>\n\n    "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> Runtime Semantics: StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>fromIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>fromIndex</var> &#8804; <var>k</var> &#8804; <var>len</var> - <var>searchLen</var> and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>string</var> is the same as the code unit at index <var>j</var> within <var>searchValue</var>, let <var>pos</var> be the smallest (closest to <emu-val>-&#8734;</emu-val>) such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Otherwise, let <var>pos</var> be -1.</li><li>Return <var>pos</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is empty and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. An empty <var>searchValue</var> is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-abstract-relational-comparison": {"num": "7.2.13", "title": "#sec-abstract-relational-comparison Abstract Relational Comparison", "html": "<emu-clause id=\"sec-abstract-relational-comparison\" aoid=\"Abstract Relational Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-relational-comparison\">#sec-abstract-relational-comparison</span> Abstract Relational Comparison</h1>\n      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var> as a parameter. The flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If !&#160;<emu-xref aoid=\"StringIncludesAt\"><a href=\"#sec-stringincludesat\">StringIncludesAt</a></emu-xref>(<var>px</var>, <var>py</var>, 0) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"StringIncludesAt\"><a href=\"#sec-stringincludesat\">StringIncludesAt</a></emu-xref>(<var>py</var>, <var>px</var>, 0) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val> or <var>ny</var> is <emu-val>+&#8734;</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val> or <var>ny</var> is <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>nx</var> is less than the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>ny</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">1.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.split": {"num": "21.1.3.21", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any String in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>If <var>R</var> is not the empty String, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li></ol></li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>If !&#160;<emu-xref aoid=\"StringIncludesAt\"><a href=\"#sec-stringincludesat\">StringIncludesAt</a></emu-xref>(<var>S</var>, <var>R</var>, <var>q</var>) is <emu-val>false</emu-val>, then set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>e</var> be <var>q</var> + the length of <var>R</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>s</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}