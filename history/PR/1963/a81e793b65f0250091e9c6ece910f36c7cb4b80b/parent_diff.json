{"from": {"secList": ["sec-static-semantics-sv", "sec-globaldeclarationinstantiation", "sec-asyncgeneratorfunction-constructor", "sec-global-environment-records-getbindingvalue-n-s", "sec-patterns-static-semantics-character-value", "sec-globalthis", "sec-global-environment-records-deletebinding-n", "sec-runtime-semantics-mv-s", "sec-global-environment-records-setmutablebinding-n-v-s", "sec-hasrestrictedglobalproperty", "sec-let-and-const-declarations", "sec-abstract-module-records", "sec-numeric-types-number-unsignedRightShift", "sec-functiondeclarationinstantiation", "sec-static-semantics-tv-and-trv", "sec-variable-statement-runtime-semantics-evaluation", "sec-async-function-instances", "sec-object-environment-records-withbaseobject", "sec-execution-contexts", "sec-module-environment-records", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-ecmascript-standard-built-in-objects", "sec-object-environment-records-setmutablebinding-n-v-s", "sec-asyncgenerator-definitions-evaluation", "sec-lexical-environment-and-environment-record-specification-types", "sec-web-compat-blockdeclarationinstantiation", "sec-newmoduleenvironment", "sec-with-statement", "sec-declarative-environment-records-hasbinding-n", "sec-module-environment-records-deletebinding-n", "sec-environment-records", "sec-newfunctionenvironment", "sec-with-statement-runtime-semantics-evaluation", "sec-global-environment-records-hasbinding-n", "sec-haslexicaldeclaration", "sec-ecmascript-function-objects", "sec-executable-code-and-execution-contexts", "sec-postfix-increment-operator-runtime-semantics-evaluation", "sec-declarative-environment-records-initializebinding-n-v", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-variable-statement", "sec-global-environment-records-createimmutablebinding-n-s", "sec-createdynamicfunction", "sec-getthisenvironment", "sec-getidentifierreference", "sec-runtime-semantics-catchclauseevaluation", "sec-function-definitions-runtime-semantics-evaluation", "sec-variablestatements-in-catch-blocks", "sec-evaldeclarationinstantiation", "sec-candeclareglobalvar", "sec-object-environment-records-hasbinding-n", "sec-runtime-semantics-forinofheadevaluation", "sec-async-function-constructor", "sec-initializeboundname", "sec-object-environment-records-initializebinding-n-v", "sec-runtime-semantics-classdefinitionevaluation", "sec-object-environment-records-deletebinding-n", "sec-object-environment-records-createmutablebinding-n-d", "sec-blockdeclarationinstantiation", "sec-newglobalenvironment", "sec-global-environment-records-initializebinding-n-v", "sec-createperiterationenvironment", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-hasvardeclaration", "sec-object-environment-records", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-resolvebinding", "sec-function-environment-records", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-web-compat-evaldeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-candeclareglobalfunction", "sec-object-environment-records-getbindingvalue-n-s", "sec-newdeclarativeenvironment", "sec-web-compat-functiondeclarationinstantiation", "sec-generatorfunction-constructor", "sec-script-records", "sec-newobjectenvironment", "sec-ecmascript-specification-types", "sec-declarative-environment-records", "sec-createglobalvarbinding", "sec-createglobalfunctionbinding", "sec-source-text-module-record-initialize-environment", "sec-createimportbinding", "sec-cyclic-module-records", "sec-prefix-increment-operator-runtime-semantics-evaluation", "sec-ordinarycallbindthis", "sec-module-environment-records-getbindingvalue-n-s", "sec-code-realms", "sec-postfix-decrement-operator-runtime-semantics-evaluation", "sec-lexical-environment-operations", "sec-runtime-semantics-bindinginstantiation", "sec-declarative-environment-records-deletebinding-n", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-gettemplateobject", "sec-numberbitwiseop", "sec-lexical-environments", "sec-stringgetownproperty", "sec-global-environment-records", "sec-global-environment-records-createmutablebinding-n-d", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-ordinaryfunctioncreate", "sec-for-statement-runtime-semantics-labelledevaluation", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-abstract-equality-comparison", "sec-global-environment-records-getthisbinding"], "secData": {"sec-static-semantics-sv": {"num": "11.8.4.2", "title": "#sec-static-semantics-sv Static Semantics: SV", "html": "<emu-clause id=\"sec-static-semantics-sv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sv\">#sec-static-semantics-sv</span> Static Semantics: SV</h1>\n        <p>A string literal stands for a value of the String type. The String value (SV) of the literal is described in terms of code unit values contributed by the various parts of the string literal. As part of this process, some Unicode code points within the string literal are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV), as described below or in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a2dff6c6\"><emu-t>\"</emu-t><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"74786b0a\"><emu-t>'</emu-t><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e7eba5c6\"><emu-t>\"</emu-t><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"314db585\"><emu-t>'</emu-t><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3d57705\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9b3f247e\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b4d0b3a\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"89ebe999\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0000 (NULL).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is determined by the <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt> according to  <emu-xref href=\"#table-34\"><a href=\"#table-34\" class=\"excluded-xref\" excluded-id=\"table-34\">#table-34</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <emu-table id=\"table-34\" caption=\"String Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-34\">#table-34</span>: String Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Escape Sequence\n              \n              </th>\n              <th>\n                Code Unit Value\n              \n              </th>\n              <th>\n                Unicode Character Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>\\b</code>\n              \n              </td>\n              <td>\n                <code>0x0008</code>\n              \n              </td>\n              <td>\n                BACKSPACE\n              \n              </td>\n              <td>\n                &lt;BS&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\t</code>\n              \n              </td>\n              <td>\n                <code>0x0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\n</code>\n              \n              </td>\n              <td>\n                <code>0x000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\v</code>\n              \n              </td>\n              <td>\n                <code>0x000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\f</code>\n              \n              </td>\n              <td>\n                <code>0x000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\r</code>\n              \n              </td>\n              <td>\n                <code>0x000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\"</code>\n              \n              </td>\n              <td>\n                <code>0x0022</code>\n              \n              </td>\n              <td>\n                QUOTATION MARK\n              \n              </td>\n              <td>\n                <code>\"</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\'</code>\n              \n              </td>\n              <td>\n                <code>0x0027</code>\n              \n              </td>\n              <td>\n                APOSTROPHE\n              \n              </td>\n              <td>\n                <code>'</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\\</code>\n              \n              </td>\n              <td>\n                <code>0x005C</code>\n              \n              </td>\n              <td>\n                REVERSE SOLIDUS\n              \n              </td>\n              <td>\n                <code>\\</code>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"NonEscapeCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (16<sub>&#8477;</sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is the MV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global lexical environment in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>envRec</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>envRec</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>envRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>envRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncGeneratorFunction (...)</code> is equivalent to the object creation expression <code>new AsyncGeneratorFunction (...)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncGeneratorFunction behaviour must include a <code>super</code> call to the AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of AsyncGeneratorFunction. There is no syntactic means to create instances of AsyncGeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-getbindingvalue-n-s": {"num": "8.1.1.4.6", "title": "#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getbindingvalue-n-s\">#sec-global-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for global Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding is an uninitialized binding throw a <emu-val>ReferenceError</emu-val> exception. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-patterns-static-semantics-character-value": {"num": "21.2.1.4", "title": "#sec-patterns-static-semantics-character-value Static Semantics: CharacterValue", "html": "<emu-clause id=\"sec-patterns-static-semantics-character-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-character-value\">#sec-patterns-static-semantics-character-value</span> Static Semantics: CharacterValue</h1>\n        <emu-grammar><emu-production name=\"ClassAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6f24a587\"><emu-t>-</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+002D (HYPHEN-MINUS).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassAtomNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ecde6e28\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\\</emu-t> or <emu-t>]</emu-t> or <emu-t>-</emu-t></emu-gmod></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.</li><li>Return the code point value of <var>ch</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassEscape\">ClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0185ce89\"><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+0008 (BACKSPACE).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassEscape\">ClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6f24a587\"><emu-t>-</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+002D (HYPHEN-MINUS).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f88e7170\"><emu-nt><a href=\"#prod-ControlEscape\">ControlEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value according to <emu-xref href=\"#table-47\"><a href=\"#table-47\" class=\"excluded-xref\" excluded-id=\"table-47\">#table-47</a></emu-xref>.\n        </li></ol></emu-alg>\n        <emu-table id=\"table-47\" caption=\"ControlEscape Code Point Values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-47\">#table-47</span>: ControlEscape Code Point Values</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                ControlEscape\n              \n              </th>\n              <th>\n                Code Point Value\n              \n              </th>\n              <th>\n                Code Point\n              \n              </th>\n              <th>\n                Unicode Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>t</code>\n              \n              </td>\n              <td>\n                9\n              \n              </td>\n              <td>\n                <code>U+0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>n</code>\n              \n              </td>\n              <td>\n                10\n              \n              </td>\n              <td>\n                <code>U+000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>v</code>\n              \n              </td>\n              <td>\n                11\n              \n              </td>\n              <td>\n                <code>U+000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>f</code>\n              \n              </td>\n              <td>\n                12\n              \n              </td>\n              <td>\n                <code>U+000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>r</code>\n              \n              </td>\n              <td>\n                13\n              \n              </td>\n              <td>\n                <code>U+000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a14dae7e\"><emu-t>c</emu-t><emu-nt><a href=\"#prod-ControlLetter\">ControlLetter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-ControlLetter\">ControlLetter</a></emu-nt>.</li><li>Let <var>i</var> be <var>ch</var>'s code point value.</li><li>Return the remainder of dividing <var>i</var> by 32.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6964a19d\"><emu-t>0</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+0000 (NULL).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><code>\\0</code> represents the &lt;NUL&gt; character and cannot be followed by a decimal digit.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the numeric value of the code unit that is the SV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8a1bc222\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt><emu-t>\\u</emu-t><emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lead</var> be the CharacterValue of <emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt>.</li><li>Let <var>trail</var> be the CharacterValue of <emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt>.</li><li>Let <var>cp</var> be <emu-xref aoid=\"UTF16DecodeSurrogatePair\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16DecodeSurrogatePair</a></emu-xref>(<var>lead</var>, <var>trail</var>).</li><li>Return the code point value of <var>cp</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"36b8a3a6\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the CharacterValue of <emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d13554f7\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the CharacterValue of <emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"603c9eb4\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-NonSurrogate\">NonSurrogate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the CharacterValue of <emu-nt><a href=\"#prod-NonSurrogate\">NonSurrogate</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LeadSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"TrailSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NonSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonSurrogate\">NonSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"804f428d\"><emu-nt><a href=\"#prod-IdentityEscape\">IdentityEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-IdentityEscape\">IdentityEscape</a></emu-nt>.</li><li>Return the code point value of <var>ch</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-globalthis": {"num": "18.1.1", "title": "#sec-globalthis globalThis", "html": "<emu-clause id=\"sec-globalthis\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globalthis\">#sec-globalthis</span> globalThis</h1>\n      <p>The initial value of the <emu-val>\"globalThis\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> in a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> <var>realm</var> is <var>realm</var>.[[GlobalEnv]]'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>'s [[GlobalThisValue]].</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-global-environment-records-deletebinding-n": {"num": "8.1.1.4.7", "title": "#sec-global-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-deletebinding-n\">#sec-global-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for global Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.DeleteBinding(<var>N</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>status</var> be ? <var>ObjRec</var>.DeleteBinding(<var>N</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>varNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>N</var> is an element of <var>varNames</var>, remove that element from the <var>varNames</var>.</li></ol></li><li>Return <var>status</var>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"db369ee0\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"477fcd23\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"a3f639a9\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub>&#8477;</sub><sup>10000<sub>&#8477;</sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"33bf537e\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>)) times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var> -<sub>&#8477;</sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>-</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-global-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.4.5", "title": "#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-global-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-setmutablebinding-n-v-s\">#sec-global-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for global Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-hasrestrictedglobalproperty": {"num": "8.1.1.4.14", "title": "#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )", "html": "<emu-clause id=\"sec-hasrestrictedglobalproperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasrestrictedglobalproperty\">#sec-hasrestrictedglobalproperty</span> HasRestrictedGlobalProperty ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasRestrictedGlobalProperty for global Environment Records determines if the argument identifier is the name of a property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that must not be shadowed by a global lexical binding:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Properties may exist upon a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that were directly created rather than being declared using a var or function declaration. A global lexical binding may not be created that has the same name as a non-configurable property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. The global property <emu-val>\"undefined\"</emu-val> is an example of such a property.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-let-and-const-declarations": {"num": "13.3.1", "title": "#sec-let-and-const-declarations Let and Const Declarations", "html": "<emu-clause id=\"sec-let-and-const-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations\">#sec-let-and-const-declarations</span> Let and Const Declarations</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>let</code> and <code>const</code> declarations define variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment. The variables are created when their containing <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> is instantiated but may not be accessed in any way until the variable's <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated. A variable defined by a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated, not when the variable is created. If a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> in a <code>let</code> declaration does not have an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> the variable is assigned the value <emu-val>undefined</emu-val> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\" id=\"prod-LexicalDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8d299b81\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LetOrConst\" id=\"prod-LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"940c6b54\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"36233f0f\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingList\" params=\"In, Yield, Await\" id=\"prod-BindingList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"35e0fa1e\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1435fb35\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\" id=\"prod-LexicalBinding\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8eeb7c11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"49d70a55\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-let-and-const-declarations-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-let-and-const-declarations-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-static-semantics-boundnames\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-let-and-const-declarations-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">13.3.1.3</span>#sec-let-and-const-declarations-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.3.1.4</span>#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-unsignedRightShift": {"num": "6.1.6.1.11", "title": "#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-unsignedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-unsignedRightShift\">#sec-numeric-types-number-unsignedRightShift</span> Number::unsignedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>y</var>).</li><li>Let <var>shiftCount</var> be the result of masking out all but the least significant 5 bits of <var>rnum</var>, that is, compute <var>rnum</var> &amp; 0x1F.</li><li>Return the result of performing a zero-filling right shift of <var>lnum</var> by <var>shiftCount</var> bits. Vacated bits are filled with zero. The result is an unsigned 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>envRec</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>envRec</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>envRec</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <emu-val>\"arguments\"</emu-val> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li><li>Let <var>varEnvRec</var> be <var>envRec</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>envRec</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnvRec</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate lexical <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in  <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-tv-and-trv": {"num": "11.8.6.1", "title": "#sec-static-semantics-tv-and-trv Static Semantics: TV and TRV", "html": "<emu-clause id=\"sec-static-semantics-tv-and-trv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-tv-and-trv\">#sec-static-semantics-tv-and-trv</span> Static Semantics: TV and TRV</h1>\n        <p>A template literal component is interpreted as a sequence of Unicode code points. The Template Value (TV) of a literal component is described in terms of code unit values (SV,  <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>) contributed by the various parts of the template literal component. As part of this process, some Unicode code points within the template component are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV,  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>). In determining a TV, escape sequences are replaced by the UTF-16 code unit(s) of the Unicode code point represented by the escape sequence. The Template Raw Value (TRV) is similar to a Template Value with the difference that in TRVs escape sequences are interpreted literally.</p>\n        <ul>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7718e620\"><emu-t>`</emu-t><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateHead\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25732601\"><emu-t>`</emu-t><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateMiddle\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"046dadff\"><emu-t>}</emu-t><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateTail\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a8ba1d2\"><emu-t>}</emu-t><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d6bd81e\"><emu-t>`</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateHead\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5451d6b2\"><emu-t>`</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateMiddle\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b95ec100\"><emu-t>}</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateTail\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ab941abd\"><emu-t>}</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"feb9caa8\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f9e47ad\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is <emu-val>undefined</emu-val> if either the TV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> is <emu-val>undefined</emu-val> or the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt> is <emu-val>undefined</emu-val>. Otherwise, it is a sequence consisting of the code units of the TV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> followed by the code units of the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0024 (DOLLAR SIGN).\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is <emu-val>undefined</emu-val>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TV of <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"544825da\"><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"LineContinuation\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d6bd81e\"><emu-t>`</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateHead\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5451d6b2\"><emu-t>`</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateMiddle\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b95ec100\"><emu-t>}</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateTail\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ab941abd\"><emu-t>}</emu-t><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"feb9caa8\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f9e47ad\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence consisting of the code units of the TRV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> followed by the code units of the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0024 (DOLLAR SIGN).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"544825da\"><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e9e86f07\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0030 (DIGIT ZERO).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"44bd6f55\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c247e196\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0030 (DIGIT ZERO) followed by the code units of the TRV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e6c4f6ee\"><emu-t>x</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0078 (LATIN SMALL LETTER X).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"92cdf202\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER X) followed by the code units of the TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a16001b3\"><emu-t>u</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0075 (LATIN SMALL LETTER U).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f7d3e8d4\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4ea47d3d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"45170c27\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5427e268\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0c957f40\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by the code units of the TRV of <emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ab5a798c\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>}</emu-t>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by the code units of the TRV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"SingleEscapeCharacter\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>\"</emu-t><emu-t>\\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER X) followed by TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by TRV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by TRV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt> followed by the code unit 0x007D (RIGHT CURLY BRACKET).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the fourth <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a0c48a71\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of TRV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> followed by TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t><emu-t>a</emu-t><emu-t>b</emu-t><emu-t>c</emu-t><emu-t>d</emu-t><emu-t>e</emu-t><emu-t>f</emu-t><emu-t>A</emu-t><emu-t>B</emu-t><emu-t>C</emu-t><emu-t>D</emu-t><emu-t>E</emu-t><emu-t>F</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineContinuation\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x000A (LINE FEED).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6bb44f60\"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x000A (LINE FEED).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"253de229\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x000A (LINE FEED).\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>TV excludes the code units of <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt> while TRV includes them. &lt;CR&gt;&lt;LF&gt; and &lt;CR&gt; <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>s are normalized to &lt;LF&gt; for both TV and TRV. An explicit <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> is needed to include a &lt;CR&gt; or &lt;CR&gt;&lt;LF&gt; sequence.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "13.3.2.4", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3347a1bd\"><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89becb83\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then step 5 will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ddd53e5\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-function-instances": {"num": "25.7.4", "title": "#sec-async-function-instances AsyncFunction Instances", "html": "<emu-clause id=\"sec-async-function-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-instances\">#sec-async-function-instances</span> AsyncFunction Instances</h1>\n\n      <p>Every AsyncFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[IsClassConstructor]] internal slot for all such instances is <emu-val>false</emu-val>. AsyncFunction instances are not constructors and do not have a [[Construct]] internal method. AsyncFunction instances do not have a prototype property as they are not constructable.</p>\n      <p>Each AsyncFunction instance has the following own properties:</p>\n      <div id=\"excluded-sec-async-function-instances-length\"><h1><span class=\"secnum\">25.7.4.1</span>#sec-async-function-instances-length length</h1>...</div><div id=\"excluded-sec-async-function-instances-name\"><h1><span class=\"secnum\">25.7.4.2</span>#sec-async-function-instances-name name</h1>...</div></emu-clause>\n\n    "}, "sec-object-environment-records-withbaseobject": {"num": "8.1.1.2.10", "title": "#sec-object-environment-records-withbaseobject WithBaseObject ( )", "html": "<emu-clause id=\"sec-object-environment-records-withbaseobject\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-withbaseobject\">#sec-object-environment-records-withbaseobject</span> WithBaseObject ( )</h1>\n          <p>Object Environment Records return <emu-val>undefined</emu-val> as their WithBaseObject unless their <var>withEnvironment</var> flag is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>true</emu-val>, return the binding object for <var>envRec</var>.</li><li>Otherwise, return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An  <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s  <dfn id=\"running-execution-context\">running execution context</dfn>.  All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The  <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in  <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          \n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          \n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called  <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the  <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in  <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> whose <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Lexical Environments.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in  <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          \n          </td>\n          <td>\n            The GeneratorObject that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the lexical environment of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in  <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in  <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: <code>[</code> <code>]</code>) or rest parameters (which are shown using the form &#171;...name&#187;) are not included in the default argument count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty string as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses 18 through 26 and in Annex  <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses 18 through 26 and in Annex  <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-object-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.2.5", "title": "#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-object-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-setmutablebinding-n-v-s\">#sec-object-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for object Environment Records attempts to set the value of the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object's property whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>bindings</var>, <var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-lexical-environment-and-environment-record-specification-types": {"num": "6.2.6", "title": "#sec-lexical-environment-and-environment-record-specification-types The Lexical Environment and Environment Record Specification Types", "html": "<emu-clause id=\"sec-lexical-environment-and-environment-record-specification-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-environment-and-environment-record-specification-types\">#sec-lexical-environment-and-environment-record-specification-types</span> The Lexical Environment and Environment Record Specification Types</h1>\n      <p>The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> and <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> types are used to explain the behaviour of name resolution in nested functions and blocks. These types and the operations upon them are defined in  <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\" class=\"excluded-xref\" excluded-id=\"sec-lexical-environments\">#sec-lexical-environments</a></emu-xref>.</p>\n    </emu-clause>\n\n    "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.3.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 4.a.ii.1:</p>\n        <emu-alg><ol><li>If <var>envRec</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 4.b.iii:</p>\n        <emu-alg><ol><li>If the binding for <var>fn</var> in <var>envRec</var> is an uninitialized binding, then<ol><li>Perform <var>envRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>envRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-newmoduleenvironment": {"num": "8.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-with-statement": {"num": "13.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2ceedb70\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">13.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.11.2</span>#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.11.3</span>#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.11.4</span>#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.11.5</span>#sec-with-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.11.6</span>#sec-with-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.11.7</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-declarative-environment-records-hasbinding-n": {"num": "8.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for declarative Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-deletebinding-n": {"num": "8.1.1.5.2", "title": "#sec-module-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-module-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-deletebinding-n\">#sec-module-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for module Environment Records refuses to delete bindings.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This method is never invoked. See <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Module Environment Records are only used within strict code and an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule prevents the delete operator, in strict code, from being applied to a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> that would resolve to a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding. See  <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-environment-records": {"num": "8.1.1", "title": "#sec-environment-records Environment Records", "html": "<emu-clause id=\"sec-environment-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-records\">#sec-environment-records</span> Environment Records</h1>\n      <p>There are two primary kinds of  <dfn>Environment Record</dfn> values used in this specification:  <em>declarative Environment Records</em> and  <em>object Environment Records</em>. Declarative Environment Records are used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clauses that directly associate identifier bindings with ECMAScript language values. Object Environment Records are used to define the effect of ECMAScript elements such as <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> that associate identifier bindings with the properties of some object. Global Environment Records and function Environment Records are specializations that are used for specifically for <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> global declarations and for top-level declarations within functions.</p>\n      <p>For specification purposes Environment Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Environment Record is an abstract class with three concrete subclasses, declarative Environment Record, object Environment Record, and global Environment Record. Function Environment Records and module Environment Records are subclasses of declarative Environment Record. The abstract class includes the abstract specification methods defined in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>\n      <emu-table id=\"table-15\" caption=\"Abstract Methods of Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-15\">#table-15</span>: Abstract Methods of Environment Records</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Method\n            \n            </th>\n            <th>\n              Purpose\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              HasBinding(N)\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateMutableBinding(N, D)\n            \n            </td>\n            <td>\n              Create a new but uninitialized mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              CreateImmutableBinding(N, S)\n            \n            </td>\n            <td>\n              Create a new but uninitialized immutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val> then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              InitializeBinding(N, V)\n            \n            </td>\n            <td>\n              Set the value of an already existing but uninitialized binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              SetMutableBinding(N, V, S)\n            \n            </td>\n            <td>\n              Set the value of an already existing mutable binding in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              GetBindingValue(N, S)\n            \n            </td>\n            <td>\n              Returns the value of an already existing binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              DeleteBinding(N)\n            \n            </td>\n            <td>\n              Delete a binding from an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasThisBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              HasSuperBinding()\n            \n            </td>\n            <td>\n              Determine if an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              WithBaseObject()\n            \n            </td>\n            <td>\n              If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-declarative-environment-records\"><h1><span class=\"secnum\">8.1.1.1</span>#sec-declarative-environment-records Declarative Environment Records</h1>...</div><div id=\"excluded-sec-object-environment-records\"><h1><span class=\"secnum\">8.1.1.2</span>#sec-object-environment-records Object Environment Records</h1>...</div><div id=\"excluded-sec-function-environment-records\"><h1><span class=\"secnum\">8.1.1.3</span>#sec-function-environment-records Function Environment Records</h1>...</div><div id=\"excluded-sec-global-environment-records\"><h1><span class=\"secnum\">8.1.1.4</span>#sec-global-environment-records Global Environment Records</h1>...</div><div id=\"excluded-sec-module-environment-records\"><h1><span class=\"secnum\">8.1.1.5</span>#sec-module-environment-records Module Environment Records</h1>...</div></emu-clause>\n\n    "}, "sec-newfunctionenvironment": {"num": "8.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> and <var>newTarget</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>envRec</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>envRec</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>envRec</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Let <var>home</var> be <var>F</var>.[[HomeObject]].</li><li>Set <var>envRec</var>.[[HomeObject]] to <var>home</var>.</li><li>Set <var>envRec</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-runtime-semantics-evaluation": {"num": "13.11.7", "title": "#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-with-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"23bd2456\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>)).</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>obj</var>, <var>oldEnv</var>).</li><li>Set the <var>withEnvironment</var> flag of <var>newEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <emu-val>true</emu-val>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li><li>Let <var>C</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the embedded <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, whether normally or by some form of <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> or exception, the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-global-environment-records-hasbinding-n": {"num": "8.1.1.4.1", "title": "#sec-global-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-hasbinding-n\">#sec-global-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for global Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-haslexicaldeclaration": {"num": "8.1.1.4.13", "title": "#sec-haslexicaldeclaration HasLexicalDeclaration ( N )", "html": "<emu-clause id=\"sec-haslexicaldeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-haslexicaldeclaration\">#sec-haslexicaldeclaration</span> HasLexicalDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasLexicalDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>Return <var>DclRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            sequence of Unicode code points\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-lexical-environments\"><h1><span class=\"secnum\">8.1</span>#sec-lexical-environments Lexical Environments</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs\"><h1><span class=\"secnum\">8.4</span>#sec-jobs Jobs and Host Operations to Enqueue Jobs</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.6</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.7</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.8</span>#sec-forward-progress Forward Progress</h1>...</div></emu-clause>\n\n"}, "sec-postfix-increment-operator-runtime-semantics-evaluation": {"num": "12.4.4.1", "title": "#sec-postfix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">#sec-postfix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "8.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for declarative Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "9.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>When the [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> is called with property key <var>P</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetEnvRec</var> be <var>targetEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetEnvRec</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-variable-statement": {"num": "13.3.2", "title": "#sec-variable-statement Variable Statement", "html": "<emu-clause id=\"sec-variable-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement\">#sec-variable-statement</span> Variable Statement</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <code>var</code> statement declares variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment. Var variables are created when their containing <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> is instantiated and are initialized to <emu-val>undefined</emu-val> when created. Within the scope of any VariableEnvironment a common <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> may appear in more than one <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> but those declarations collectively define only one variable. A variable defined by a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is executed, not when the variable is created.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"VariableStatement\" params=\"Yield, Await\" id=\"prod-VariableStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b41c0900\"><emu-t>var</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\" id=\"prod-VariableDeclarationList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3ece12c3\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c6c87748\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\" id=\"prod-VariableDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8eeb7c11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"49d70a55\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-variable-statement-static-semantics-boundnames\"><h1><span class=\"secnum\">13.3.2.1</span>#sec-variable-statement-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-variable-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.3.2.2</span>#sec-variable-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-variable-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.3.2.3</span>#sec-variable-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-variable-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.3.2.4</span>#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Generator%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGenerator%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>P</var>), using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>bodyString</var>), using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <emu-const>generator</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>async</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Set <var>F</var>.[[SourceText]] to !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>sourceString</var>).</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <emu-val>\"prototype\"</emu-val> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-getthisenvironment": {"num": "8.3.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>lex</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Repeat,<ol><li>Let <var>envRec</var> be <var>lex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>exists</var> be <var>envRec</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>envRec</var>.</li><li>Let <var>outer</var> be the value of <var>lex</var>'s outer environment reference.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>lex</var> to <var>outer</var>.\n      </li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step 2 will always terminate because the list of environments always ends with the <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref> which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getidentifierreference": {"num": "8.1.2.1", "title": "#sec-getidentifierreference GetIdentifierReference ( lex, name, strict )", "html": "<emu-clause id=\"sec-getidentifierreference\" aoid=\"GetIdentifierReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getidentifierreference\">#sec-getidentifierreference</span> GetIdentifierReference ( <var>lex</var>, <var>name</var>, <var>strict</var> )</h1>\n        <p>The abstract operation GetIdentifierReference takes arguments <var>lex</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> or <emu-val>null</emu-val>), <var>name</var> (a String), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>lex</var> is the value <emu-val>null</emu-val>, then<ol><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <emu-val>undefined</emu-val>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Let <var>envRec</var> be <var>lex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>exists</var> be ? <var>envRec</var>.HasBinding(<var>name</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>envRec</var>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Else,<ol><li>Let <var>outer</var> be the value of <var>lex</var>'s outer environment reference.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>outer</var>, <var>name</var>, <var>strict</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-catchclauseevaluation": {"num": "13.15.7", "title": "#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-catchclauseevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-catchclauseevaluation\">#sec-runtime-semantics-catchclauseevaluation</span> Runtime Semantics: CatchClauseEvaluation</h1>\n      <p>With parameter <var>thrownValue</var>.</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc13c36\"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>catchEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>catchEnvRec</var> be <var>catchEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each element <var>argName</var> of the BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>, do<ol><li>Perform ! <var>catchEnvRec</var>.CreateMutableBinding(<var>argName</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>catchEnv</var>.</li><li>Let <var>status</var> be BindingInitialization of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> with arguments <var>thrownValue</var> and <var>catchEnv</var>.</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>B</var> be the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>B</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a18a7645\"><emu-t>catch</emu-t><emu-nt><a href=\"#prod-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.25", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause  <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\" id=\"prod-annexB-Catch\">\n    <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc13c36\"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> is  <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" id=\"prod-annexB-CatchParameter\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n        \n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of  <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step 5.d.ii.2.a.i is replaced by:</p>\n      <emu-alg type=\"i\"><ol><li>If <var>thisEnvRec</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.\n      </li></ol></emu-alg>\n      <p>Step 9.d.ii.4.b.i.i is replaced by:</p>\n      <emu-alg type=\"i\"><ol><li>If <var>thisEnvRec</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnvRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>Let <var>thisEnvRec</var> be <var>thisLex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>thisEnvRec</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisEnvRec</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>'s outer environment reference.</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnvRec</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 12.</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-candeclareglobalvar": {"num": "8.1.1.4.15", "title": "#sec-candeclareglobalvar CanDeclareGlobalVar ( N )", "html": "<emu-clause id=\"sec-candeclareglobalvar\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</span> CanDeclareGlobalVar ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalVar for global Environment Records determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>. Redundant var declarations and var declarations for pre-existing <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties are allowed.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>hasProperty</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\">\n        <span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>newEnvRec</var> be <var>newEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnvRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}, "sec-initializeboundname": {"num": "12.1.5.1", "title": "#sec-initializeboundname Runtime Semantics: InitializeBoundName ( name, value, environment )", "html": "<emu-clause id=\"sec-initializeboundname\" aoid=\"InitializeBoundName\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeboundname\">#sec-initializeboundname</span> Runtime Semantics: InitializeBoundName ( <var>name</var>, <var>value</var>, <var>environment</var> )</h1>\n        <p>The abstract operation InitializeBoundName takes arguments <var>name</var>, <var>value</var>, and <var>environment</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is String.</li><li>If <var>environment</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> component of <var>environment</var>.</li><li>Perform <var>env</var>.InitializeBinding(<var>name</var>, <var>value</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>name</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object-environment-records-initializebinding-n-v": {"num": "8.1.1.2.4", "title": "#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-object-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-initializebinding-n-v\">#sec-object-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for object Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return ? <var>envRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In this specification, all uses of CreateMutableBinding for object Environment Records are immediately followed by a call to InitializeBinding for the same name. Hence, implementations do not need to explicitly track the initialization state of individual object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-object-environment-records-deletebinding-n": {"num": "8.1.1.2.7", "title": "#sec-object-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-deletebinding-n\">#sec-object-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for object Environment Records can only delete bindings that correspond to properties of the environment object whose [[Configurable]] attribute have the value <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <var>bindings</var>.[[Delete]](<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "8.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for object Environment Records creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindings</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-newglobalenvironment": {"num": "8.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>objRec</var> be a new object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing <var>G</var> as the binding object.</li><li>Let <var>dclRec</var> be a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>globalRec</var> be a new global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Set <var>globalRec</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>globalRec</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>globalRec</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>globalRec</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>globalRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-global-environment-records-initializebinding-n-v": {"num": "8.1.1.4.4", "title": "#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-global-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-initializebinding-n-v\">#sec-global-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for global Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the binding exists, it must be in the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createperiterationenvironment": {"num": "13.7.4.9", "title": "#sec-createperiterationenvironment Runtime Semantics: CreatePerIterationEnvironment ( perIterationBindings )", "html": "<emu-clause id=\"sec-createperiterationenvironment\" aoid=\"CreatePerIterationEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createperiterationenvironment\">#sec-createperiterationenvironment</span> Runtime Semantics: CreatePerIterationEnvironment ( <var>perIterationBindings</var> )</h1>\n        <p>The abstract operation CreatePerIterationEnvironment takes argument <var>perIterationBindings</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>perIterationBindings</var> has any elements, then<ol><li>Let <var>lastIterationEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>lastIterationEnvRec</var> be <var>lastIterationEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>outer</var> be <var>lastIterationEnv</var>'s outer environment reference.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Let <var>thisIterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outer</var>).</li><li>Let <var>thisIterationEnvRec</var> be <var>thisIterationEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each element <var>bn</var> of <var>perIterationBindings</var>, do<ol><li>Perform ! <var>thisIterationEnvRec</var>.CreateMutableBinding(<var>bn</var>, <emu-val>false</emu-val>).</li><li>Let <var>lastValue</var> be ? <var>lastIterationEnvRec</var>.GetBindingValue(<var>bn</var>, <emu-val>true</emu-val>).</li><li>Perform <var>thisIterationEnvRec</var>.InitializeBinding(<var>bn</var>, <var>lastValue</var>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>thisIterationEnv</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-hasvardeclaration": {"num": "8.1.1.4.12", "title": "#sec-hasvardeclaration HasVarDeclaration ( N )", "html": "<emu-clause id=\"sec-hasvardeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasvardeclaration\">#sec-hasvardeclaration</span> HasVarDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasVarDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> contains <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records": {"num": "8.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with an object called its  <em>binding object</em>. An object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a <var>withEnvironment</var> Boolean value that is associated with each object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. By default, the value of <var>withEnvironment</var> is <emu-val>false</emu-val> for any object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.7.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "8.3.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> value with its referenced name component equal to the <var>name</var> argument.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              \n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "8.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for declarative Environment Records simply returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 9:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisLex</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisLex</var> is not the same as <var>varEnv</var>,<ol><li>Let <var>thisEnvRec</var> be <var>thisLex</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>thisEnvRec</var> is not an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnvRec</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisLex</var> to <var>thisLex</var>'s outer environment reference.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>If <var>varEnvRec</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnvRec</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnvRec</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnvRec</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnvRec</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>genvRec</var> be <var>genv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>benvRec</var> be <var>benv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benvRec</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genvRec</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 14:</p>\n        <emu-alg><ol><li>Let <var>strict</var> be IsStrict of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>envRec</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>envRec</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>genvRec</var> be <var>genv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>benvRec</var> be <var>benv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benvRec</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genvRec</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-candeclareglobalfunction": {"num": "8.1.1.4.16", "title": "#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )", "html": "<emu-clause id=\"sec-candeclareglobalfunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalfunction\">#sec-candeclareglobalfunction</span> CanDeclareGlobalFunction ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalFunction for global Environment Records determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>existingProp</var>) is <emu-val>true</emu-val> and <var>existingProp</var> has attribute values { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val> }, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-getbindingvalue-n-s": {"num": "8.1.1.2.6", "title": "#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-object-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-getbindingvalue-n-s\">#sec-object-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for object Environment Records returns the value of its associated binding object's property whose name is the String value of the argument identifier <var>N</var>. The property should already exist but if it does not the result depends upon the value of the <var>S</var> argument:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>value</var> is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>false</emu-val>, return the value <emu-val>undefined</emu-val>; otherwise throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, <var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-newdeclarativeenvironment": {"num": "8.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-web-compat-functiondeclarationinstantiation": {"num": "B.3.3.1", "title": "#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-functiondeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</span> Changes to FunctionDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 29:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>func</var> and <var>F</var> is not an element of <var>parameterNames</var>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter, or another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>initializedBindings</var> does not contain <var>F</var> and <var>F</var> is not <emu-val>\"arguments\"</emu-val>, then<ol><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform <var>varEnvRec</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>F</var> to <var>instantiatedVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>fenv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>fenvRec</var> be <var>fenv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>benvRec</var> be <var>benv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>fobj</var> be ! <var>benvRec</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ! <var>fenvRec</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-generatorfunction-constructor": {"num": "25.2.1", "title": "#sec-generatorfunction-constructor The GeneratorFunction Constructor", "html": "<emu-clause id=\"sec-generatorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-constructor\">#sec-generatorfunction-constructor</span> The GeneratorFunction Constructor</h1>\n      <p>The GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%GeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new GeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>GeneratorFunction (&#8230;)</code> is equivalent to the object creation expression <code>new GeneratorFunction (&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified GeneratorFunction behaviour must include a <code>super</code> call to the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript syntactic forms for defining generator function objects create direct instances of GeneratorFunction. There is no syntactic means to create instances of GeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-generatorfunction\"><h1><span class=\"secnum\">25.2.1.1</span>#sec-generatorfunction GeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-script-records": {"num": "15.1.8", "title": "#sec-script-records Script Records", "html": "<emu-clause id=\"sec-script-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-script-records\">#sec-script-records</span> Script Records</h1>\n\n      <p>A  <dfn id=\"script-record\">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in  <emu-xref href=\"#table-script-records\"><a href=\"#table-script-records\" class=\"excluded-xref\" excluded-id=\"table-script-records\">#table-script-records</a></emu-xref>.</p>\n\n      <emu-table id=\"table-script-records\" caption=\"Script Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-script-records\">#table-script-records</span>: <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <thead>\n          <tr>\n            <th>\n              Field Name\n            \n            </th>\n            <th>\n              Value Type\n            \n            </th>\n            <th>\n              Meaning\n            \n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>\n              [[Realm]]\n            \n            </td>\n            <td>\n              <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> within which this script was created. <emu-val>undefined</emu-val> if not yet assigned.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Environment]]\n            \n            </td>\n            <td>\n              <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> containing the top level bindings for this script. This field is set when the script is instantiated.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[ECMAScriptCode]]\n            \n            </td>\n            <td>\n              a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n            \n            </td>\n            <td>\n              The result of parsing the source text of this script using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[HostDefined]]\n            \n            </td>\n            <td>\n              Any, default value is <emu-val>undefined</emu-val>.\n            \n            </td>\n            <td>\n              Field reserved for use by host environments that need to associate additional information with a script.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-newobjectenvironment": {"num": "8.1.2.3", "title": "#sec-newobjectenvironment NewObjectEnvironment ( O, E )", "html": "<emu-clause id=\"sec-newobjectenvironment\" aoid=\"NewObjectEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newobjectenvironment\">#sec-newobjectenvironment</span> NewObjectEnvironment ( <var>O</var>, <var>E</var> )</h1>\n        <p>The abstract operation NewObjectEnvironment takes arguments <var>O</var> (an Object) and <var>E</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing <var>O</var> as the binding object.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, Abstract Closure, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-specification-type The Reference Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Lexical Environment and Environment Record Specification Types</h1>...</div><div id=\"excluded-sec-abstract-closure\"><h1><span class=\"secnum\">6.2.7</span>#sec-abstract-closure The Abstract Closure Specification Type</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.8</span>#sec-data-blocks Data Blocks</h1>...</div></emu-clause>\n"}, "sec-declarative-environment-records": {"num": "8.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-createglobalvarbinding": {"num": "8.1.1.4.17", "title": "#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )", "html": "<emu-clause id=\"sec-createglobalvarbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalvarbinding\">#sec-createglobalvarbinding</span> CreateGlobalVarBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalVarBinding for global Environment Records creates and initializes a mutable binding in the associated object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is reused and assumed to be initialized.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>hasProperty</var> is <emu-val>false</emu-val> and <var>extensible</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>ObjRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li><li>Perform ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createglobalfunctionbinding": {"num": "8.1.1.4.18", "title": "#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )", "html": "<emu-clause id=\"sec-createglobalfunctionbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</span> CreateGlobalFunctionBinding ( <var>N</var>, <var>V</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalFunctionBinding for global Environment Records creates and initializes a mutable binding in the associated object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is replaced.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val> or <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>desc</var>).</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>ObjRec</var> has been initialized.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Global function declarations are always represented as own properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. If possible, an existing own property is reconfigured to have a standard set of attribute values. Steps 8-9 are equivalent to what calling the InitializeBinding concrete method would do and if <var>globalObject</var> is a Proxy will produce the same sequence of Proxy trap calls.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> in <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>envRec</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> in <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Call <var>envRec</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A  <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                \n                </th>\n                <th>\n                  Value Type\n                \n                </th>\n                <th>\n                  Meaning\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                \n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                \n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                \n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation.  <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                \n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in  <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                \n                </th>\n                <th>\n                  Purpose\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-prefix-increment-operator-runtime-semantics-evaluation": {"num": "12.4.6.1", "title": "#sec-prefix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">#sec-prefix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li>Let <var>globalEnvRec</var> be <var>globalEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnvRec</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li>Let <var>envRec</var> be <var>localEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>envRec</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>envRec</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "8.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetER</var> be <var>targetEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetER</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a  <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a  <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in  <emu-xref href=\"#table-21\"><a href=\"#table-21\" class=\"excluded-xref\" excluded-id=\"table-21\">#table-21</a></emu-xref>:</p>\n    <emu-table id=\"table-21\" caption=\"Realm Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-21\">#table-21</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          \n          </th>\n          <th>\n            Value\n          \n          </th>\n          <th>\n            Meaning\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          \n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          \n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          \n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          \n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-postfix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.5.1", "title": "#sec-postfix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">#sec-postfix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-lexical-environment-operations": {"num": "8.1.2", "title": "#sec-lexical-environment-operations Lexical Environment Operations", "html": "<emu-clause id=\"sec-lexical-environment-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-environment-operations\">#sec-lexical-environment-operations</span> Lexical Environment Operations</h1>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon lexical environments:</p>\n\n      <div id=\"excluded-sec-getidentifierreference\"><h1><span class=\"secnum\">8.1.2.1</span>#sec-getidentifierreference GetIdentifierReference ( lex, name, strict )</h1>...</div><div id=\"excluded-sec-newdeclarativeenvironment\"><h1><span class=\"secnum\">8.1.2.2</span>#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )</h1>...</div><div id=\"excluded-sec-newobjectenvironment\"><h1><span class=\"secnum\">8.1.2.3</span>#sec-newobjectenvironment NewObjectEnvironment ( O, E )</h1>...</div><div id=\"excluded-sec-newfunctionenvironment\"><h1><span class=\"secnum\">8.1.2.4</span>#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )</h1>...</div><div id=\"excluded-sec-newglobalenvironment\"><h1><span class=\"secnum\">8.1.2.5</span>#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )</h1>...</div><div id=\"excluded-sec-newmoduleenvironment\"><h1><span class=\"secnum\">8.1.2.6</span>#sec-newmoduleenvironment NewModuleEnvironment ( E )</h1>...</div></emu-clause>\n  "}, "sec-runtime-semantics-bindinginstantiation": {"num": "13.7.5.10", "title": "#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation", "html": "<emu-clause id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindinginstantiation\">#sec-runtime-semantics-bindinginstantiation</span> Runtime Semantics: BindingInstantiation</h1>\n        <p>With parameter <var>environment</var>.</p>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d32d6fbc\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>envRec</var> be <var>environment</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>For each element <var>name</var> of the BoundNames of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, do<ol><li>If IsConstantDeclaration of <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "8.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for declarative Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject takes argument <var>templateLiteral</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var><ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Call <var>template</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Call <var>rawObj</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <emu-const>frozen</emu-const>).</li><li>Call <var>template</var>.[[DefineOwnProperty]](<emu-val>\"raw\"</emu-val>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <emu-const>frozen</emu-const>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var>, <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>y</var>).</li><li>Return the result of applying the bitwise operator <var>op</var> to <var>lnum</var> and <var>rnum</var>. The result is a signed 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-lexical-environments": {"num": "8.1", "title": "#sec-lexical-environments Lexical Environments", "html": "<emu-clause id=\"sec-lexical-environments\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-environments\">#sec-lexical-environments</span> Lexical Environments</h1>\n    <p>A  <dfn>Lexical Environment</dfn> is a specification type used to define the association of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>s to specific variables and functions based upon the lexical nesting structure of ECMAScript code. A Lexical Environment consists of an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and a possibly null reference to an  <em>outer</em> Lexical Environment. Usually a Lexical Environment is associated with some specific syntactic structure of ECMAScript code such as a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt>, or a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> and a new Lexical Environment is created each time such code is evaluated.</p>\n    <p>An <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> records the identifier bindings that are created within the scope of its associated Lexical Environment. It is referred to as the Lexical Environment's  <dfn>EnvironmentRecord</dfn>.</p>\n    <p>The outer environment reference is used to model the logical nesting of Lexical Environment values. The outer reference of a (inner) Lexical Environment is a reference to the Lexical Environment that logically surrounds the inner Lexical Environment. An outer Lexical Environment may, of course, have its own outer Lexical Environment. A Lexical Environment may serve as the outer environment for multiple inner Lexical Environments. For example, if a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> contains two nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s then the Lexical Environments of each of the nested functions will have as their outer Lexical Environment the Lexical Environment of the current evaluation of the surrounding function.</p>\n    <p>A  <dfn id=\"global-environment\">global environment</dfn> is a Lexical Environment which does not have an outer environment. The <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>'s outer environment reference is <emu-val>null</emu-val>. A <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>'s EnvironmentRecord may be prepopulated with identifier bindings and includes an associated <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> whose properties provide some of the <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>'s identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and the initial properties may be modified.</p>\n    <p>A  <dfn id=\"module-environment\">module environment</dfn> is a Lexical Environment that contains the bindings for the top level declarations of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. The outer environment of a <emu-xref href=\"#module-environment\"><a href=\"#module-environment\">module environment</a></emu-xref> is a <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>.</p>\n    <p>A  <dfn id=\"function-environment\">function environment</dfn> is a Lexical Environment that corresponds to the invocation of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. A <emu-xref href=\"#function-environment\"><a href=\"#function-environment\">function environment</a></emu-xref> may establish a new <code>this</code> binding. A <emu-xref href=\"#function-environment\"><a href=\"#function-environment\">function environment</a></emu-xref> also captures the state necessary to support <code>super</code> method invocations.</p>\n    <p>Lexical Environments and <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> values are purely specification mechanisms and need not correspond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript program to directly access or manipulate such values.</p>\n\n    <div id=\"excluded-sec-environment-records\"><h1><span class=\"secnum\">8.1.1</span>#sec-environment-records Environment Records</h1>...</div><div id=\"excluded-sec-lexical-environment-operations\"><h1><span class=\"secnum\">8.1.2</span>#sec-lexical-environment-operations Lexical Environment Operations</h1>...</div></emu-clause>\n\n  "}, "sec-stringgetownproperty": {"num": "9.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> and <var>P</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is an Object that has a [[StringData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <var>index</var> &lt; 0 or <var>len</var> &#8804; <var>index</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <var>index</var>.</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> provides the bindings for built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>,  <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is logically a single record but it is specified as a composite encapsulating an object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> and a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s GetThisBinding concrete method. The object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> contains the bindings for all built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in  <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in  <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              \n              </td>\n              <td>\n                Object <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              \n              </td>\n              <td>\n                Declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              \n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              \n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              \n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              \n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "8.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for global Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-statement-runtime-semantics-labelledevaluation": {"num": "13.7.4.7", "title": "#sec-for-statement-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-for-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement-runtime-semantics-labelledevaluation\">#sec-for-statement-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"LabelledEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fc33bcf0\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"48e766b4\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"93c07e45\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>loopEnvRec</var> be <var>loopEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>isConst</var> be IsConstantDeclaration of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the BoundNames of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "8.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-abstract-equality-comparison": {"num": "7.2.15", "title": "#sec-abstract-equality-comparison Abstract Equality Comparison", "html": "<emu-clause id=\"sec-abstract-equality-comparison\" aoid=\"Abstract Equality Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-equality-comparison\">#sec-abstract-equality-comparison</span> Abstract Equality Comparison</h1>\n      <p>The comparison <var>x</var> == <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>x</var> === <var>y</var>.</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>Return the result of the comparison <var>x</var> == <var>n</var>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return the result of the comparison <var>y</var> == <var>x</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return the result of the comparison <var>x</var> == <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return the result of the comparison <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> is equal to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>y</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-global-environment-records-getthisbinding": {"num": "8.1.1.4.11", "title": "#sec-global-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-global-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getthisbinding\">#sec-global-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Return <var>envRec</var>.[[GlobalThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-21": "Table 22", "table-22": "Table 23", "table-23": "Table 24", "table-24": "Table 25", "table-27": "Table 27", "table-34": "Table 34", "table-script-records": "Table 37", "table-36": "Table 38", "table-37": "Table 39", "table-cyclic-module-fields": "Table 40", "table-cyclic-module-methods": "Table 41", "table-dynamic-function-sourcetext-prefixes": "Table 48", "table-47": "Table 54"}}, "to": {"secList": ["sec-static-semantics-sv", "sec-globaldeclarationinstantiation", "sec-asyncgeneratorfunction-constructor", "sec-global-environment-records-getbindingvalue-n-s", "sec-patterns-static-semantics-character-value", "sec-globalthis", "sec-global-environment-records-deletebinding-n", "sec-runtime-semantics-mv-s", "sec-global-environment-records-setmutablebinding-n-v-s", "sec-hasrestrictedglobalproperty", "sec-let-and-const-declarations", "sec-abstract-module-records", "sec-numeric-types-number-unsignedRightShift", "sec-functiondeclarationinstantiation", "sec-static-semantics-tv-and-trv", "sec-variable-statement-runtime-semantics-evaluation", "sec-async-function-instances", "sec-object-environment-records-withbaseobject", "sec-execution-contexts", "sec-module-environment-records", "sec-declarative-environment-records-createimmutablebinding-n-s", "sec-ecmascript-standard-built-in-objects", "sec-object-environment-records-setmutablebinding-n-v-s", "sec-asyncgenerator-definitions-evaluation", "sec-lexical-environment-and-environment-record-specification-types", "sec-web-compat-blockdeclarationinstantiation", "sec-newmoduleenvironment", "sec-with-statement", "sec-declarative-environment-records-hasbinding-n", "sec-module-environment-records-deletebinding-n", "sec-environment-records", "sec-newfunctionenvironment", "sec-with-statement-runtime-semantics-evaluation", "sec-global-environment-records-hasbinding-n", "sec-haslexicaldeclaration", "sec-ecmascript-function-objects", "sec-executable-code-and-execution-contexts", "sec-postfix-increment-operator-runtime-semantics-evaluation", "sec-declarative-environment-records-initializebinding-n-v", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-variable-statement", "sec-global-environment-records-createimmutablebinding-n-s", "sec-createdynamicfunction", "sec-getthisenvironment", "sec-getidentifierreference", "sec-runtime-semantics-catchclauseevaluation", "sec-function-definitions-runtime-semantics-evaluation", "sec-variablestatements-in-catch-blocks", "sec-evaldeclarationinstantiation", "sec-candeclareglobalvar", "sec-object-environment-records-hasbinding-n", "sec-runtime-semantics-forinofheadevaluation", "sec-async-function-constructor", "sec-initializeboundname", "sec-object-environment-records-initializebinding-n-v", "sec-runtime-semantics-classdefinitionevaluation", "sec-object-environment-records-deletebinding-n", "sec-object-environment-records-createmutablebinding-n-d", "sec-blockdeclarationinstantiation", "sec-newglobalenvironment", "sec-global-environment-records-initializebinding-n-v", "sec-createperiterationenvironment", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-hasvardeclaration", "sec-object-environment-records", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-resolvebinding", "sec-function-environment-records", "sec-declarative-environment-records-getbindingvalue-n-s", "sec-web-compat-evaldeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-candeclareglobalfunction", "sec-object-environment-records-getbindingvalue-n-s", "sec-newdeclarativeenvironment", "sec-web-compat-functiondeclarationinstantiation", "sec-generatorfunction-constructor", "sec-script-records", "sec-newobjectenvironment", "sec-ecmascript-specification-types", "sec-declarative-environment-records", "sec-createglobalvarbinding", "sec-createglobalfunctionbinding", "sec-source-text-module-record-initialize-environment", "sec-createimportbinding", "sec-cyclic-module-records", "sec-prefix-increment-operator-runtime-semantics-evaluation", "sec-ordinarycallbindthis", "sec-module-environment-records-getbindingvalue-n-s", "sec-code-realms", "sec-postfix-decrement-operator-runtime-semantics-evaluation", "sec-runtime-semantics-bindinginstantiation", "sec-declarative-environment-records-deletebinding-n", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-gettemplateobject", "sec-numberbitwiseop", "sec-stringgetownproperty", "sec-global-environment-records", "sec-global-environment-records-createmutablebinding-n-d", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-ordinaryfunctioncreate", "sec-for-statement-runtime-semantics-labelledevaluation", "sec-declarative-environment-records-createmutablebinding-n-d", "sec-abstract-equality-comparison", "sec-global-environment-records-getthisbinding"], "secData": {"sec-static-semantics-sv": {"num": "11.8.4.2", "title": "#sec-static-semantics-sv Static Semantics: SV", "html": "<emu-clause id=\"sec-static-semantics-sv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-sv\">#sec-static-semantics-sv</span> Static Semantics: SV</h1>\n        <p>A string literal stands for a value of the String type. The String value (SV) of the literal is described in terms of code unit values contributed by the various parts of the string literal. As part of this process, some Unicode code points within the string literal are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV), as described below or in  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>.</p>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a2dff6c6\"><emu-t>\"</emu-t><emu-t>\"</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"StringLiteral\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"74786b0a\"><emu-t>'</emu-t><emu-t>'</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b3d57705\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"9b3f247e\"><emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-DoubleStringCharacters\">DoubleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1b4d0b3a\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"89ebe999\"><emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence of up to two code units that is the SV of <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt> followed by the code units of the SV of <emu-nt><a href=\"#prod-SingleStringCharacters\">SingleStringCharacters</a></emu-nt> in order.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a87f95ed\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\"</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"DoubleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DoubleStringCharacter\">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5ea9e1d2\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\\</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"SingleStringCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleStringCharacter\">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"00992933\"><emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0000 (NULL).\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7444838f\"><emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is determined by the <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt> according to  <emu-xref href=\"#table-34\"><a href=\"#table-34\" class=\"excluded-xref\" excluded-id=\"table-34\">#table-34</a></emu-xref>.\n          \n          </li>\n        </ul>\n        <emu-table id=\"table-34\" caption=\"String Single Character Escape Sequences\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-34\">#table-34</span>: String Single Character Escape Sequences</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Escape Sequence\n              \n              </th>\n              <th>\n                Code Unit Value\n              \n              </th>\n              <th>\n                Unicode Character Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>\\b</code>\n              \n              </td>\n              <td>\n                <code>0x0008</code>\n              \n              </td>\n              <td>\n                BACKSPACE\n              \n              </td>\n              <td>\n                &lt;BS&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\t</code>\n              \n              </td>\n              <td>\n                <code>0x0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\n</code>\n              \n              </td>\n              <td>\n                <code>0x000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\v</code>\n              \n              </td>\n              <td>\n                <code>0x000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\f</code>\n              \n              </td>\n              <td>\n                <code>0x000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\r</code>\n              \n              </td>\n              <td>\n                <code>0x000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\"</code>\n              \n              </td>\n              <td>\n                <code>0x0022</code>\n              \n              </td>\n              <td>\n                QUOTATION MARK\n              \n              </td>\n              <td>\n                <code>\"</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\'</code>\n              \n              </td>\n              <td>\n                <code>0x0027</code>\n              \n              </td>\n              <td>\n                APOSTROPHE\n              \n              </td>\n              <td>\n                <code>'</code>\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>\\\\</code>\n              \n              </td>\n              <td>\n                <code>0x005C</code>\n              \n              </td>\n              <td>\n                REVERSE SOLIDUS\n              \n              </td>\n              <td>\n                <code>\\</code>\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <ul>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"NonEscapeCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1bac6127\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href=\"#prod-EscapeCharacter\">EscapeCharacter</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is (16<sub>&#8477;</sub> times the MV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>) plus the MV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the code unit whose value is the MV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The SV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncGeneratorFunction (...)</code> is equivalent to the object creation expression <code>new AsyncGeneratorFunction (...)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncGeneratorFunction behaviour must include a <code>super</code> call to the AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of AsyncGeneratorFunction. There is no syntactic means to create instances of AsyncGeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-getbindingvalue-n-s": {"num": "8.1.1.4.6", "title": "#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getbindingvalue-n-s\">#sec-global-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for global Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding is an uninitialized binding throw a <emu-val>ReferenceError</emu-val> exception. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-patterns-static-semantics-character-value": {"num": "21.2.1.4", "title": "#sec-patterns-static-semantics-character-value Static Semantics: CharacterValue", "html": "<emu-clause id=\"sec-patterns-static-semantics-character-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-character-value\">#sec-patterns-static-semantics-character-value</span> Static Semantics: CharacterValue</h1>\n        <emu-grammar><emu-production name=\"ClassAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6f24a587\"><emu-t>-</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+002D (HYPHEN-MINUS).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassAtomNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ecde6e28\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>\\</emu-t> or <emu-t>]</emu-t> or <emu-t>-</emu-t></emu-gmod></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.</li><li>Return the code point value of <var>ch</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassEscape\">ClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0185ce89\"><emu-t>b</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+0008 (BACKSPACE).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassEscape\">ClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6f24a587\"><emu-t>-</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+002D (HYPHEN-MINUS).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f88e7170\"><emu-nt><a href=\"#prod-ControlEscape\">ControlEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value according to <emu-xref href=\"#table-47\"><a href=\"#table-47\" class=\"excluded-xref\" excluded-id=\"table-47\">#table-47</a></emu-xref>.\n        </li></ol></emu-alg>\n        <emu-table id=\"table-47\" caption=\"ControlEscape Code Point Values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-47\">#table-47</span>: ControlEscape Code Point Values</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                ControlEscape\n              \n              </th>\n              <th>\n                Code Point Value\n              \n              </th>\n              <th>\n                Code Point\n              \n              </th>\n              <th>\n                Unicode Name\n              \n              </th>\n              <th>\n                Symbol\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                <code>t</code>\n              \n              </td>\n              <td>\n                9\n              \n              </td>\n              <td>\n                <code>U+0009</code>\n              \n              </td>\n              <td>\n                CHARACTER TABULATION\n              \n              </td>\n              <td>\n                &lt;HT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>n</code>\n              \n              </td>\n              <td>\n                10\n              \n              </td>\n              <td>\n                <code>U+000A</code>\n              \n              </td>\n              <td>\n                LINE FEED (LF)\n              \n              </td>\n              <td>\n                &lt;LF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>v</code>\n              \n              </td>\n              <td>\n                11\n              \n              </td>\n              <td>\n                <code>U+000B</code>\n              \n              </td>\n              <td>\n                LINE TABULATION\n              \n              </td>\n              <td>\n                &lt;VT&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>f</code>\n              \n              </td>\n              <td>\n                12\n              \n              </td>\n              <td>\n                <code>U+000C</code>\n              \n              </td>\n              <td>\n                FORM FEED (FF)\n              \n              </td>\n              <td>\n                &lt;FF&gt;\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                <code>r</code>\n              \n              </td>\n              <td>\n                13\n              \n              </td>\n              <td>\n                <code>U+000D</code>\n              \n              </td>\n              <td>\n                CARRIAGE RETURN (CR)\n              \n              </td>\n              <td>\n                &lt;CR&gt;\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a14dae7e\"><emu-t>c</emu-t><emu-nt><a href=\"#prod-ControlLetter\">ControlLetter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-ControlLetter\">ControlLetter</a></emu-nt>.</li><li>Let <var>i</var> be <var>ch</var>'s code point value.</li><li>Return the remainder of dividing <var>i</var> by 32.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6964a19d\"><emu-t>0</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the code point value of U+0000 (NULL).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><code>\\0</code> represents the &lt;NUL&gt; character and cannot be followed by a decimal digit.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a8071b85\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the numeric value of the code unit that is the SV of <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8a1bc222\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt><emu-t>\\u</emu-t><emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lead</var> be the CharacterValue of <emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt>.</li><li>Let <var>trail</var> be the CharacterValue of <emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt>.</li><li>Let <var>cp</var> be <emu-xref aoid=\"UTF16DecodeSurrogatePair\"><a href=\"#sec-utf16decodesurrogatepair\">UTF16DecodeSurrogatePair</a></emu-xref>(<var>lead</var>, <var>trail</var>).</li><li>Return the code point value of <var>cp</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"RegExpUnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RegExpUnicodeEscapeSequence\">RegExpUnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LeadSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LeadSurrogate\">LeadSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"TrailSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TrailSurrogate\">TrailSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NonSurrogate\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonSurrogate\">NonSurrogate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a4fb442c\"><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CharacterEscape\">CharacterEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"804f428d\"><emu-nt><a href=\"#prod-IdentityEscape\">IdentityEscape</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ch</var> be the code point matched by <emu-nt><a href=\"#prod-IdentityEscape\">IdentityEscape</a></emu-nt>.</li><li>Return the code point value of <var>ch</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-globalthis": {"num": "18.1.1", "title": "#sec-globalthis globalThis", "html": "<emu-clause id=\"sec-globalthis\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globalthis\">#sec-globalthis</span> globalThis</h1>\n      <p>The initial value of the <emu-val>\"globalThis\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> in a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> <var>realm</var> is <var>realm</var>.[[GlobalEnv]].[[GlobalThisValue]].</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n\n    "}, "sec-global-environment-records-deletebinding-n": {"num": "8.1.1.4.7", "title": "#sec-global-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-deletebinding-n\">#sec-global-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for global Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.DeleteBinding(<var>N</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>status</var> be ? <var>ObjRec</var>.DeleteBinding(<var>N</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>varNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>N</var> is an element of <var>varNames</var>, remove that element from the <var>varNames</var>.</li></ol></li><li>Return <var>status</var>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub>&#8477;</sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub>&#8477;</sub><sup>10000<sub>&#8477;</sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>)) times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup>-<sub>&#8477;</sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var> -<sub>&#8477;</sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub>&#8477;</sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>-</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-global-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.4.5", "title": "#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-global-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-setmutablebinding-n-v-s\">#sec-global-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for global Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-hasrestrictedglobalproperty": {"num": "8.1.1.4.14", "title": "#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )", "html": "<emu-clause id=\"sec-hasrestrictedglobalproperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasrestrictedglobalproperty\">#sec-hasrestrictedglobalproperty</span> HasRestrictedGlobalProperty ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasRestrictedGlobalProperty for global Environment Records determines if the argument identifier is the name of a property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that must not be shadowed by a global lexical binding:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Properties may exist upon a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> that were directly created rather than being declared using a var or function declaration. A global lexical binding may not be created that has the same name as a non-configurable property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. The global property <emu-val>\"undefined\"</emu-val> is an example of such a property.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-let-and-const-declarations": {"num": "13.3.1", "title": "#sec-let-and-const-declarations Let and Const Declarations", "html": "<emu-clause id=\"sec-let-and-const-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-let-and-const-declarations\">#sec-let-and-const-declarations</span> Let and Const Declarations</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>let</code> and <code>const</code> declarations define variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment. The variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated but may not be accessed in any way until the variable's <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated. A variable defined by a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated, not when the variable is created. If a <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> in a <code>let</code> declaration does not have an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> the variable is assigned the value <emu-val>undefined</emu-val> when the <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"LexicalDeclaration\" params=\"In, Yield, Await\" id=\"prod-LexicalDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8d299b81\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LetOrConst\" id=\"prod-LetOrConst\">\n    <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"940c6b54\"><emu-t>let</emu-t></emu-rhs>\n    <emu-rhs a=\"36233f0f\"><emu-t>const</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BindingList\" params=\"In, Yield, Await\" id=\"prod-BindingList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"35e0fa1e\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"1435fb35\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-BindingList\">BindingList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LexicalBinding\" params=\"In, Yield, Await\" id=\"prod-LexicalBinding\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-LexicalBinding\">LexicalBinding</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8eeb7c11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"49d70a55\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-let-and-const-declarations-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-let-and-const-declarations-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-static-semantics-boundnames\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-let-and-const-declarations-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">13.3.1.3</span>#sec-let-and-const-declarations-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-let-and-const-declarations-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.3.1.4</span>#sec-let-and-const-declarations-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-unsignedRightShift": {"num": "6.1.6.1.11", "title": "#sec-numeric-types-number-unsignedRightShift Number::unsignedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-unsignedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-unsignedRightShift\">#sec-numeric-types-number-unsignedRightShift</span> Number::unsignedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>y</var>).</li><li>Let <var>shiftCount</var> be the result of masking out all but the least significant 5 bits of <var>rnum</var>, that is, compute <var>rnum</var> &amp; 0x1F.</li><li>Return the result of performing a zero-filling right shift of <var>lnum</var> by <var>shiftCount</var> bits. Vacated bits are filled with zero. The result is an unsigned 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-functiondeclarationinstantiation": {"num": "9.2.10", "title": "#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )", "html": "<emu-clause id=\"sec-functiondeclarationinstantiation\" aoid=\"FunctionDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</span> FunctionDeclarationInstantiation ( <var>func</var>, <var>argumentsList</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Each declaration in the function body is also instantiated. If the function's formal parameters do not include any default value initializers then the body declarations are instantiated in the same <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is created for the body declarations. Formal parameters and functions are initialized as part of FunctionDeclarationInstantiation. All other bindings are initialized during evaluation of the function body.</p>\n      </div></emu-note>\n      <p>The abstract operation FunctionDeclarationInstantiation takes arguments <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>argumentsList</var>. <var>func</var> is the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-functiondeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE: Arrow functions never have an arguments objects.</li><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <emu-val>\"arguments\"</emu-val> is an element of <var>parameterNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <emu-val>\"arguments\"</emu-val> is an element of <var>functionNames</var> or if <emu-val>\"arguments\"</emu-val> is an element of <var>lexicalNames</var>, then<ol><li>Set <var>argumentsObjectNeeded</var> to <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that bindings created by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls in the formal parameter list are outside the environment where parameters are declared.</li><li>Let <var>calleeEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>calleeEnv</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The VariableEnvironment of <var>calleeContext</var> is <var>calleeEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>env</var>.</li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>env</var>.HasBinding(<var>paramName</var>).</li><li>NOTE: Early errors ensure that duplicate parameter names can only occur in non-strict functions that do not have parameter default values or rest parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid=\"CreateUnmappedArgumentsObject\"><a href=\"#sec-createunmappedargumentsobject\">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE: A mapped argument object is only provided for non-strict functions that don't have a rest parameter, any parameter default value initializers, or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid=\"CreateMappedArgumentsObject\"><a href=\"#sec-createmappedargumentsobject\">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<emu-val>\"arguments\"</emu-val>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>env</var>.InitializeBinding(<emu-val>\"arguments\"</emu-val>, <var>ao</var>).</li><li>Let <var>parameterBindings</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>parameterNames</var> with <emu-val>\"arguments\"</emu-val> appended.</li></ol></li><li>Else,<ol><li>Let <var>parameterBindings</var> be <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref aoid=\"CreateListIteratorRecord\"><a href=\"#sec-createlistiteratorRecord\">CreateListIteratorRecord</a></emu-xref>(<var>argumentsList</var>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE: Only a single <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>parameterBindings</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>env</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li></ol></li><li>Else,<ol><li>NOTE: A separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is needed to ensure that closures created by expressions in the formal parameter list do not have visibility of declarations in the function body.</li><li>Let <var>varEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterBindings</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>env</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnv</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE: A var with the same name as a formal parameter initially has the same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-functiondeclarationinstantiation\"><a href=\"#sec-web-compat-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> can determine whether any var scoped declarations introduced by the eval code conflict with pre-existing top-level lexically scoped declarations. This is not needed for strict functions because a strict <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: A lexically declared name cannot be the same as a function/generator declaration, formal parameter, or a var name. Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref> provides an extension to the above algorithm that is necessary for backwards compatibility with web browser implementations of ECMAScript that predate ECMAScript 2015.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Parameter <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>s may contain <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href=\"#sec-types-of-source-code\"><a href=\"#sec-types-of-source-code\" class=\"excluded-xref\" excluded-id=\"sec-types-of-source-code\">#sec-types-of-source-code</a></emu-xref>). The creation of the environment for such declarations is described in  <emu-xref href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><a href=\"#sec-function-definitions-runtime-semantics-iteratorbindinginitialization\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-function-definitions-runtime-semantics-iteratorbindinginitialization</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-static-semantics-tv-and-trv": {"num": "11.8.6.1", "title": "#sec-static-semantics-tv-and-trv Static Semantics: TV and TRV", "html": "<emu-clause id=\"sec-static-semantics-tv-and-trv\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-tv-and-trv\">#sec-static-semantics-tv-and-trv</span> Static Semantics: TV and TRV</h1>\n        <p>A template literal component is interpreted as a sequence of Unicode code points. The Template Value (TV) of a literal component is described in terms of code unit values (SV,  <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref>) contributed by the various parts of the template literal component. As part of this process, some Unicode code points within the template component are interpreted as having a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV,  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>). In determining a TV, escape sequences are replaced by the UTF-16 code unit(s) of the Unicode code point represented by the escape sequence. The Template Raw Value (TRV) is similar to a Template Value with the difference that in TRVs escape sequences are interpreted literally.</p>\n        <ul>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"NoSubstitutionTemplate\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7718e620\"><emu-t>`</emu-t><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateHead\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25732601\"><emu-t>`</emu-t><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateMiddle\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"046dadff\"><emu-t>}</emu-t><emu-t>${</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV and TRV of  <emu-grammar><emu-production name=\"TemplateTail\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"7a8ba1d2\"><emu-t>}</emu-t><emu-t>`</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f9e47ad\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is <emu-val>undefined</emu-val> if either the TV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> is <emu-val>undefined</emu-val> or the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt> is <emu-val>undefined</emu-val>. Otherwise, it is a sequence consisting of the code units of the TV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> followed by the code units of the TV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0024 (DOLLAR SIGN).\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is <emu-val>undefined</emu-val>.\n          \n          </li>\n          <li>\n            The TV of  <emu-grammar><emu-production name=\"LineContinuation\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the empty code unit sequence.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacters\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5f9e47ad\"><emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is a sequence consisting of the code units of the TRV of <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt> followed by the code units of the TRV of <emu-nt><a href=\"#prod-TemplateCharacters\">TemplateCharacters</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4c80ea41\"><emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"1262cc92\"><emu-t>$</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0024 (DOLLAR SIGN).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ea7d8d26\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"TemplateCharacter\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"68cad9cc\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"EscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5259a431\"><emu-t>0</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0030 (DIGIT ZERO).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c247e196\"><emu-t>0</emu-t><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0030 (DIGIT ZERO) followed by the code units of the TRV of <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e6c4f6ee\"><emu-t>x</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0078 (LATIN SMALL LETTER X).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"92cdf202\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER X) followed by the code units of the TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"a16001b3\"><emu-t>u</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x0075 (LATIN SMALL LETTER U).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f7d3e8d4\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"4ea47d3d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"45170c27\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code units of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the code units of the TRV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5427e268\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0c957f40\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by the code units of the TRV of <emu-nt><a href=\"#prod-NotCodePoint\">NotCodePoint</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"NotEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ab5a798c\"><emu-t>u</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>]</emu-gann><emu-gann>[lookahead &#8800; <emu-t>}</emu-t>]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by the code units of the TRV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"CharacterEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b7980a98\"><emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the SV of <emu-nt><a href=\"#prod-NonEscapeCharacter\">NonEscapeCharacter</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"SingleEscapeCharacter\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-SingleEscapeCharacter\">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>\"</emu-t><emu-t>\\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"d8ef973c\"><emu-t>x</emu-t><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER X) followed by TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"8072ad8d\"><emu-t>u</emu-t><emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by TRV of <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"UnicodeEscapeSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b98063ef\"><emu-t>u{</emu-t><emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by TRV of <emu-nt><a href=\"#prod-CodePoint\">CodePoint</a></emu-nt> followed by the code unit 0x007D (RIGHT CURLY BRACKET).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"Hex4Digits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Hex4Digits\">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"0ba8de61\"><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the TRV of the first <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the third <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt> followed by the TRV of the fourth <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexDigits\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c8221899\"><emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt><emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of TRV of <emu-nt><a href=\"#prod-HexDigits\">HexDigits</a></emu-nt> followed by TRV of <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"HexDigit\" type=\"lexical\" oneof=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t><emu-t>a</emu-t><emu-t>b</emu-t><emu-t>c</emu-t><emu-t>d</emu-t><emu-t>e</emu-t><emu-t>f</emu-t><emu-t>A</emu-t><emu-t>B</emu-t><emu-t>C</emu-t><emu-t>D</emu-t><emu-t>E</emu-t><emu-t>F</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of the single code point matched by this production.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineContinuation\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c4893d63\"><emu-t>\\</emu-t><emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS) followed by the code units of TRV of <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>.\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"df188a5e\"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x000A (LINE FEED).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6bb44f60\"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x000A (LINE FEED).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"85df8467\"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2028 (LINE SEPARATOR).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"be2ab9fa\"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the code unit 0x2029 (PARAGRAPH SEPARATOR).\n          \n          </li>\n          <li>\n            The TRV of  <emu-grammar><emu-production name=\"LineTerminatorSequence\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"253de229\"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>\n</emu-production></emu-grammar> is the sequence consisting of the code unit 0x000A (LINE FEED).\n          \n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>TV excludes the code units of <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt> while TRV includes them. &lt;CR&gt;&lt;LF&gt; and &lt;CR&gt; <emu-nt><a href=\"#prod-LineTerminatorSequence\">LineTerminatorSequence</a></emu-nt>s are normalized to &lt;LF&gt; for both TV and TRV. An explicit <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> is needed to include a &lt;CR&gt; or &lt;CR&gt;&lt;LF&gt; sequence.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-variable-statement-runtime-semantics-evaluation": {"num": "13.3.2.4", "title": "#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-variable-statement-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement-runtime-semantics-evaluation\">#sec-variable-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"VariableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3347a1bd\"><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclarationList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a0057011\"><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"89becb83\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is the same as a <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> of the binding object of the with statement's <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then step 5 will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"VariableDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0ddd53e5\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt><emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-function-instances": {"num": "25.7.4", "title": "#sec-async-function-instances AsyncFunction Instances", "html": "<emu-clause id=\"sec-async-function-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-instances\">#sec-async-function-instances</span> AsyncFunction Instances</h1>\n\n      <p>Every AsyncFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[IsClassConstructor]] internal slot for all such instances is <emu-val>false</emu-val>. AsyncFunction instances are not constructors and do not have a [[Construct]] internal method. AsyncFunction instances do not have a prototype property as they are not constructible.</p>\n      <p>Each AsyncFunction instance has the following own properties:</p>\n      <div id=\"excluded-sec-async-function-instances-length\"><h1><span class=\"secnum\">25.7.4.1</span>#sec-async-function-instances-length length</h1>...</div><div id=\"excluded-sec-async-function-instances-name\"><h1><span class=\"secnum\">25.7.4.2</span>#sec-async-function-instances-name name</h1>...</div></emu-clause>\n\n    "}, "sec-object-environment-records-withbaseobject": {"num": "8.1.1.2.10", "title": "#sec-object-environment-records-withbaseobject WithBaseObject ( )", "html": "<emu-clause id=\"sec-object-environment-records-withbaseobject\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-withbaseobject\">#sec-object-environment-records-withbaseobject</span> WithBaseObject ( )</h1>\n          <p>Object Environment Records return <emu-val>undefined</emu-val> as their WithBaseObject unless their <var>withEnvironment</var> flag is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>true</emu-val>, return the binding object for <var>envRec</var>.</li><li>Otherwise, return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An  <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s  <dfn id=\"running-execution-context\">running execution context</dfn>.  All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The  <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in  <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          \n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          \n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called  <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the  <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in  <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          \n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Environment Records.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in  <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          \n          </td>\n          <td>\n            The GeneratorObject that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\">\n        <span id=\"module-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A  <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-declarative-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.1.3", "title": "#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createimmutablebinding-n-s\">#sec-declarative-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-standard-built-in-objects": {"num": "17", "title": "#sec-ecmascript-standard-built-in-objects ECMAScript Standard Built-in Objects", "html": "<emu-clause id=\"sec-ecmascript-standard-built-in-objects\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-standard-built-in-objects\">#sec-ecmascript-standard-built-in-objects</span> ECMAScript Standard Built-in Objects</h1>\n  <p>There are certain built-in objects available whenever an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> begins execution. One, the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, is part of the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> of the executing program. Others are accessible as initial properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> or indirectly as properties of accessible built-in objects.</p>\n  <p>Unless specified otherwise, a built-in object that is callable as a function is a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the characteristics described in  <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>. Unless specified otherwise, the [[Extensible]] internal slot of a built-in object initially has the value <emu-val>true</emu-val>. Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has a [[Realm]] internal slot whose value is the <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> of the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> for which the object was initially created.</p>\n  <p>Many built-in objects are functions: they can be invoked with arguments. Some of them furthermore are constructors: they are functions intended for use with the <code>new</code> operator. For each built-in function, this specification describes the arguments required by that function and the properties of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. For each built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, this specification furthermore describes properties of the prototype object of that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and properties of specific object instances returned by a <code>new</code> expression that invokes that <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is given fewer arguments than the function is specified to require, the function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> shall behave exactly as if it had been given sufficient additional arguments, each such argument being the <emu-val>undefined</emu-val> value. Such missing arguments are considered to be &#8220;not present&#8221; and may be identified in that manner by specification algorithms. In the description of a particular function, the terms &#8220;<emu-val>this</emu-val> value&#8221; and &#8220;NewTarget&#8221; have the meanings given in  <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref>.</p>\n  <p>Unless otherwise specified in the description of a particular function, if a built-in function or <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> described is given more arguments than the function is specified to allow, the extra arguments are evaluated by the call and then ignored by the function. However, an implementation may define implementation specific behaviour relating to such arguments as long as the behaviour is not the throwing of a <emu-val>TypeError</emu-val> exception that is predicated simply on the presence of an extra argument.</p>\n  <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n    <p>Implementations that add additional capabilities to the set of built-in functions are encouraged to do so by adding new functions rather than adding new parameters to existing functions.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified every built-in function and every built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has the Function prototype object, which is the initial value of the expression <code>Function.prototype</code> (<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-function-prototype-object\">#sec-properties-of-the-function-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot.</p>\n  <p>Unless otherwise specified every built-in prototype object has the Object prototype object, which is the initial value of the expression <code>Object.prototype</code> (<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</a></emu-xref>), as the value of its [[Prototype]] internal slot, except the Object prototype object itself.</p>\n  <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function.</p>\n  <p>Each built-in function defined in this specification is created by calling the <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref> abstract operation (<emu-xref href=\"#sec-createbuiltinfunction\"><a href=\"#sec-createbuiltinfunction\" class=\"excluded-xref\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</a></emu-xref>).</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"length\"</emu-val> property whose value is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Unless otherwise specified, this value is equal to the largest number of named arguments shown in the subclause headings for the function description. Optional parameters (which are indicated with brackets: <code>[</code> <code>]</code>) or rest parameters (which are shown using the form &#171;...name&#187;) are not included in the default argument count.</p>\n  <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n    <p>For example, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is the initial value of the <emu-val>\"map\"</emu-val> property of the Array prototype object is described under the subclause heading &#171;Array.prototype.map (callbackFn [ , thisArg])&#187; which shows the two named arguments callbackFn and thisArg, the latter being optional; therefore the value of the <emu-val>\"length\"</emu-val> property of that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is 1.</p>\n  </div></emu-note>\n  <p>Unless otherwise specified, the <emu-val>\"length\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, including constructors, has a <emu-val>\"name\"</emu-val> property whose value is a String. Unless otherwise specified, this value is the name that is given to the function in this specification. Functions that are identified as anonymous functions use the empty string as the value of the <emu-val>\"name\"</emu-val> property. For functions that are specified as properties of objects, the name value is the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string used to access the function. Functions that are specified as get or set accessor functions of built-in properties have <emu-val>\"get \"</emu-val> or <emu-val>\"set \"</emu-val> prepended to the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> string. The value of the <emu-val>\"name\"</emu-val> property is explicitly specified for each built-in functions whose property key is a Symbol value.</p>\n  <p>Unless otherwise specified, the <emu-val>\"name\"</emu-val> property of a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n  <p>Every other <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> described in clauses 18 through 26 and in Annex  <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified.</p>\n  <p>Every <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> described in clauses 18 through 26 and in Annex  <emu-xref href=\"#sec-additional-built-in-properties\"><a href=\"#sec-additional-built-in-properties\" class=\"excluded-xref\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</a></emu-xref> has the attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> } unless otherwise specified. If only a get accessor function is described, the set accessor function is the default value, <emu-val>undefined</emu-val>. If only a set accessor is described the get accessor is the default value, <emu-val>undefined</emu-val>.</p>\n</emu-clause>\n\n"}, "sec-object-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.2.5", "title": "#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-object-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-setmutablebinding-n-v-s\">#sec-object-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for object Environment Records attempts to set the value of the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object's property whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A property named <var>N</var> normally already exists but if it does not or is not currently writable, error handling is determined by the value of the Boolean argument <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>bindings</var>, <var>N</var>, <var>V</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-lexical-environment-and-environment-record-specification-types": {"num": "6.2.6", "title": "#sec-lexical-environment-and-environment-record-specification-types The Environment Record Specification Type", "html": "<emu-clause id=\"sec-lexical-environment-and-environment-record-specification-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lexical-environment-and-environment-record-specification-types\">#sec-lexical-environment-and-environment-record-specification-types</span> The Environment Record Specification Type</h1>\n      <p>The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> type is used to explain the behaviour of name resolution in nested functions and blocks. This type and the operations upon it are defined in  <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\" class=\"excluded-xref\" excluded-id=\"sec-environment-records\">#sec-environment-records</a></emu-xref>.</p>\n    </emu-clause>\n\n    "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.3.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 3.a.ii.1:</p>\n        <emu-alg><ol><li>If <var>env</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 3.b.iii:</p>\n        <emu-alg><ol><li>If the binding for <var>fn</var> in <var>env</var> is an uninitialized binding, then<ol><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>env</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-newmoduleenvironment": {"num": "8.1.2.6", "title": "#sec-newmoduleenvironment NewModuleEnvironment ( E )", "html": "<emu-clause id=\"sec-newmoduleenvironment\" aoid=\"NewModuleEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newmoduleenvironment\">#sec-newmoduleenvironment</span> NewModuleEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewModuleEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-with-statement": {"num": "13.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2ceedb70\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">13.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.11.2</span>#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.11.3</span>#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.11.4</span>#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.11.5</span>#sec-with-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.11.6</span>#sec-with-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.11.7</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-declarative-environment-records-hasbinding-n": {"num": "8.1.1.1.1", "title": "#sec-declarative-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-hasbinding-n\">#sec-declarative-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for declarative Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-deletebinding-n": {"num": "8.1.1.5.2", "title": "#sec-module-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-module-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-deletebinding-n\">#sec-module-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for module Environment Records refuses to delete bindings.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This method is never invoked. See <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Module Environment Records are only used within strict code and an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule prevents the delete operator, in strict code, from being applied to a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> that would resolve to a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> binding. See  <emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-environment-records": {"num": "8.1", "title": "#sec-environment-records Environment Records", "html": "<emu-clause id=\"sec-environment-records\" oldids=\"sec-lexical-environments\">\n    <span id=\"sec-lexical-environments\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-records\">#sec-environment-records</span> Environment Records</h1>\n    <p><dfn>Environment Record</dfn> is a specification type used to define the association of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>s to specific variables and functions, based upon the lexical nesting structure of ECMAScript code. Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt>, or a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt>. Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.</p>\n    <p>Every Environment Record has an [[OuterEnv]] field, which is either <emu-val>null</emu-val> or a reference to an outer Environment Record. This is used to model the logical nesting of Environment Record values. The outer reference of an (inner) Environment Record is a reference to the Environment Record that logically surrounds the inner Environment Record. An outer Environment Record may, of course, have its own outer Environment Record. An Environment Record may serve as the outer environment for multiple inner Environment Records. For example, if a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> contains two nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s then the Environment Records of each of the nested functions will have as their outer Environment Record the Environment Record of the current evaluation of the surrounding function.</p>\n    <p>Environment Records are purely specification mechanisms and need not correspond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript program to directly access or manipulate such values.</p>\n\n    <div id=\"excluded-sec-the-environment-record-type-hierarchy\"><h1><span class=\"secnum\">8.1.1</span>#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy</h1>...</div><div id=\"excluded-sec-environment-record-operations\"><h1><span class=\"secnum\">8.1.2</span>#sec-environment-record-operations Environment Record Operations</h1>...</div></emu-clause>\n\n  "}, "sec-newfunctionenvironment": {"num": "8.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> and <var>newTarget</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Let <var>home</var> be <var>F</var>.[[HomeObject]].</li><li>Set <var>env</var>.[[HomeObject]] to <var>home</var>.</li><li>Set <var>env</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-runtime-semantics-evaluation": {"num": "13.11.7", "title": "#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-with-statement-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"23bd2456\"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>val</var>)).</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewObjectEnvironment\"><a href=\"#sec-newobjectenvironment\">NewObjectEnvironment</a></emu-xref>(<var>obj</var>, <var>oldEnv</var>).</li><li>Set the <var>withEnvironment</var> flag of <var>newEnv</var> to <emu-val>true</emu-val>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li><li>Let <var>C</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the embedded <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, whether normally or by some form of <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> or exception, the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-global-environment-records-hasbinding-n": {"num": "8.1.1.4.1", "title": "#sec-global-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-global-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-hasbinding-n\">#sec-global-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for global Environment Records simply determines if the argument identifier is one of the identifiers bound by the record:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-haslexicaldeclaration": {"num": "8.1.1.4.13", "title": "#sec-haslexicaldeclaration HasLexicalDeclaration ( N )", "html": "<emu-clause id=\"sec-haslexicaldeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-haslexicaldeclaration\">#sec-haslexicaldeclaration</span> HasLexicalDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasLexicalDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>Return <var>DclRec</var>.HasBinding(<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            sequence of Unicode code points\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-environment-records\"><h1><span class=\"secnum\">8.1</span>#sec-environment-records Environment Records</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs\"><h1><span class=\"secnum\">8.4</span>#sec-jobs Jobs and Host Operations to Enqueue Jobs</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.6</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.7</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.8</span>#sec-forward-progress Forward Progress</h1>...</div></emu-clause>\n\n"}, "sec-postfix-increment-operator-runtime-semantics-evaluation": {"num": "12.4.4.1", "title": "#sec-postfix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-increment-operator-runtime-semantics-evaluation\">#sec-postfix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-declarative-environment-records-initializebinding-n-v": {"num": "8.1.1.1.4", "title": "#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-declarative-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-initializebinding-n-v\">#sec-declarative-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for declarative Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "9.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>When the [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> is called with property key <var>P</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-variable-statement": {"num": "13.3.2", "title": "#sec-variable-statement Variable Statement", "html": "<emu-clause id=\"sec-variable-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variable-statement\">#sec-variable-statement</span> Variable Statement</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <code>var</code> statement declares variables that are scoped to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment. Var variables are created when their containing <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is instantiated and are initialized to <emu-val>undefined</emu-val> when created. Within the scope of any VariableEnvironment a common <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> may appear in more than one <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> but those declarations collectively define only one variable. A variable defined by a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> with an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>'s <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> when the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> is executed, not when the variable is created.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"VariableStatement\" params=\"Yield, Await\" id=\"prod-VariableStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b41c0900\"><emu-t>var</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclarationList\" params=\"In, Yield, Await\" id=\"prod-VariableDeclarationList\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3ece12c3\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"c6c87748\"><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration\" params=\"In, Yield, Await\" id=\"prod-VariableDeclaration\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8eeb7c11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"49d70a55\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-variable-statement-static-semantics-boundnames\"><h1><span class=\"secnum\">13.3.2.1</span>#sec-variable-statement-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-variable-statement-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.3.2.2</span>#sec-variable-statement-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-variable-statement-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.3.2.3</span>#sec-variable-statement-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-variable-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.3.2.4</span>#sec-variable-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-global-environment-records-createimmutablebinding-n-s": {"num": "8.1.1.4.3", "title": "#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )", "html": "<emu-clause id=\"sec-global-environment-records-createimmutablebinding-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createimmutablebinding-n-s\">#sec-global-environment-records-createimmutablebinding-n-s</span> CreateImmutableBinding ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction takes arguments <var>constructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>), <var>kind</var> (either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>), and <var>args</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action. <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to. <var>args</var> is the argument values that were passed to <var>constructor</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Function.prototype%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%Generator%\"</emu-val>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncFunction.prototype%\"</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <emu-val>\"%AsyncGenerator%\"</emu-val>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyArg</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyArg</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <emu-val>\",\"</emu-val> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyArg</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Let <var>bodyString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of 0x000A (LINE FEED), ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyArg</var>), and 0x000A (LINE FEED).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>P</var>), using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>bodyString</var>), using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <emu-const>generator</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>async</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>realmF</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>proto</var>, <var>parameters</var>, <var>body</var>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"anonymous\"</emu-val>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Functions whose <var>kind</var> is <emu-const>async</emu-const> are not constructible and do not have a [[Construct]] internal method or a <emu-val>\"prototype\"</emu-val> property.</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <emu-val>\" anonymous(\"</emu-val>, <var>P</var>, 0x000A (LINE FEED), <emu-val>\") {\"</emu-val>, <var>bodyString</var>, and <emu-val>\"}\"</emu-val>.</li><li>Set <var>F</var>.[[SourceText]] to !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>sourceString</var>).</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>CreateDynamicFunction defines a <emu-val>\"prototype\"</emu-val> property on any function it creates whose <var>kind</var> is not <emu-const>async</emu-const> to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><emu-val>\"function\"</emu-val></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><emu-val>\"function*\"</emu-val></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><emu-val>\"async function\"</emu-val></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><emu-val>\"async function*\"</emu-val></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-getthisenvironment": {"num": "8.3.3", "title": "#sec-getthisenvironment GetThisEnvironment ( )", "html": "<emu-clause id=\"sec-getthisenvironment\" aoid=\"GetThisEnvironment\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getthisenvironment\">#sec-getthisenvironment</span> GetThisEnvironment ( )</h1>\n      <p>The abstract operation GetThisEnvironment takes no arguments. It finds the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that currently supplies the binding of the <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> <code>this</code>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>env</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Repeat,<ol><li>Let <var>exists</var> be <var>env</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>env</var>.</li><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Set <var>env</var> to <var>outer</var>.\n      </li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The loop in step 2 will always terminate because the list of environments always ends with the <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> which has a <code>this</code> binding.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-getidentifierreference": {"num": "8.1.2.1", "title": "#sec-getidentifierreference GetIdentifierReference ( env, name, strict )", "html": "<emu-clause id=\"sec-getidentifierreference\" aoid=\"GetIdentifierReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getidentifierreference\">#sec-getidentifierreference</span> GetIdentifierReference ( <var>env</var>, <var>name</var>, <var>strict</var> )</h1>\n        <p>The abstract operation GetIdentifierReference takes arguments <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>null</emu-val>), <var>name</var> (a String), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>env</var> is the value <emu-val>null</emu-val>, then<ol><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <emu-val>undefined</emu-val>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Let <var>exists</var> be ? <var>env</var>.HasBinding(<var>name</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>env</var>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Else,<ol><li>Let <var>outer</var> be <var>env</var>.[[OuterEnv]].</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>outer</var>, <var>name</var>, <var>strict</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-catchclauseevaluation": {"num": "13.15.7", "title": "#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-catchclauseevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-catchclauseevaluation\">#sec-runtime-semantics-catchclauseevaluation</span> Runtime Semantics: CatchClauseEvaluation</h1>\n      <p>With parameter <var>thrownValue</var>.</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc13c36\"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>catchEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each element <var>argName</var> of the BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>, do<ol><li>Perform ! <var>catchEnv</var>.CreateMutableBinding(<var>argName</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>catchEnv</var>.</li><li>Let <var>status</var> be BindingInitialization of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> with arguments <var>thrownValue</var> and <var>catchEnv</var>.</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>B</var> be the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>B</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a18a7645\"><emu-t>catch</emu-t><emu-nt><a href=\"#prod-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>No matter how control leaves the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.25", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause  <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\" id=\"prod-annexB-Catch\">\n    <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddc13c36\"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n        \n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> is  <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" id=\"prod-annexB-CatchParameter\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.\n        \n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of  <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step 3.d.i.2.a.i is replaced by:</p>\n      <emu-alg type=\"i\"><ol><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.\n      </li></ol></emu-alg>\n      <p>Step 7.d.ii.4.a.i.i is replaced by:</p>\n      <emu-alg type=\"i\"><ol><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-evaldeclarationinstantiation": {"num": "18.2.1.3", "title": "#sec-evaldeclarationinstantiation Runtime Semantics: EvalDeclarationInstantiation ( body, varEnv, lexEnv, strict )", "html": "<emu-clause id=\"sec-evaldeclarationinstantiation\" aoid=\"EvalDeclarationInstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</span> Runtime Semantics: EvalDeclarationInstantiation ( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var> )</h1>\n        <p>The abstract operation EvalDeclarationInstantiation takes arguments <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, and <var>strict</var>. It performs the following steps when called:</p>\n        <!--\n          WARNING: If you add, remove, rename, or repurpose any variable names\n                   within this algorithm, you may need to update\n                   #sec-web-compat-evaldeclarationinstantiation and\n                   #sec-variablestatements-in-catch-blocks accordingly.\n        -->\n        <emu-alg><ol><li>Let <var>varNames</var> be the VarDeclaredNames of <var>body</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>body</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: <code>eval</code> will not create a global var declaration that would be shadowed by a global lexical declaration.</li></ol></li></ol></li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>NOTE: The environment of with statements cannot contain any lexical declaration so it doesn't need to be checked for var/let hoisting conflicts.</li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>thisEnv</var>.HasBinding(<var>name</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>SyntaxError</emu-val> exception.</li><li>NOTE: Annex <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref> defines alternate semantics for the above step.</li></ol></li><li>NOTE: A <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> will not hoist var declaration over a like-named lexical declaration.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li></ol></li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-evaldeclarationinstantiation\"><a href=\"#sec-web-compat-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Let <var>vnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step unless <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> and the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>body</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>lexEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>lexEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>lexEnv</var>.</li><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>fn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>fn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li>Perform ! <var>varEnv</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>vn</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be ! <var>varEnv</var>.CreateMutableBinding(<var>vn</var>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because of validation preceding step 10.</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>vn</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative version of this algorithm is described in  <emu-xref href=\"#sec-variablestatements-in-catch-blocks\"><a href=\"#sec-variablestatements-in-catch-blocks\" class=\"excluded-xref\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-candeclareglobalvar": {"num": "8.1.1.4.15", "title": "#sec-candeclareglobalvar CanDeclareGlobalVar ( N )", "html": "<emu-clause id=\"sec-candeclareglobalvar\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</span> CanDeclareGlobalVar ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalVar for global Environment Records determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>. Redundant var declarations and var declarations for pre-existing <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> properties are allowed.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>hasProperty</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\">\n        <span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}, "sec-initializeboundname": {"num": "12.1.5.1", "title": "#sec-initializeboundname Runtime Semantics: InitializeBoundName ( name, value, environment )", "html": "<emu-clause id=\"sec-initializeboundname\" aoid=\"InitializeBoundName\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeboundname\">#sec-initializeboundname</span> Runtime Semantics: InitializeBoundName ( <var>name</var>, <var>value</var>, <var>environment</var> )</h1>\n        <p>The abstract operation InitializeBoundName takes arguments <var>name</var>, <var>value</var>, and <var>environment</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is String.</li><li>If <var>environment</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>environment</var>.InitializeBinding(<var>name</var>, <var>value</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>name</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).\n        </li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object-environment-records-initializebinding-n-v": {"num": "8.1.1.2.4", "title": "#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-object-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-initializebinding-n-v\">#sec-object-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for object Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return ? <var>envRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In this specification, all uses of CreateMutableBinding for object Environment Records are immediately followed by a call to InitializeBinding for the same name. Hence, implementations do not need to explicitly track the initialization state of individual <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-object-environment-records-deletebinding-n": {"num": "8.1.1.2.7", "title": "#sec-object-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-deletebinding-n\">#sec-object-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for object Environment Records can only delete bindings that correspond to properties of the environment object whose [[Configurable]] attribute have the value <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <var>bindings</var>.[[Delete]](<var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-createmutablebinding-n-d": {"num": "8.1.1.2.2", "title": "#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-object-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-createmutablebinding-n-d\">#sec-object-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for object Environment Records creates in an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>bindings</var>, <var>N</var>, PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> to be returned.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-blockdeclarationinstantiation": {"num": "13.2.14", "title": "#sec-blockdeclarationinstantiation Runtime Semantics: BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> Runtime Semantics: BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created. It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-newglobalenvironment": {"num": "8.1.2.5", "title": "#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )", "html": "<emu-clause id=\"sec-newglobalenvironment\" aoid=\"NewGlobalEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newglobalenvironment\">#sec-newglobalenvironment</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</h1>\n        <p>The abstract operation NewGlobalEnvironment takes arguments <var>G</var> and <var>thisValue</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>objRec</var> be a new <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> containing <var>G</var> as the binding object.</li><li>Let <var>dclRec</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Set <var>env</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>env</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>env</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>env</var>.[[VarNames]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>env</var>.[[OuterEnv]] to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-global-environment-records-initializebinding-n-v": {"num": "8.1.1.4.4", "title": "#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )", "html": "<emu-clause id=\"sec-global-environment-records-initializebinding-n-v\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-initializebinding-n-v\">#sec-global-environment-records-initializebinding-n-v</span> InitializeBinding ( <var>N</var>, <var>V</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method InitializeBinding for global Environment Records is used to set the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the binding exists, it must be in the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createperiterationenvironment": {"num": "13.7.4.9", "title": "#sec-createperiterationenvironment Runtime Semantics: CreatePerIterationEnvironment ( perIterationBindings )", "html": "<emu-clause id=\"sec-createperiterationenvironment\" aoid=\"CreatePerIterationEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createperiterationenvironment\">#sec-createperiterationenvironment</span> Runtime Semantics: CreatePerIterationEnvironment ( <var>perIterationBindings</var> )</h1>\n        <p>The abstract operation CreatePerIterationEnvironment takes argument <var>perIterationBindings</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>perIterationBindings</var> has any elements, then<ol><li>Let <var>lastIterationEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>outer</var> be <var>lastIterationEnv</var>.[[OuterEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Let <var>thisIterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>outer</var>).</li><li>For each element <var>bn</var> of <var>perIterationBindings</var>, do<ol><li>Perform ! <var>thisIterationEnv</var>.CreateMutableBinding(<var>bn</var>, <emu-val>false</emu-val>).</li><li>Let <var>lastValue</var> be ? <var>lastIterationEnv</var>.GetBindingValue(<var>bn</var>, <emu-val>true</emu-val>).</li><li>Perform <var>thisIterationEnv</var>.InitializeBinding(<var>bn</var>, <var>lastValue</var>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>thisIterationEnv</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-hasvardeclaration": {"num": "8.1.1.4.12", "title": "#sec-hasvardeclaration HasVarDeclaration ( N )", "html": "<emu-clause id=\"sec-hasvardeclaration\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasvardeclaration\">#sec-hasvardeclaration</span> HasVarDeclaration ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasVarDeclaration for global Environment Records determines if the argument identifier has a binding in this record that was created using a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> contains <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records": {"num": "8.1.1.2", "title": "#sec-object-environment-records Object Environment Records", "html": "<emu-clause id=\"sec-object-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records\">#sec-object-environment-records</span> Object Environment Records</h1>\n        <p>Each  <dfn>object Environment Record</dfn> is associated with an object called its  <em>binding object</em>. An object Environment Record binds the set of string identifier names that directly correspond to the property names of its binding object. Property keys that are not strings in the form of an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are not included in the set of bound identifiers. Both own and inherited properties are included in the set regardless of the setting of their [[Enumerable]] attribute. Because properties can be dynamically added and deleted from objects, the set of identifiers bound by an object Environment Record may potentially change as a side-effect of any operation that adds or deletes properties. Any bindings that are created as a result of such a side-effect are considered to be a mutable binding even if the Writable attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>\n        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href=\"#sec-with-statement\"><a href=\"#sec-with-statement\" class=\"excluded-xref\" excluded-id=\"sec-with-statement\">#sec-with-statement</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a <var>withEnvironment</var> Boolean value that is associated with each object Environment Record. By default, the value of <var>withEnvironment</var> is <emu-val>false</emu-val> for any object Environment Record.</p>\n        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-object-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.2.1</span>#sec-object-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.2.2</span>#sec-object-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-object-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.2.3</span>#sec-object-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.2.4</span>#sec-object-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-object-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.2.5</span>#sec-object-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.2.6</span>#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-object-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.2.7</span>#sec-object-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-object-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.2.8</span>#sec-object-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.2.9</span>#sec-object-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-object-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.2.10</span>#sec-object-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.7.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>constructorEnv</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-resolvebinding": {"num": "8.3.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> value with its referenced name component equal to the <var>name</var> argument.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\" oldids=\"function-environment\">\n        <span id=\"function-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              \n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-declarative-environment-records-getbindingvalue-n-s": {"num": "8.1.1.1.6", "title": "#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-getbindingvalue-n-s\">#sec-declarative-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for declarative Environment Records simply returns the value of its bound identifier whose name is the value of the argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-web-compat-evaldeclarationinstantiation": {"num": "B.3.3.3", "title": "#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-evaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-evaldeclarationinstantiation\">#sec-web-compat-evaldeclarationinstantiation</span> Changes to EvalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 7:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>body</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>body</var>, then<ol><li>Let <var>bindingExists</var> be <emu-val>false</emu-val>.</li><li>Let <var>thisEnv</var> be <var>lexEnv</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The following loop will terminate.</li><li>Repeat, while <var>thisEnv</var> is not the same as <var>varEnv</var>,<ol><li>If <var>thisEnv</var> is not an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref>, then<ol><li>If <var>thisEnv</var>.HasBinding(<var>F</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Set <var>thisEnv</var> to <var>thisEnv</var>.[[OuterEnv]].</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>If <var>varEnv</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>varEnv</var>.CanDeclareGlobalVar(<var>F</var>).</li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>fnDefinable</var> be <emu-val>true</emu-val>.</li></ol></li><li>If <var>bindingExists</var> is <emu-val>false</emu-val> and <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>If <var>varEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>, then<ol><li>Perform ? <var>varEnv</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>bindingExists</var> be <var>varEnv</var>.HasBinding(<var>F</var>).</li><li>If <var>bindingExists</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>true</emu-val>).</li><li>Perform ! <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.3.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 13:</p>\n        <emu-alg><ol><li>Let <var>strict</var> be IsStrict of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredFunctionNames</var>.</li><li>Append to <var>declaredFunctionOrVarNames</var> the elements of <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-candeclareglobalfunction": {"num": "8.1.1.4.16", "title": "#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )", "html": "<emu-clause id=\"sec-candeclareglobalfunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candeclareglobalfunction\">#sec-candeclareglobalfunction</span> CanDeclareGlobalFunction ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CanDeclareGlobalFunction for global Environment Records determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>existingProp</var>) is <emu-val>true</emu-val> and <var>existingProp</var> has attribute values { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val> }, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object-environment-records-getbindingvalue-n-s": {"num": "8.1.1.2.6", "title": "#sec-object-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-object-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-getbindingvalue-n-s\">#sec-object-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for object Environment Records returns the value of its associated binding object's property whose name is the String value of the argument identifier <var>N</var>. The property should already exist but if it does not the result depends upon the value of the <var>S</var> argument:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>value</var> is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>false</emu-val>, return the value <emu-val>undefined</emu-val>; otherwise throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, <var>N</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-newdeclarativeenvironment": {"num": "8.1.2.2", "title": "#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )", "html": "<emu-clause id=\"sec-newdeclarativeenvironment\" aoid=\"NewDeclarativeEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newdeclarativeenvironment\">#sec-newdeclarativeenvironment</span> NewDeclarativeEnvironment ( <var>E</var> )</h1>\n        <p>The abstract operation NewDeclarativeEnvironment takes argument <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-web-compat-functiondeclarationinstantiation": {"num": "B.3.3.1", "title": "#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-functiondeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-functiondeclarationinstantiation\">#sec-web-compat-functiondeclarationinstantiation</span> Changes to FunctionDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"FunctionDeclarationInstantiation\"><a href=\"#sec-functiondeclarationinstantiation\">FunctionDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step 29:</p>\n        <emu-alg><ol><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>, do<ol><li>Let <var>F</var> be StringValue of the <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>func</var> and <var>F</var> is not an element of <var>parameterNames</var>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName, the name of a formal parameter, or another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>initializedBindings</var> does not contain <var>F</var> and <var>F</var> is not <emu-val>\"arguments\"</emu-val>, then<ol><li>Perform ! <var>varEnv</var>.CreateMutableBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform <var>varEnv</var>.InitializeBinding(<var>F</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>F</var> to <var>instantiatedVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>fenv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ! <var>fenv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-generatorfunction-constructor": {"num": "25.2.1", "title": "#sec-generatorfunction-constructor The GeneratorFunction Constructor", "html": "<emu-clause id=\"sec-generatorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-constructor\">#sec-generatorfunction-constructor</span> The GeneratorFunction Constructor</h1>\n      <p>The GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%GeneratorFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new GeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>GeneratorFunction (&#8230;)</code> is equivalent to the object creation expression <code>new GeneratorFunction (&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified GeneratorFunction behaviour must include a <code>super</code> call to the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript syntactic forms for defining generator function objects create direct instances of GeneratorFunction. There is no syntactic means to create instances of GeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-generatorfunction\"><h1><span class=\"secnum\">25.2.1.1</span>#sec-generatorfunction GeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-script-records": {"num": "15.1.8", "title": "#sec-script-records Script Records", "html": "<emu-clause id=\"sec-script-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-script-records\">#sec-script-records</span> Script Records</h1>\n\n      <p>A  <dfn id=\"script-record\">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in  <emu-xref href=\"#table-script-records\"><a href=\"#table-script-records\" class=\"excluded-xref\" excluded-id=\"table-script-records\">#table-script-records</a></emu-xref>.</p>\n\n      <emu-table id=\"table-script-records\" caption=\"Script Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-script-records\">#table-script-records</span>: <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <thead>\n          <tr>\n            <th>\n              Field Name\n            \n            </th>\n            <th>\n              Value Type\n            \n            </th>\n            <th>\n              Meaning\n            \n            </th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>\n              [[Realm]]\n            \n            </td>\n            <td>\n              <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> within which this script was created. <emu-val>undefined</emu-val> if not yet assigned.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Environment]]\n            \n            </td>\n            <td>\n              <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this script. This field is set when the script is instantiated.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[ECMAScriptCode]]\n            \n            </td>\n            <td>\n              a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n            \n            </td>\n            <td>\n              The result of parsing the source text of this script using <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[HostDefined]]\n            \n            </td>\n            <td>\n              Any, default value is <emu-val>undefined</emu-val>.\n            \n            </td>\n            <td>\n              Field reserved for use by host environments that need to associate additional information with a script.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-newobjectenvironment": {"num": "8.1.2.3", "title": "#sec-newobjectenvironment NewObjectEnvironment ( O, E )", "html": "<emu-clause id=\"sec-newobjectenvironment\" aoid=\"NewObjectEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newobjectenvironment\">#sec-newobjectenvironment</span> NewObjectEnvironment ( <var>O</var>, <var>E</var> )</h1>\n        <p>The abstract operation NewObjectEnvironment takes arguments <var>O</var> (an Object) and <var>E</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> containing <var>O</var> as the binding object.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>E</var>.</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-specification-types": {"num": "6.2", "title": "#sec-ecmascript-specification-types ECMAScript Specification Types", "html": "<emu-clause id=\"sec-ecmascript-specification-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-specification-types\">#sec-ecmascript-specification-types</span> ECMAScript Specification Types</h1>\n    <p>A specification type corresponds to meta-values that are used within algorithms to describe the semantics of ECMAScript language constructs and ECMAScript language types. The specification types include <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, Abstract Closure, and <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>. Specification type values are specification artefacts that do not necessarily correspond to any specific entity within an ECMAScript implementation. Specification type values may be used to describe intermediate results of ECMAScript expression evaluation but such values cannot be stored as properties of objects or values of ECMAScript language variables.</p>\n\n    <div id=\"excluded-sec-list-and-record-specification-type\"><h1><span class=\"secnum\">6.2.1</span>#sec-list-and-record-specification-type The List and Record Specification Types</h1>...</div><div id=\"excluded-sec-set-and-relation-specification-type\"><h1><span class=\"secnum\">6.2.2</span>#sec-set-and-relation-specification-type The Set and Relation Specification Types</h1>...</div><div id=\"excluded-sec-completion-record-specification-type\"><h1><span class=\"secnum\">6.2.3</span>#sec-completion-record-specification-type The Completion Record Specification Type</h1>...</div><div id=\"excluded-sec-reference-specification-type\"><h1><span class=\"secnum\">6.2.4</span>#sec-reference-specification-type The Reference Specification Type</h1>...</div><div id=\"excluded-sec-property-descriptor-specification-type\"><h1><span class=\"secnum\">6.2.5</span>#sec-property-descriptor-specification-type The Property Descriptor Specification Type</h1>...</div><div id=\"excluded-sec-lexical-environment-and-environment-record-specification-types\"><h1><span class=\"secnum\">6.2.6</span>#sec-lexical-environment-and-environment-record-specification-types The Environment Record Specification Type</h1>...</div><div id=\"excluded-sec-abstract-closure\"><h1><span class=\"secnum\">6.2.7</span>#sec-abstract-closure The Abstract Closure Specification Type</h1>...</div><div id=\"excluded-sec-data-blocks\"><h1><span class=\"secnum\">6.2.8</span>#sec-data-blocks Data Blocks</h1>...</div></emu-clause>\n"}, "sec-declarative-environment-records": {"num": "8.1.1.1", "title": "#sec-declarative-environment-records Declarative Environment Records", "html": "<emu-clause id=\"sec-declarative-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records\">#sec-declarative-environment-records</span> Declarative Environment Records</h1>\n        <p>Each  <dfn>declarative Environment Record</dfn> is associated with an ECMAScript program scope containing variable, constant, let, class, module, import, and/or function declarations. A declarative Environment Record binds the set of identifiers defined by the declarations contained within its scope.</p>\n        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-declarative-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.1.1</span>#sec-declarative-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.1.2</span>#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.1.3</span>#sec-declarative-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.1.4</span>#sec-declarative-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.1.5</span>#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.1.6</span>#sec-declarative-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.1.7</span>#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.1.8</span>#sec-declarative-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.1.9</span>#sec-declarative-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-declarative-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.1.10</span>#sec-declarative-environment-records-withbaseobject WithBaseObject ( )</h1>...</div></emu-clause>\n\n      "}, "sec-createglobalvarbinding": {"num": "8.1.1.4.17", "title": "#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )", "html": "<emu-clause id=\"sec-createglobalvarbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalvarbinding\">#sec-createglobalvarbinding</span> CreateGlobalVarBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalVarBinding for global Environment Records creates and initializes a mutable binding in the associated <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is reused and assumed to be initialized.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ?&#160;<emu-xref aoid=\"HasOwnProperty\"><a href=\"#sec-hasownproperty\">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>hasProperty</var> is <emu-val>false</emu-val> and <var>extensible</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>ObjRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li><li>Perform ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createglobalfunctionbinding": {"num": "8.1.1.4.18", "title": "#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )", "html": "<emu-clause id=\"sec-createglobalfunctionbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</span> CreateGlobalFunctionBinding ( <var>N</var>, <var>V</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateGlobalFunctionBinding for global Environment Records creates and initializes a mutable binding in the associated <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If a binding already exists, it is replaced.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val> or <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>desc</var>).</li><li><emu-not-ref>Record</emu-not-ref> that the binding for <var>N</var> in <var>ObjRec</var> has been initialized.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Global function declarations are always represented as own properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. If possible, an existing own property is reconfigured to have a standard set of attribute values. Steps 8-9 are equivalent to what calling the InitializeBinding concrete method would do and if <var>globalObject</var> is a Proxy will produce the same sequence of Proxy trap calls.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-source-text-module-record-initialize-environment": {"num": "15.2.1.17.4", "title": "#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-initialize-environment\" aoid=\"InitializeEnvironment\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-initialize-environment\">#sec-source-text-module-record-initialize-environment</span> InitializeEnvironment ( ) Concrete Method</h1>\n          <p>The InitializeEnvironment concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> abstract method.</p>\n          <p>This abstract method performs the following steps:</p>\n\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> in <var>module</var>.[[IndirectExportEntries]], do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>e</var>.[[ExportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All named exports from <var>module</var> are resolvable.</li><li>Let <var>realm</var> be <var>module</var>.[[Realm]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>env</var> be <emu-xref aoid=\"NewModuleEnvironment\"><a href=\"#sec-newmoduleenvironment\">NewModuleEnvironment</a></emu-xref>(<var>realm</var>.[[GlobalEnv]]).</li><li>Set <var>module</var>.[[Environment]] to <var>env</var>.</li><li>For each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> <var>in</var> in <var>module</var>.[[ImportEntries]], do<ol><li>Let <var>importedModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>in</var>.[[ModuleRequest]]).</li><li>NOTE: The above call cannot fail because imported module requests are a subset of <var>module</var>.[[RequestedModules]], and these have been resolved earlier in this algorithm.</li><li>If <var>in</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>importedModule</var>).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>in</var>.[[ImportName]]).</li><li>If <var>resolution</var> is <emu-val>null</emu-val> or <emu-val>\"ambiguous\"</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>resolution</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Let <var>namespace</var> be ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>resolution</var>.[[Module]]).</li><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>in</var>.[[LocalName]], <emu-val>true</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>in</var>.[[LocalName]], <var>namespace</var>).</li></ol></li><li>Else,<ol><li>Call <var>env</var>.CreateImportBinding(<var>in</var>.[[LocalName]], <var>resolution</var>.[[Module]], <var>resolution</var>.[[BindingName]]).</li></ol></li></ol></li></ol></li><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Realm]] is not <emu-val>undefined</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set <var>module</var>.[[Context]] to <var>moduleContext</var>.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>code</var> be <var>module</var>.[[ECMAScriptCode]].</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> in <var>varDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If <var>dn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <emu-val>undefined</emu-val>).</li><li>Append <var>dn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fo</var> be InstantiateFunctionObject of <var>d</var> with argument <var>env</var>.</li><li>Call <var>env</var>.InitializeBinding(<var>dn</var>, <var>fo</var>).</li></ol></li></ol></li></ol></li><li>Remove <var>moduleContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A  <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                \n                </th>\n                <th>\n                  Value Type\n                \n                </th>\n                <th>\n                  Meaning\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                \n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                \n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                \n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation.  <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                \n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in  <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                \n                </th>\n                <th>\n                  Purpose\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-prefix-increment-operator-runtime-semantics-evaluation": {"num": "12.4.6.1", "title": "#sec-prefix-increment-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-increment-operator-runtime-semantics-evaluation\">#sec-prefix-increment-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::add(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>The abstract operation OrdinaryCallBindThis takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>), <var>calleeContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>), and <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnv</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnv</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>localEnv</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>localEnv</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>localEnv</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "8.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method GetBindingValue for module Environment Records returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-code-realms": {"num": "8.2", "title": "#sec-code-realms Realms", "html": "<emu-clause id=\"sec-code-realms\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-code-realms\">#sec-code-realms</span> Realms</h1>\n    <p>Before it is evaluated, all ECMAScript code must be associated with a  <dfn id=\"realm\">realm</dfn>. Conceptually, a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref>, and other associated state and resources.</p>\n    <p>A <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is represented in this specification as a  <dfn id=\"realm-record\">Realm Record</dfn> with the fields specified in  <emu-xref href=\"#table-21\"><a href=\"#table-21\" class=\"excluded-xref\" excluded-id=\"table-21\">#table-21</a></emu-xref>:</p>\n    <emu-table id=\"table-21\" caption=\"Realm Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-21\">#table-21</span>: <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          \n          </th>\n          <th>\n            Value\n          \n          </th>\n          <th>\n            Meaning\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Intrinsics]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects\n          \n          </td>\n          <td>\n            The intrinsic values used by code associated with this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[GlobalEnv]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#global-environment\"><a href=\"https://tc39.es/ecma262/#global-environment\">global environment</a></emu-xref> for this <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[TemplateMap]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, [[Array]]: Object }.\n          \n          </td>\n          <td>\n            <p>Template objects are canonicalized separately for each <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> using its <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Site]] value is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> that is a <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>. The associated [[Array]] value is the corresponding template object that is passed to a tag function.</p>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Once a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.</div></emu-note>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          \n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          \n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <div id=\"excluded-sec-createrealm\"><h1><span class=\"secnum\">8.2.1</span>#sec-createrealm CreateRealm ( )</h1>...</div><div id=\"excluded-sec-createintrinsics\"><h1><span class=\"secnum\">8.2.2</span>#sec-createintrinsics CreateIntrinsics ( realmRec )</h1>...</div><div id=\"excluded-sec-setrealmglobalobject\"><h1><span class=\"secnum\">8.2.3</span>#sec-setrealmglobalobject SetRealmGlobalObject ( realmRec, globalObj, thisValue )</h1>...</div><div id=\"excluded-sec-setdefaultglobalbindings\"><h1><span class=\"secnum\">8.2.4</span>#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )</h1>...</div></emu-clause>\n\n  "}, "sec-postfix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.5.1", "title": "#sec-postfix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-postfix-decrement-operator-runtime-semantics-evaluation\">#sec-postfix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-bindinginstantiation": {"num": "13.7.5.10", "title": "#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation", "html": "<emu-clause id=\"sec-runtime-semantics-bindinginstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-bindinginstantiation\">#sec-runtime-semantics-bindinginstantiation</span> Runtime Semantics: BindingInstantiation</h1>\n        <p>With parameter <var>environment</var>.</p>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d32d6fbc\"><emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt><emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>environment</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>For each element <var>name</var> of the BoundNames of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, do<ol><li>If IsConstantDeclaration of <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>environment</var>.CreateImmutableBinding(<var>name</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>environment</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).\n        </li></ol></li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-deletebinding-n": {"num": "8.1.1.1.7", "title": "#sec-declarative-environment-records-deletebinding-n DeleteBinding ( N )", "html": "<emu-clause id=\"sec-declarative-environment-records-deletebinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-deletebinding-n\">#sec-declarative-environment-records-deletebinding-n</span> DeleteBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method DeleteBinding for declarative Environment Records can only delete bindings that have been explicitly designated as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return the result of performing NamedEvaluation for this <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> with argument <emu-val>\"\"</emu-val>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>funcEnv</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>funcEnv</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject takes argument <var>templateLiteral</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var><ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Call <var>template</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Call <var>rawObj</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <emu-const>frozen</emu-const>).</li><li>Call <var>template</var>.[[DefineOwnProperty]](<emu-val>\"raw\"</emu-val>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <emu-const>frozen</emu-const>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var>, <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Return the result of applying the bitwise operator <var>op</var> to <var>lnum</var> and <var>rnum</var>. The result is a signed 32-bit <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-stringgetownproperty": {"num": "9.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> and <var>P</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is an Object that has a [[StringData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <var>index</var> &lt; 0 or <var>len</var> &#8804; <var>index</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <var>index</var>.</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\" oldids=\"global-environment\">\n        <span id=\"global-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A  <dfn>global Environment Record</dfn> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global Environment Record provides the bindings for built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>,  <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global Environment Record is logically a single record but it is specified as a composite encapsulating an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global Environment Record's GetThisBinding concrete method. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record contains the bindings for all built-in globals (clause  <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> component of the global Environment Record.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global Environment Record maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in  <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in  <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">Declarative Environment Record</a></emu-xref>\n              \n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              \n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              \n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              \n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              \n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              \n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              \n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-global-environment-records-createmutablebinding-n-d": {"num": "8.1.1.4.2", "title": "#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-global-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-createmutablebinding-n-d\">#sec-global-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for global Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "8.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method SetMutableBinding for declarative Environment Records attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-statement-runtime-semantics-labelledevaluation": {"num": "13.7.4.7", "title": "#sec-for-statement-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-for-statement-runtime-semantics-labelledevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement-runtime-semantics-labelledevaluation\">#sec-for-statement-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"LabelledEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fc33bcf0\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"48e766b4\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"93c07e45\"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>isConst</var> be IsConstantDeclaration of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the BoundNames of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-declarative-environment-records-createmutablebinding-n-d": {"num": "8.1.1.1.2", "title": "#sec-declarative-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )", "html": "<emu-clause id=\"sec-declarative-environment-records-createmutablebinding-n-d\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-createmutablebinding-n-d\">#sec-declarative-environment-records-createmutablebinding-n-d</span> CreateMutableBinding ( <var>N</var>, <var>D</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-abstract-equality-comparison": {"num": "7.2.15", "title": "#sec-abstract-equality-comparison Abstract Equality Comparison", "html": "<emu-clause id=\"sec-abstract-equality-comparison\" aoid=\"Abstract Equality Comparison\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-equality-comparison\">#sec-abstract-equality-comparison</span> Abstract Equality Comparison</h1>\n      <p>The comparison <var>x</var> == <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>x</var> === <var>y</var>.</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>Return the result of the comparison <var>x</var> == <var>n</var>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return the result of the comparison <var>y</var> == <var>x</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return the result of the comparison !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return the result of the comparison <var>x</var> == !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return the result of the comparison <var>x</var> == ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return the result of the comparison ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> is equal to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>y</var>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-global-environment-records-getthisbinding": {"num": "8.1.1.4.11", "title": "#sec-global-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-global-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records-getthisbinding\">#sec-global-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref> for which the method was invoked.</li><li>Return <var>envRec</var>.[[GlobalThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-21": "Table 22", "table-22": "Table 23", "table-23": "Table 24", "table-24": "Table 25", "table-27": "Table 27", "table-34": "Table 34", "table-script-records": "Table 37", "table-36": "Table 38", "table-37": "Table 39", "table-cyclic-module-fields": "Table 40", "table-cyclic-module-methods": "Table 41", "table-dynamic-function-sourcetext-prefixes": "Table 48", "table-47": "Table 54"}}}