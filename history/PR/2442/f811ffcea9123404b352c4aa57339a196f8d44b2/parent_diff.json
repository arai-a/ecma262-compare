{"from": {"secList": ["sec-hostcalljobcallback", "sec-hostgetimportmetaproperties", "sec-host-promise-rejection-tracker", "sec-finishdynamicimport", "sec-host-cleanup-finalization-registry", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-hosthassourcetextavailable", "sec-hostfinalizeimportmeta", "sec-hostimportmoduledynamically", "sec-arraybuffer-notation", "sec-hostresolveimportedmodule", "sec-newpromiseresolvethenablejob", "sec-async-functions-abstract-operations-async-function-start", "sec-hostensurecancompilestrings", "sec-hostenqueuepromisejob", "sec-cleanup-finalization-registry", "sec-newpromisereactionjob", "sec-hosts-and-implementations", "sec-object-internal-methods-and-internal-slots", "sec-hostmakejobcallback", "sec-completion-record-specification-type", "sec-jobs"], "secData": {"sec-hostcalljobcallback": {"num": "9.5.3", "title": "#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )", "html": "<emu-clause id=\"sec-hostcalljobcallback\" aoid=\"HostCallJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostcalljobcallback\">#sec-hostcalljobcallback</span> HostCallJobCallback ( <var>jobCallback</var>, <var>V</var>, <var>argumentsList</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostCallJobCallback takes arguments <var>jobCallback</var> (a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref>), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values).</p>\n      <p>The implementation of HostCallJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must always perform and return the result of <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This requirement means that hosts cannot change the [[Call]] behaviour of function objects defined in this specification.</p>\n      </div></emu-note>\n      <p>The default implementation of HostCallJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>jobCallback</var>.[[Callback]]) is <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostCallJobCallback.</p>\n    </emu-clause>\n\n    "}, "sec-hostgetimportmetaproperties": {"num": "13.3.12.1.1", "title": "#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostGetImportMetaProperties takes argument <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>The implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </emu-clause>\n\n        "}, "sec-host-promise-rejection-tracker": {"num": "27.2.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostPromiseRejectionTracker takes arguments <var>promise</var> (a Promise) and <var>operation</var> (<emu-val>\"reject\"</emu-val> or <emu-val>\"handle\"</emu-val>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to track promise rejections.</p>\n        <p>An implementation of HostPromiseRejectionTracker must complete normally in all cases. The default implementation of HostPromiseRejectionTracker is to unconditionally return an empty normal completion.</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a normal completion and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-host-cleanup-finalization-registry": {"num": "9.10.4.1", "title": "#sec-host-cleanup-finalization-registry HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )", "html": "<emu-clause id=\"sec-host-cleanup-finalization-registry\" aoid=\"HostEnqueueFinalizationRegistryCleanupJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-cleanup-finalization-registry\">#sec-host-cleanup-finalization-registry</span> HostEnqueueFinalizationRegistryCleanupJob ( <var>finalizationRegistry</var> )</h1>\n        <p>The abstract operation HostEnqueueFinalizationRegistryCleanupJob takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). HostEnqueueFinalizationRegistryCleanupJob is an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> abstract operation that is expected to call <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>(<var>finalizationRegistry</var>) at some point in the future, if possible. The <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>'s responsibility is to make this call at a time which does not interrupt synchronous ECMAScript code execution.</p>\n      </emu-clause>\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMAScript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-runtime-semantics-methoddefinitionevaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exist outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresume\"><a href=\"#sec-asyncgeneratorresume\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresume\">#sec-asyncgeneratorresume</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-hosthassourcetextavailable": {"num": "20.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\" aoid=\"HostHasSourceTextAvailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostHasSourceTextAvailable takes argument <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to prevent the source text from being provided for <var>func</var>.</p>\n      <p>An implementation of HostHasSourceTextAvailable must complete normally in all cases. This operation must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record. The default implementation of HostHasSourceTextAvailable is to unconditionally return a normal completion with a value of <emu-val>true</emu-val>.</p>\n    </emu-clause>\n  "}, "sec-hostfinalizeimportmeta": {"num": "13.3.12.1.2", "title": "#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostFinalizeImportMeta takes arguments <var>importMeta</var> (an Object) and <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-arraybuffer-notation": {"num": "25.1.1", "title": "#sec-arraybuffer-notation Notation", "html": "<emu-clause id=\"sec-arraybuffer-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-notation\">#sec-arraybuffer-notation</span> Notation</h1>\n      <p>The descriptions below in this section, <emu-xref href=\"#sec-atomics-object\"><a href=\"#sec-atomics-object\" class=\"excluded-xref\" excluded-id=\"sec-atomics-object\">#sec-atomics-object</a></emu-xref>, and <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\" class=\"excluded-xref\" excluded-id=\"sec-memory-model\">#sec-memory-model</a></emu-xref> use the read-modify-write modification function internal data structure.</p>\n      <p>A <dfn>read-modify-write modification function</dfn> is a mathematical function that is notationally represented as an abstract closure that takes two Lists of byte values as arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. These abstract closures satisfy all of the following properties:</p>\n      <ul>\n        <li>They perform all their algorithm steps atomically.</li>\n        <li>Their individual algorithm steps are not observable.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>To aid verifying that a read-modify-write modification function's algorithm steps constitute a pure, mathematical function, the following editorial conventions are recommended:</p>\n        <ul>\n          <li>They do not access, directly or transitively via invoked <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and abstract closures, any language or specification values except their parameters and captured values.</li>\n          <li>They do not return completion values.</li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-newpromiseresolvethenablejob": {"num": "27.2.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" oldids=\"sec-promiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\"><span id=\"sec-promiseresolvethenablejob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>.[[Callback]]).</li><li>If <var>getThenRealmResult</var> is a normal completion, let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Else, let <var>thenRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>thenRealm</var> is never <emu-val>null</emu-val>. When <var>then</var>.[[Callback]] is a revoked Proxy and no code runs, <var>thenRealm</var> is used to create error objects.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for the step below to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncFunctionBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncfunctionstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a normal completion with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncfunctionstart-return-undefined\"><a href=\"#step-asyncfunctionstart-return-undefined\">4.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-hostensurecancompilestrings": {"num": "19.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnsureCanCompileStrings takes arguments <var>callerRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>) and <var>calleeRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n      </emu-clause>\n\n      "}, "sec-hostenqueuepromisejob": {"num": "9.5.4", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnqueuePromiseJob takes arguments <var>job</var> (a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>) and <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> or <emu-val>null</emu-val>). It schedules <var>job</var> to be performed at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref> as well as the following:</p>\n      <ul>\n        <li>If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that execution is <emu-xref href=\"#job-preparedtoevaluatecode\"><a href=\"#job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Let <var>scriptOrModule</var> be <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() at the time HostEnqueuePromiseJob is invoked. If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that <var>scriptOrModule</var> is the <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Jobs must run in the same order as the HostEnqueuePromiseJob invocations that scheduled them.</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. If the handler is <emu-val>undefined</emu-val>, <var>realm</var> is <emu-val>null</emu-val>. For both kinds of Jobs, when <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> completes abnormally (i.e. called on a revoked Proxy), <var>realm</var> is the current <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> at the time of the <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> call. When the <var>realm</var> is <emu-val>null</emu-val>, no user ECMAScript code will be evaluated and no new ECMAScript objects (e.g. Error objects) will be created. The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses <var>realm</var> to check for the ability to run script and for the <a href=\"https://html.spec.whatwg.org/#entry\">entry</a> concept.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-cleanup-finalization-registry": {"num": "9.13", "title": "#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )", "html": "<emu-clause id=\"sec-cleanup-finalization-registry\" aoid=\"CleanupFinalizationRegistry\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cleanup-finalization-registry\">#sec-cleanup-finalization-registry</span> CleanupFinalizationRegistry ( <var>finalizationRegistry</var> )</h1>\n    <p>The abstract operation CleanupFinalizationRegistry takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). It performs the following steps when called:</p>\n    <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>finalizationRegistry</var> has [[Cells]] and [[CleanupCallback]] internal slots.</li><li>Let <var>callback</var> be <var>finalizationRegistry</var>.[[CleanupCallback]].</li><li>While <var>finalizationRegistry</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <emu-const>empty</emu-const>, an implementation may perform the following steps:<ol><li>Choose any such <var>cell</var>.</li><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Perform ?&#160;<emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>callback</var>, <emu-val>undefined</emu-val>, &#171; <var>cell</var>.[[HeldValue]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n  </emu-clause>\n"}, "sec-newpromisereactionjob": {"num": "27.2.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" oldids=\"sec-promisereactionjob\" aoid=\"NewPromiseReactionJob\"><span id=\"sec-promisereactionjob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a normal completion, set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-hosts-and-implementations": {"num": "4.2", "title": "#sec-hosts-and-implementations Hosts and Implementations", "html": "<emu-clause id=\"sec-hosts-and-implementations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosts-and-implementations\">#sec-hosts-and-implementations</span> Hosts and Implementations</h1>\n    <p>To aid integrating ECMAScript into <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments, this specification defers the definition of certain facilities (e.g., <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals.</p>\n    <!-- \"implementation\" below is not a dfn but an em to avoid excessive auto-linking. -->\n    <p>An <em id=\"implementation\">implementation</em> is an external source that further defines facilities enumerated in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> or those that are marked as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.</p>\n    <p>An <dfn id=\"implementation-defined\">implementation-defined</dfn> facility is one that defers its definition to an external source without further qualification. This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.</p>\n    <p>An <dfn id=\"implementation-approximated\">implementation-approximated</dfn> facility is one that defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as <emu-xref href=\"#sec-math.exp\"><a href=\"#sec-math.exp\"><code>Math.exp</code></a></emu-xref>, are <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>.</p>\n    <p>A <dfn id=\"host\">host</dfn> is an external source that further defines facilities listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> but does not further define other <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> facilities. In informal use, a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is often an external specification, such as WHATWG HTML (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>). In other words, facilities that are <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> are often further defined in external specifications.</p>\n    <p>A <dfn id=\"host-hook\">host hook</dfn> is an abstract operation that is defined in whole or in part by an external source. All <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> hooks must be listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>.</p>\n    <p>A <dfn id=\"host-defined\">host-defined</dfn> facility is one that defers its definition to an external source without further qualification and is listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. Implementations that are not hosts may also provide definitions for <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities.</p>\n    <p>A <dfn id=\"host-environment\">host environment</dfn> is a particular choice of definition for all <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities. A <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> typically includes objects or functions which allow obtaining input and providing output as <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n    <p>This specification follows the editorial convention of always using the most specific term. For example, if a facility is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, it should not be referred to as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n    <p>Both hosts and implementations may interface with this specification via the language types, specification types, <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, grammar productions, intrinsic objects, and intrinsic symbols defined herein.</p>\n  </emu-clause>\n\n  "}, "sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>All objects have an internal slot named [[PrivateElements]], which is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PrivateElements. This <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> represents the values of the private fields, methods, and accessors for the object. Initially, it is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref> summarizes the <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>An <dfn id=\"ordinary-object\">ordinary object</dfn> is an object that satisfies all of the following criteria:</p>\n        <ul>\n          <li>\n            For the internal methods listed in <emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref>, the object uses those defined in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Call]] internal method, it uses the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Construct]] internal method, it uses the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.\n          </li>\n        </ul>\n        <p>An <dfn id=\"exotic-object\">exotic object</dfn> is an object that is not an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</p>\n        <p>This specification recognizes different kinds of exotic objects by those objects' internal methods. An object that is behaviourally equivalent to a particular kind of <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (such as an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>), but does not have the same collection of internal methods specified for that kind, is not recognized as that kind of <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</p>\n        <p>The &#8220;Signature&#8221; column of <emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, either a normal completion that wraps a value of the return type shown in its invocation pattern, or a throw completion.</p>\n        <emu-table id=\"table-essential-internal-methods\" caption=\"Essential Internal Methods\" oldids=\"table-5\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</span>: Essential Internal Methods</figcaption><span id=\"table-5\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              </th>\n              <th>\n                Signature\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Object | Null\n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              </td>\n              <td>\n                (Object | Null) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>) <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-additional-essential-internal-methods-of-function-objects\" caption=\"Additional Essential Internal Methods of Function Objects\" oldids=\"table-6\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</span>: Additional Essential Internal Methods of Function Objects</figcaption><span id=\"table-6\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              </th>\n              <th>\n                Signature\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <em>any</em>) <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments passed to the function by a call expression. Objects that implement this internal method are <em>callable</em>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <em>any</em>, Object) <b>&#8594;</b> Object\n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> operator or a <code>super</code> call. The first argument to the internal method is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> invocation or the <code>super</code> call. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-hostmakejobcallback": {"num": "9.5.2", "title": "#sec-hostmakejobcallback HostMakeJobCallback ( callback )", "html": "<emu-clause id=\"sec-hostmakejobcallback\" aoid=\"HostMakeJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostmakejobcallback\">#sec-hostmakejobcallback</span> HostMakeJobCallback ( <var>callback</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostMakeJobCallback takes argument <var>callback</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>).</p>\n      <p>The implementation of HostMakeJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        <li>It must always return a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> whose [[Callback]] field is <var>callback</var>.</li>\n      </ul>\n      <p>The default implementation of HostMakeJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callback</var>) is <emu-val>true</emu-val>.</li><li>Return the <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> { [[Callback]]: <var>callback</var>, [[HostDefined]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostMakeJobCallback.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This is called at the time that the callback is passed to the function that is responsible for its being eventually scheduled and run. For example, <code>promise.then(thenAction)</code> calls MakeJobCallback on <code>thenAction</code> at the time of invoking <code>Promise.prototype.then</code>, not at the time of scheduling the reaction <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The term &#8220;<dfn>abrupt completion</dfn>&#8221; refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>\n      <p>Callable objects that are defined in this specification only return a normal completion or a throw completion. Returning any other kind of completion is considered an editorial error.</p>\n      <p><emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">Implementation-defined</a></emu-xref> callable objects must return either a normal completion or a throw completion.</p>\n\n      <emu-clause id=\"await\" oldids=\"await-fulfilled,await-rejected\" aoid=\"Await\"><span id=\"await-rejected\"></span><span id=\"await-fulfilled\"></span>\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>fulfilledClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>value</var>) that captures <var>asyncContext</var> and performs the following steps when called:<ol><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>fulfilledClosure</var>, 1, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Let <var>rejectedClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>reason</var>) that captures <var>asyncContext</var> and performs the following steps when called:<ol><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>rejectedClosure</var>, 1, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-jobs": {"num": "9.5", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\"><span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is <var>scriptOrModule</var>. The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">9.5.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">9.5.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">9.5.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">9.5.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-essential-internal-methods": "Table 6", "table-additional-essential-internal-methods-of-function-objects": "Table 7", "table-completion-record-fields": "Table 9"}}, "to": {"secList": ["sec-hostcalljobcallback", "sec-hostgetimportmetaproperties", "sec-host-promise-rejection-tracker", "sec-finishdynamicimport", "sec-host-cleanup-finalization-registry", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-hosthassourcetextavailable", "sec-hostfinalizeimportmeta", "sec-hostimportmoduledynamically", "sec-arraybuffer-notation", "sec-hostresolveimportedmodule", "sec-newpromiseresolvethenablejob", "sec-async-functions-abstract-operations-async-function-start", "sec-hostensurecancompilestrings", "sec-hostenqueuepromisejob", "sec-cleanup-finalization-registry", "sec-newpromisereactionjob", "sec-hosts-and-implementations", "sec-object-internal-methods-and-internal-slots", "sec-hostmakejobcallback", "sec-completion-record-specification-type", "sec-jobs"], "secData": {"sec-hostcalljobcallback": {"num": "9.5.3", "title": "#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )", "html": "<emu-clause id=\"sec-hostcalljobcallback\" aoid=\"HostCallJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostcalljobcallback\">#sec-hostcalljobcallback</span> HostCallJobCallback ( <var>jobCallback</var>, <var>V</var>, <var>argumentsList</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostCallJobCallback takes arguments <var>jobCallback</var> (a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref>), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values).</p>\n      <p>An implementation of HostCallJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must perform and return the result of <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This requirement means that hosts cannot change the [[Call]] behaviour of function objects defined in this specification.</p>\n      </div></emu-note>\n      <p>The default implementation of HostCallJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>jobCallback</var>.[[Callback]]) is <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostCallJobCallback.</p>\n    </emu-clause>\n\n    "}, "sec-hostgetimportmetaproperties": {"num": "13.3.12.1.1", "title": "#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostGetImportMetaProperties takes argument <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>An implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> with a value of a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(&#171; &#187;).</p>\n        </emu-clause>\n\n        "}, "sec-host-promise-rejection-tracker": {"num": "27.2.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostPromiseRejectionTracker takes arguments <var>promise</var> (a Promise) and <var>operation</var> (<emu-val>\"reject\"</emu-val> or <emu-val>\"handle\"</emu-val>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to track promise rejections.</p>\n        <p>An implementation of HostPromiseRejectionTracker must conform to the following requirements:</p>\n        <ul>\n          <li>It must complete normally (i.e. not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        </ul>\n        <p>The default implementation of HostPromiseRejectionTracker is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-host-cleanup-finalization-registry": {"num": "9.10.4.1", "title": "#sec-host-cleanup-finalization-registry HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )", "html": "<emu-clause id=\"sec-host-cleanup-finalization-registry\" aoid=\"HostEnqueueFinalizationRegistryCleanupJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-cleanup-finalization-registry\">#sec-host-cleanup-finalization-registry</span> HostEnqueueFinalizationRegistryCleanupJob ( <var>finalizationRegistry</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnqueueFinalizationRegistryCleanupJob takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>).</p>\n        <p>Let <var>cleanupJob</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>finalizationRegistry</var> and performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>cleanupResult</var> be <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>(<var>finalizationRegistry</var>).</li><li>If <var>cleanupResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> steps for reporting the error.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        <p>An implementation of HostEnqueueFinalizationRegistryCleanupJob schedules <var>cleanupJob</var> to be performed at some future time, if possible. It must also conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>.</p>\n      </emu-clause>\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMAScript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">throw completion</a></emu-xref> and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-runtime-semantics-methoddefinitionevaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exist outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresume\"><a href=\"#sec-asyncgeneratorresume\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresume\">#sec-asyncgeneratorresume</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-hosthassourcetextavailable": {"num": "20.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\" aoid=\"HostHasSourceTextAvailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostHasSourceTextAvailable takes argument <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to prevent the source text from being provided for <var>func</var>.</p>\n      <p>An implementation of HostHasSourceTextAvailable must conform to the following requirements:</p>\n      <ul>\n        <li>It must complete normally (i.e. not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        <li>It must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record.</li>\n      </ul>\n      <p>The default implementation of HostHasSourceTextAvailable is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>true</emu-val>).</p>\n    </emu-clause>\n  "}, "sec-hostfinalizeimportmeta": {"num": "13.3.12.1.2", "title": "#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostFinalizeImportMeta takes arguments <var>importMeta</var> (an Object) and <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>An implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>An implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            It must return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>). Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-arraybuffer-notation": {"num": "25.1.1", "title": "#sec-arraybuffer-notation Notation", "html": "<emu-clause id=\"sec-arraybuffer-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer-notation\">#sec-arraybuffer-notation</span> Notation</h1>\n      <p>The descriptions below in this section, <emu-xref href=\"#sec-atomics-object\"><a href=\"#sec-atomics-object\" class=\"excluded-xref\" excluded-id=\"sec-atomics-object\">#sec-atomics-object</a></emu-xref>, and <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\" class=\"excluded-xref\" excluded-id=\"sec-memory-model\">#sec-memory-model</a></emu-xref> use the read-modify-write modification function internal data structure.</p>\n      <p>A <dfn>read-modify-write modification function</dfn> is a mathematical function that is notationally represented as an abstract closure that takes two Lists of byte values as arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. These abstract closures satisfy all of the following properties:</p>\n      <ul>\n        <li>They perform all their algorithm steps atomically.</li>\n        <li>Their individual algorithm steps are not observable.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>To aid verifying that a read-modify-write modification function's algorithm steps constitute a pure, mathematical function, the following editorial conventions are recommended:</p>\n        <ul>\n          <li>They do not access, directly or transitively via invoked <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and abstract closures, any language or specification values except their parameters and captured values.</li>\n          <li>They do not <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">return completion</a></emu-xref> values.</li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>An implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            If it completes normally, the [[Value]] slot of the completion must contain an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-newpromiseresolvethenablejob": {"num": "27.2.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" oldids=\"sec-promiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\"><span id=\"sec-promiseresolvethenablejob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>.[[Callback]]).</li><li>If <var>getThenRealmResult</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>, let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Else, let <var>thenRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>thenRealm</var> is never <emu-val>null</emu-val>. When <var>then</var>.[[Callback]] is a revoked Proxy and no code runs, <var>thenRealm</var> is used to create error objects.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for the step below to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncFunctionBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncfunctionstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncfunctionstart-return-undefined\"><a href=\"#step-asyncfunctionstart-return-undefined\">4.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-hostensurecancompilestrings": {"num": "19.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnsureCanCompileStrings takes arguments <var>callerRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>) and <var>calleeRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n        <p>An implementation of HostEnsureCanCompileStrings must conform to the following requirements:</p>\n        <ul>\n          <li>It must propagate any <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">throw completion</a></emu-xref> to its callers.</li>\n        </ul>\n        <p>The default implementation of HostEnsureCanCompileStrings is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n      </emu-clause>\n\n      "}, "sec-hostenqueuepromisejob": {"num": "9.5.4", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnqueuePromiseJob takes arguments <var>job</var> (a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>) and <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> or <emu-val>null</emu-val>). It schedules <var>job</var> to be performed at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n\n      <p>An implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref> as well as the following:</p>\n      <ul>\n        <li>If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that execution is <emu-xref href=\"#job-preparedtoevaluatecode\"><a href=\"#job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Let <var>scriptOrModule</var> be <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() at the time HostEnqueuePromiseJob is invoked. If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that <var>scriptOrModule</var> is the <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Jobs must run in the same order as the HostEnqueuePromiseJob invocations that scheduled them.</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. If the handler is <emu-val>undefined</emu-val>, <var>realm</var> is <emu-val>null</emu-val>. For both kinds of Jobs, when <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> completes abnormally (i.e. called on a revoked Proxy), <var>realm</var> is the current <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> at the time of the <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> call. When the <var>realm</var> is <emu-val>null</emu-val>, no user ECMAScript code will be evaluated and no new ECMAScript objects (e.g. Error objects) will be created. The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses <var>realm</var> to check for the ability to run script and for the <a href=\"https://html.spec.whatwg.org/#entry\">entry</a> concept.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-cleanup-finalization-registry": {"num": "9.13", "title": "#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )", "html": "<emu-clause id=\"sec-cleanup-finalization-registry\" aoid=\"CleanupFinalizationRegistry\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cleanup-finalization-registry\">#sec-cleanup-finalization-registry</span> CleanupFinalizationRegistry ( <var>finalizationRegistry</var> )</h1>\n    <p>The abstract operation CleanupFinalizationRegistry takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). It performs the following steps when called:</p>\n    <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>finalizationRegistry</var> has [[Cells]] and [[CleanupCallback]] internal slots.</li><li>Let <var>callback</var> be <var>finalizationRegistry</var>.[[CleanupCallback]].</li><li>While <var>finalizationRegistry</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <emu-const>empty</emu-const>, an implementation may perform the following steps:<ol><li>Choose any such <var>cell</var>.</li><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Perform ?&#160;<emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>callback</var>, <emu-val>undefined</emu-val>, &#171; <var>cell</var>.[[HeldValue]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n  </emu-clause>\n"}, "sec-newpromisereactionjob": {"num": "27.2.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" oldids=\"sec-promisereactionjob\" aoid=\"NewPromiseReactionJob\"><span id=\"sec-promisereactionjob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>, set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-hosts-and-implementations": {"num": "4.2", "title": "#sec-hosts-and-implementations Hosts and Implementations", "html": "<emu-clause id=\"sec-hosts-and-implementations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosts-and-implementations\">#sec-hosts-and-implementations</span> Hosts and Implementations</h1>\n    <p>To aid integrating ECMAScript into <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments, this specification defers the definition of certain facilities (e.g., <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals.</p>\n    <!-- \"implementation\" below is not a dfn but an em to avoid excessive auto-linking. -->\n    <p>An <em id=\"implementation\">implementation</em> is an external source that further defines facilities enumerated in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> or those that are marked as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.</p>\n    <p>An <dfn id=\"implementation-defined\">implementation-defined</dfn> facility is one that defers its definition to an external source without further qualification. This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.</p>\n    <p>An <dfn id=\"implementation-approximated\">implementation-approximated</dfn> facility is one that defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as <emu-xref href=\"#sec-math.exp\"><a href=\"#sec-math.exp\"><code>Math.exp</code></a></emu-xref>, are <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>.</p>\n    <p>A <dfn id=\"host\">host</dfn> is an external source that further defines facilities listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> but does not further define other <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> facilities. In informal use, a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is often an external specification, such as WHATWG HTML (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>). In other words, facilities that are <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> are often further defined in external specifications.</p>\n    <p>A <dfn id=\"host-hook\">host hook</dfn> is an abstract operation that is defined in whole or in part by an external source. All <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> hooks must be listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> must conform to at least the following requirements:</p>\n    <ul>\n      <li>It must return either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> or a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">throw completion</a></emu-xref>.</li>\n    </ul>\n    <p>A <dfn id=\"host-defined\">host-defined</dfn> facility is one that defers its definition to an external source without further qualification and is listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. Implementations that are not hosts may also provide definitions for <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities.</p>\n    <p>A <dfn id=\"host-environment\">host environment</dfn> is a particular choice of definition for all <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities. A <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> typically includes objects or functions which allow obtaining input and providing output as <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n    <p>This specification follows the editorial convention of always using the most specific term. For example, if a facility is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, it should not be referred to as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n    <p>Both hosts and implementations may interface with this specification via the language types, specification types, <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, grammar productions, intrinsic objects, and intrinsic symbols defined herein.</p>\n  </emu-clause>\n\n  "}, "sec-object-internal-methods-and-internal-slots": {"num": "6.1.7.2", "title": "#sec-object-internal-methods-and-internal-slots Object Internal Methods and Internal Slots", "html": "<emu-clause id=\"sec-object-internal-methods-and-internal-slots\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-internal-methods-and-internal-slots\">#sec-object-internal-methods-and-internal-slots</span> Object Internal Methods and Internal Slots</h1>\n        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called <em>internal methods</em>. Each object in an ECMAScript engine is associated with a set of internal methods that defines its runtime behaviour. These internal methods are not part of the ECMAScript language. They are defined by this specification purely for expository purposes. However, each object within an implementation of ECMAScript must behave as specified by the internal methods associated with it. The exact manner in which this is accomplished is determined by the implementation.</p>\n        <p>Internal method names are polymorphic. This means that different object values may perform different algorithms when a common internal method name is invoked upon them. That actual object upon which an internal method is invoked is the &#8220;target&#8221; of the invocation. If, at runtime, the implementation of an algorithm attempts to use an internal method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        <p>Internal slots correspond to internal state that is associated with objects and used by various ECMAScript specification algorithms. Internal slots are not object properties and they are not inherited. Depending upon the specific internal slot specification, such state may consist of values of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref> or of specific ECMAScript specification type values. Unless explicitly specified otherwise, internal slots are allocated as part of the process of creating an object and may not be dynamically added to an object. Unless specified otherwise, the initial value of an internal slot is the value <emu-val>undefined</emu-val>. Various algorithms within this specification create objects that have internal slots. However, the ECMAScript language provides no direct way to associate internal slots with an object.</p>\n        <p>All objects have an internal slot named [[PrivateElements]], which is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PrivateElements. This <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> represents the values of the private fields, methods, and accessors for the object. Initially, it is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        <p>Internal methods and internal slots are identified within this specification using names enclosed in double square brackets [[ ]].</p>\n        <p><emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref> summarizes the <em>essential internal methods</em> used by this specification that are applicable to all objects created or manipulated by ECMAScript code. Every object must have algorithms for all of the essential internal methods. However, all objects do not necessarily use the same algorithms for those methods.</p>\n        <p>An <dfn id=\"ordinary-object\">ordinary object</dfn> is an object that satisfies all of the following criteria:</p>\n        <ul>\n          <li>\n            For the internal methods listed in <emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref>, the object uses those defined in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Call]] internal method, it uses the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.\n          </li>\n          <li>\n            If the object has a [[Construct]] internal method, it uses the one defined in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.\n          </li>\n        </ul>\n        <p>An <dfn id=\"exotic-object\">exotic object</dfn> is an object that is not an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</p>\n        <p>This specification recognizes different kinds of exotic objects by those objects' internal methods. An object that is behaviourally equivalent to a particular kind of <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> (such as an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> or a <emu-xref href=\"#bound-function-exotic-object\"><a href=\"#bound-function-exotic-object\">bound function exotic object</a></emu-xref>), but does not have the same collection of internal methods specified for that kind, is not recognized as that kind of <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</p>\n        <p>The &#8220;Signature&#8221; column of <emu-xref href=\"#table-essential-internal-methods\"><a href=\"#table-essential-internal-methods\" class=\"excluded-xref\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</a></emu-xref> and other similar tables describes the invocation pattern for each internal method. The invocation pattern always includes a parenthesized list of descriptive parameter names. If a parameter name is the same as an ECMAScript type name then the name describes the required type of the parameter value. If an internal method explicitly returns a value, its parameter list is followed by the symbol &#8220;&#8594;&#8221; and the type name of the returned value. The type names used in signatures refer to the types defined in clause <emu-xref href=\"#sec-ecmascript-data-types-and-values\"><a href=\"#sec-ecmascript-data-types-and-values\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-data-types-and-values\">#sec-ecmascript-data-types-and-values</a></emu-xref> augmented by the following additional names. &#8220;<em>any</em>&#8221; means the value may be any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</p>\n        <p>In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>\n        <p>An internal method implicitly returns a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, either a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> that wraps a value of the return type shown in its invocation pattern, or a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">throw completion</a></emu-xref>.</p>\n        <emu-table id=\"table-essential-internal-methods\" caption=\"Essential Internal Methods\" oldids=\"table-5\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-essential-internal-methods\">#table-essential-internal-methods</span>: Essential Internal Methods</figcaption><span id=\"table-5\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              </th>\n              <th>\n                Signature\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[GetPrototypeOf]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Object | Null\n              </td>\n              <td>\n                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetPrototypeOf]]\n              </td>\n              <td>\n                (Object | Null) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IsExtensible]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Determine whether it is permitted to add additional properties to this object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PreventExtensions]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GetOwnProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Undefined | <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>\n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DefineOwnProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>PropertyDescriptor</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasProperty]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Return a Boolean value indicating whether this object already has either an own or inherited property whose key is <var>propertyKey</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>Receiver</var>) <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Delete]]\n              </td>\n              <td>\n                (<var>propertyKey</var>) <b>&#8594;</b> Boolean\n              </td>\n              <td>\n                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[OwnPropertyKeys]]\n              </td>\n              <td>\n                ( ) <b>&#8594;</b> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of propertyKey\n              </td>\n              <td>\n                Return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all of the own property keys for the object.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p><emu-xref href=\"#table-additional-essential-internal-methods-of-function-objects\"><a href=\"#table-additional-essential-internal-methods-of-function-objects\" class=\"excluded-xref\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A <dfn id=\"function-object\">function object</dfn> is an object that supports the [[Call]] internal method. A <dfn id=\"constructor\">constructor</dfn> is an object that supports the [[Construct]] internal method. Every object that supports [[Construct]] must support [[Call]]; that is, every <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. Therefore, a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may also be referred to as a <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function</em> or <em><emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref></em>.</p>\n        <emu-table id=\"table-additional-essential-internal-methods-of-function-objects\" caption=\"Additional Essential Internal Methods of Function Objects\" oldids=\"table-6\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-essential-internal-methods-of-function-objects\">#table-additional-essential-internal-methods-of-function-objects</span>: Additional Essential Internal Methods of Function Objects</figcaption><span id=\"table-6\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Method\n              </th>\n              <th>\n                Signature\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Call]]\n              </td>\n              <td>\n                (<em>any</em>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <em>any</em>) <b>&#8594;</b> <em>any</em>\n              </td>\n              <td>\n                Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a <emu-val>this</emu-val> value and a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments passed to the function by a call expression. Objects that implement this internal method are <em>callable</em>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Construct]]\n              </td>\n              <td>\n                (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <em>any</em>, Object) <b>&#8594;</b> Object\n              </td>\n              <td>\n                Creates an object. Invoked via the <code>new</code> operator or a <code>super</code> call. The first argument to the internal method is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> invocation or the <code>super</code> call. The second argument is the object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called <em>constructors</em>. A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not necessarily a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and such non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function objects do not have a [[Construct]] internal method.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>. If any specified use of an internal method of an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>\n      </emu-clause>\n\n      "}, "sec-hostmakejobcallback": {"num": "9.5.2", "title": "#sec-hostmakejobcallback HostMakeJobCallback ( callback )", "html": "<emu-clause id=\"sec-hostmakejobcallback\" aoid=\"HostMakeJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostmakejobcallback\">#sec-hostmakejobcallback</span> HostMakeJobCallback ( <var>callback</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostMakeJobCallback takes argument <var>callback</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>).</p>\n      <p>An implementation of HostMakeJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must complete normally with a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> whose [[Callback]] field is <var>callback</var>.</li>\n      </ul>\n      <p>The default implementation of HostMakeJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callback</var>) is <emu-val>true</emu-val>.</li><li>Return the <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> { [[Callback]]: <var>callback</var>, [[HostDefined]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostMakeJobCallback.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This is called at the time that the callback is passed to the function that is responsible for its being eventually scheduled and run. For example, <code>promise.then(thenAction)</code> calls MakeJobCallback on <code>thenAction</code> at the time of invoking <code>Promise.prototype.then</code>, not at the time of scheduling the reaction <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-completion-record-specification-type": {"num": "6.2.3", "title": "#sec-completion-record-specification-type The Completion Record Specification Type", "html": "<emu-clause id=\"sec-completion-record-specification-type\" aoid=\"Completion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completion-record-specification-type\">#sec-completion-record-specification-type</span> The Completion Record Specification Type</h1>\n      <p>The Completion type is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>\n      <p>Values of the Completion type are <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> values whose fields are defined by <emu-xref href=\"#table-completion-record-fields\"><a href=\"#table-completion-record-fields\" class=\"excluded-xref\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</a></emu-xref>. Such values are referred to as <dfn>Completion Record</dfn>s.</p>\n      <emu-table id=\"table-completion-record-fields\" caption=\"Completion Record Fields\" oldids=\"table-8\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-completion-record-fields\">#table-completion-record-fields</span>: <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> Fields</figcaption><span id=\"table-8\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Type]]\n            </td>\n            <td>\n              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>\n            </td>\n            <td>\n              The type of completion that occurred.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Value]]\n            </td>\n            <td>\n              any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The value that was produced.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[Target]]\n            </td>\n            <td>\n              any ECMAScript string or <emu-const>empty</emu-const>\n            </td>\n            <td>\n              The target label for directed control transfers.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The following shorthand terms are sometimes used to refer to completions.</p>\n      <ul>\n        <li><dfn>normal completion</dfn> refers to any completion with a [[Type]] value of <emu-const>normal</emu-const>.</li>\n        <li><dfn>break completion</dfn> refers to any completion with a [[Type]] value of <emu-const>break</emu-const>.</li>\n        <li><dfn>continue completion</dfn> refers to any completion with a [[Type]] value of <emu-const>continue</emu-const>.</li>\n        <li><dfn>return completion</dfn> refers to any completion with a [[Type]] value of <emu-const>return</emu-const>.</li>\n        <li><dfn>throw completion</dfn> refers to any completion with a [[Type]] value of <emu-const>throw</emu-const>.</li>\n        <li><dfn>abrupt completion</dfn> refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</li>\n      </ul>\n      <p>Callable objects that are defined in this specification only return a normal completion or a throw completion. Returning any other kind of completion is considered an editorial error.</p>\n      <p><emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">Implementation-defined</a></emu-xref> callable objects must return either a normal completion or a throw completion.</p>\n\n      <emu-clause id=\"await\" oldids=\"await-fulfilled,await-rejected\" aoid=\"Await\"><span id=\"await-rejected\"></span><span id=\"await-fulfilled\"></span>\n        <h1><span class=\"secnum\">6.2.3.1</span> Await</h1>\n\n        <p>Algorithm steps that say</p>\n\n        <emu-alg><ol><li>Let <var>completion</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n        <p>mean the same thing as:</p>\n\n        <emu-alg><ol><li>Let <var>asyncContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li>Let <var>fulfilledClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>value</var>) that captures <var>asyncContext</var> and performs the following steps when called:<ol><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>fulfilledClosure</var>, 1, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Let <var>rejectedClosure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>reason</var>) that captures <var>asyncContext</var> and performs the following steps when called:<ol><li>Let <var>prevContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Suspend <var>prevContext</var>.</li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var> using <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>reason</var>) as the result of the operation that suspended it.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we reach this step, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>prevContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>rejectedClosure</var>, 1, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>completion</var>, the following steps of the algorithm that invoked <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> will be performed, with <var>completion</var> available.</li><li>Return.</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>asyncContext</var>.</li></ol></emu-alg>\n\n        <p>where all aliases in the above steps, with the exception of <var>completion</var>, are ephemeral and visible only in the steps pertaining to Await.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Await can be combined with the <code>?</code> and <code>!</code> prefixes, so that for example</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n\n          <p>means the same thing as:</p>\n\n          <emu-alg><ol><li>Let <var>result</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </div></emu-note>\n      </emu-clause>\n\n      <div id=\"excluded-sec-normalcompletion\"><h1><span class=\"secnum\">6.2.3.2</span>#sec-normalcompletion NormalCompletion</h1>...</div><div id=\"excluded-sec-throwcompletion\"><h1><span class=\"secnum\">6.2.3.3</span>#sec-throwcompletion ThrowCompletion</h1>...</div><div id=\"excluded-sec-updateempty\"><h1><span class=\"secnum\">6.2.3.4</span>#sec-updateempty UpdateEmpty ( completionRecord, value )</h1>...</div></emu-clause>\n\n    "}, "sec-jobs": {"num": "9.5", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\"><span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is <var>scriptOrModule</var>. The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">9.5.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">9.5.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">9.5.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">9.5.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-essential-internal-methods": "Table 6", "table-additional-essential-internal-methods-of-function-objects": "Table 7", "table-completion-record-fields": "Table 9"}}}