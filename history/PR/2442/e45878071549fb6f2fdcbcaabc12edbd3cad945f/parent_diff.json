{"from": {"secList": ["sec-hostimportmoduledynamically", "sec-hostmakejobcallback", "sec-hostensurecancompilestrings", "sec-hosthassourcetextavailable", "sec-host-cleanup-finalization-registry", "sec-host-promise-rejection-tracker", "sec-hostenqueuepromisejob", "sec-hosts-and-implementations", "sec-hostcalljobcallback", "sec-hostresolveimportedmodule", "sec-hostfinalizeimportmeta", "sec-hostgetimportmetaproperties"], "secData": {"sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-hostmakejobcallback": {"num": "9.5.2", "title": "#sec-hostmakejobcallback HostMakeJobCallback ( callback )", "html": "<emu-clause id=\"sec-hostmakejobcallback\" aoid=\"HostMakeJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostmakejobcallback\">#sec-hostmakejobcallback</span> HostMakeJobCallback ( <var>callback</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostMakeJobCallback takes argument <var>callback</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>).</p>\n      <p>The implementation of HostMakeJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        <li>It must always return a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> whose [[Callback]] field is <var>callback</var>.</li>\n      </ul>\n      <p>The default implementation of HostMakeJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callback</var>) is <emu-val>true</emu-val>.</li><li>Return the <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> { [[Callback]]: <var>callback</var>, [[HostDefined]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostMakeJobCallback.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This is called at the time that the callback is passed to the function that is responsible for its being eventually scheduled and run. For example, <code>promise.then(thenAction)</code> calls MakeJobCallback on <code>thenAction</code> at the time of invoking <code>Promise.prototype.then</code>, not at the time of scheduling the reaction <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostensurecancompilestrings": {"num": "19.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnsureCanCompileStrings takes arguments <var>callerRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>) and <var>calleeRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n        <p>An implementation of HostEnsureCanCompileStrings may complete normally or abruptly. Any abrupt completions will be propagated to its callers. The default implementation of HostEnsureCanCompileStrings is to unconditionally return an empty normal completion.</p>\n      </emu-clause>\n\n      "}, "sec-hosthassourcetextavailable": {"num": "20.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\" aoid=\"HostHasSourceTextAvailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostHasSourceTextAvailable takes argument <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to prevent the source text from being provided for <var>func</var>.</p>\n      <p>An implementation of HostHasSourceTextAvailable must complete normally in all cases. This operation must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record. The default implementation of HostHasSourceTextAvailable is to unconditionally return a normal completion with a value of <emu-val>true</emu-val>.</p>\n    </emu-clause>\n  "}, "sec-host-cleanup-finalization-registry": {"num": "9.10.4.1", "title": "#sec-host-cleanup-finalization-registry HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )", "html": "<emu-clause id=\"sec-host-cleanup-finalization-registry\" aoid=\"HostEnqueueFinalizationRegistryCleanupJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-cleanup-finalization-registry\">#sec-host-cleanup-finalization-registry</span> HostEnqueueFinalizationRegistryCleanupJob ( <var>finalizationRegistry</var> )</h1>\n        <p>The abstract operation HostEnqueueFinalizationRegistryCleanupJob takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). HostEnqueueFinalizationRegistryCleanupJob is an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> abstract operation that is expected to call <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>(<var>finalizationRegistry</var>) at some point in the future, if possible. The <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>'s responsibility is to make this call at a time which does not interrupt synchronous ECMAScript code execution.</p>\n      </emu-clause>\n    "}, "sec-host-promise-rejection-tracker": {"num": "27.2.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostPromiseRejectionTracker takes arguments <var>promise</var> (a Promise) and <var>operation</var> (<emu-val>\"reject\"</emu-val> or <emu-val>\"handle\"</emu-val>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to track promise rejections.</p>\n        <p>An implementation of HostPromiseRejectionTracker must complete normally in all cases. The default implementation of HostPromiseRejectionTracker is to unconditionally return an empty normal completion.</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-hostenqueuepromisejob": {"num": "9.5.4", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnqueuePromiseJob takes arguments <var>job</var> (a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>) and <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> or <emu-val>null</emu-val>). It schedules <var>job</var> to be performed at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n\n      <p>The implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref> as well as the following:</p>\n      <ul>\n        <li>If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that execution is <emu-xref href=\"#job-preparedtoevaluatecode\"><a href=\"#job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Let <var>scriptOrModule</var> be <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() at the time HostEnqueuePromiseJob is invoked. If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that <var>scriptOrModule</var> is the <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Jobs must run in the same order as the HostEnqueuePromiseJob invocations that scheduled them.</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. If the handler is <emu-val>undefined</emu-val>, <var>realm</var> is <emu-val>null</emu-val>. For both kinds of Jobs, when <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> completes abnormally (i.e. called on a revoked Proxy), <var>realm</var> is the current <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> at the time of the <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> call. When the <var>realm</var> is <emu-val>null</emu-val>, no user ECMAScript code will be evaluated and no new ECMAScript objects (e.g. Error objects) will be created. The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses <var>realm</var> to check for the ability to run script and for the <a href=\"https://html.spec.whatwg.org/#entry\">entry</a> concept.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-hosts-and-implementations": {"num": "4.2", "title": "#sec-hosts-and-implementations Hosts and Implementations", "html": "<emu-clause id=\"sec-hosts-and-implementations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosts-and-implementations\">#sec-hosts-and-implementations</span> Hosts and Implementations</h1>\n    <p>To aid integrating ECMAScript into <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments, this specification defers the definition of certain facilities (e.g., <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals.</p>\n    <!-- \"implementation\" below is not a dfn but an em to avoid excessive auto-linking. -->\n    <p>An <em id=\"implementation\">implementation</em> is an external source that further defines facilities enumerated in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> or those that are marked as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.</p>\n    <p>An <dfn id=\"implementation-defined\">implementation-defined</dfn> facility is one that defers its definition to an external source without further qualification. This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.</p>\n    <p>An <dfn id=\"implementation-approximated\">implementation-approximated</dfn> facility is one that defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as <emu-xref href=\"#sec-math.exp\"><a href=\"#sec-math.exp\"><code>Math.exp</code></a></emu-xref>, are <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>.</p>\n    <p>A <dfn id=\"host\">host</dfn> is an external source that further defines facilities listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> but does not further define other <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> facilities. In informal use, a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is often an external specification, such as WHATWG HTML (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>). In other words, facilities that are <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> are often further defined in external specifications.</p>\n    <p>A <dfn id=\"host-hook\">host hook</dfn> is an abstract operation that is defined in whole or in part by an external source. All <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> hooks must be listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>.</p>\n    <p>A <dfn id=\"host-defined\">host-defined</dfn> facility is one that defers its definition to an external source without further qualification and is listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. Implementations that are not hosts may also provide definitions for <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities.</p>\n    <p>A <dfn id=\"host-environment\">host environment</dfn> is a particular choice of definition for all <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities. A <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> typically includes objects or functions which allow obtaining input and providing output as <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n    <p>This specification follows the editorial convention of always using the most specific term. For example, if a facility is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, it should not be referred to as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n    <p>Both hosts and implementations may interface with this specification via the language types, specification types, <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, grammar productions, intrinsic objects, and intrinsic symbols defined herein.</p>\n  </emu-clause>\n\n  "}, "sec-hostcalljobcallback": {"num": "9.5.3", "title": "#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )", "html": "<emu-clause id=\"sec-hostcalljobcallback\" aoid=\"HostCallJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostcalljobcallback\">#sec-hostcalljobcallback</span> HostCallJobCallback ( <var>jobCallback</var>, <var>V</var>, <var>argumentsList</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostCallJobCallback takes arguments <var>jobCallback</var> (a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref>), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values).</p>\n      <p>The implementation of HostCallJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must always perform and return the result of <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This requirement means that hosts cannot change the [[Call]] behaviour of function objects defined in this specification.</p>\n      </div></emu-note>\n      <p>The default implementation of HostCallJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>jobCallback</var>.[[Callback]]) is <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostCallJobCallback.</p>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-hostfinalizeimportmeta": {"num": "13.3.12.1.2", "title": "#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostFinalizeImportMeta takes arguments <var>importMeta</var> (an Object) and <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>The implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-hostgetimportmetaproperties": {"num": "13.3.12.1.1", "title": "#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostGetImportMetaProperties takes argument <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>The implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n            <li>It must always complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-hostimportmoduledynamically", "sec-hostmakejobcallback", "sec-hostensurecancompilestrings", "sec-hosthassourcetextavailable", "sec-host-cleanup-finalization-registry", "sec-host-promise-rejection-tracker", "sec-hostenqueuepromisejob", "sec-hosts-and-implementations", "sec-hostcalljobcallback", "sec-hostresolveimportedmodule", "sec-hostfinalizeimportmeta", "sec-hostgetimportmetaproperties"], "secData": {"sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>An implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            It must return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>). Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-hostmakejobcallback": {"num": "9.5.2", "title": "#sec-hostmakejobcallback HostMakeJobCallback ( callback )", "html": "<emu-clause id=\"sec-hostmakejobcallback\" aoid=\"HostMakeJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostmakejobcallback\">#sec-hostmakejobcallback</span> HostMakeJobCallback ( <var>callback</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostMakeJobCallback takes argument <var>callback</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>).</p>\n      <p>An implementation of HostMakeJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must complete normally with a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> whose [[Callback]] field is <var>callback</var>.</li>\n      </ul>\n      <p>The default implementation of HostMakeJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>callback</var>) is <emu-val>true</emu-val>.</li><li>Return the <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> { [[Callback]]: <var>callback</var>, [[HostDefined]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostMakeJobCallback.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This is called at the time that the callback is passed to the function that is responsible for its being eventually scheduled and run. For example, <code>promise.then(thenAction)</code> calls MakeJobCallback on <code>thenAction</code> at the time of invoking <code>Promise.prototype.then</code>, not at the time of scheduling the reaction <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-hostensurecancompilestrings": {"num": "19.2.1.2", "title": "#sec-hostensurecancompilestrings HostEnsureCanCompileStrings ( callerRealm, calleeRealm )", "html": "<emu-clause id=\"sec-hostensurecancompilestrings\" aoid=\"HostEnsureCanCompileStrings\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostensurecancompilestrings\">#sec-hostensurecancompilestrings</span> HostEnsureCanCompileStrings ( <var>callerRealm</var>, <var>calleeRealm</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnsureCanCompileStrings takes arguments <var>callerRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>) and <var>calleeRealm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to block certain ECMAScript functions which allow developers to compile strings into ECMAScript code.</p>\n        <p>An implementation of HostEnsureCanCompileStrings must conform to the following requirements:</p>\n        <ul>\n          <li>It must propagate throw completions to its callers.</li>\n        </ul>\n        <p>The default implementation of HostEnsureCanCompileStrings is to unconditionally return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n      </emu-clause>\n\n      "}, "sec-hosthassourcetextavailable": {"num": "20.2.5", "title": "#sec-hosthassourcetextavailable HostHasSourceTextAvailable ( func )", "html": "<emu-clause id=\"sec-hosthassourcetextavailable\" aoid=\"HostHasSourceTextAvailable\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosthassourcetextavailable\">#sec-hosthassourcetextavailable</span> HostHasSourceTextAvailable ( <var>func</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostHasSourceTextAvailable takes argument <var>func</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to prevent the source text from being provided for <var>func</var>.</p>\n      <p>An implementation of HostHasSourceTextAvailable must conform to the following requirements:</p>\n      <ul>\n        <li>It must complete normally (i.e. not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        <li>It must be deterministic with respect to its parameters. Each time it is called with a specific <var>func</var> as its argument, it must return the same completion record.</li>\n      </ul>\n      <p>The default implementation of HostHasSourceTextAvailable is to unconditionally return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>true</emu-val>).</p>\n    </emu-clause>\n  "}, "sec-host-cleanup-finalization-registry": {"num": "9.10.4.1", "title": "#sec-host-cleanup-finalization-registry HostEnqueueFinalizationRegistryCleanupJob ( finalizationRegistry )", "html": "<emu-clause id=\"sec-host-cleanup-finalization-registry\" aoid=\"HostEnqueueFinalizationRegistryCleanupJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-cleanup-finalization-registry\">#sec-host-cleanup-finalization-registry</span> HostEnqueueFinalizationRegistryCleanupJob ( <var>finalizationRegistry</var> )</h1>\n        <p>The abstract operation HostEnqueueFinalizationRegistryCleanupJob takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). HostEnqueueFinalizationRegistryCleanupJob is an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> abstract operation that is expected to call <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>(<var>finalizationRegistry</var>) at some point in the future, if possible.</p>\n        <p>An implementation of HostEnqueueFinalizationRegistryCleanupJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref>.</p>\n      </emu-clause>\n    "}, "sec-host-promise-rejection-tracker": {"num": "27.2.1.9", "title": "#sec-host-promise-rejection-tracker HostPromiseRejectionTracker ( promise, operation )", "html": "<emu-clause id=\"sec-host-promise-rejection-tracker\" aoid=\"HostPromiseRejectionTracker\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-promise-rejection-tracker\">#sec-host-promise-rejection-tracker</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostPromiseRejectionTracker takes arguments <var>promise</var> (a Promise) and <var>operation</var> (<emu-val>\"reject\"</emu-val> or <emu-val>\"handle\"</emu-val>). It allows <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments to track promise rejections.</p>\n        <p>An implementation of HostPromiseRejectionTracker must conform to the following requirements:</p>\n        <ul>\n          <li>It must complete normally (i.e. not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n        </ul>\n        <p>The default implementation of HostPromiseRejectionTracker is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>HostPromiseRejectionTracker is called in two scenarios:</p>\n\n          <ul>\n            <li>When a promise is rejected without any handlers, it is called with its <var>operation</var> argument set to <emu-val>\"reject\"</emu-val>.</li>\n            <li>When a handler is added to a rejected promise for the first time, it is called with its <var>operation</var> argument set to <emu-val>\"handle\"</emu-val>.</li>\n          </ul>\n\n          <p>A typical implementation of HostPromiseRejectionTracker might try to notify developers of unhandled rejections, while also being careful to notify them if such previous notifications are later invalidated by new handlers being attached.</p>\n        </div></emu-note>\n\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>If <var>operation</var> is <emu-val>\"handle\"</emu-val>, an implementation should not hold a reference to <var>promise</var> in a way that would interfere with garbage collection. An implementation may hold a reference to <var>promise</var> if <var>operation</var> is <emu-val>\"reject\"</emu-val>, since it is expected that rejections will be rare and not on hot code paths.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-hostenqueuepromisejob": {"num": "9.5.4", "title": "#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )", "html": "<emu-clause id=\"sec-hostenqueuepromisejob\" aoid=\"HostEnqueuePromiseJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostenqueuepromisejob\">#sec-hostenqueuepromisejob</span> HostEnqueuePromiseJob ( <var>job</var>, <var>realm</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostEnqueuePromiseJob takes arguments <var>job</var> (a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>) and <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> or <emu-val>null</emu-val>). It schedules <var>job</var> to be performed at some future time. The Abstract Closures used with this algorithm are intended to be related to the handling of Promises, or otherwise, to be scheduled with equal priority to Promise handling operations.</p>\n\n      <p>An implementation of HostEnqueuePromiseJob must conform to the requirements in <emu-xref href=\"#sec-jobs\"><a href=\"#sec-jobs\" class=\"excluded-xref\" excluded-id=\"sec-jobs\">#sec-jobs</a></emu-xref> as well as the following:</p>\n      <ul>\n        <li>If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that execution is <emu-xref href=\"#job-preparedtoevaluatecode\"><a href=\"#job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Let <var>scriptOrModule</var> be <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() at the time HostEnqueuePromiseJob is invoked. If <var>realm</var> is not <emu-val>null</emu-val>, each time <var>job</var> is invoked the implementation must perform <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> steps such that <var>scriptOrModule</var> is the <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time of <var>job</var>'s invocation.</li>\n        <li>Jobs must run in the same order as the HostEnqueuePromiseJob invocations that scheduled them.</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the <var>then</var> <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The <var>realm</var> for Jobs returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref> is usually the result of calling <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> on the handler if the handler is not <emu-val>undefined</emu-val>. If the handler is <emu-val>undefined</emu-val>, <var>realm</var> is <emu-val>null</emu-val>. For both kinds of Jobs, when <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> completes abnormally (i.e. called on a revoked Proxy), <var>realm</var> is the current <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> at the time of the <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref> call. When the <var>realm</var> is <emu-val>null</emu-val>, no user ECMAScript code will be evaluated and no new ECMAScript objects (e.g. Error objects) will be created. The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses <var>realm</var> to check for the ability to run script and for the <a href=\"https://html.spec.whatwg.org/#entry\">entry</a> concept.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-hosts-and-implementations": {"num": "4.2", "title": "#sec-hosts-and-implementations Hosts and Implementations", "html": "<emu-clause id=\"sec-hosts-and-implementations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hosts-and-implementations\">#sec-hosts-and-implementations</span> Hosts and Implementations</h1>\n    <p>To aid integrating ECMAScript into <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments, this specification defers the definition of certain facilities (e.g., <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals.</p>\n    <!-- \"implementation\" below is not a dfn but an em to avoid excessive auto-linking. -->\n    <p>An <em id=\"implementation\">implementation</em> is an external source that further defines facilities enumerated in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> or those that are marked as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.</p>\n    <p>An <dfn id=\"implementation-defined\">implementation-defined</dfn> facility is one that defers its definition to an external source without further qualification. This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.</p>\n    <p>An <dfn id=\"implementation-approximated\">implementation-approximated</dfn> facility is one that defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as <emu-xref href=\"#sec-math.exp\"><a href=\"#sec-math.exp\"><code>Math.exp</code></a></emu-xref>, are <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>.</p>\n    <p>A <dfn id=\"host\">host</dfn> is an external source that further defines facilities listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref> but does not further define other <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> or <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> facilities. In informal use, a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is often an external specification, such as WHATWG HTML (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>). In other words, facilities that are <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> are often further defined in external specifications.</p>\n    <p>A <dfn id=\"host-hook\">host hook</dfn> is an abstract operation that is defined in whole or in part by an external source. All <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> hooks must be listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. A <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> must conform to at least the following requirements:</p>\n    <ul>\n      <li>It must return either a normal completion or a throw completion.</li>\n    </ul>\n    <p>A <dfn id=\"host-defined\">host-defined</dfn> facility is one that defers its definition to an external source without further qualification and is listed in Annex <emu-xref href=\"#sec-host-layering-points\"><a href=\"#sec-host-layering-points\" class=\"excluded-xref\" excluded-id=\"sec-host-layering-points\">#sec-host-layering-points</a></emu-xref>. Implementations that are not hosts may also provide definitions for <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities.</p>\n    <p>A <dfn id=\"host-environment\">host environment</dfn> is a particular choice of definition for all <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> facilities. A <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> typically includes objects or functions which allow obtaining input and providing output as <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</p>\n    <p>This specification follows the editorial convention of always using the most specific term. For example, if a facility is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, it should not be referred to as <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n    <p>Both hosts and implementations may interface with this specification via the language types, specification types, <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, grammar productions, intrinsic objects, and intrinsic symbols defined herein.</p>\n  </emu-clause>\n\n  "}, "sec-hostcalljobcallback": {"num": "9.5.3", "title": "#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )", "html": "<emu-clause id=\"sec-hostcalljobcallback\" aoid=\"HostCallJobCallback\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostcalljobcallback\">#sec-hostcalljobcallback</span> HostCallJobCallback ( <var>jobCallback</var>, <var>V</var>, <var>argumentsList</var> )</h1>\n      <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostCallJobCallback takes arguments <var>jobCallback</var> (a <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref>), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values).</p>\n      <p>An implementation of HostCallJobCallback must conform to the following requirements:</p>\n      <ul>\n        <li>It must perform and return the result of <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This requirement means that hosts cannot change the [[Call]] behaviour of function objects defined in this specification.</p>\n      </div></emu-note>\n      <p>The default implementation of HostCallJobCallback performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>jobCallback</var>.[[Callback]]) is <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>jobCallback</var>.[[Callback]], <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n      <p>ECMAScript hosts that are not web browsers must use the default implementation of HostCallJobCallback.</p>\n    </emu-clause>\n\n    "}, "sec-hostresolveimportedmodule": {"num": "16.2.1.7", "title": "#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostResolveImportedModule takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>) and <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String). It provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if the resolution is being performed in the context of an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression and there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> at the time the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>An implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            If it completes normally, it must return an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}, "sec-hostfinalizeimportmeta": {"num": "13.3.12.1.2", "title": "#sec-hostfinalizeimportmeta HostFinalizeImportMeta ( importMeta, moduleRecord )", "html": "<emu-clause id=\"sec-hostfinalizeimportmeta\" aoid=\"HostFinalizeImportMeta\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostfinalizeimportmeta\">#sec-hostfinalizeimportmeta</span> HostFinalizeImportMeta ( <var>importMeta</var>, <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostFinalizeImportMeta takes arguments <var>importMeta</var> (an Object) and <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to perform any extraordinary operations to prepare the object returned from <code>import.meta</code>.</p>\n\n          <p>Most hosts will be able to simply define <emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>, and leave HostFinalizeImportMeta with its default behaviour. However, HostFinalizeImportMeta provides an \"escape hatch\" for hosts which need to directly manipulate the object before it is exposed to ECMAScript code.</p>\n\n          <p>An implementation of HostFinalizeImportMeta must conform to the following requirements:</p>\n          <ul>\n            <li>It must complete normally (i.e., not return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>).</li>\n          </ul>\n\n          <p>The default implementation of HostFinalizeImportMeta is to return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</p>\n        </emu-clause>\n      "}, "sec-hostgetimportmetaproperties": {"num": "13.3.12.1.1", "title": "#sec-hostgetimportmetaproperties HostGetImportMetaProperties ( moduleRecord )", "html": "<emu-clause id=\"sec-hostgetimportmetaproperties\" aoid=\"HostGetImportMetaProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostgetimportmetaproperties\">#sec-hostgetimportmetaproperties</span> HostGetImportMetaProperties ( <var>moduleRecord</var> )</h1>\n          <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostGetImportMetaProperties takes argument <var>moduleRecord</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It allows hosts to provide property keys and values for the object returned from <code>import.meta</code>.</p>\n\n          <p>An implementation of HostGetImportMetaProperties must conform to the following requirements:</p>\n          <ul>\n            <li>It must return a normal completion of a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose values are all Records with two fields, [[Key]] and [[Value]].</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Key]] field must be a property key, i.e., <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref> must return <emu-val>true</emu-val> when applied to it.</li>\n            <li>Each such <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>'s [[Value]] field must be an ECMAScript value.</li>\n          </ul>\n\n          <p>The default implementation of HostGetImportMetaProperties is to return a normal completion of a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n        </emu-clause>\n\n        "}}, "figData": {}}}