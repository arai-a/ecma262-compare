{"from": {"secList": ["sec-validateandapplypropertydescriptor", "sec-InnerModuleLinking"], "secData": {"sec-validateandapplypropertydescriptor": {"num": "10.1.6.3", "title": "#sec-validateandapplypropertydescriptor ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )", "html": "<emu-clause id=\"sec-validateandapplypropertydescriptor\" type=\"abstract operation\" aoid=\"ValidateAndApplyPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateandapplypropertydescriptor\">#sec-validateandapplypropertydescriptor</span> ValidateAndApplyPropertyDescriptor ( <var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var> )</h1>\n        <p>The abstract operation ValidateAndApplyPropertyDescriptor takes arguments <var>O</var> (an Object or <emu-val>undefined</emu-val>), <var>P</var> (a property key), <var>extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>).</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <emu-val>undefined</emu-val> is passed as <var>O</var>, only validation is performed and no object updates are performed.</p>\n        </div></emu-note>\n        <p>It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>O</var> is not <emu-val>undefined</emu-val>, then <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>current</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>extensible</var> is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If every field in <var>Desc</var> is absent, return <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Configurable]] is present and its value is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Enumerable]] is present and !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Enumerable]], <var>current</var>.[[Enumerable]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>NOTE: No further validation is required.</li></ol></li><li>Else if !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>), !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>)) is <emu-val>false</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li><li>Else,<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li></ol></li><li>Else if <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>current</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Writable]] is present and <var>Desc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Value]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Value]], <var>current</var>.[[Value]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) and !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Set]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Set]], <var>current</var>.[[Set]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Get]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Get]], <var>current</var>.[[Get]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, then<ol><li>For each field of <var>Desc</var> that is present, set the corresponding attribute of the property named <var>P</var> of object <var>O</var> to the value of the field.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-InnerModuleLinking": {"num": "16.2.1.5.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" type=\"abstract operation\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating-async</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating-async</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.InitializeEnvironment().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}}, "figData": {"table-default-attribute-values": "Table 5"}}, "to": {"secList": ["sec-validateandapplypropertydescriptor", "sec-InnerModuleLinking"], "secData": {"sec-validateandapplypropertydescriptor": {"num": "10.1.6.3", "title": "#sec-validateandapplypropertydescriptor ValidateAndApplyPropertyDescriptor ( O, P, extensible, Desc, current )", "html": "<emu-clause id=\"sec-validateandapplypropertydescriptor\" type=\"abstract operation\" aoid=\"ValidateAndApplyPropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateandapplypropertydescriptor\">#sec-validateandapplypropertydescriptor</span> ValidateAndApplyPropertyDescriptor ( <var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var> )</h1>\n        <p>The abstract operation ValidateAndApplyPropertyDescriptor takes arguments <var>O</var> (an Object or <emu-val>undefined</emu-val>), <var>P</var> (a property key or <emu-val>undefined</emu-val>), <var>extensible</var> (a Boolean), <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>), and <var>current</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>).</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <emu-val>undefined</emu-val> is passed as <var>O</var>, only validation is performed and no object updates are performed.</p>\n        </div></emu-note>\n        <p>It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>O</var> is not <emu-val>undefined</emu-val>, then <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>current</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>extensible</var> is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> named <var>P</var> of object <var>O</var> whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default value</a></emu-xref>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If every field in <var>Desc</var> is absent, return <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Configurable]] is present and its value is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Enumerable]] is present and !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Enumerable]], <var>current</var>.[[Enumerable]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>NOTE: No further validation is required.</li></ol></li><li>Else if !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>), !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>)) is <emu-val>false</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li><li>Else,<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var> from an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. Preserve the existing values of the converted property's [[Configurable]] and [[Enumerable]] attributes and set the rest of the property's attributes to their <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\">default values</a></emu-xref>.</li></ol></li></ol></li><li>Else if <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>, then<ol><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>current</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Writable]] is present and <var>Desc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Value]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Value]], <var>current</var>.[[Value]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) and !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>.</li><li>If <var>current</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>Desc</var>.[[Set]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Set]], <var>current</var>.[[Set]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var>.[[Get]] is present and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>Desc</var>.[[Get]], <var>current</var>.[[Get]]) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, then<ol><li>For each field of <var>Desc</var> that is present, set the corresponding attribute of the property named <var>P</var> of object <var>O</var> to the value of the field.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-InnerModuleLinking": {"num": "16.2.1.5.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" type=\"abstract operation\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating-async</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating-async</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.InitializeEnvironment().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}}, "figData": {"table-default-attribute-values": "Table 5"}}}