{"from": {"secList": ["sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-mathematical-operations", "sec-IsHTMLDDA-internal-slot-typeof", "sec-function-properties-of-the-math-object", "sec-example-cyclic-module-record-graphs"], "secData": {"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMASCript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-runtime-semantics-methoddefinitionevaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to these kinds of numeric values:</p>\n      <ul>\n        <li><em>Mathematical values</em>: Arbitrary real numbers, used as the default numeric type.</li>\n        <li><em>Extended mathematical values</em>: Mathematical values together with +&#8734; and -&#8734;.</li>\n        <li><em>Numbers</em>: <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double-precision floating point values.</li>\n        <li><em>BigInts</em>: ECMAScript values representing arbritary integers in a one-to-one correspondence.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values are distinguished among different numeric kinds using subscript suffixes. The subscript <sub>&#120125;</sub> refers to Numbers, and the subscript <sub>&#8484;</sub> refers to BigInts. Numeric values without a subscript suffix refer to mathematical values.</p>\n      <p>Numeric operators such as +, &#215;, =, and &#8805; refer to those operations as determined by the type of the operands. When applied to mathematical values, the operators refer to the usual mathematical operations. When applied to Numbers, the operators refer to the relevant operations within <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. When applied to BigInts, the operators refer to the usual mathematical operations applied to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the BigInt.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the number of code points in &#8230;\" or \"the BigInt value for &#8230;\".</p>\n      <p>Numeric operators applied to mixed-type operands (such as a Number and a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>) are not defined and should be considered an editorial error in this specification.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>When the term <dfn id=\"integer\" oldids=\"mathematical integer\"><span id=\"mathematical integer\"></span>integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers, unless otherwise stated. When the term <dfn id=\"integral-number\">integral Number</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers.</p>\n      <p>Conversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> or <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> <var>x</var> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\" or <dfn id=\"&#120125;\">&#120125;</dfn>(<var>x</var>), and is defined in <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>x</var> to a BigInt is denoted as \"the BigInt value for <var>x</var>\" or <dfn id=\"&#8484;\">&#8484;</dfn>(<var>x</var>). A conversion from a Number or BigInt <var>x</var> to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <dfn id=\"&#8477;\">&#8477;</dfn>(<var>x</var>). The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined. The <dfn id=\"extended-mathematical-value\">extended mathematical value</dfn> of <var>x</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> for finite values, and is +&#8734; and -&#8734; for <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> respectively; it is not defined for <emu-val>NaN</emu-val>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> &lt; 0 and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions are the extended mathematical values.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and non-zero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>q</var>.</p>\n      <p>The phrase \"the result of <dfn id=\"clamping\">clamping</dfn> <var>x</var> between <var>lower</var> and <var>upper</var>\" (where <var>x</var> is an <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> and <var>lower</var> and <var>upper</var> are mathematical values such that <var>lower</var> &#8804; <var>upper</var>) produces <var>lower</var> if <var>x</var> &lt; <var>lower</var>, produces <var>upper</var> if <var>x</var> &gt; <var>upper</var>, and otherwise produces <var>x</var>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (closest to +&#8734;) that is not larger than <var>x</var>.</p>\n      <p>Mathematical functions min, max, <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>, and <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref> are not defined for Numbers and BigInts, and any usage of those methods that have non-<emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> arguments would be an editorial error in this specification.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-IsHTMLDDA-internal-slot-typeof": {"num": "B.3.7.3", "title": "#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-typeof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-typeof\">#sec-IsHTMLDDA-internal-slot-typeof</span> Changes to the <code>typeof</code> Operator</h1>\n        <p>The following table entry is inserted into <emu-xref href=\"#table-typeof-operator-results\"><a href=\"#table-typeof-operator-results\" class=\"excluded-xref\" excluded-id=\"table-typeof-operator-results\">#table-typeof-operator-results</a></emu-xref> immediately preceeding the entry for \"Object (implements [[Call]])\":</p>\n        <emu-table><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-noid-2\">#table-noid-2</span>: \n            Additional <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code></a></emu-xref> Operator Results\n          </figcaption>\n          \n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Type of <var>val</var>\n                </th>\n                <th>\n                  Result\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  Object (has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>)\n                </td>\n                <td>\n                  <emu-val>\"undefined\"</emu-val>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-annex>\n    "}, "sec-function-properties-of-the-math-object": {"num": "21.3.2", "title": "#sec-function-properties-of-the-math-object Function Properties of the Math Object", "html": "<emu-clause id=\"sec-function-properties-of-the-math-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-properties-of-the-math-object\">#sec-function-properties-of-the-math-object</span> Function Properties of the Math Object</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The behaviour of the functions <code>acos</code>, <code>acosh</code>, <code>asin</code>, <code>asinh</code>, <code>atan</code>, <code>atanh</code>, <code>atan2</code>, <code>cbrt</code>, <code>cos</code>, <code>cosh</code>, <code>exp</code>, <code>expm1</code>, <code>hypot</code>, <code>log</code>,<code>log1p</code>, <code>log2</code>, <code>log10</code>, <code>pow</code>, <code>random</code>, <code>sin</code>, <code>sinh</code>, <code>sqrt</code>, <code>tan</code>, and <code>tanh</code> is not precisely specified here except to require specific results for certain argument values that represent boundary cases of interest. For other argument values, these functions are intended to compute approximations to the results of familiar mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is available to C programmers on that platform.</p>\n        <p>Although the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that implementations use the approximation algorithms for <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic contained in <code>fdlibm</code>, the freely distributable mathematical library from Sun Microsystems (<a href=\"http://www.netlib.org/fdlibm\">http://www.netlib.org/fdlibm</a>).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-math.abs\"><h1><span class=\"secnum\">21.3.2.1</span>#sec-math.abs Math.abs ( x )</h1>...</div><div id=\"excluded-sec-math.acos\"><h1><span class=\"secnum\">21.3.2.2</span>#sec-math.acos Math.acos ( x )</h1>...</div><div id=\"excluded-sec-math.acosh\"><h1><span class=\"secnum\">21.3.2.3</span>#sec-math.acosh Math.acosh ( x )</h1>...</div><div id=\"excluded-sec-math.asin\"><h1><span class=\"secnum\">21.3.2.4</span>#sec-math.asin Math.asin ( x )</h1>...</div><div id=\"excluded-sec-math.asinh\"><h1><span class=\"secnum\">21.3.2.5</span>#sec-math.asinh Math.asinh ( x )</h1>...</div><div id=\"excluded-sec-math.atan\"><h1><span class=\"secnum\">21.3.2.6</span>#sec-math.atan Math.atan ( x )</h1>...</div><div id=\"excluded-sec-math.atanh\"><h1><span class=\"secnum\">21.3.2.7</span>#sec-math.atanh Math.atanh ( x )</h1>...</div><div id=\"excluded-sec-math.atan2\"><h1><span class=\"secnum\">21.3.2.8</span>#sec-math.atan2 Math.atan2 ( y, x )</h1>...</div><div id=\"excluded-sec-math.cbrt\"><h1><span class=\"secnum\">21.3.2.9</span>#sec-math.cbrt Math.cbrt ( x )</h1>...</div><div id=\"excluded-sec-math.ceil\"><h1><span class=\"secnum\">21.3.2.10</span>#sec-math.ceil Math.ceil ( x )</h1>...</div><div id=\"excluded-sec-math.clz32\"><h1><span class=\"secnum\">21.3.2.11</span>#sec-math.clz32 Math.clz32 ( x )</h1>...</div><div id=\"excluded-sec-math.cos\"><h1><span class=\"secnum\">21.3.2.12</span>#sec-math.cos Math.cos ( x )</h1>...</div><div id=\"excluded-sec-math.cosh\"><h1><span class=\"secnum\">21.3.2.13</span>#sec-math.cosh Math.cosh ( x )</h1>...</div><div id=\"excluded-sec-math.exp\"><h1><span class=\"secnum\">21.3.2.14</span>#sec-math.exp Math.exp ( x )</h1>...</div><div id=\"excluded-sec-math.expm1\"><h1><span class=\"secnum\">21.3.2.15</span>#sec-math.expm1 Math.expm1 ( x )</h1>...</div><div id=\"excluded-sec-math.floor\"><h1><span class=\"secnum\">21.3.2.16</span>#sec-math.floor Math.floor ( x )</h1>...</div><div id=\"excluded-sec-math.fround\"><h1><span class=\"secnum\">21.3.2.17</span>#sec-math.fround Math.fround ( x )</h1>...</div><div id=\"excluded-sec-math.hypot\"><h1><span class=\"secnum\">21.3.2.18</span>#sec-math.hypot Math.hypot ( ...args )</h1>...</div><div id=\"excluded-sec-math.imul\"><h1><span class=\"secnum\">21.3.2.19</span>#sec-math.imul Math.imul ( x, y )</h1>...</div><div id=\"excluded-sec-math.log\"><h1><span class=\"secnum\">21.3.2.20</span>#sec-math.log Math.log ( x )</h1>...</div><div id=\"excluded-sec-math.log1p\"><h1><span class=\"secnum\">21.3.2.21</span>#sec-math.log1p Math.log1p ( x )</h1>...</div><div id=\"excluded-sec-math.log10\"><h1><span class=\"secnum\">21.3.2.22</span>#sec-math.log10 Math.log10 ( x )</h1>...</div><div id=\"excluded-sec-math.log2\"><h1><span class=\"secnum\">21.3.2.23</span>#sec-math.log2 Math.log2 ( x )</h1>...</div><div id=\"excluded-sec-math.max\"><h1><span class=\"secnum\">21.3.2.24</span>#sec-math.max Math.max ( ...args )</h1>...</div><div id=\"excluded-sec-math.min\"><h1><span class=\"secnum\">21.3.2.25</span>#sec-math.min Math.min ( ...args )</h1>...</div><div id=\"excluded-sec-math.pow\"><h1><span class=\"secnum\">21.3.2.26</span>#sec-math.pow Math.pow ( base, exponent )</h1>...</div><div id=\"excluded-sec-math.random\"><h1><span class=\"secnum\">21.3.2.27</span>#sec-math.random Math.random ( )</h1>...</div><div id=\"excluded-sec-math.round\"><h1><span class=\"secnum\">21.3.2.28</span>#sec-math.round Math.round ( x )</h1>...</div><div id=\"excluded-sec-math.sign\"><h1><span class=\"secnum\">21.3.2.29</span>#sec-math.sign Math.sign ( x )</h1>...</div><div id=\"excluded-sec-math.sin\"><h1><span class=\"secnum\">21.3.2.30</span>#sec-math.sin Math.sin ( x )</h1>...</div><div id=\"excluded-sec-math.sinh\"><h1><span class=\"secnum\">21.3.2.31</span>#sec-math.sinh Math.sinh ( x )</h1>...</div><div id=\"excluded-sec-math.sqrt\"><h1><span class=\"secnum\">21.3.2.32</span>#sec-math.sqrt Math.sqrt ( x )</h1>...</div><div id=\"excluded-sec-math.tan\"><h1><span class=\"secnum\">21.3.2.33</span>#sec-math.tan Math.tan ( x )</h1>...</div><div id=\"excluded-sec-math.tanh\"><h1><span class=\"secnum\">21.3.2.34</span>#sec-math.tanh Math.tanh ( x )</h1>...</div><div id=\"excluded-sec-math.trunc\"><h1><span class=\"secnum\">21.3.2.35</span>#sec-math.trunc Math.trunc ( x )</h1>...</div></emu-clause>\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-typeof-operator-results": "Table 37", "table-noid-2": "Table 83"}}, "to": {"secList": ["sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-mathematical-operations", "sec-IsHTMLDDA-internal-slot-typeof", "sec-function-properties-of-the-math-object", "sec-example-cyclic-module-record-graphs"], "secData": {"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMAScript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-runtime-semantics-methoddefinitionevaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-methoddefinitionevaluation\">#sec-runtime-semantics-methoddefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to these kinds of numeric values:</p>\n      <ul>\n        <li><em>Mathematical values</em>: Arbitrary real numbers, used as the default numeric type.</li>\n        <li><em>Extended mathematical values</em>: Mathematical values together with +&#8734; and -&#8734;.</li>\n        <li><em>Numbers</em>: <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> double-precision floating point values.</li>\n        <li><em>BigInts</em>: ECMAScript values representing arbitrary integers in a one-to-one correspondence.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values are distinguished among different numeric kinds using subscript suffixes. The subscript <sub>&#120125;</sub> refers to Numbers, and the subscript <sub>&#8484;</sub> refers to BigInts. Numeric values without a subscript suffix refer to mathematical values.</p>\n      <p>Numeric operators such as +, &#215;, =, and &#8805; refer to those operations as determined by the type of the operands. When applied to mathematical values, the operators refer to the usual mathematical operations. When applied to Numbers, the operators refer to the relevant operations within <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. When applied to BigInts, the operators refer to the usual mathematical operations applied to the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the BigInt.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>. Phrases which refer to a Number or a BigInt value are explicitly annotated as such; for example, \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the number of code points in &#8230;\" or \"the BigInt value for &#8230;\".</p>\n      <p>Numeric operators applied to mixed-type operands (such as a Number and a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>) are not defined and should be considered an editorial error in this specification.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>When the term <dfn id=\"integer\" oldids=\"mathematical integer\"><span id=\"mathematical integer\"></span>integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers, unless otherwise stated. When the term <dfn id=\"integral-number\">integral Number</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers.</p>\n      <p>Conversions between mathematical values and Numbers or BigInts are always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> or <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> <var>x</var> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\" or <dfn id=\"&#120125;\">&#120125;</dfn>(<var>x</var>), and is defined in <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>x</var> to a BigInt is denoted as \"the BigInt value for <var>x</var>\" or <dfn id=\"&#8484;\">&#8484;</dfn>(<var>x</var>). A conversion from a Number or BigInt <var>x</var> to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <dfn id=\"&#8477;\">&#8477;</dfn>(<var>x</var>). The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-val>-0</emu-val><sub>&#120125;</sub> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0. The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined. The <dfn id=\"extended-mathematical-value\">extended mathematical value</dfn> of <var>x</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>x</var> for finite values, and is +&#8734; and -&#8734; for <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> respectively; it is not defined for <emu-val>NaN</emu-val>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is <emu-eqn class=\"inline\">-<var>x</var></emu-eqn> if <var>x</var> &lt; 0 and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions are the extended mathematical values.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and non-zero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>y</var>) and <var>x</var> - <var>k</var> = <var>q</var> &#215; <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>q</var>.</p>\n      <p>The phrase \"the result of <dfn id=\"clamping\">clamping</dfn> <var>x</var> between <var>lower</var> and <var>upper</var>\" (where <var>x</var> is an <emu-xref href=\"#extended-mathematical-value\"><a href=\"#extended-mathematical-value\">extended mathematical value</a></emu-xref> and <var>lower</var> and <var>upper</var> are mathematical values such that <var>lower</var> &#8804; <var>upper</var>) produces <var>lower</var> if <var>x</var> &lt; <var>lower</var>, produces <var>upper</var> if <var>x</var> &gt; <var>upper</var>, and otherwise produces <var>x</var>.</p>\n      <p>The mathematical function <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (closest to +&#8734;) that is not larger than <var>x</var>.</p>\n      <p>Mathematical functions min, max, <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>, and <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref> are not defined for Numbers and BigInts, and any usage of those methods that have non-<emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> arguments would be an editorial error in this specification.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<var>x</var>) = <var>x</var> - (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 1)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-IsHTMLDDA-internal-slot-typeof": {"num": "B.3.7.3", "title": "#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-typeof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-typeof\">#sec-IsHTMLDDA-internal-slot-typeof</span> Changes to the <code>typeof</code> Operator</h1>\n        <p>The following table entry is inserted into <emu-xref href=\"#table-typeof-operator-results\"><a href=\"#table-typeof-operator-results\" class=\"excluded-xref\" excluded-id=\"table-typeof-operator-results\">#table-typeof-operator-results</a></emu-xref> immediately preceding the entry for \"Object (implements [[Call]])\":</p>\n        <emu-table><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-noid-2\">#table-noid-2</span>: \n            Additional <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code></a></emu-xref> Operator Results\n          </figcaption>\n          \n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Type of <var>val</var>\n                </th>\n                <th>\n                  Result\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  Object (has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>)\n                </td>\n                <td>\n                  <emu-val>\"undefined\"</emu-val>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-annex>\n    "}, "sec-function-properties-of-the-math-object": {"num": "21.3.2", "title": "#sec-function-properties-of-the-math-object Function Properties of the Math Object", "html": "<emu-clause id=\"sec-function-properties-of-the-math-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-properties-of-the-math-object\">#sec-function-properties-of-the-math-object</span> Function Properties of the Math Object</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The behaviour of the functions <code>acos</code>, <code>acosh</code>, <code>asin</code>, <code>asinh</code>, <code>atan</code>, <code>atanh</code>, <code>atan2</code>, <code>cbrt</code>, <code>cos</code>, <code>cosh</code>, <code>exp</code>, <code>expm1</code>, <code>hypot</code>, <code>log</code>, <code>log1p</code>, <code>log2</code>, <code>log10</code>, <code>pow</code>, <code>random</code>, <code>sin</code>, <code>sinh</code>, <code>sqrt</code>, <code>tan</code>, and <code>tanh</code> is not precisely specified here except to require specific results for certain argument values that represent boundary cases of interest. For other argument values, these functions are intended to compute approximations to the results of familiar mathematical functions, but some latitude is allowed in the choice of approximation algorithms. The general intent is that an implementer should be able to use the same mathematical library for ECMAScript on a given hardware platform that is available to C programmers on that platform.</p>\n        <p>Although the choice of algorithms is left to the implementation, it is recommended (but not specified by this standard) that implementations use the approximation algorithms for <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic contained in <code>fdlibm</code>, the freely distributable mathematical library from Sun Microsystems (<a href=\"http://www.netlib.org/fdlibm\">http://www.netlib.org/fdlibm</a>).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-math.abs\"><h1><span class=\"secnum\">21.3.2.1</span>#sec-math.abs Math.abs ( x )</h1>...</div><div id=\"excluded-sec-math.acos\"><h1><span class=\"secnum\">21.3.2.2</span>#sec-math.acos Math.acos ( x )</h1>...</div><div id=\"excluded-sec-math.acosh\"><h1><span class=\"secnum\">21.3.2.3</span>#sec-math.acosh Math.acosh ( x )</h1>...</div><div id=\"excluded-sec-math.asin\"><h1><span class=\"secnum\">21.3.2.4</span>#sec-math.asin Math.asin ( x )</h1>...</div><div id=\"excluded-sec-math.asinh\"><h1><span class=\"secnum\">21.3.2.5</span>#sec-math.asinh Math.asinh ( x )</h1>...</div><div id=\"excluded-sec-math.atan\"><h1><span class=\"secnum\">21.3.2.6</span>#sec-math.atan Math.atan ( x )</h1>...</div><div id=\"excluded-sec-math.atanh\"><h1><span class=\"secnum\">21.3.2.7</span>#sec-math.atanh Math.atanh ( x )</h1>...</div><div id=\"excluded-sec-math.atan2\"><h1><span class=\"secnum\">21.3.2.8</span>#sec-math.atan2 Math.atan2 ( y, x )</h1>...</div><div id=\"excluded-sec-math.cbrt\"><h1><span class=\"secnum\">21.3.2.9</span>#sec-math.cbrt Math.cbrt ( x )</h1>...</div><div id=\"excluded-sec-math.ceil\"><h1><span class=\"secnum\">21.3.2.10</span>#sec-math.ceil Math.ceil ( x )</h1>...</div><div id=\"excluded-sec-math.clz32\"><h1><span class=\"secnum\">21.3.2.11</span>#sec-math.clz32 Math.clz32 ( x )</h1>...</div><div id=\"excluded-sec-math.cos\"><h1><span class=\"secnum\">21.3.2.12</span>#sec-math.cos Math.cos ( x )</h1>...</div><div id=\"excluded-sec-math.cosh\"><h1><span class=\"secnum\">21.3.2.13</span>#sec-math.cosh Math.cosh ( x )</h1>...</div><div id=\"excluded-sec-math.exp\"><h1><span class=\"secnum\">21.3.2.14</span>#sec-math.exp Math.exp ( x )</h1>...</div><div id=\"excluded-sec-math.expm1\"><h1><span class=\"secnum\">21.3.2.15</span>#sec-math.expm1 Math.expm1 ( x )</h1>...</div><div id=\"excluded-sec-math.floor\"><h1><span class=\"secnum\">21.3.2.16</span>#sec-math.floor Math.floor ( x )</h1>...</div><div id=\"excluded-sec-math.fround\"><h1><span class=\"secnum\">21.3.2.17</span>#sec-math.fround Math.fround ( x )</h1>...</div><div id=\"excluded-sec-math.hypot\"><h1><span class=\"secnum\">21.3.2.18</span>#sec-math.hypot Math.hypot ( ...args )</h1>...</div><div id=\"excluded-sec-math.imul\"><h1><span class=\"secnum\">21.3.2.19</span>#sec-math.imul Math.imul ( x, y )</h1>...</div><div id=\"excluded-sec-math.log\"><h1><span class=\"secnum\">21.3.2.20</span>#sec-math.log Math.log ( x )</h1>...</div><div id=\"excluded-sec-math.log1p\"><h1><span class=\"secnum\">21.3.2.21</span>#sec-math.log1p Math.log1p ( x )</h1>...</div><div id=\"excluded-sec-math.log10\"><h1><span class=\"secnum\">21.3.2.22</span>#sec-math.log10 Math.log10 ( x )</h1>...</div><div id=\"excluded-sec-math.log2\"><h1><span class=\"secnum\">21.3.2.23</span>#sec-math.log2 Math.log2 ( x )</h1>...</div><div id=\"excluded-sec-math.max\"><h1><span class=\"secnum\">21.3.2.24</span>#sec-math.max Math.max ( ...args )</h1>...</div><div id=\"excluded-sec-math.min\"><h1><span class=\"secnum\">21.3.2.25</span>#sec-math.min Math.min ( ...args )</h1>...</div><div id=\"excluded-sec-math.pow\"><h1><span class=\"secnum\">21.3.2.26</span>#sec-math.pow Math.pow ( base, exponent )</h1>...</div><div id=\"excluded-sec-math.random\"><h1><span class=\"secnum\">21.3.2.27</span>#sec-math.random Math.random ( )</h1>...</div><div id=\"excluded-sec-math.round\"><h1><span class=\"secnum\">21.3.2.28</span>#sec-math.round Math.round ( x )</h1>...</div><div id=\"excluded-sec-math.sign\"><h1><span class=\"secnum\">21.3.2.29</span>#sec-math.sign Math.sign ( x )</h1>...</div><div id=\"excluded-sec-math.sin\"><h1><span class=\"secnum\">21.3.2.30</span>#sec-math.sin Math.sin ( x )</h1>...</div><div id=\"excluded-sec-math.sinh\"><h1><span class=\"secnum\">21.3.2.31</span>#sec-math.sinh Math.sinh ( x )</h1>...</div><div id=\"excluded-sec-math.sqrt\"><h1><span class=\"secnum\">21.3.2.32</span>#sec-math.sqrt Math.sqrt ( x )</h1>...</div><div id=\"excluded-sec-math.tan\"><h1><span class=\"secnum\">21.3.2.33</span>#sec-math.tan Math.tan ( x )</h1>...</div><div id=\"excluded-sec-math.tanh\"><h1><span class=\"secnum\">21.3.2.34</span>#sec-math.tanh Math.tanh ( x )</h1>...</div><div id=\"excluded-sec-math.trunc\"><h1><span class=\"secnum\">21.3.2.35</span>#sec-math.trunc Math.trunc ( x )</h1>...</div></emu-clause>\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const>, both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-typeof-operator-results": "Table 37", "table-noid-2": "Table 83"}}}