{"from": {"secList": ["sec-other-additional-features", "sec-conformance", "sec-properties-of-the-object-prototype-object", "sec-additional-properties-of-the-object.prototype-object", "sec-object-initializer-static-semantics-early-errors", "sec-createsetiterator", "sec-IsHTMLDDA-internal-slot", "sec-set-object.prototype.__proto__", "sec-object.prototype.__proto__", "sec-runtime-semantics-propertydefinitionevaluation", "sec-object.prototype.__defineGetter__", "sec-object.prototype.__lookupGetter__", "sec-createmapiterator", "sec-additional-properties-of-the-string.prototype-object", "sec-json.parse", "sec-__proto__-property-names-in-object-initializers", "sec-additional-properties-of-the-date.prototype-object", "sec-conformance.normative-optional", "sec-object.prototype.__defineSetter__", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-additional-properties-of-the-regexp.prototype-object", "sec-string.prototype.anchor", "sec-object.prototype.__lookupSetter__", "sec-get-object.prototype.__proto__", "sec-object.prototype.valueof", "sec-additional-built-in-properties"], "secData": {"sec-other-additional-features": {"num": "B.3", "title": "#sec-other-additional-features Other Additional Features", "html": "<emu-annex id=\"sec-other-additional-features\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-other-additional-features\">#sec-other-additional-features</span> Other Additional Features</h1>\n\n    <div id=\"excluded-sec-__proto__-property-names-in-object-initializers\"><h1><span class=\"secnum\">B.3.1</span>#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers</h1>...</div><div id=\"excluded-sec-labelled-function-declarations\"><h1><span class=\"secnum\">B.3.2</span>#sec-labelled-function-declarations Labelled Function Declarations</h1>...</div><div id=\"excluded-sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><h1><span class=\"secnum\">B.3.3</span>#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>...</div><div id=\"excluded-sec-functiondeclarations-in-ifstatement-statement-clauses\"><h1><span class=\"secnum\">B.3.4</span>#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses</h1>...</div><div id=\"excluded-sec-variablestatements-in-catch-blocks\"><h1><span class=\"secnum\">B.3.5</span>#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks</h1>...</div><div id=\"excluded-sec-initializers-in-forin-statement-heads\"><h1><span class=\"secnum\">B.3.6</span>#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot\"><h1><span class=\"secnum\">B.3.7</span>#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot</h1>...</div></emu-annex>\n"}, "sec-conformance": {"num": "2", "title": "#sec-conformance Conformance", "html": "<emu-clause id=\"sec-conformance\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance\">#sec-conformance</span> Conformance</h1>\n  <p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p>\n  <p>A conforming implementation of ECMAScript must interpret source text input in conformance with the latest version of the Unicode Standard and ISO/IEC 10646.</p>\n  <p>A conforming implementation of ECMAScript that provides an application programming interface (API) that supports programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries must implement the interface defined by the most recent edition of ECMA-402 that is compatible with this specification.</p>\n  <p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification. In particular, a conforming implementation of ECMAScript may provide properties not described in this specification, and values for those properties, for objects that are described in this specification.</p>\n  <p>A conforming implementation of ECMAScript may support program and regular expression syntax not described in this specification. In particular, a conforming implementation of ECMAScript may support program syntax that makes use of any &#8220;future reserved words&#8221; noted in subclause <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref> of this specification.</p>\n  <p>A conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript must not redefine any facilities that are not <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>, or <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript may choose to implement or not implement <dfn>Normative Optional</dfn> subclauses. If any Normative Optional behaviour is implemented, all of the behaviour in the containing Normative Optional clause must be implemented. A Normative Optional clause is denoted in this specification with the words \"Normative Optional\" in a coloured box, as shown below.</p>\n  <div id=\"excluded-sec-conformance.normative-optional\"><h1><span class=\"secnum\">2.1</span>#sec-conformance.normative-optional Example Clause Heading</h1>...</div></emu-clause>\n\n"}, "sec-properties-of-the-object-prototype-object": {"num": "20.1.3", "title": "#sec-properties-of-the-object-prototype-object Properties of the Object Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-object-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</span> Properties of the Object Prototype Object</h1>\n      <p>The <dfn>Object prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Object.prototype%</dfn>.</li>\n        <li>has an [[Extensible]] internal slot whose value is <emu-val>true</emu-val>.</li>\n        <li>has the internal methods defined for ordinary objects, except for the [[SetPrototypeOf]] method, which is as defined in <emu-xref href=\"#sec-immutable-prototype-exotic-objects-setprototypeof-v\"><a href=\"#sec-immutable-prototype-exotic-objects-setprototypeof-v\" class=\"excluded-xref\" excluded-id=\"sec-immutable-prototype-exotic-objects-setprototypeof-v\">#sec-immutable-prototype-exotic-objects-setprototypeof-v</a></emu-xref>. (Thus, it is an <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref>.)</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-val>null</emu-val>.</li>\n      </ul>\n\n      <div id=\"excluded-sec-object.prototype.constructor\"><h1><span class=\"secnum\">20.1.3.1</span>#sec-object.prototype.constructor Object.prototype.constructor</h1>...</div><div id=\"excluded-sec-object.prototype.hasownproperty\"><h1><span class=\"secnum\">20.1.3.2</span>#sec-object.prototype.hasownproperty Object.prototype.hasOwnProperty ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.isprototypeof\"><h1><span class=\"secnum\">20.1.3.3</span>#sec-object.prototype.isprototypeof Object.prototype.isPrototypeOf ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.propertyisenumerable\"><h1><span class=\"secnum\">20.1.3.4</span>#sec-object.prototype.propertyisenumerable Object.prototype.propertyIsEnumerable ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.tolocalestring\"><h1><span class=\"secnum\">20.1.3.5</span>#sec-object.prototype.tolocalestring Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-object.prototype.tostring\"><h1><span class=\"secnum\">20.1.3.6</span>#sec-object.prototype.tostring Object.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-object.prototype.valueof\"><h1><span class=\"secnum\">20.1.3.7</span>#sec-object.prototype.valueof Object.prototype.valueOf ( )</h1>...</div></emu-clause>\n\n    "}, "sec-additional-properties-of-the-object.prototype-object": {"num": "B.2.2", "title": "#sec-additional-properties-of-the-object.prototype-object Additional Properties of the Object.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-object.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-object.prototype-object\">#sec-additional-properties-of-the-object.prototype-object</span> Additional Properties of the Object.prototype Object</h1>\n\n      <div id=\"excluded-sec-object.prototype.__proto__\"><h1><span class=\"secnum\">B.2.2.1</span>#sec-object.prototype.__proto__ Object.prototype.__proto__</h1>...</div><div id=\"excluded-sec-object.prototype.__defineGetter__\"><h1><span class=\"secnum\">B.2.2.2</span>#sec-object.prototype.__defineGetter__ Object.prototype.__defineGetter__ ( P, getter )</h1>...</div><div id=\"excluded-sec-object.prototype.__defineSetter__\"><h1><span class=\"secnum\">B.2.2.3</span>#sec-object.prototype.__defineSetter__ Object.prototype.__defineSetter__ ( P, setter )</h1>...</div><div id=\"excluded-sec-object.prototype.__lookupGetter__\"><h1><span class=\"secnum\">B.2.2.4</span>#sec-object.prototype.__lookupGetter__ Object.prototype.__lookupGetter__ ( P )</h1>...</div><div id=\"excluded-sec-object.prototype.__lookupSetter__\"><h1><span class=\"secnum\">B.2.2.5</span>#sec-object.prototype.__lookupSetter__ Object.prototype.__lookupSetter__ ( P )</h1>...</div></emu-annex>\n\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.7", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.7.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.7.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.7.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-set-object.prototype.__proto__": {"num": "B.2.2.1.2", "title": "#sec-set-object.prototype.__proto__ set Object.prototype.__proto__", "html": "<emu-annex id=\"sec-set-object.prototype.__proto__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-object.prototype.__proto__\">#sec-set-object.prototype.__proto__</span> set Object.prototype.__proto__</h1>\n          <p>The value of the [[Set]] attribute is a built-in function that takes an argument <var>proto</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>proto</var>) is neither Object nor Null, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>Let <var>status</var> be ? <var>O</var>.[[SetPrototypeOf]](<var>proto</var>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        </emu-annex>\n      "}, "sec-object.prototype.__proto__": {"num": "B.2.2.1", "title": "#sec-object.prototype.__proto__ Object.prototype.__proto__", "html": "<emu-annex id=\"sec-object.prototype.__proto__\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__proto__\">#sec-object.prototype.__proto__</span> Object.prototype.__proto__</h1>\n        <p><code>Object.prototype.__proto__</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }. The [[Get]] and [[Set]] attributes are defined as follows:</p>\n\n        <div id=\"excluded-sec-get-object.prototype.__proto__\"><h1><span class=\"secnum\">B.2.2.1.1</span>#sec-get-object.prototype.__proto__ get Object.prototype.__proto__</h1>...</div><div id=\"excluded-sec-set-object.prototype.__proto__\"><h1><span class=\"secnum\">B.2.2.1.2</span>#sec-set-object.prototype.__proto__ set Object.prototype.__proto__</h1>...</div></emu-annex>\n\n      "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.5.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-2nasR_1u\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-r1teTyPc\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-pxaBv7Tq\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-N8qwXXqo\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y45t6zkk\" id=\"prod-5O6pmf8R\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8uh5vkw0\" id=\"prod-mCjGL17Q\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rai1tkqc\" id=\"prod-0QU7VlhR\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xcdxrozr\" id=\"prod-lU-OqsBQ\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vjheaeci\" id=\"prod-OisJnYgE\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dz5wgjes\" id=\"prod-lzh6ls95\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.prototype.__defineGetter__": {"num": "B.2.2.2", "title": "#sec-object.prototype.__defineGetter__ Object.prototype.__defineGetter__ ( P, getter )", "html": "<emu-annex id=\"sec-object.prototype.__defineGetter__\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__defineGetter__\">#sec-object.prototype.__defineGetter__</span> Object.prototype.__defineGetter__ ( <var>P</var>, <var>getter</var> )</h1>\n        <p>When the <code>__defineGetter__</code> method is called with arguments <var>P</var> and <var>getter</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>getter</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Get]]: <var>getter</var>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-annex>\n\n      "}, "sec-object.prototype.__lookupGetter__": {"num": "B.2.2.4", "title": "#sec-object.prototype.__lookupGetter__ Object.prototype.__lookupGetter__ ( P )", "html": "<emu-annex id=\"sec-object.prototype.__lookupGetter__\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__lookupGetter__\">#sec-object.prototype.__lookupGetter__</span> Object.prototype.__lookupGetter__ ( <var>P</var> )</h1>\n        <p>When the <code>__lookupGetter__</code> method is called with argument <var>P</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Repeat,<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Get]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>O</var> to ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>O</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li></ol></li></ol></emu-alg>\n      </emu-annex>\n\n      "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: the number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-additional-properties-of-the-string.prototype-object": {"num": "B.2.3", "title": "#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-string.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-string.prototype-object\">#sec-additional-properties-of-the-string.prototype-object</span> Additional Properties of the String.prototype Object</h1>\n\n      <div id=\"excluded-sec-string.prototype.substr\"><h1><span class=\"secnum\">B.2.3.1</span>#sec-string.prototype.substr String.prototype.substr ( start, length )</h1>...</div><div id=\"excluded-sec-string.prototype.anchor\"><h1><span class=\"secnum\">B.2.3.2</span>#sec-string.prototype.anchor String.prototype.anchor ( name )</h1>...</div><div id=\"excluded-sec-string.prototype.big\"><h1><span class=\"secnum\">B.2.3.3</span>#sec-string.prototype.big String.prototype.big ( )</h1>...</div><div id=\"excluded-sec-string.prototype.blink\"><h1><span class=\"secnum\">B.2.3.4</span>#sec-string.prototype.blink String.prototype.blink ( )</h1>...</div><div id=\"excluded-sec-string.prototype.bold\"><h1><span class=\"secnum\">B.2.3.5</span>#sec-string.prototype.bold String.prototype.bold ( )</h1>...</div><div id=\"excluded-sec-string.prototype.fixed\"><h1><span class=\"secnum\">B.2.3.6</span>#sec-string.prototype.fixed String.prototype.fixed ( )</h1>...</div><div id=\"excluded-sec-string.prototype.fontcolor\"><h1><span class=\"secnum\">B.2.3.7</span>#sec-string.prototype.fontcolor String.prototype.fontcolor ( color )</h1>...</div><div id=\"excluded-sec-string.prototype.fontsize\"><h1><span class=\"secnum\">B.2.3.8</span>#sec-string.prototype.fontsize String.prototype.fontsize ( size )</h1>...</div><div id=\"excluded-sec-string.prototype.italics\"><h1><span class=\"secnum\">B.2.3.9</span>#sec-string.prototype.italics String.prototype.italics ( )</h1>...</div><div id=\"excluded-sec-string.prototype.link\"><h1><span class=\"secnum\">B.2.3.10</span>#sec-string.prototype.link String.prototype.link ( url )</h1>...</div><div id=\"excluded-sec-string.prototype.small\"><h1><span class=\"secnum\">B.2.3.11</span>#sec-string.prototype.small String.prototype.small ( )</h1>...</div><div id=\"excluded-sec-string.prototype.strike\"><h1><span class=\"secnum\">B.2.3.12</span>#sec-string.prototype.strike String.prototype.strike ( )</h1>...</div><div id=\"excluded-sec-string.prototype.sub\"><h1><span class=\"secnum\">B.2.3.13</span>#sec-string.prototype.sub String.prototype.sub ( )</h1>...</div><div id=\"excluded-sec-string.prototype.sup\"><h1><span class=\"secnum\">B.2.3.14</span>#sec-string.prototype.sup String.prototype.sup ( )</h1>...</div><emu-annex id=\"String.prototype.trimleft\">\n        <h1><span class=\"secnum\">B.2.3.15</span> String.prototype.trimLeft ( )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The property <emu-val>\"trimStart\"</emu-val> is preferred. The <emu-val>\"trimLeft\"</emu-val> property is provided principally for compatibility with old code. It is recommended that the <emu-val>\"trimStart\"</emu-val> property be used in new ECMAScript code.</p>\n        </div></emu-note>\n        <p>The initial value of the <emu-val>\"trimLeft\"</emu-val> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>String.prototype.trimStart</code> property.</p>\n      </emu-annex>\n\n      <emu-annex id=\"String.prototype.trimright\">\n        <h1><span class=\"secnum\">B.2.3.16</span> String.prototype.trimRight ( )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The property <emu-val>\"trimEnd\"</emu-val> is preferred. The <emu-val>\"trimRight\"</emu-val> property is provided principally for compatibility with old code. It is recommended that the <emu-val>\"trimEnd\"</emu-val> property be used in new ECMAScript code.</p>\n        </div></emu-note>\n        <p>The initial value of the <emu-val>\"trimRight\"</emu-val> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>String.prototype.trimEnd</code> property.</p>\n      </emu-annex>\n    </emu-annex>\n\n    "}, "sec-json.parse": {"num": "25.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Let <var>completion</var> be the result of evaluating <var>script</var>. The extended <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> applies when evaluating ECMAScript source text and does not apply during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">25.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref>(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-additional-properties-of-the-date.prototype-object": {"num": "B.2.4", "title": "#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-date.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-date.prototype-object\">#sec-additional-properties-of-the-date.prototype-object</span> Additional Properties of the Date.prototype Object</h1>\n\n      <div id=\"excluded-sec-date.prototype.getyear\"><h1><span class=\"secnum\">B.2.4.1</span>#sec-date.prototype.getyear Date.prototype.getYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.setyear\"><h1><span class=\"secnum\">B.2.4.2</span>#sec-date.prototype.setyear Date.prototype.setYear ( year )</h1>...</div><div id=\"excluded-sec-date.prototype.togmtstring\"><h1><span class=\"secnum\">B.2.4.3</span>#sec-date.prototype.togmtstring Date.prototype.toGMTString ( )</h1>...</div></emu-annex>\n\n    "}, "sec-conformance.normative-optional": {"num": "2.1", "title": "#sec-conformance.normative-optional Example Clause Heading", "html": "<emu-clause id=\"sec-conformance.normative-optional\" example=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance.normative-optional\">#sec-conformance.normative-optional</span> Example Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-object.prototype.__defineSetter__": {"num": "B.2.2.3", "title": "#sec-object.prototype.__defineSetter__ Object.prototype.__defineSetter__ ( P, setter )", "html": "<emu-annex id=\"sec-object.prototype.__defineSetter__\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__defineSetter__\">#sec-object.prototype.__defineSetter__</span> Object.prototype.__defineSetter__ ( <var>P</var>, <var>setter</var> )</h1>\n        <p>When the <code>__defineSetter__</code> method is called with arguments <var>P</var> and <var>setter</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>setter</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Set]]: <var>setter</var>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-annex>\n\n      "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, <emu-xref href=\"#sec-ecmascript-language-statements-and-declarations\"><a href=\"#sec-ecmascript-language-statements-and-declarations\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-statements-and-declarations\">#sec-ecmascript-language-statements-and-declarations</a></emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-additional-properties-of-the-regexp.prototype-object": {"num": "B.2.5", "title": "#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-regexp.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-regexp.prototype-object\">#sec-additional-properties-of-the-regexp.prototype-object</span> Additional Properties of the RegExp.prototype Object</h1>\n\n      <div id=\"excluded-sec-regexp.prototype.compile\"><h1><span class=\"secnum\">B.2.5.1</span>#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )</h1>...</div></emu-annex>\n  "}, "sec-string.prototype.anchor": {"num": "B.2.3.2", "title": "#sec-string.prototype.anchor String.prototype.anchor ( name )", "html": "<emu-annex id=\"sec-string.prototype.anchor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.anchor\">#sec-string.prototype.anchor</span> String.prototype.anchor ( <var>name</var> )</h1>\n        <p>When the <code>anchor</code> method is called with argument <var>name</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateHTML\"><a href=\"#sec-createhtml\">CreateHTML</a></emu-xref>(<var>S</var>, <emu-val>\"a\"</emu-val>, <emu-val>\"name\"</emu-val>, <var>name</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-createhtml\"><h1><span class=\"secnum\">B.2.3.2.1</span>#sec-createhtml CreateHTML ( string, tag, attribute, value )</h1>...</div></emu-annex>\n\n      "}, "sec-object.prototype.__lookupSetter__": {"num": "B.2.2.5", "title": "#sec-object.prototype.__lookupSetter__ Object.prototype.__lookupSetter__ ( P )", "html": "<emu-annex id=\"sec-object.prototype.__lookupSetter__\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__lookupSetter__\">#sec-object.prototype.__lookupSetter__</span> Object.prototype.__lookupSetter__ ( <var>P</var> )</h1>\n        <p>When the <code>__lookupSetter__</code> method is called with argument <var>P</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Repeat,<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Set]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>O</var> to ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>O</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-get-object.prototype.__proto__": {"num": "B.2.2.1.1", "title": "#sec-get-object.prototype.__proto__ get Object.prototype.__proto__", "html": "<emu-annex id=\"sec-get-object.prototype.__proto__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-object.prototype.__proto__\">#sec-get-object.prototype.__proto__</span> get Object.prototype.__proto__</h1>\n          <p>The value of the [[Get]] attribute is a built-in function that requires no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ? <var>O</var>.[[GetPrototypeOf]]().</li></ol></emu-alg>\n        </emu-annex>\n\n        "}, "sec-object.prototype.valueof": {"num": "20.1.3.7", "title": "#sec-object.prototype.valueof Object.prototype.valueOf ( )", "html": "<emu-clause id=\"sec-object.prototype.valueof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.valueof\">#sec-object.prototype.valueof</span> Object.prototype.valueOf ( )</h1>\n        <p>When the <code>valueOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-additional-built-in-properties": {"num": "B.2", "title": "#sec-additional-built-in-properties Additional Built-in Properties", "html": "<emu-annex id=\"sec-additional-built-in-properties\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</span> Additional Built-in Properties</h1>\n    <p>When the ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is a web browser the following additional properties of the standard built-in objects are defined.</p>\n\n    <div id=\"excluded-sec-additional-properties-of-the-global-object\"><h1><span class=\"secnum\">B.2.1</span>#sec-additional-properties-of-the-global-object Additional Properties of the Global Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-object.prototype-object\"><h1><span class=\"secnum\">B.2.2</span>#sec-additional-properties-of-the-object.prototype-object Additional Properties of the Object.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-string.prototype-object\"><h1><span class=\"secnum\">B.2.3</span>#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-date.prototype-object\"><h1><span class=\"secnum\">B.2.4</span>#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-regexp.prototype-object\"><h1><span class=\"secnum\">B.2.5</span>#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object</h1>...</div></emu-annex>\n\n  "}}, "figData": {}}, "to": {"secList": ["sec-other-additional-features", "sec-conformance", "sec-properties-of-the-object-prototype-object", "sec-object-initializer-static-semantics-early-errors", "sec-createsetiterator", "sec-IsHTMLDDA-internal-slot", "sec-set-object.prototype.__proto__", "sec-object.prototype.__proto__", "sec-runtime-semantics-propertydefinitionevaluation", "sec-object.prototype.__defineGetter__", "sec-object.prototype.__lookupGetter__", "sec-createmapiterator", "sec-conformance-normative-optional", "sec-additional-properties-of-the-string.prototype-object", "sec-json.parse", "sec-additional-properties-of-the-date.prototype-object", "sec-conformance-legacy", "sec-object.prototype.__defineSetter__", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-additional-properties-of-the-regexp.prototype-object", "sec-string.prototype.anchor", "sec-object.prototype-legacy-accessor-methods", "sec-conformance-legacy-normative-optional", "sec-object.prototype.__lookupSetter__", "sec-get-object.prototype.__proto__", "sec-object.prototype.valueof", "sec-additional-built-in-properties"], "secData": {"sec-other-additional-features": {"num": "B.3", "title": "#sec-other-additional-features Other Additional Features", "html": "<emu-annex id=\"sec-other-additional-features\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-other-additional-features\">#sec-other-additional-features</span> Other Additional Features</h1>\n\n    <div id=\"excluded-sec-labelled-function-declarations\"><h1><span class=\"secnum\">B.3.1</span>#sec-labelled-function-declarations Labelled Function Declarations</h1>...</div><div id=\"excluded-sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><h1><span class=\"secnum\">B.3.2</span>#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>...</div><div id=\"excluded-sec-functiondeclarations-in-ifstatement-statement-clauses\"><h1><span class=\"secnum\">B.3.3</span>#sec-functiondeclarations-in-ifstatement-statement-clauses FunctionDeclarations in IfStatement Statement Clauses</h1>...</div><div id=\"excluded-sec-variablestatements-in-catch-blocks\"><h1><span class=\"secnum\">B.3.4</span>#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks</h1>...</div><div id=\"excluded-sec-initializers-in-forin-statement-heads\"><h1><span class=\"secnum\">B.3.5</span>#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot\"><h1><span class=\"secnum\">B.3.6</span>#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot</h1>...</div></emu-annex>\n"}, "sec-conformance": {"num": "2", "title": "#sec-conformance Conformance", "html": "<emu-clause id=\"sec-conformance\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance\">#sec-conformance</span> Conformance</h1>\n  <p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p>\n  <p>A conforming implementation of ECMAScript must interpret source text input in conformance with the latest version of the Unicode Standard and ISO/IEC 10646.</p>\n  <p>A conforming implementation of ECMAScript that provides an application programming interface (API) that supports programs that need to adapt to the linguistic and cultural conventions used by different human languages and countries must implement the interface defined by the most recent edition of ECMA-402 that is compatible with this specification.</p>\n  <p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification. In particular, a conforming implementation of ECMAScript may provide properties not described in this specification, and values for those properties, for objects that are described in this specification.</p>\n  <p>A conforming implementation of ECMAScript may support program and regular expression syntax not described in this specification. In particular, a conforming implementation of ECMAScript may support program syntax that makes use of any &#8220;future reserved words&#8221; noted in subclause <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref> of this specification.</p>\n  <p>A conforming implementation of ECMAScript must not implement any extension that is listed as a Forbidden Extension in subclause <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript must not redefine any facilities that are not <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>, <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref>, or <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>.</p>\n  <p>A conforming implementation of ECMAScript may choose to implement or not implement <dfn>Normative Optional</dfn> subclauses. If any Normative Optional behaviour is implemented, all of the behaviour in the containing Normative Optional clause must be implemented. A Normative Optional clause is denoted in this specification with the words \"Normative Optional\" in a coloured box, as shown below.</p>\n  <div id=\"excluded-sec-conformance-normative-optional\"><h1><span class=\"secnum\">2.1</span>#sec-conformance-normative-optional Example Normative Optional Clause Heading</h1>...</div><p>A conforming implementation of ECMAScript must implement Legacy subclauses, unless they are also marked as Normative Optional. All of the language features and behaviours specified within Legacy subclauses have one or more undesirable characteristics. However, their continued usage in existing applications prevents their removal from this specification. These features are not considered part of the core ECMAScript language. Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code.</p>\n  <div id=\"excluded-sec-conformance-legacy\"><h1><span class=\"secnum\">2.2</span>#sec-conformance-legacy Example Legacy Clause Heading</h1>...</div><div id=\"excluded-sec-conformance-legacy-normative-optional\"><h1><span class=\"secnum\">2.3</span>#sec-conformance-legacy-normative-optional Example Legacy Normative Optional Clause Heading</h1>...</div></emu-clause>\n\n"}, "sec-properties-of-the-object-prototype-object": {"num": "20.1.3", "title": "#sec-properties-of-the-object-prototype-object Properties of the Object Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-object-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-object-prototype-object\">#sec-properties-of-the-object-prototype-object</span> Properties of the Object Prototype Object</h1>\n      <p>The <dfn>Object prototype object</dfn>:</p>\n      <ul>\n        <li>is <dfn>%Object.prototype%</dfn>.</li>\n        <li>has an [[Extensible]] internal slot whose value is <emu-val>true</emu-val>.</li>\n        <li>has the internal methods defined for ordinary objects, except for the [[SetPrototypeOf]] method, which is as defined in <emu-xref href=\"#sec-immutable-prototype-exotic-objects-setprototypeof-v\"><a href=\"#sec-immutable-prototype-exotic-objects-setprototypeof-v\" class=\"excluded-xref\" excluded-id=\"sec-immutable-prototype-exotic-objects-setprototypeof-v\">#sec-immutable-prototype-exotic-objects-setprototypeof-v</a></emu-xref>. (Thus, it is an <emu-xref href=\"#immutable-prototype-exotic-object\"><a href=\"#immutable-prototype-exotic-object\">immutable prototype exotic object</a></emu-xref>.)</li>\n        <li>has a [[Prototype]] internal slot whose value is <emu-val>null</emu-val>.</li>\n      </ul>\n\n      <div id=\"excluded-sec-object.prototype.constructor\"><h1><span class=\"secnum\">20.1.3.1</span>#sec-object.prototype.constructor Object.prototype.constructor</h1>...</div><div id=\"excluded-sec-object.prototype.hasownproperty\"><h1><span class=\"secnum\">20.1.3.2</span>#sec-object.prototype.hasownproperty Object.prototype.hasOwnProperty ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.isprototypeof\"><h1><span class=\"secnum\">20.1.3.3</span>#sec-object.prototype.isprototypeof Object.prototype.isPrototypeOf ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.propertyisenumerable\"><h1><span class=\"secnum\">20.1.3.4</span>#sec-object.prototype.propertyisenumerable Object.prototype.propertyIsEnumerable ( V )</h1>...</div><div id=\"excluded-sec-object.prototype.tolocalestring\"><h1><span class=\"secnum\">20.1.3.5</span>#sec-object.prototype.tolocalestring Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-object.prototype.tostring\"><h1><span class=\"secnum\">20.1.3.6</span>#sec-object.prototype.tostring Object.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-object.prototype.valueof\"><h1><span class=\"secnum\">20.1.3.7</span>#sec-object.prototype.valueof Object.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-object.prototype.__proto__\"><h1><span class=\"secnum\">20.1.3.8</span>#sec-object.prototype.__proto__ Object.prototype.__proto__</h1>...</div><div id=\"excluded-sec-object.prototype-legacy-accessor-methods\"><h1><span class=\"secnum\">20.1.3.9</span>#sec-object.prototype-legacy-accessor-methods Legacy Object.prototype Accessor Methods</h1>...</div></emu-clause>\n\n    "}, "sec-object-initializer-static-semantics-early-errors": {"num": "13.2.5.1", "title": "#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-object-initializer-static-semantics-early-errors\" oldids=\"sec-__proto__-property-names-in-object-initializers\"><span id=\"sec-__proto__-property-names-in-object-initializers\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"s8ilfl9g\"><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"HasDirectSuper\"><a href=\"#sec-static-semantics-hasdirectsuper\">HasDirectSuper</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <p>In addition to describing an actual object initializer the <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> and may be recognized as part of a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3wg6qczf\"><emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            Always throw a Syntax Error if code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This production exists so that <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"g--o073w\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"hwnsf_iz\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>. This rule is not applied if this <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> which is being evaluated for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref> (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by <emu-xref aoid=\"PropertyNameList\"><a href=\"#sec-static-semantics-propertynamelist\">PropertyNameList</a></emu-xref> does not include property names defined using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" aoid=\"CreateSetIterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. This operation is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-IsHTMLDDA-internal-slot": {"num": "B.3.6", "title": "#sec-IsHTMLDDA-internal-slot The [[IsHTMLDDA]] Internal Slot", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot\">#sec-IsHTMLDDA-internal-slot</span> The [[IsHTMLDDA]] Internal Slot</h1>\n      <p>An <dfn>[[IsHTMLDDA]] internal slot</dfn> may exist on <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> objects. Objects with an [[IsHTMLDDA]] internal slot behave like <emu-val>undefined</emu-val> in the <emu-xref href=\"#sec-toboolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref> and <emu-xref href=\"#sec-abstract-equality-comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and when used as an operand for the <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code> operator</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Objects with an [[IsHTMLDDA]] internal slot are never created by this specification. However, the <a href=\"https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all\"><code>document.all</code> object</a> in web browsers is a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> with this slot that exists for web compatibility purposes. There are no other known examples of this type of object and implementations should not create any with the exception of <code>document.all</code>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-IsHTMLDDA-internal-slot-to-boolean\"><h1><span class=\"secnum\">B.3.6.1</span>#sec-IsHTMLDDA-internal-slot-to-boolean Changes to ToBoolean</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-aec\"><h1><span class=\"secnum\">B.3.6.2</span>#sec-IsHTMLDDA-internal-slot-aec Changes to Abstract Equality Comparison</h1>...</div><div id=\"excluded-sec-IsHTMLDDA-internal-slot-typeof\"><h1><span class=\"secnum\">B.3.6.3</span>#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator</h1>...</div></emu-annex>\n  "}, "sec-set-object.prototype.__proto__": {"num": "20.1.3.8.2", "title": "#sec-set-object.prototype.__proto__ set Object.prototype.__proto__", "html": "<emu-clause id=\"sec-set-object.prototype.__proto__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-object.prototype.__proto__\">#sec-set-object.prototype.__proto__</span> set Object.prototype.__proto__</h1>\n          <p>The value of the [[Set]] attribute is a built-in function that takes an argument <var>proto</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>proto</var>) is neither Object nor Null, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>Let <var>status</var> be ? <var>O</var>.[[SetPrototypeOf]](<var>proto</var>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-object.prototype.__proto__": {"num": "20.1.3.8", "title": "#sec-object.prototype.__proto__ Object.prototype.__proto__", "html": "<emu-clause id=\"sec-object.prototype.__proto__\" legacy=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__proto__\">#sec-object.prototype.__proto__</span> Object.prototype.__proto__</h1>\n        <p><code>Object.prototype.__proto__</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with attributes { [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }. The [[Get]] and [[Set]] attributes are defined as follows:</p>\n\n        <div id=\"excluded-sec-get-object.prototype.__proto__\"><h1><span class=\"secnum\">20.1.3.8.1</span>#sec-get-object.prototype.__proto__ get Object.prototype.__proto__</h1>...</div><div id=\"excluded-sec-set-object.prototype.__proto__\"><h1><span class=\"secnum\">20.1.3.8.2</span>#sec-set-object.prototype.__proto__ set Object.prototype.__proto__</h1>...</div></emu-clause>\n\n      "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "13.2.5.5", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mvlwazei\" id=\"prod-2nasR_1u\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w7ifpmpd\" id=\"prod-r1teTyPc\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"i2hxnrih\" id=\"prod-pxaBv7Tq\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8tkldtak\" id=\"prod-N8qwXXqo\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If this <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> is contained within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> which is being evaluated for JSON.parse (see step <emu-xref href=\"#step-json-parse-parse\"><a href=\"#step-json-parse-parse\" class=\"excluded-xref\" excluded-id=\"step-json-parse-parse\">#step-json-parse-parse</a></emu-xref> of <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>), then<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if <emu-xref aoid=\"IsComputedPropertyKey\"><a href=\"#sec-static-semantics-iscomputedpropertykey\">IsComputedPropertyKey</a></emu-xref>(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return ! <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MethodDefinition\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"y45t6zkk\" id=\"prod-5O6pmf8R\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8uh5vkw0\" id=\"prod-mCjGL17Q\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rai1tkqc\" id=\"prod-0QU7VlhR\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xcdxrozr\" id=\"prod-lU-OqsBQ\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vjheaeci\" id=\"prod-OisJnYgE\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dz5wgjes\" id=\"prod-lzh6ls95\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ? <emu-xref aoid=\"MethodDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-methoddefinitionevaluation\">MethodDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object.prototype.__defineGetter__": {"num": "20.1.3.9.1", "title": "#sec-object.prototype.__defineGetter__ Object.prototype.__defineGetter__ ( P, getter )", "html": "<emu-clause id=\"sec-object.prototype.__defineGetter__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__defineGetter__\">#sec-object.prototype.__defineGetter__</span> Object.prototype.__defineGetter__ ( <var>P</var>, <var>getter</var> )</h1>\n          <p>When the <code>__defineGetter__</code> method is called with arguments <var>P</var> and <var>getter</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>getter</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Get]]: <var>getter</var>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object.prototype.__lookupGetter__": {"num": "20.1.3.9.3", "title": "#sec-object.prototype.__lookupGetter__ Object.prototype.__lookupGetter__ ( P )", "html": "<emu-clause id=\"sec-object.prototype.__lookupGetter__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__lookupGetter__\">#sec-object.prototype.__lookupGetter__</span> Object.prototype.__lookupGetter__ ( <var>P</var> )</h1>\n          <p>When the <code>__lookupGetter__</code> method is called with argument <var>P</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Repeat,<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Get]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>O</var> to ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>O</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" aoid=\"CreateMapIterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. This operation is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-conformance-normative-optional": {"num": "2.1", "title": "#sec-conformance-normative-optional Example Normative Optional Clause Heading", "html": "<emu-clause id=\"sec-conformance-normative-optional\" oldids=\"sec-conformance.normative-optional\" example=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div><span id=\"sec-conformance.normative-optional\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance-normative-optional\">#sec-conformance-normative-optional</span> Example Normative Optional Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n  "}, "sec-additional-properties-of-the-string.prototype-object": {"num": "B.2.2", "title": "#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-string.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-string.prototype-object\">#sec-additional-properties-of-the-string.prototype-object</span> Additional Properties of the String.prototype Object</h1>\n\n      <div id=\"excluded-sec-string.prototype.substr\"><h1><span class=\"secnum\">B.2.2.1</span>#sec-string.prototype.substr String.prototype.substr ( start, length )</h1>...</div><div id=\"excluded-sec-string.prototype.anchor\"><h1><span class=\"secnum\">B.2.2.2</span>#sec-string.prototype.anchor String.prototype.anchor ( name )</h1>...</div><div id=\"excluded-sec-string.prototype.big\"><h1><span class=\"secnum\">B.2.2.3</span>#sec-string.prototype.big String.prototype.big ( )</h1>...</div><div id=\"excluded-sec-string.prototype.blink\"><h1><span class=\"secnum\">B.2.2.4</span>#sec-string.prototype.blink String.prototype.blink ( )</h1>...</div><div id=\"excluded-sec-string.prototype.bold\"><h1><span class=\"secnum\">B.2.2.5</span>#sec-string.prototype.bold String.prototype.bold ( )</h1>...</div><div id=\"excluded-sec-string.prototype.fixed\"><h1><span class=\"secnum\">B.2.2.6</span>#sec-string.prototype.fixed String.prototype.fixed ( )</h1>...</div><div id=\"excluded-sec-string.prototype.fontcolor\"><h1><span class=\"secnum\">B.2.2.7</span>#sec-string.prototype.fontcolor String.prototype.fontcolor ( color )</h1>...</div><div id=\"excluded-sec-string.prototype.fontsize\"><h1><span class=\"secnum\">B.2.2.8</span>#sec-string.prototype.fontsize String.prototype.fontsize ( size )</h1>...</div><div id=\"excluded-sec-string.prototype.italics\"><h1><span class=\"secnum\">B.2.2.9</span>#sec-string.prototype.italics String.prototype.italics ( )</h1>...</div><div id=\"excluded-sec-string.prototype.link\"><h1><span class=\"secnum\">B.2.2.10</span>#sec-string.prototype.link String.prototype.link ( url )</h1>...</div><div id=\"excluded-sec-string.prototype.small\"><h1><span class=\"secnum\">B.2.2.11</span>#sec-string.prototype.small String.prototype.small ( )</h1>...</div><div id=\"excluded-sec-string.prototype.strike\"><h1><span class=\"secnum\">B.2.2.12</span>#sec-string.prototype.strike String.prototype.strike ( )</h1>...</div><div id=\"excluded-sec-string.prototype.sub\"><h1><span class=\"secnum\">B.2.2.13</span>#sec-string.prototype.sub String.prototype.sub ( )</h1>...</div><div id=\"excluded-sec-string.prototype.sup\"><h1><span class=\"secnum\">B.2.2.14</span>#sec-string.prototype.sup String.prototype.sup ( )</h1>...</div><emu-annex id=\"String.prototype.trimleft\">\n        <h1><span class=\"secnum\">B.2.2.15</span> String.prototype.trimLeft ( )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The property <emu-val>\"trimStart\"</emu-val> is preferred. The <emu-val>\"trimLeft\"</emu-val> property is provided principally for compatibility with old code. It is recommended that the <emu-val>\"trimStart\"</emu-val> property be used in new ECMAScript code.</p>\n        </div></emu-note>\n        <p>The initial value of the <emu-val>\"trimLeft\"</emu-val> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>String.prototype.trimStart</code> property.</p>\n      </emu-annex>\n\n      <emu-annex id=\"String.prototype.trimright\">\n        <h1><span class=\"secnum\">B.2.2.16</span> String.prototype.trimRight ( )</h1>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The property <emu-val>\"trimEnd\"</emu-val> is preferred. The <emu-val>\"trimRight\"</emu-val> property is provided principally for compatibility with old code. It is recommended that the <emu-val>\"trimEnd\"</emu-val> property be used in new ECMAScript code.</p>\n        </div></emu-note>\n        <p>The initial value of the <emu-val>\"trimRight\"</emu-val> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>String.prototype.trimEnd</code> property.</p>\n      </emu-annex>\n    </emu-annex>\n\n    "}, "sec-json.parse": {"num": "25.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li id=\"step-json-parse-parse\">Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Let <var>completion</var> be the result of evaluating <var>script</var>. The extended <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref> applies when evaluating ECMAScript source text and does not apply during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">25.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-additional-properties-of-the-date.prototype-object": {"num": "B.2.3", "title": "#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-date.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-date.prototype-object\">#sec-additional-properties-of-the-date.prototype-object</span> Additional Properties of the Date.prototype Object</h1>\n\n      <div id=\"excluded-sec-date.prototype.getyear\"><h1><span class=\"secnum\">B.2.3.1</span>#sec-date.prototype.getyear Date.prototype.getYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.setyear\"><h1><span class=\"secnum\">B.2.3.2</span>#sec-date.prototype.setyear Date.prototype.setYear ( year )</h1>...</div><div id=\"excluded-sec-date.prototype.togmtstring\"><h1><span class=\"secnum\">B.2.3.3</span>#sec-date.prototype.togmtstring Date.prototype.toGMTString ( )</h1>...</div></emu-annex>\n\n    "}, "sec-conformance-legacy": {"num": "2.2", "title": "#sec-conformance-legacy Example Legacy Clause Heading", "html": "<emu-clause id=\"sec-conformance-legacy\" example=\"\" legacy=\"\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance-legacy\">#sec-conformance-legacy</span> Example Legacy Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n  "}, "sec-object.prototype.__defineSetter__": {"num": "20.1.3.9.2", "title": "#sec-object.prototype.__defineSetter__ Object.prototype.__defineSetter__ ( P, setter )", "html": "<emu-clause id=\"sec-object.prototype.__defineSetter__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__defineSetter__\">#sec-object.prototype.__defineSetter__</span> Object.prototype.__defineSetter__ ( <var>P</var>, <var>setter</var> )</h1>\n          <p>When the <code>__defineSetter__</code> method is called with arguments <var>P</var> and <var>setter</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>setter</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Set]]: <var>setter</var>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>key</var>, <var>desc</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.2", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, <emu-xref href=\"#sec-ecmascript-language-statements-and-declarations\"><a href=\"#sec-ecmascript-language-statements-and-declarations\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-statements-and-declarations\">#sec-ecmascript-language-statements-and-declarations</a></emu-xref>, and <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.2.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.2.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.2.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-additional-properties-of-the-regexp.prototype-object": {"num": "B.2.4", "title": "#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object", "html": "<emu-annex id=\"sec-additional-properties-of-the-regexp.prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-properties-of-the-regexp.prototype-object\">#sec-additional-properties-of-the-regexp.prototype-object</span> Additional Properties of the RegExp.prototype Object</h1>\n\n      <div id=\"excluded-sec-regexp.prototype.compile\"><h1><span class=\"secnum\">B.2.4.1</span>#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )</h1>...</div></emu-annex>\n  "}, "sec-string.prototype.anchor": {"num": "B.2.2.2", "title": "#sec-string.prototype.anchor String.prototype.anchor ( name )", "html": "<emu-annex id=\"sec-string.prototype.anchor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.anchor\">#sec-string.prototype.anchor</span> String.prototype.anchor ( <var>name</var> )</h1>\n        <p>When the <code>anchor</code> method is called with argument <var>name</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateHTML\"><a href=\"#sec-createhtml\">CreateHTML</a></emu-xref>(<var>S</var>, <emu-val>\"a\"</emu-val>, <emu-val>\"name\"</emu-val>, <var>name</var>).</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-createhtml\"><h1><span class=\"secnum\">B.2.2.2.1</span>#sec-createhtml CreateHTML ( string, tag, attribute, value )</h1>...</div></emu-annex>\n\n      "}, "sec-object.prototype-legacy-accessor-methods": {"num": "20.1.3.9", "title": "#sec-object.prototype-legacy-accessor-methods Legacy Object.prototype Accessor Methods", "html": "<emu-clause id=\"sec-object.prototype-legacy-accessor-methods\" legacy=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype-legacy-accessor-methods\">#sec-object.prototype-legacy-accessor-methods</span> Legacy Object.prototype Accessor Methods</h1>\n\n        <div id=\"excluded-sec-object.prototype.__defineGetter__\"><h1><span class=\"secnum\">20.1.3.9.1</span>#sec-object.prototype.__defineGetter__ Object.prototype.__defineGetter__ ( P, getter )</h1>...</div><div id=\"excluded-sec-object.prototype.__defineSetter__\"><h1><span class=\"secnum\">20.1.3.9.2</span>#sec-object.prototype.__defineSetter__ Object.prototype.__defineSetter__ ( P, setter )</h1>...</div><div id=\"excluded-sec-object.prototype.__lookupGetter__\"><h1><span class=\"secnum\">20.1.3.9.3</span>#sec-object.prototype.__lookupGetter__ Object.prototype.__lookupGetter__ ( P )</h1>...</div><div id=\"excluded-sec-object.prototype.__lookupSetter__\"><h1><span class=\"secnum\">20.1.3.9.4</span>#sec-object.prototype.__lookupSetter__ Object.prototype.__lookupSetter__ ( P )</h1>...</div></emu-clause>\n    "}, "sec-conformance-legacy-normative-optional": {"num": "2.3", "title": "#sec-conformance-legacy-normative-optional Example Legacy Normative Optional Clause Heading", "html": "<emu-clause id=\"sec-conformance-legacy-normative-optional\" example=\"\" legacy=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance-legacy-normative-optional\">#sec-conformance-legacy-normative-optional</span> Example Legacy Normative Optional Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-object.prototype.__lookupSetter__": {"num": "20.1.3.9.4", "title": "#sec-object.prototype.__lookupSetter__ Object.prototype.__lookupSetter__ ( P )", "html": "<emu-clause id=\"sec-object.prototype.__lookupSetter__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.__lookupSetter__\">#sec-object.prototype.__lookupSetter__</span> Object.prototype.__lookupSetter__ ( <var>P</var> )</h1>\n          <p>When the <code>__lookupSetter__</code> method is called with argument <var>P</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>key</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>P</var>).</li><li>Repeat,<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Set]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>O</var> to ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>O</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-get-object.prototype.__proto__": {"num": "20.1.3.8.1", "title": "#sec-get-object.prototype.__proto__ get Object.prototype.__proto__", "html": "<emu-clause id=\"sec-get-object.prototype.__proto__\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-object.prototype.__proto__\">#sec-get-object.prototype.__proto__</span> get Object.prototype.__proto__</h1>\n          <p>The value of the [[Get]] attribute is a built-in function that requires no arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ? <var>O</var>.[[GetPrototypeOf]]().</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object.prototype.valueof": {"num": "20.1.3.7", "title": "#sec-object.prototype.valueof Object.prototype.valueOf ( )", "html": "<emu-clause id=\"sec-object.prototype.valueof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.valueof\">#sec-object.prototype.valueof</span> Object.prototype.valueOf ( )</h1>\n        <p>When the <code>valueOf</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-additional-built-in-properties": {"num": "B.2", "title": "#sec-additional-built-in-properties Additional Built-in Properties", "html": "<emu-annex id=\"sec-additional-built-in-properties\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-built-in-properties\">#sec-additional-built-in-properties</span> Additional Built-in Properties</h1>\n    <p>When the ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is a web browser the following additional properties of the standard built-in objects are defined.</p>\n\n    <div id=\"excluded-sec-additional-properties-of-the-global-object\"><h1><span class=\"secnum\">B.2.1</span>#sec-additional-properties-of-the-global-object Additional Properties of the Global Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-string.prototype-object\"><h1><span class=\"secnum\">B.2.2</span>#sec-additional-properties-of-the-string.prototype-object Additional Properties of the String.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-date.prototype-object\"><h1><span class=\"secnum\">B.2.3</span>#sec-additional-properties-of-the-date.prototype-object Additional Properties of the Date.prototype Object</h1>...</div><div id=\"excluded-sec-additional-properties-of-the-regexp.prototype-object\"><h1><span class=\"secnum\">B.2.4</span>#sec-additional-properties-of-the-regexp.prototype-object Additional Properties of the RegExp.prototype Object</h1>...</div></emu-annex>\n\n  "}}, "figData": {}}}