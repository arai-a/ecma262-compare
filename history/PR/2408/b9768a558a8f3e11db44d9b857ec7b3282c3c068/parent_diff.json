{"from": {"secList": ["sec-moduleevaluation", "sec-getmodulenamespace", "sec-async-function-definitions", "sec-parsemodule", "sec-InnerModuleLinking", "sec-finishdynamicimport", "sec-async-functions-abstract-operations", "sec-module-semantics", "sec-hostimportmoduledynamically", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-modulenamespacecreate", "sec-module-environment-records-getbindingvalue-n-s", "sec-cyclic-module-records", "sec-modules", "sec-async-functions-abstract-operations-async-function-start", "sec-example-cyclic-module-record-graphs", "sec-exports", "sec-moduledeclarationlinking", "sec-scripts-and-modules", "sec-abstract-module-records", "sec-source-text-module-records", "sec-imports", "sec-source-text-module-record-execute-module", "sec-innermoduleevaluation"], "secData": {"sec-moduleevaluation": {"num": "16.2.1.5.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>. If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-getmodulenamespace": {"num": "16.2.1.10", "title": "#sec-getmodulenamespace GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var>. It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>name</var> of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions": {"num": "15.8", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9rildsyw\" id=\"prod-iAuKx0s9\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_vbcugdo\" constraints=\"+Default\" id=\"prod-TaHP58mu\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mviccgpw\" id=\"prod-LFCRNt3l\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tzooi3sy\" id=\"prod-80co-gZ6\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j_tcfidx\" id=\"prod-WjFwGBMF\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wzxw5xwu\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.8.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionobject\"><h1><span class=\"secnum\">15.8.2</span>#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionexpression\"><h1><span class=\"secnum\">15.8.3</span>#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncfunctionbody\"><h1><span class=\"secnum\">15.8.4</span>#sec-runtime-semantics-evaluateasyncfunctionbody Runtime Semantics: EvaluateAsyncFunctionBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.8.5</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-parsemodule": {"num": "16.2.1.6.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <var>body</var>.</li><li>Let <var>importEntries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> of <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-InnerModuleLinking": {"num": "16.2.1.5.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a normal completion and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-functions-abstract-operations": {"num": "27.7.5", "title": "#sec-async-functions-abstract-operations Async Functions Abstract Operations", "html": "<emu-clause id=\"sec-async-functions-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations\">#sec-async-functions-abstract-operations</span> Async Functions Abstract Operations</h1>\n\n      <div id=\"excluded-sec-async-functions-abstract-operations-async-function-start\"><h1><span class=\"secnum\">27.7.5.1</span>#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )</h1>...</div></emu-clause>\n  "}, "sec-module-semantics": {"num": "16.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">16.2.1.2</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-static-semantics-modulerequests\"><h1><span class=\"secnum\">16.2.1.3</span>#sec-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">16.2.1.4</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">16.2.1.5</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">16.2.1.6</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">16.2.1.7</span>#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">16.2.1.8</span>#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">16.2.1.9</span>#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">16.2.1.10</span>#sec-getmodulenamespace GetModuleNamespace ( module )</h1>...</div><div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.1.11</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>)).</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>), with the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "10.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-modulenamespacecreate": {"num": "10.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> and <var>exports</var>. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exports</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String values.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-modules": {"num": "16.2", "title": "#sec-modules Modules", "html": "<emu-clause id=\"sec-modules\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modules\">#sec-modules</span> Modules</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"Module\" id=\"prod-Module\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvsblmsd\" id=\"prod-J1Dzjg4f\"><emu-nt optional=\"\"><a href=\"#prod-ModuleBody\">ModuleBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleBody\" id=\"prod-ModuleBody\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqenfemp\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleItemList\" id=\"prod-ModuleItemList\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ap7dhqxm\" id=\"prod-oFwa4ZD6\"><emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"dd23jrxs\" id=\"prod-GXF21Ewo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleItem\" id=\"prod-ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-0vrrEsBm\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-WCJmhvY4\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"unijm5xs\" id=\"prod-jXCkpXv4\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-module-semantics\"><h1><span class=\"secnum\">16.2.1</span>#sec-module-semantics Module Semantics</h1>...</div><div id=\"excluded-sec-imports\"><h1><span class=\"secnum\">16.2.2</span>#sec-imports Imports</h1>...</div><div id=\"excluded-sec-exports\"><h1><span class=\"secnum\">16.2.3</span>#sec-exports Exports</h1>...</div></emu-clause>\n"}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for the step below to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncFunctionBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncfunctionstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a normal completion with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncfunctionstart-return-undefined\"><a href=\"#step-asyncfunctionstart-return-undefined\">4.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const>, both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-exports": {"num": "16.2.3", "title": "#sec-exports Exports", "html": "<emu-clause id=\"sec-exports\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports\">#sec-exports</span> Exports</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ExportDeclaration\" id=\"prod-ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-xWvkB_EQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod---2Mdo2Q\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"awunbvdu\" id=\"prod-w_WAVAwX\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"a8mbl6ic\" id=\"prod-60Xh0dpZ\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"0pjhun9m\" id=\"prod-bE4rfMak\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, ~Await, +Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[~Yield, ~Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ridmvkht\" id=\"prod-KPFnW3Lq\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, ~Await, +Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[~Yield, ~Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4qwftn93\" id=\"prod-GUPXSqcT\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ~Yield, ~Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportFromClause\" id=\"prod-ExportFromClause\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-A39AIi_B\"><emu-t>*</emu-t></emu-rhs>\n    <emu-rhs a=\"dtcd7req\" id=\"prod-o48mDNgZ\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_xs5tuve\" id=\"prod-bKXP43lb\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NamedExports\" id=\"prod-NamedExports\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tKOro2Xm\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"kbfbtt8z\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wwyi_qo2\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportsList\" id=\"prod-ExportsList\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w1vp78-i\"><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gqfndot_\" id=\"prod-JgWQiNCe\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportSpecifier\" id=\"prod-ExportSpecifier\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-JyH8gtYm\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qvusrr4h\" id=\"prod-HMTDwQcl\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-exports-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.3.1</span>#sec-exports-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-exportedbindings\"><h1><span class=\"secnum\">16.2.3.2</span>#sec-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-static-semantics-exportednames\"><h1><span class=\"secnum\">16.2.3.3</span>#sec-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-static-semantics-exportentries\"><h1><span class=\"secnum\">16.2.3.4</span>#sec-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-static-semantics-exportentriesformodule\"><h1><span class=\"secnum\">16.2.3.5</span>#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule</h1>...</div><div id=\"excluded-sec-static-semantics-referencedbindings\"><h1><span class=\"secnum\">16.2.3.6</span>#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings</h1>...</div><div id=\"excluded-sec-exports-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.3.7</span>#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n  "}, "sec-moduledeclarationlinking": {"num": "16.2.1.5.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">16.2.1.5.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-scripts-and-modules": {"num": "A.5", "title": "#sec-scripts-and-modules Scripts and Modules", "html": "<emu-annex id=\"sec-scripts-and-modules\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-and-modules\">#sec-scripts-and-modules</span> Scripts and Modules</h1>\n    <emu-production name=\"Script\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cmjfjhkc\" id=\"prod-k7_ObWcc\"><emu-nt optional=\"\"><a href=\"#prod-ScriptBody\">ScriptBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ScriptBody\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mn4pemzx\" id=\"prod-he3lY70e\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Module\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvsblmsd\" id=\"prod-J1Dzjg4f\"><emu-nt optional=\"\"><a href=\"#prod-ModuleBody\">ModuleBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleBody\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqenfemp\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleItemList\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ap7dhqxm\" id=\"prod-oFwa4ZD6\"><emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"dd23jrxs\" id=\"prod-GXF21Ewo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-0vrrEsBm\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-WCJmhvY4\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"unijm5xs\" id=\"prod-jXCkpXv4\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportDeclaration\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-WzAgO-V_\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"odcuzpbi\" id=\"prod-CDGJVPkq\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportClause\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oi8izote\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"81tm-dw4\"><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"zfagpfvq\"><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"y9r1l58g\" id=\"prod-kEa0XgB6\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ih8rgsdx\" id=\"prod-wyOKxI9w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportedDefaultBinding\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-XiX5S_vU\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NameSpaceImport\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-AScJop1Y\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"NamedImports\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SkqVKtrZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"g1js-lhi\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bxjtogxx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FromClause\">\n    <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rev6es22\">\n        <emu-t>from</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportsList\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"upllvvnq\"><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ggcfvgot\" id=\"prod-UCgvcMcb\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportSpecifier\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-5TmWi69r\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"onppcdhk\" id=\"prod-Pd4rUvEL\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleSpecifier\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-sCJUL89L\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportedBinding\">\n    <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bsylxsqy\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-xWvkB_EQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod---2Mdo2Q\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"awunbvdu\" id=\"prod-w_WAVAwX\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"a8mbl6ic\" id=\"prod-60Xh0dpZ\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"0pjhun9m\" id=\"prod-bE4rfMak\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, ~Await, +Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[~Yield, ~Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ridmvkht\" id=\"prod-KPFnW3Lq\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, ~Await, +Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[~Yield, ~Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4qwftn93\" id=\"prod-GUPXSqcT\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ~Yield, ~Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportFromClause\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-A39AIi_B\"><emu-t>*</emu-t></emu-rhs>\n    <emu-rhs a=\"dtcd7req\" id=\"prod-o48mDNgZ\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_xs5tuve\" id=\"prod-bKXP43lb\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NamedExports\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tKOro2Xm\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"kbfbtt8z\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wwyi_qo2\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportsList\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w1vp78-i\"><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gqfndot_\" id=\"prod-JgWQiNCe\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportSpecifier\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-JyH8gtYm\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qvusrr4h\" id=\"prod-HMTDwQcl\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-abstract-module-records": {"num": "16.2.1.4", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-module-record-fields\" caption=\"Module Record Fields\" oldids=\"table-36\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption><span id=\"table-36\"></span>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              </td>\n              <td>\n                Field reserved for use by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments that need to associate additional information with a module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-abstract-methods-of-module-records\" caption=\"Abstract Methods of Module Records\" oldids=\"table-37\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</span>: Abstract Methods of Module Records</figcaption><span id=\"table-37\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-source-text-module-records": {"num": "16.2.1.6", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in <emu-xref href=\"#table-additional-fields-of-source-text-module-records\"><a href=\"#table-additional-fields-of-source-text-module-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-source-text-module-records\" caption=\"Additional Fields of Source Text Module Records\" oldids=\"table-38\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</span>: Additional Fields of Source Text Module Records</figcaption><span id=\"table-38\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Context]]\n              </td>\n              <td>\n                An ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> associated with this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportMeta]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                An object exposed through the <code>import.meta</code> meta property. It is <emu-const>empty</emu-const> until it is accessed by ECMAScript code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to <code>export *</code> declarations that occur within the module, not including <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-importentry-record-fields\"><a href=\"#table-importentry-record-fields\" class=\"excluded-xref\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</a></emu-xref>:</p>\n        <emu-table id=\"table-importentry-record-fields\" caption=\"ImportEntry Record Fields\" oldids=\"table-39\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-39\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <emu-val>\"*\"</emu-val> indicates that the import request is for the target module's namespace object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-import-forms-mapping-to-importentry-records\"><a href=\"#table-import-forms-mapping-to-importentry-records\" class=\"excluded-xref\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-import-forms-mapping-to-importentry-records\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\" oldids=\"table-40\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption><span id=\"table-40\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-exportentry-records\"><a href=\"#table-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</a></emu-xref>:</p>\n        <emu-table id=\"table-exportentry-records\" caption=\"ExportEntry Record Fields\" oldids=\"table-41\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-41\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name used to export this binding by this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <emu-val>\"*\"</emu-val> indicates that the export request is for all exported bindings.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-export-forms-mapping-to-exportentry-records\"><a href=\"#table-export-forms-mapping-to-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-export-forms-mapping-to-exportentry-records\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\" oldids=\"table-42\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption><span id=\"table-42\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                </th>\n                <th>\n                  [[ExportName]]\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f() {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"f\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function () {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">16.2.1.6.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">16.2.1.6.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">16.2.1.6.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">16.2.1.6.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">16.2.1.6.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method</h1>...</div></emu-clause>\n\n      "}, "sec-imports": {"num": "16.2.2", "title": "#sec-imports Imports", "html": "<emu-clause id=\"sec-imports\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-imports\">#sec-imports</span> Imports</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ImportDeclaration\" id=\"prod-ImportDeclaration\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-WzAgO-V_\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"odcuzpbi\" id=\"prod-CDGJVPkq\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportClause\" id=\"prod-ImportClause\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oi8izote\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"81tm-dw4\"><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"zfagpfvq\"><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"y9r1l58g\" id=\"prod-kEa0XgB6\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ih8rgsdx\" id=\"prod-wyOKxI9w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportedDefaultBinding\" id=\"prod-ImportedDefaultBinding\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-XiX5S_vU\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NameSpaceImport\" id=\"prod-NameSpaceImport\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-AScJop1Y\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NamedImports\" id=\"prod-NamedImports\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SkqVKtrZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"g1js-lhi\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bxjtogxx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FromClause\" id=\"prod-FromClause\">\n    <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rev6es22\">\n        <emu-t>from</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportsList\" id=\"prod-ImportsList\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"upllvvnq\"><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ggcfvgot\" id=\"prod-UCgvcMcb\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportSpecifier\" id=\"prod-ImportSpecifier\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-5TmWi69r\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"onppcdhk\" id=\"prod-Pd4rUvEL\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleSpecifier\" id=\"prod-ModuleSpecifier\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-sCJUL89L\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportedBinding\" id=\"prod-ImportedBinding\">\n    <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bsylxsqy\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-imports-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.2.1</span>#sec-imports-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-importentries\"><h1><span class=\"secnum\">16.2.2.2</span>#sec-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-static-semantics-importentriesformodule\"><h1><span class=\"secnum\">16.2.2.3</span>#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule</h1>...</div></emu-clause>\n\n    "}, "sec-source-text-module-record-execute-module": {"num": "16.2.1.6.5", "title": "#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-execute-module\" aoid=\"ExecuteModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-execute-module\">#sec-source-text-module-record-execute-module</span> ExecuteModule ( ) Concrete Method</h1>\n          <p>The ExecuteModule concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes no arguments. It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>moduleContext</var> be <var>module</var>.[[Context]].</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be the result of evaluating <var>module</var>.[[ECMAScriptCode]].</li><li>Suspend <var>moduleContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-innermoduleevaluation": {"num": "16.2.1.5.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-internal-slots-of-module-namespace-exotic-objects": "Table 35", "table-module-record-fields": "Table 44", "table-abstract-methods-of-module-records": "Table 45", "table-cyclic-module-fields": "Table 46", "table-cyclic-module-methods": "Table 47", "table-additional-fields-of-source-text-module-records": "Table 48", "table-importentry-record-fields": "Table 49", "table-import-forms-mapping-to-importentry-records": "Table 50", "table-exportentry-records": "Table 51", "table-export-forms-mapping-to-exportentry-records": "Table 52"}}, "to": {"secList": ["sec-execute-async-module", "sec-moduleevaluation", "sec-getmodulenamespace", "sec-async-function-definitions", "sec-parsemodule", "sec-InnerModuleLinking", "sec-finishdynamicimport", "sec-asyncblockstart", "sec-async-functions-abstract-operations", "sec-module-semantics", "sec-async-module-execution-rejected", "sec-hostimportmoduledynamically", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-gather-async-parent-completions", "sec-modulenamespacecreate", "sec-module-environment-records-getbindingvalue-n-s", "sec-cyclic-module-records", "sec-modules", "sec-async-module-execution-fulfilled", "sec-async-functions-abstract-operations-async-function-start", "sec-example-cyclic-module-record-graphs", "sec-exports", "sec-moduledeclarationlinking", "sec-scripts-and-modules", "sec-abstract-module-records", "sec-source-text-module-records", "sec-imports", "sec-source-text-module-record-execute-module", "sec-innermoduleevaluation"], "secData": {"sec-execute-async-module": {"num": "16.2.1.5.2.2", "title": "#sec-execute-async-module ExecuteAsyncModule ( module )", "html": "<emu-clause id=\"sec-execute-async-module\" aoid=\"ExecuteAsyncModule\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execute-async-module\">#sec-execute-async-module</span> ExecuteAsyncModule ( <var>module</var> )</h1>\n            <p>The abstract operation ExecuteAsyncModule takes argument <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>). It performs the following steps when called:</p>\n            <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Async]] is <emu-val>true</emu-val>.</li><li>Let <var>capability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>stepsFulfilled</var> be the steps of a CallAsyncModuleFulfilled function as specified below.</li><li>Let <var>onFulfilled</var> be <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[Module]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Module]] to <var>module</var>.</li><li>Let <var>stepsRejected</var> be the steps of a CallAsyncModuleRejected function as specified below.</li><li>Let <var>onRejected</var> be <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[Module]] &#187;).</li><li>Set <var>onRejected</var>.[[Module]] to <var>module</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>capability</var>.[[Promise]], <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Perform ! <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>(<var>capability</var>).</li><li>Return.</li></ol></emu-alg>\n\n            <p>A CallAsyncModuleFulfilled function is an anonymous built-in function with a [[Module]] internal slot. When a CallAsyncModuleFulfilled function that expects no arguments is called it performs the following steps:</p>\n            <emu-alg><ol><li>Let <var>f</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>module</var> be <var>f</var>.[[Module]].</li><li>Perform !&#160;<emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref>(<var>module</var>).</li><li>Return.</li></ol></emu-alg>\n\n            <p>A CallAsyncModuleRejected function is an anonymous built-in function with a [[Module]] internal slot. When a CallAsyncModuleRejected function is called with argument <var>error</var> it performs the following steps:</p>\n            <emu-alg><ol><li>Let <var>f</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>module</var> be <var>f</var>.[[Module]].</li><li>Perform !&#160;<emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref>(<var>module</var>, <var>error</var>).</li><li>Return.</li></ol></emu-alg>\n          </emu-clause>\n\n          "}, "sec-moduleevaluation": {"num": "16.2.1.5.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>. The Promise returned by Evaluate is allocated by the first invocation of Evaluate, and its capability is stored in the [[TopLevelCapability]] field. If execution results in an exception, the Promise is rejected. Future invocations of Evaluate return the same Promise. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, set <var>module</var> to <var>module</var>.[[CycleRoot]].</li><li>If <var>module</var>.[[TopLevelCapability]] is not <emu-const>empty</emu-const>, then<ol><li>Return <var>module</var>.[[TopLevelCapability]].[[Promise]].</li></ol></li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>capability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Set <var>module</var>.[[TopLevelCapability]] to <var>capability</var>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>capability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-const>empty</emu-const>.</li><li>If <var>module</var>.[[AsyncEvaluating]] is <emu-val>false</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>capability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li></ol></li><li>Return <var>capability</var>.[[Promise]].</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div><div id=\"excluded-sec-execute-async-module\"><h1><span class=\"secnum\">16.2.1.5.2.2</span>#sec-execute-async-module ExecuteAsyncModule ( module )</h1>...</div><div id=\"excluded-sec-gather-async-parent-completions\"><h1><span class=\"secnum\">16.2.1.5.2.3</span>#sec-gather-async-parent-completions GatherAsyncParentCompletions ( module, execList )</h1>...</div><div id=\"excluded-sec-async-module-execution-fulfilled\"><h1><span class=\"secnum\">16.2.1.5.2.4</span>#sec-async-module-execution-fulfilled AsyncModuleExecutionFulfilled ( module )</h1>...</div><div id=\"excluded-sec-async-module-execution-rejected\"><h1><span class=\"secnum\">16.2.1.5.2.5</span>#sec-async-module-execution-rejected AsyncModuleExecutionRejected ( module, error )</h1>...</div></emu-clause>\n\n        "}, "sec-getmodulenamespace": {"num": "16.2.1.10", "title": "#sec-getmodulenamespace GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var>. It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>name</var> of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-async-function-definitions": {"num": "15.8", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9rildsyw\" id=\"prod-iAuKx0s9\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"_vbcugdo\" constraints=\"+Default\" id=\"prod-TaHP58mu\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mviccgpw\" id=\"prod-LFCRNt3l\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tzooi3sy\" id=\"prod-80co-gZ6\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementName\">ClassElementName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"j_tcfidx\" id=\"prod-WjFwGBMF\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"wzxw5xwu\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the top level of the following contexts, although these contexts may also contain nonterminals which disable the parameter, such as <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n        <li>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.8.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionobject\"><h1><span class=\"secnum\">15.8.2</span>#sec-runtime-semantics-instantiateasyncfunctionobject Runtime Semantics: InstantiateAsyncFunctionObject</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateasyncfunctionexpression\"><h1><span class=\"secnum\">15.8.3</span>#sec-runtime-semantics-instantiateasyncfunctionexpression Runtime Semantics: InstantiateAsyncFunctionExpression</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluateasyncfunctionbody\"><h1><span class=\"secnum\">15.8.4</span>#sec-runtime-semantics-evaluateasyncfunctionbody Runtime Semantics: EvaluateAsyncFunctionBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.8.5</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-parsemodule": {"num": "16.2.1.6.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <var>body</var>.</li><li>Let <var>importEntries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> of <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Let <var>async</var> be <var>body</var> <emu-xref aoid=\"Contains\"><a href=\"#sec-static-semantics-contains\">Contains</a></emu-xref> <code>await</code>.</li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-const>empty</emu-const>, [[Namespace]]: <emu-const>empty</emu-const>, [[CycleRoot]]: <emu-const>empty</emu-const>, [[Async]]: <var>async</var>, [[AsyncEvaluating]]: <emu-val>false</emu-val>, [[TopLevelCapability]]: <emu-const>empty</emu-const>, [[AsyncParentModules]]: &#171; &#187;, [[PendingAsyncDependencies]]: <emu-const>empty</emu-const>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-const>empty</emu-const>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-const>empty</emu-const>, [[DFSAncestorIndex]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-InnerModuleLinking": {"num": "16.2.1.5.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, innerPromise )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>innerPromise</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>innerPromise</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>innerPromise</var>'s resolution. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>stepsFulfilled</var> be the steps of a CallDynamicImportFulfilled function as specified below.</li><li>Let <var>onFulfilled</var> be <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[ReferencingScriptOrModule]], [[Specifier]], [[PromiseCapability]] &#187;).</li><li>Set <var>onFulfilled</var>.[[ReferencingScriptOrModule]] to <var>referencingScriptOrModule</var>.</li><li>Set <var>onFulfilled</var>.[[Specifier]] to <var>specifier</var>.</li><li>Set <var>onFulfilled</var>.[[PromiseCapability]] to <var>promiseCapability</var>.</li><li>Let <var>stepsRejected</var> be the steps of a CallDynamicImportRejected function as specified below.</li><li>Let <var>onRejected</var> be <emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, 0, <emu-val>\"\"</emu-val>, &#171; [[PromiseCapability]] &#187;).</li><li>Set <var>onRejected</var>.[[PromiseCapability]] to <var>promiseCapability</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>innerPromise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li></ol></emu-alg>\n\n        <p>A CallDynamicImportFulfilled function is an anonymous built-in function with the internal slots [[ReferencingScriptOrModule]], [[Specifier]], and [[PromiseCapability]]. It takes one argument, <var>result</var>. When called, it performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is <emu-val>undefined</emu-val>.</li><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>referencingScriptOrModule</var> be <var>F</var>.[[ReferencingScriptOrModule]].</li><li>Let <var>specifier</var> be <var>F</var>.[[Specifier]].</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[PromiseCapability]].</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></emu-alg>\n\n        <p>A CallDynamicImportRejected function is an anonymous built-in function with one internal slot [[PromiseCapability]] and has one argument <var>error</var>. When a CallDynamicImportRejected function is called it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>F</var>.[[PromiseCapability]].</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>error</var> &#187;).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncblockstart": {"num": "27.7.5.2", "title": "#sec-asyncblockstart AsyncBlockStart ( promiseCapability, asyncBody, asyncContext )", "html": "<emu-clause id=\"sec-asyncblockstart\" aoid=\"AsyncBlockStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncblockstart\">#sec-asyncblockstart</span> AsyncBlockStart ( <var>promiseCapability</var>, <var>asyncBody</var>, <var>asyncContext</var> )</h1>\n        <p>The abstract operation AsyncBlockStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), <var>asyncBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>asyncContext</var> (an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>asyncContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>asyncBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.</li><li>Remove <var>asyncContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>result</var>.[[Value]] &#187;).</li></ol></li><li id=\"step-asyncblockstart-return-undefined\">Return.</li></ol></li><li>Push <var>asyncContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>asyncContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>asyncContext</var>. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>asyncContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>runningContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is a normal completion with a value of <emu-val>undefined</emu-val>. The possible sources of completion values are <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref> or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"><a href=\"#step-asyncblockstart-return-undefined\">3.g</a></emu-xref> above.</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-functions-abstract-operations": {"num": "27.7.5", "title": "#sec-async-functions-abstract-operations Async Functions Abstract Operations", "html": "<emu-clause id=\"sec-async-functions-abstract-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations\">#sec-async-functions-abstract-operations</span> Async Functions Abstract Operations</h1>\n\n      <div id=\"excluded-sec-async-functions-abstract-operations-async-function-start\"><h1><span class=\"secnum\">27.7.5.1</span>#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )</h1>...</div><div id=\"excluded-sec-asyncblockstart\"><h1><span class=\"secnum\">27.7.5.2</span>#sec-asyncblockstart AsyncBlockStart ( promiseCapability, asyncBody, asyncContext )</h1>...</div></emu-clause>\n  "}, "sec-module-semantics": {"num": "16.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">16.2.1.2</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-static-semantics-modulerequests\"><h1><span class=\"secnum\">16.2.1.3</span>#sec-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">16.2.1.4</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">16.2.1.5</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">16.2.1.6</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">16.2.1.7</span>#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">16.2.1.8</span>#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">16.2.1.9</span>#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, innerPromise )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">16.2.1.10</span>#sec-getmodulenamespace GetModuleNamespace ( module )</h1>...</div><div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.1.11</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-async-module-execution-rejected": {"num": "16.2.1.5.2.5", "title": "#sec-async-module-execution-rejected AsyncModuleExecutionRejected ( module, error )", "html": "<emu-clause id=\"sec-async-module-execution-rejected\" aoid=\"AsyncModuleExecutionRejected\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-module-execution-rejected\">#sec-async-module-execution-rejected</span> AsyncModuleExecutionRejected ( <var>module</var>, <var>error</var> )</h1>\n            <p>The abstract operation AsyncModuleExecutionRejected takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>) and <var>error</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n            <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>.</li><li>If <var>module</var>.[[AsyncEvaluating]] is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[EvaluationError]] is not <emu-const>empty</emu-const>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[EvaluationError]] is <emu-const>empty</emu-const>.</li><li>Set <var>module</var>.[[EvaluationError]] to <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li><li>Set <var>module</var>.[[AsyncEvaluating]] to <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>module</var>.[[AsyncParentModules]], do<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref>(<var>m</var>, <var>error</var>).</li></ol></li><li>If <var>module</var>.[[TopLevelCapability]] is not <emu-const>empty</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[CycleRoot]] is <var>module</var>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>module</var>.[[TopLevelCapability]].[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>error</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-hostimportmoduledynamically": {"num": "16.2.1.8", "title": "#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )", "html": "<emu-clause id=\"sec-hostimportmoduledynamically\" aoid=\"HostImportModuleDynamically\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostimportmoduledynamically\">#sec-hostimportmoduledynamically</span> HostImportModuleDynamically ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> )</h1>\n        <p>The <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> abstract operation HostImportModuleDynamically takes arguments <var>referencingScriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-val>null</emu-val>), <var>specifier</var> (a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String), and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs any necessary setup work in order to make available the module corresponding to <var>specifier</var> occurring within the context of the script or module represented by <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may be <emu-val>null</emu-val> if there is no <emu-xref href=\"#job-activescriptormodule\"><a href=\"#job-activescriptormodule\">active script or module</a></emu-xref> when the <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression occurs. It then performs <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> to finish the dynamic import process.</p>\n        <p>The implementation of HostImportModuleDynamically must conform to the following requirements:</p>\n\n        <ul>\n          <li>\n            The abstract operation must always complete normally with <emu-val>undefined</emu-val>. Success or failure must instead be signaled as discussed below.\n          </li>\n          <li>\n            The <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must conform to one of the two following sets of requirements:\n            <dl>\n              <dt>Success path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>promise</var>), where <var>promise</var> is a Promise resolved with <emu-val>undefined</emu-val>.</li>\n\n                  <li>Any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must complete normally.</li>\n\n                  <li>The completion value of any subsequent call to <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> after <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref> has completed, given the arguments <var>referencingScriptOrModule</var> and <var>specifier</var>, must be a module which has already been evaluated, i.e. whose Evaluate concrete method has already been called and returned a normal completion.</li>\n                </ul>\n              </dd>\n\n              <dt>Failure path</dt>\n\n              <dd>\n                <ul>\n                  <li>At some future time, the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> must perform <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>promise</var>), where <var>promise</var> is a Promise rejected with an error representing the cause of failure.</li>\n                </ul>\n              </dd>\n            </dl>\n          </li>\n          <li>\n            If the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> takes the success path once for a given <var>referencingScriptOrModule</var>, <var>specifier</var> pair, it must always do so for subsequent calls.\n          </li>\n          <li>\n            The operation must not call <var>promiseCapability</var>.[[Resolve]] or <var>promiseCapability</var>.[[Reject]], but instead must treat <var>promiseCapability</var> as an opaque identifying value to be passed through to <emu-xref aoid=\"FinishDynamicImport\"><a href=\"#sec-finishdynamicimport\">FinishDynamicImport</a></emu-xref>.\n          </li>\n        </ul>\n\n        <p>The actual process performed is <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref>, but typically consists of performing whatever I/O operations are necessary to allow <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> to synchronously retrieve the appropriate <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and then calling its Evaluate concrete method. This might require performing similar normalization as <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> does.</p>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "10.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-const>empty</emu-const>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-gather-async-parent-completions": {"num": "16.2.1.5.2.3", "title": "#sec-gather-async-parent-completions GatherAsyncParentCompletions ( module, execList )", "html": "<emu-clause id=\"sec-gather-async-parent-completions\" aoid=\"GatherAsyncParentCompletions\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gather-async-parent-completions\">#sec-gather-async-parent-completions</span> GatherAsyncParentCompletions ( <var>module</var>, <var>execList</var> )</h1>\n            <p>The abstract operation GatherAsyncParentCompletions takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>) and <var>execList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Cyclic Module Records). It performs the following steps when called:</p>\n            <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>.</li><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>module</var>.[[AsyncParentModules]], do<ol><li>If <var>execList</var> does not contain <var>m</var> and <var>m</var>.[[CycleRoot]].[[EvaluationError]] is <emu-const>empty</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[EvaluationError]] is <emu-const>empty</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[AsyncEvaluating]] is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[PendingAsyncDependencies]] &gt; 0.</li><li>Set <var>m</var>.[[PendingAsyncDependencies]] to <var>m</var>.[[PendingAsyncDependencies]] - 1.</li><li>If <var>m</var>.[[PendingAsyncDependencies]] = 0, then<ol><li>Append <var>m</var> to <var>execList</var>.</li><li>If <var>m</var>.[[Async]] is <emu-val>false</emu-val>, perform !&#160;<emu-xref aoid=\"GatherAsyncParentCompletions\"><a href=\"#sec-gather-async-parent-completions\">GatherAsyncParentCompletions</a></emu-xref>(<var>m</var>, <var>execList</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n            <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n              <p>When an async execution for a root <var>module</var> is fulfilled, this function determines the list of modules which are able to synchronously execute together on this completion, populating them in <var>execList</var>.</p>\n            </div></emu-note>\n          </emu-clause>\n\n          "}, "sec-modulenamespacecreate": {"num": "10.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> and <var>exports</var>. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-const>empty</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exports</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String values.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-const>empty</emu-const>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const>, <emu-const>evaluating</emu-const>, or <emu-const>evaluated</emu-const>, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const>, <emu-const>evaluating</emu-const>, or <emu-const>evaluated</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[CycleRoot]]\n                </td>\n                <td>\n                  <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle this would be the module itself.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[Async]]\n                </td>\n                <td>\n                  <emu-val>true</emu-val> or <emu-val>false</emu-val>\n                </td>\n                <td>\n                  Whether this module is individually asynchronous (for example, if it's a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> containing a top-level await). Having an asynchronous dependency does not make the module asynchronous. This field must not change after the module is parsed.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncEvaluating]]\n                </td>\n                <td>\n                  <emu-val>true</emu-val> or <emu-val>false</emu-val>\n                </td>\n                <td>\n                  Whether this module is queued to execute on completion of its async dependencies or it is an async module that is currently executing but pending top-level completion.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[TopLevelCapability]]\n                </td>\n                <td>\n                  Promise Capability | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If Evaluate() was called on this module, this field contains the Promise capability for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be <emu-const>empty</emu-const> for any dependencies of that module, unless a top-level Evaluate() has been initiated for any of those dependencies.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncParentModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Cyclic Module Records\n                </td>\n                <td>\n                  If this module or a dependency has [[Async]] <emu-val>true</emu-val>, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[PendingAsyncDependencies]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  This tracks the number of async dependency modules remaining to execute for this module if it has any asynchronous dependencies. A module with async dependencies will be executed when this field reaches 0 and there are no execution errors.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>( [ <var>promiseCapability</var> ] )\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. If this module has <emu-val>true</emu-val> in [[Async]], then a Promise Capability is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the Promise Capability if necessary.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-modules": {"num": "16.2", "title": "#sec-modules Modules", "html": "<emu-clause id=\"sec-modules\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modules\">#sec-modules</span> Modules</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"Module\" id=\"prod-Module\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvsblmsd\" id=\"prod-J1Dzjg4f\"><emu-nt optional=\"\"><a href=\"#prod-ModuleBody\">ModuleBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleBody\" id=\"prod-ModuleBody\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqenfemp\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleItemList\" id=\"prod-ModuleItemList\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ap7dhqxm\" id=\"prod-oFwa4ZD6\"><emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"dd23jrxs\" id=\"prod-GXF21Ewo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleItem\" id=\"prod-ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-0vrrEsBm\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-WCJmhvY4\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qtwquiug\" id=\"prod-jXCkpXv4\"><emu-nt params=\"~Yield, +Await, ~Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[~Yield, +Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-module-semantics\"><h1><span class=\"secnum\">16.2.1</span>#sec-module-semantics Module Semantics</h1>...</div><div id=\"excluded-sec-imports\"><h1><span class=\"secnum\">16.2.2</span>#sec-imports Imports</h1>...</div><div id=\"excluded-sec-exports\"><h1><span class=\"secnum\">16.2.3</span>#sec-exports Exports</h1>...</div></emu-clause>\n"}, "sec-async-module-execution-fulfilled": {"num": "16.2.1.5.2.4", "title": "#sec-async-module-execution-fulfilled AsyncModuleExecutionFulfilled ( module )", "html": "<emu-clause id=\"sec-async-module-execution-fulfilled\" aoid=\"AsyncModuleExecutionFulfilled\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</span> AsyncModuleExecutionFulfilled ( <var>module</var> )</h1>\n            <p>The abstract operation AsyncModuleExecutionFulfilled takes argument <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>). It performs the following steps when called:</p>\n            <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[AsyncEvaluating]] is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[EvaluationError]] is <emu-const>empty</emu-const>.</li><li>Set <var>module</var>.[[AsyncEvaluating]] to <emu-val>false</emu-val>.</li><li>If <var>module</var>.[[TopLevelCapability]] is not <emu-const>empty</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[CycleRoot]] is <var>module</var>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>module</var>.[[TopLevelCapability]].[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li><li>Let <var>execList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Perform !&#160;<emu-xref aoid=\"GatherAsyncParentCompletions\"><a href=\"#sec-gather-async-parent-completions\">GatherAsyncParentCompletions</a></emu-xref>(<var>module</var>, <var>execList</var>).</li><li>Let <var>sortedExecList</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>execList</var>, in the order in which they had their [[AsyncEvaluating]] fields set to <emu-val>true</emu-val> in <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All elements of <var>sortedExecList</var> have their [[AsyncEvaluating]] field set to <emu-val>true</emu-val>, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>sortedExecList</var>, do<ol><li>If <var>m</var>.[[AsyncEvaluating]] is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[EvaluationError]] is not <emu-const>empty</emu-const>.</li></ol></li><li>Else if <var>m</var>.[[Async]] is <emu-val>true</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>m</var>).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <var>m</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref>(<var>m</var>, <var>result</var>.[[Value]]).</li></ol></li><li>Else,<ol><li>Set <var>m</var>.[[AsyncEvaluating]] to <emu-val>false</emu-val>.</li><li>If <var>m</var>.[[TopLevelCapability]] is not <emu-const>empty</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[CycleRoot]] is <var>m</var>.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>m</var>.[[TopLevelCapability]].[[Resolve]], <emu-val>undefined</emu-val>, &#171; <emu-val>undefined</emu-val> &#187;).</li></ol></li></ol></li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n          </emu-clause>\n\n          "}, "sec-async-functions-abstract-operations-async-function-start": {"num": "27.7.5.1", "title": "#sec-async-functions-abstract-operations-async-function-start AsyncFunctionStart ( promiseCapability, asyncFunctionBody )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-start\" aoid=\"AsyncFunctionStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-start\">#sec-async-functions-abstract-operations-async-function-start</span> AsyncFunctionStart ( <var>promiseCapability</var>, <var>asyncFunctionBody</var> )</h1>\n        <p>The abstract operation AsyncFunctionStart takes arguments <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>) and <var>asyncFunctionBody</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>asyncContext</var> be a copy of <var>runningContext</var>.</li><li>NOTE: Copying the execution state is required for <emu-xref aoid=\"AsyncBlockStart\"><a href=\"#sec-asyncblockstart\">AsyncBlockStart</a></emu-xref> to resume its execution. It is ill-defined to resume a currently executing context.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncBlockStart\"><a href=\"#sec-asyncblockstart\">AsyncBlockStart</a></emu-xref>(<var>promiseCapability</var>, <var>asyncFunctionBody</var>, <var>asyncContext</var>).</li><li>Return.</li></ol></emu-alg>\n      </emu-clause>\n      "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully, returning a Promise resolving to undefined (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail, returning a rejected Promise. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Now, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const>, both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>) as well as via [[AsyncParentModules]], which form a chain for modules which contain or depend on top-level <code>await</code> through the whole dependency graph through the <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> algorithm. Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n\n          <p>Lastly, consider a module graph with a cycle, where all modules complete asynchronously:</p>\n          <emu-figure id=\"figure-module-graph-cycle-async\" caption=\"An asynchronous cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle-async\">#figure-module-graph-cycle-async</span>: An asynchronous cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, module B depends on module D, module C depends on module D and E, and module D depends on module A\" width=\"241\" height=\"211\" src=\"img/module-graph-cycle-async.svg\">\n          </figure></emu-figure>\n          <p>Linking happens as before, and all modules end up with [[Status]] set to <emu-const>linked</emu-const>.</p>\n\n          <p>Calling <var>A</var>.Evaluate() triggers <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, <var>B</var>, and <var>D</var>, which all transition to <emu-const>evaluating</emu-const>. Then <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> is called on <var>A</var> again, which is a no-op because it is already <emu-const>evaluating</emu-const>. At this point, <var>D</var>.[[PendingAsyncDependencies]] is 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>D</var>) is called, which sets <var>D</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val> and executes <var>D</var> (up until the first <code>await</code>). We unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>B</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val>. In the next iteration of the loop over <var>A</var>'s dependencies, we call <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>C</var> and thus on <var>D</var> (again a no-op) and <var>E</var>. As <var>E</var> has no dependencies, <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>E</var>) is called, which sets <var>E</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val> and starts executing. Because <var>E</var> is not part of a cycle, it is immediately removed from the stack and transitions to <emu-const>evaluated</emu-const>. We unwind once more to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>C</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val>. Now we finish the loop over <var>A</var>'s dependencies, set <var>A</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val>, and remove the entire strongly connected component from the stack, transitioning all of the modules to <emu-const>evaluated</emu-const> at once. At this point, the fields of the modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-1\"><a href=\"#table-module-graph-cycle-async-fields-1\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-1\" caption=\"Module fields after the initial Evaluate() call\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</span>: Module fields after the initial Evaluate() call</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>2 (<var>B</var> and <var>C</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>1 (<var>D</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>2 (<var>D</var> and <var>E</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>D</var></th>\n                  <td>3</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>E</var></th>\n                  <td>4</td>\n                  <td>4</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>E</var> finishes executing first. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called, <var>E</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val> and <var>C</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-2\"><a href=\"#table-module-graph-cycle-async-fields-2\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-2\" caption=\"Module fields after module _E_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</span>: Module fields after module <var>E</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>1 (<var>D</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>E</var></th>\n                  <td>4</td>\n                  <td>4</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>D</var> is next to finish (as it was the only module that was still executing). When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>D</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. Then <var>B</var>.[[PendingAsyncDependencies]] is decremented to become 0, <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called on <var>B</var>, and it starts executing. Once the synchronous part of <var>B</var>'s execution has finished, <var>C</var>.[[PendingAsyncDependencies]] is also decremented to become 0, and <var>C</var> starts executing. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-3\"><a href=\"#table-module-graph-cycle-async-fields-3\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-3\" caption=\"Module fields after module _D_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</span>: Module fields after module <var>D</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>D</var></th>\n                  <td>3</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>C</var> finishes executing next. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again, <var>C</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val> and <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-4\"><a href=\"#table-module-graph-cycle-async-fields-4\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-4\" caption=\"Module fields after module _C_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</span>: Module fields after module <var>C</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>1 (<var>B</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called and it starts executing. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-5\"><a href=\"#table-module-graph-cycle-async-fields-5\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-5\" caption=\"Module fields after module _B_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</span>: Module fields after module <var>B</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Finally, <var>A</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>A</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. At this point, the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is resolved, and this concludes the handling of this module graph. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-6\"><a href=\"#table-module-graph-cycle-async-fields-6\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-6\" caption=\"Module fields after module _A_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</span>: Module fields after module <var>A</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Alternatively, consider a failure case where <var>C</var> fails execution and returns an error before <var>B</var> has finished executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> is called and <var>C</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. We then set the evaluation error of the module to the error returned by executing <var>C</var>. We then propagate this error to all of the AsyncParentModules by performing AsyncModuleExeutionRejected on each of them. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-7\"><a href=\"#table-module-graph-cycle-async-fields-7\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-7\" caption=\"Module fields after module _C_ finishes with an error\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</span>: Module fields after module <var>C</var> finishes with an error</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>1 (<var>B</var>)</td>\n                  <td><emu-const>empty</emu-const></td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>1</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td><var>C</var>'s evaluation error</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>A</var> will be rejected with the same error as <var>C</var> since <var>C</var> will call <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> on <var>A</var> with <var>C</var>'s error. <var>A</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. At this point the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is rejected. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-8\"><a href=\"#table-module-graph-cycle-async-fields-8\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-8\" caption=\"Module fields after module _A_ is rejected\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</span>: Module fields after module <var>A</var> is rejected</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                  <td><var>C</var>'s Evaluation Error</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing without an error. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[AsyncEvaluating]] is set to <emu-val>false</emu-val>. <emu-xref aoid=\"GatherAsyncParentCompletions\"><a href=\"#sec-gather-async-parent-completions\">GatherAsyncParentCompletions</a></emu-xref> is called on <var>B</var>. However, <var>A</var>.[[CycleRoot]] is <var>A</var> which has an evaluation error, so it will not be added to the returned <var>sortedExecList</var> and <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> will return without further processing. Any future importer of <var>B</var> will resolve the rejection of <var>B</var>.[[CycleRoot]].[[EvaluationError]] from the evaluation error from <var>C</var> that was set on the cycle root <var>A</var>. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-9\"><a href=\"#table-module-graph-cycle-async-fields-9\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-9\" caption=\"Module fields after module _B_ finishes executing in an erroring graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</span>: Module fields after module <var>B</var> finishes executing in an erroring graph</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[AsyncEvaluating]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                  <td><var>C</var>'s Evaluation Error</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-val>false</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                  <td><emu-const>empty</emu-const></td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-exports": {"num": "16.2.3", "title": "#sec-exports Exports", "html": "<emu-clause id=\"sec-exports\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exports\">#sec-exports</span> Exports</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ExportDeclaration\" id=\"prod-ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-xWvkB_EQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod---2Mdo2Q\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rudz_osj\" id=\"prod-w_WAVAwX\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cshvsnoo\" id=\"prod-60Xh0dpZ\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pkwjy2r6\" id=\"prod-bE4rfMak\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, +Await, +Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[~Yield, +Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"hf5nsghg\" id=\"prod-KPFnW3Lq\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, +Await, +Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[~Yield, +Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uivezxga\" id=\"prod-GUPXSqcT\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ~Yield, +Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportFromClause\" id=\"prod-ExportFromClause\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-A39AIi_B\"><emu-t>*</emu-t></emu-rhs>\n    <emu-rhs a=\"dtcd7req\" id=\"prod-o48mDNgZ\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_xs5tuve\" id=\"prod-bKXP43lb\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NamedExports\" id=\"prod-NamedExports\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tKOro2Xm\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"kbfbtt8z\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wwyi_qo2\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportsList\" id=\"prod-ExportsList\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w1vp78-i\"><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gqfndot_\" id=\"prod-JgWQiNCe\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ExportSpecifier\" id=\"prod-ExportSpecifier\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-JyH8gtYm\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qvusrr4h\" id=\"prod-HMTDwQcl\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-exports-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.3.1</span>#sec-exports-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-exportedbindings\"><h1><span class=\"secnum\">16.2.3.2</span>#sec-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-static-semantics-exportednames\"><h1><span class=\"secnum\">16.2.3.3</span>#sec-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-static-semantics-exportentries\"><h1><span class=\"secnum\">16.2.3.4</span>#sec-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-static-semantics-exportentriesformodule\"><h1><span class=\"secnum\">16.2.3.5</span>#sec-static-semantics-exportentriesformodule Static Semantics: ExportEntriesForModule</h1>...</div><div id=\"excluded-sec-static-semantics-referencedbindings\"><h1><span class=\"secnum\">16.2.3.6</span>#sec-static-semantics-referencedbindings Static Semantics: ReferencedBindings</h1>...</div><div id=\"excluded-sec-exports-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.3.7</span>#sec-exports-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n  "}, "sec-moduledeclarationlinking": {"num": "16.2.1.5.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">16.2.1.5.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-scripts-and-modules": {"num": "A.5", "title": "#sec-scripts-and-modules Scripts and Modules", "html": "<emu-annex id=\"sec-scripts-and-modules\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-and-modules\">#sec-scripts-and-modules</span> Scripts and Modules</h1>\n    <emu-production name=\"Script\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cmjfjhkc\" id=\"prod-k7_ObWcc\"><emu-nt optional=\"\"><a href=\"#prod-ScriptBody\">ScriptBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ScriptBody\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"mn4pemzx\" id=\"prod-he3lY70e\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"Module\">\n    <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uvsblmsd\" id=\"prod-J1Dzjg4f\"><emu-nt optional=\"\"><a href=\"#prod-ModuleBody\">ModuleBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleBody\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"iqenfemp\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleItemList\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ap7dhqxm\" id=\"prod-oFwa4ZD6\"><emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"dd23jrxs\" id=\"prod-GXF21Ewo\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4fwtd8-6\" id=\"prod-0vrrEsBm\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ky6bsn7x\" id=\"prod-WCJmhvY4\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qtwquiug\" id=\"prod-jXCkpXv4\"><emu-nt params=\"~Yield, +Await, ~Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[~Yield, +Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportDeclaration\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-WzAgO-V_\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"odcuzpbi\" id=\"prod-CDGJVPkq\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportClause\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oi8izote\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"81tm-dw4\"><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"zfagpfvq\"><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"y9r1l58g\" id=\"prod-kEa0XgB6\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ih8rgsdx\" id=\"prod-wyOKxI9w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportedDefaultBinding\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-XiX5S_vU\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NameSpaceImport\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-AScJop1Y\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"NamedImports\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SkqVKtrZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"g1js-lhi\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bxjtogxx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FromClause\">\n    <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rev6es22\">\n        <emu-t>from</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportsList\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"upllvvnq\"><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ggcfvgot\" id=\"prod-UCgvcMcb\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportSpecifier\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-5TmWi69r\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"onppcdhk\" id=\"prod-Pd4rUvEL\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ModuleSpecifier\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-sCJUL89L\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ImportedBinding\">\n    <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ni7cnis3\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportDeclaration\">\n    <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4kqfdugp\" id=\"prod-xWvkB_EQ\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"j2lh_kda\" id=\"prod---2Mdo2Q\">\n        <emu-t>export</emu-t>\n        <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"rudz_osj\" id=\"prod-w_WAVAwX\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-VariableStatement\">VariableStatement</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"cshvsnoo\" id=\"prod-60Xh0dpZ\">\n        <emu-t>export</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"pkwjy2r6\" id=\"prod-bE4rfMak\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, +Await, +Default\"><a href=\"#prod-HoistableDeclaration\">HoistableDeclaration</a><emu-mods><emu-params>[~Yield, +Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"hf5nsghg\" id=\"prod-KPFnW3Lq\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-nt params=\"~Yield, +Await, +Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[~Yield, +Await, +Default]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"uivezxga\" id=\"prod-GUPXSqcT\">\n        <emu-t>export</emu-t>\n        <emu-t>default</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t> }]</emu-gann>\n        <emu-nt params=\"+In, ~Yield, +Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportFromClause\">\n    <emu-nt><a href=\"#prod-ExportFromClause\">ExportFromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"sb5ztei-\" id=\"prod-A39AIi_B\"><emu-t>*</emu-t></emu-rhs>\n    <emu-rhs a=\"dtcd7req\" id=\"prod-o48mDNgZ\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"_xs5tuve\" id=\"prod-bKXP43lb\"><emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"NamedExports\">\n    <emu-nt><a href=\"#prod-NamedExports\">NamedExports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-tKOro2Xm\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"kbfbtt8z\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"wwyi_qo2\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportsList\">\n    <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"w1vp78-i\"><emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gqfndot_\" id=\"prod-JgWQiNCe\">\n        <emu-nt><a href=\"#prod-ExportsList\">ExportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExportSpecifier\">\n    <emu-nt><a href=\"#prod-ExportSpecifier\">ExportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"drsx4tka\" id=\"prod-JyH8gtYm\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qvusrr4h\" id=\"prod-HMTDwQcl\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-abstract-module-records": {"num": "16.2.1.4", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-module-record-fields\" caption=\"Module Record Fields\" oldids=\"table-36\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption><span id=\"table-36\"></span>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              </td>\n              <td>\n                Object | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              </td>\n              <td>\n                Field reserved for use by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments that need to associate additional information with a module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-abstract-methods-of-module-records\" caption=\"Abstract Methods of Module Records\" oldids=\"table-37\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</span>: Abstract Methods of Module Records</figcaption><span id=\"table-37\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              </td>\n              <td>\n                <p>Returns a promise for the evaluation of this module and its dependencies, resolving on successful evaluation or if it has already been evaluated successfully, and rejecting for an evaluation error or if it has already been evaluated unsuccessfully. If the promise is rejected, hosts are expected to handle the promise rejection and rethrow the evaluation error.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-source-text-module-records": {"num": "16.2.1.6", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in <emu-xref href=\"#table-additional-fields-of-source-text-module-records\"><a href=\"#table-additional-fields-of-source-text-module-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-source-text-module-records\" caption=\"Additional Fields of Source Text Module Records\" oldids=\"table-38\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</span>: Additional Fields of Source Text Module Records</figcaption><span id=\"table-38\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Context]]\n              </td>\n              <td>\n                An ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> associated with this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportMeta]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                An object exposed through the <code>import.meta</code> meta property. It is <emu-const>empty</emu-const> until it is accessed by ECMAScript code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to <code>export *</code> declarations that occur within the module, not including <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-importentry-record-fields\"><a href=\"#table-importentry-record-fields\" class=\"excluded-xref\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</a></emu-xref>:</p>\n        <emu-table id=\"table-importentry-record-fields\" caption=\"ImportEntry Record Fields\" oldids=\"table-39\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-39\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <emu-val>\"*\"</emu-val> indicates that the import request is for the target module's namespace object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-import-forms-mapping-to-importentry-records\"><a href=\"#table-import-forms-mapping-to-importentry-records\" class=\"excluded-xref\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-import-forms-mapping-to-importentry-records\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\" oldids=\"table-40\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption><span id=\"table-40\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-exportentry-records\"><a href=\"#table-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</a></emu-xref>:</p>\n        <emu-table id=\"table-exportentry-records\" caption=\"ExportEntry Record Fields\" oldids=\"table-41\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-41\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name used to export this binding by this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <emu-val>\"*\"</emu-val> indicates that the export request is for all exported bindings.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-export-forms-mapping-to-exportentry-records\"><a href=\"#table-export-forms-mapping-to-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-export-forms-mapping-to-exportentry-records\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\" oldids=\"table-42\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption><span id=\"table-42\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                </th>\n                <th>\n                  [[ExportName]]\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f() {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"f\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function () {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">16.2.1.6.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">16.2.1.6.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">16.2.1.6.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">16.2.1.6.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">16.2.1.6.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( [ capability ] ) Concrete Method</h1>...</div></emu-clause>\n\n      "}, "sec-imports": {"num": "16.2.2", "title": "#sec-imports Imports", "html": "<emu-clause id=\"sec-imports\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-imports\">#sec-imports</span> Imports</h1>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ImportDeclaration\" id=\"prod-ImportDeclaration\">\n    <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"glhuxxec\" id=\"prod-WzAgO-V_\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt>\n        <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"odcuzpbi\" id=\"prod-CDGJVPkq\">\n        <emu-t>import</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportClause\" id=\"prod-ImportClause\">\n    <emu-nt><a href=\"#prod-ImportClause\">ImportClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"oi8izote\"><emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"81tm-dw4\"><emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"zfagpfvq\"><emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"y9r1l58g\" id=\"prod-kEa0XgB6\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ih8rgsdx\" id=\"prod-wyOKxI9w\">\n        <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportedDefaultBinding\" id=\"prod-ImportedDefaultBinding\">\n    <emu-nt><a href=\"#prod-ImportedDefaultBinding\">ImportedDefaultBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-XiX5S_vU\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NameSpaceImport\" id=\"prod-NameSpaceImport\">\n    <emu-nt><a href=\"#prod-NameSpaceImport\">NameSpaceImport</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"t2qf80pb\" id=\"prod-AScJop1Y\">\n        <emu-t>*</emu-t>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NamedImports\" id=\"prod-NamedImports\">\n    <emu-nt><a href=\"#prod-NamedImports\">NamedImports</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gbpaspne\" id=\"prod-SkqVKtrZ\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"g1js-lhi\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"bxjtogxx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FromClause\" id=\"prod-FromClause\">\n    <emu-nt><a href=\"#prod-FromClause\">FromClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"rev6es22\">\n        <emu-t>from</emu-t>\n        <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportsList\" id=\"prod-ImportsList\">\n    <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"upllvvnq\"><emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ggcfvgot\" id=\"prod-UCgvcMcb\">\n        <emu-nt><a href=\"#prod-ImportsList\">ImportsList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ImportSpecifier\" id=\"prod-ImportSpecifier\">\n    <emu-nt><a href=\"#prod-ImportSpecifier\">ImportSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"vt7awvcp\" id=\"prod-5TmWi69r\"><emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"onppcdhk\" id=\"prod-Pd4rUvEL\">\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n        <emu-t>as</emu-t>\n        <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ModuleSpecifier\" id=\"prod-ModuleSpecifier\">\n    <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xhtltz00\" id=\"prod-sCJUL89L\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportedBinding\" id=\"prod-ImportedBinding\">\n    <emu-nt><a href=\"#prod-ImportedBinding\">ImportedBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ni7cnis3\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n      <div id=\"excluded-sec-imports-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.2.1</span>#sec-imports-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-importentries\"><h1><span class=\"secnum\">16.2.2.2</span>#sec-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-static-semantics-importentriesformodule\"><h1><span class=\"secnum\">16.2.2.3</span>#sec-static-semantics-importentriesformodule Static Semantics: ImportEntriesForModule</h1>...</div></emu-clause>\n\n    "}, "sec-source-text-module-record-execute-module": {"num": "16.2.1.6.5", "title": "#sec-source-text-module-record-execute-module ExecuteModule ( [ capability ] ) Concrete Method", "html": "<emu-clause id=\"sec-source-text-module-record-execute-module\" aoid=\"ExecuteModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-record-execute-module\">#sec-source-text-module-record-execute-module</span> ExecuteModule ( [ <var>capability</var> ] ) Concrete Method</h1>\n          <p>The ExecuteModule concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes optional argument <var>capability</var>. It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>Let <var>moduleContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>moduleContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>moduleContext</var> to <var>module</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>moduleContext</var> to <var>module</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> has been linked and declarations in its module environment have been instantiated.</li><li>Set the VariableEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Set the LexicalEnvironment of <var>moduleContext</var> to <var>module</var>.[[Environment]].</li><li>Suspend the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>module</var>.[[Async]] is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>capability</var> is not present.</li><li>Push <var>moduleContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>moduleContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be the result of evaluating <var>module</var>.[[ECMAScriptCode]].</li><li>Suspend <var>moduleContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>capability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncBlockStart\"><a href=\"#sec-asyncblockstart\">AsyncBlockStart</a></emu-xref>(<var>capability</var>, <var>module</var>.[[ECMAScriptCode]], <var>moduleContext</var>).</li><li>Return.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-innermoduleevaluation": {"num": "16.2.1.5.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleEvaluation takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It is used by Evaluate to perform the actual evaluation process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Let <var>promise</var> be ! <var>module</var>.Evaluate().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promise</var>.[[PromiseState]] is not <emu-const>pending</emu-const>.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>, then<ol><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>promise</var>.[[PromiseResult]]).</li></ol></li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-const>empty</emu-const>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[PendingAsyncDependencies]] to 0.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li><li>Else,<ol><li>Set <var>requiredModule</var> to <var>requiredModule</var>.[[CycleRoot]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var>.[[EvaluationError]] is not <emu-const>empty</emu-const>, return <var>requiredModule</var>.[[EvaluationError]].</li></ol></li><li>If <var>requiredModule</var>.[[AsyncEvaluating]] is <emu-val>true</emu-val>, then<ol><li>Set <var>module</var>.[[PendingAsyncDependencies]] to <var>module</var>.[[PendingAsyncDependencies]] + 1.</li><li>Append <var>module</var> to <var>requiredModule</var>.[[AsyncParentModules]].</li></ol></li></ol></li></ol></li><li>If <var>module</var>.[[PendingAsyncDependencies]] &gt; 0 or <var>module</var>.[[Async]] is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[AsyncEvaluating]] is <emu-val>false</emu-val> and was never previously set to <emu-val>true</emu-val>.</li><li>Set <var>module</var>.[[AsyncEvaluating]] to <emu-val>true</emu-val>.</li><li>NOTE: The order in which modules transition to async evaluating is significant. (See <emu-xref href=\"#sec-async-module-execution-fulfilled\"><a href=\"#sec-async-module-execution-fulfilled\" class=\"excluded-xref\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</a></emu-xref>).</li><li>If <var>module</var>.[[PendingAsyncDependencies]] is 0, perform !&#160;<emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>module</var>).</li></ol></li><li>Otherwise, perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] &#8804; <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] = <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>cycleRoot</var> be <var>module</var>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li><li>Set <var>requiredModule</var>.[[CycleRoot]] to <var>cycleRoot</var>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n            <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n              <p>A module is <emu-const>evaluating</emu-const> while it is being traversed by InnerModuleEvaluation. A module is <emu-const>evaluated</emu-const> on execution completion and during execution if it is an asynchronous module.</p>\n            </div></emu-note>\n            <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n              <p>Any modules depending on a module of an async cycle when that cycle is not <emu-const>evaluating</emu-const> will instead depend on the execution of the root of the cycle via [[CycleRoot]]. This ensures that the cycle state can be treated as a single strongly connected component through its root module state.</p>\n            </div></emu-note>\n          </emu-clause>\n\n          "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "figure-module-graph-cycle-async": "Figure 5", "table-internal-slots-of-module-namespace-exotic-objects": "Table 35", "table-module-record-fields": "Table 44", "table-abstract-methods-of-module-records": "Table 45", "table-cyclic-module-fields": "Table 46", "table-cyclic-module-methods": "Table 47", "table-module-graph-cycle-async-fields-1": "Table 48", "table-module-graph-cycle-async-fields-2": "Table 49", "table-module-graph-cycle-async-fields-3": "Table 50", "table-module-graph-cycle-async-fields-4": "Table 51", "table-module-graph-cycle-async-fields-5": "Table 52", "table-module-graph-cycle-async-fields-6": "Table 53", "table-module-graph-cycle-async-fields-7": "Table 54", "table-module-graph-cycle-async-fields-8": "Table 55", "table-module-graph-cycle-async-fields-9": "Table 56", "table-additional-fields-of-source-text-module-records": "Table 57", "table-importentry-record-fields": "Table 58", "table-import-forms-mapping-to-importentry-records": "Table 59", "table-exportentry-records": "Table 60", "table-export-forms-mapping-to-exportentry-records": "Table 61"}}}