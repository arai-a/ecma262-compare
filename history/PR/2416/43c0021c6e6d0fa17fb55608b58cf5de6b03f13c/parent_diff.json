{"from": {"secList": ["sec-keywords-and-reserved-words"], "secData": {"sec-keywords-and-reserved-words": {"num": "12.6.2", "title": "#sec-keywords-and-reserved-words Keywords and Reserved Words", "html": "<emu-clause id=\"sec-keywords-and-reserved-words\" oldids=\"sec-reserved-words,sec-keywords,sec-future-reserved-words\"><span id=\"sec-future-reserved-words\"></span><span id=\"sec-keywords\"></span><span id=\"sec-reserved-words\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</span> Keywords and Reserved Words</h1>\n      <p>A <dfn>keyword</dfn> is a token that matches <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, but also has a syntactic use; that is, it appears literally, in a <code>fixed width</code> font, in some syntactic production. The keywords of ECMAScript include <code>if</code>, <code>while</code>, <code>async</code>, <code>await</code>, and many others.</p>\n      <p>A <dfn>reserved word</dfn> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> that cannot be used as an identifier. Many keywords are reserved words, but some are not, and some are reserved only in certain contexts. <code>if</code> and <code>while</code> are reserved words. <code>await</code> is reserved only inside async functions and modules. <code>async</code> is not reserved; it can be used as a variable name or statement label without restriction.</p>\n      <p>This specification uses a combination of grammatical productions and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules to specify which names are valid identifiers and which are reserved words. All tokens in the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> list below, except for <code>await</code> and <code>yield</code>, are unconditionally reserved. Exceptions for <code>await</code> and <code>yield</code> are specified in <emu-xref href=\"#sec-identifiers\"><a href=\"#sec-identifiers\" class=\"excluded-xref\" excluded-id=\"sec-identifiers\">#sec-identifiers</a></emu-xref>, using parameterized syntactic productions. Lastly, several <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules restrict the set of valid identifiers. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-let-and-const-declarations-static-semantics-early-errors\"><a href=\"#sec-let-and-const-declarations-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-let-and-const-declarations-static-semantics-early-errors\">#sec-let-and-const-declarations-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">#sec-for-in-and-for-of-statements-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-class-definitions-static-semantics-early-errors\"><a href=\"#sec-class-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</a></emu-xref>. In summary, there are five categories of identifier names:</p>\n      <ul>\n        <li>\n          <p>Those that are always allowed as identifiers, and are not keywords, such as <code>Math</code>, <code>window</code>, <code>toString</code>, and <code>_</code>;</p>\n        </li>\n        <li>\n          <p>Those that are never allowed as identifiers, namely the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>s listed below except <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually allowed as identifiers, namely <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually disallowed as identifiers, in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>: <code>let</code>, <code>static</code>, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code>;</p>\n        </li>\n        <li>\n          <p>Those that are always allowed as identifiers, but also appear as keywords within certain syntactic productions, at places where <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is not allowed: <code>as</code>, <code>async</code>, <code>from</code>, <code>get</code>, <code>of</code>, <code>set</code>, and <code>target</code>.</p>\n        </li>\n      </ul>\n      <p>The term <dfn>conditional keyword</dfn>, or <dfn>contextual keyword</dfn>, is sometimes used to refer to the keywords that fall in the last three categories, and thus can be used as identifiers in some contexts and as keywords in others.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ReservedWord\" type=\"lexical\" oneof=\"\" id=\"prod-ReservedWord\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>await</emu-t> <emu-t>break</emu-t> <emu-t>case</emu-t> <emu-t>catch</emu-t> <emu-t>class</emu-t> <emu-t>const</emu-t> <emu-t>continue</emu-t> <emu-t>debugger</emu-t> <emu-t>default</emu-t> <emu-t>delete</emu-t> <emu-t>do</emu-t> <emu-t>else</emu-t> <emu-t>enum</emu-t> <emu-t>export</emu-t> <emu-t>extends</emu-t> <emu-t>false</emu-t> <emu-t>finally</emu-t> <emu-t>for</emu-t> <emu-t>function</emu-t> <emu-t>if</emu-t> <emu-t>import</emu-t> <emu-t>in</emu-t> <emu-t>instanceof</emu-t> <emu-t>new</emu-t> <emu-t>null</emu-t> <emu-t>return</emu-t> <emu-t>super</emu-t> <emu-t>switch</emu-t> <emu-t>this</emu-t> <emu-t>throw</emu-t> <emu-t>true</emu-t> <emu-t>try</emu-t> <emu-t>typeof</emu-t> <emu-t>var</emu-t> <emu-t>void</emu-t> <emu-t>while</emu-t> <emu-t>with</emu-t> <emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Per <emu-xref href=\"#sec-grammar-notation\"><a href=\"#sec-grammar-notation\" class=\"excluded-xref\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</a></emu-xref>, keywords in the grammar match literal sequences of specific <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> elements. A code point in a keyword cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n        <p>An <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> can contain <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>s, but it is not possible to declare a variable named \"else\" by spelling it <code>els\\u{65}</code>. The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules in <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref> rule out identifiers with the same <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> as a reserved word.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><code>enum</code> is not currently used as a keyword in this specification. It is a <em>future reserved word</em>, set aside for use as a keyword in future language extensions.</p>\n        <p>Similarly, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code> are future reserved words in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The names <code>arguments</code> and <code>eval</code> are not keywords, but they are subject to some restrictions in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-static-semantics-assignmenttargettype\"><a href=\"#sec-static-semantics-assignmenttargettype\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-assignmenttargettype\">#sec-static-semantics-assignmenttargettype</a></emu-xref>, <emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-async-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-keywords-and-reserved-words"], "secData": {"sec-keywords-and-reserved-words": {"num": "12.6.2", "title": "#sec-keywords-and-reserved-words Keywords and Reserved Words", "html": "<emu-clause id=\"sec-keywords-and-reserved-words\" oldids=\"sec-reserved-words,sec-keywords,sec-future-reserved-words\"><span id=\"sec-future-reserved-words\"></span><span id=\"sec-keywords\"></span><span id=\"sec-reserved-words\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</span> Keywords and Reserved Words</h1>\n      <p>A <dfn>keyword</dfn> is a token that matches <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, but also has a syntactic use; that is, it appears literally, in a <code>fixed width</code> font, in some syntactic production. The keywords of ECMAScript include <code>if</code>, <code>while</code>, <code>async</code>, <code>await</code>, and many others.</p>\n      <p>A <dfn>reserved word</dfn> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> that cannot be used as an identifier. Many keywords are reserved words, but some are not, and some are reserved only in certain contexts. <code>if</code> and <code>while</code> are reserved words. <code>await</code> is reserved only inside async functions and modules. <code>async</code> is not reserved; it can be used as a variable name or statement label without restriction.</p>\n      <p>This specification uses a combination of grammatical productions and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules to specify which names are valid identifiers and which are reserved words. All tokens in the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> list below, except for <code>await</code> and <code>yield</code>, are unconditionally reserved. Exceptions for <code>await</code> and <code>yield</code> are specified in <emu-xref href=\"#sec-identifiers\"><a href=\"#sec-identifiers\" class=\"excluded-xref\" excluded-id=\"sec-identifiers\">#sec-identifiers</a></emu-xref>, using parameterized syntactic productions. Lastly, several <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules restrict the set of valid identifiers. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-let-and-const-declarations-static-semantics-early-errors\"><a href=\"#sec-let-and-const-declarations-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-let-and-const-declarations-static-semantics-early-errors\">#sec-let-and-const-declarations-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">#sec-for-in-and-for-of-statements-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-class-definitions-static-semantics-early-errors\"><a href=\"#sec-class-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</a></emu-xref>. In summary, there are five categories of identifier names:</p>\n      <ul>\n        <li>\n          <p>Those that are always allowed as identifiers, and are not keywords, such as <code>Math</code>, <code>window</code>, <code>toString</code>, and <code>_</code>;</p>\n        </li>\n        <li>\n          <p>Those that are never allowed as identifiers, namely the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>s listed below except <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually allowed as identifiers, namely <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually disallowed as identifiers, in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>: <code>let</code>, <code>static</code>, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code>;</p>\n        </li>\n        <li>\n          <p>Those that are always allowed as identifiers, but also appear as keywords within certain syntactic productions, at places where <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is not allowed: <code>as</code>, <code>async</code>, <code>from</code>, <code>get</code>, <code>of</code>, <code>set</code>, <code>meta</code>, and <code>target</code>.</p>\n        </li>\n      </ul>\n      <p>The term <dfn>conditional keyword</dfn>, or <dfn>contextual keyword</dfn>, is sometimes used to refer to the keywords that fall in the last three categories, and thus can be used as identifiers in some contexts and as keywords in others.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ReservedWord\" type=\"lexical\" oneof=\"\" id=\"prod-ReservedWord\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>await</emu-t> <emu-t>break</emu-t> <emu-t>case</emu-t> <emu-t>catch</emu-t> <emu-t>class</emu-t> <emu-t>const</emu-t> <emu-t>continue</emu-t> <emu-t>debugger</emu-t> <emu-t>default</emu-t> <emu-t>delete</emu-t> <emu-t>do</emu-t> <emu-t>else</emu-t> <emu-t>enum</emu-t> <emu-t>export</emu-t> <emu-t>extends</emu-t> <emu-t>false</emu-t> <emu-t>finally</emu-t> <emu-t>for</emu-t> <emu-t>function</emu-t> <emu-t>if</emu-t> <emu-t>import</emu-t> <emu-t>in</emu-t> <emu-t>instanceof</emu-t> <emu-t>new</emu-t> <emu-t>null</emu-t> <emu-t>return</emu-t> <emu-t>super</emu-t> <emu-t>switch</emu-t> <emu-t>this</emu-t> <emu-t>throw</emu-t> <emu-t>true</emu-t> <emu-t>try</emu-t> <emu-t>typeof</emu-t> <emu-t>var</emu-t> <emu-t>void</emu-t> <emu-t>while</emu-t> <emu-t>with</emu-t> <emu-t>yield</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Per <emu-xref href=\"#sec-grammar-notation\"><a href=\"#sec-grammar-notation\" class=\"excluded-xref\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</a></emu-xref>, keywords in the grammar match literal sequences of specific <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> elements. A code point in a keyword cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n        <p>An <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> can contain <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>s, but it is not possible to declare a variable named \"else\" by spelling it <code>els\\u{65}</code>. The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules in <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref> rule out identifiers with the same <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> as a reserved word.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><code>enum</code> is not currently used as a keyword in this specification. It is a <em>future reserved word</em>, set aside for use as a keyword in future language extensions.</p>\n        <p>Similarly, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code> are future reserved words in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The names <code>arguments</code> and <code>eval</code> are not keywords, but they are subject to some restrictions in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-static-semantics-assignmenttargettype\"><a href=\"#sec-static-semantics-assignmenttargettype\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-assignmenttargettype\">#sec-static-semantics-assignmenttargettype</a></emu-xref>, <emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-async-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}}