{"from": {"secList": ["sec-strict-mode-of-ecmascript", "sec-returnifabrupt-shorthands", "sec-patterns-static-semantics-early-errors-annexb", "sec-functions-and-classes", "sec-algorithm-conventions", "sec-variablestatements-in-catch-blocks", "sec-regular-expression-patterns-semantics", "sec-numeric-types-bigint-leftShift", "sec-uri-syntax-and-semantics", "sec-__proto__-property-names-in-object-initializers", "sec-algorithm-conventions-syntax-directed-operations", "sec-switch-duplicates-allowed-static-semantics", "sec-rules-of-automatic-semicolon-insertion", "sec-conformance.normative-optional", "sec-grammar-notation", "sec-block-duplicates-allowed-static-semantics", "sec-async-arrow-function-definitions", "sec-left-hand-side-expressions-static-semantics-coveredcallexpression", "sec-initializers-in-forin-statement-heads", "sec-number.prototype.tofixed", "sec-labelled-function-declarations"], "secData": {"sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt>LegacyOctalIntegerLiteral</emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt>NonOctalDecimalIntegerLiteral</emu-nt>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-xref href=\"#prod-annexB-LegacyOctalEscapeSequence\"><a href=\"#prod-annexB-LegacyOctalEscapeSequence\"><emu-nt>LegacyOctalEscapeSequence</emu-nt></a></emu-xref> or <emu-xref href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><emu-nt>NonOctalDecimalEscapeSequence</emu-nt></a></emu-xref> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable Reference. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } or otherwise cannot be deleted (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg><ol><li>?&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).</li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg><ol><li>? <var>someValue</var>.OperationName().</li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).</li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg><ol><li>Let <var>val</var> be !&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].</li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.4.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bbd715bb\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text matches this rule.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\" id=\"prod-annexB-NonemptyClassRanges\">\n    <emu-nt><a href=\"#prod-annexB-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"a5b9453b\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if IsCharacterClass of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or IsCharacterClass of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[U]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if IsCharacterClass of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and IsCharacterClass of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the CharacterValue of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the CharacterValue of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\" id=\"prod-annexB-NonemptyClassRangesNoDash\">\n    <emu-nt><a href=\"#prod-annexB-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e9856041\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if IsCharacterClass of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or IsCharacterClass of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[U]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if IsCharacterClass of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and IsCharacterClass of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the CharacterValue of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the CharacterValue of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"607f4086\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdca54b2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7a8157ec\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7b95b3\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionBody\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b7561ab3\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be44becf\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19d49312\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"55774850\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"afef225f\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd578cac\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d2d0a98e\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7989e09f\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized with an ordered, comma-separated sequence of alias names which may be used within the algorithm steps to reference the argument passed in that position. Optional parameters are denoted with surrounding brackets ([ , <var>name</var> ]) and are no different from required parameters within algorithm steps. A rest parameter may appear at the end of a parameter list, denoted with leading ellipsis (, ...<var>name</var>). The rest parameter captures all of the arguments provided following the required and optional parameters into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If there are no such additional arguments, that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is empty.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg type=\"example\"><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div><div id=\"excluded-sec-value-notation\"><h1><span class=\"secnum\">5.2.6</span>#sec-value-notation Value Notation</h1>...</div></emu-clause>\n"}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\" id=\"prod-annexB-Catch\">\n    <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> is <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" id=\"prod-annexB-CatchParameter\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-annexB-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\"><a href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\">3.d.i.2.a.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-throw-duplicate-binding\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></emu-alg>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\"><a href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\">7.d.ii.4.a.i.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-bindingexists\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-annexB-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-regular-expression-patterns-semantics": {"num": "B.1.4.4", "title": "#sec-regular-expression-patterns-semantics Pattern Semantics", "html": "<emu-annex id=\"sec-regular-expression-patterns-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regular-expression-patterns-semantics\">#sec-regular-expression-patterns-semantics</span> Pattern Semantics</h1>\n        <p>The semantics of <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> is extended as follows:</p>\n        <p>Within <emu-xref href=\"#sec-term\"><a href=\"#sec-term\" class=\"excluded-xref\" excluded-id=\"sec-term\">#sec-term</a></emu-xref> reference to &#8220;<emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" id=\"prod-annexB-Atom\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"59aa089b\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221; are to be interpreted as meaning &#8220;<emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"59aa089b\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221; or &#8220;<emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"34eb148f\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221;.</p>\n\n        <p>Term (<emu-xref href=\"#sec-term\"><a href=\"#sec-term\" class=\"excluded-xref\" excluded-id=\"sec-term\">#sec-term</a></emu-xref>) includes the following additional evaluation rules:</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fd5c877d\">\n        <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"44aed0a4\">\n        <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"74fbcc1b\">\n        <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"44aed0a4\">\n        <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9700dc98\"><emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"41dded41\"><emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>.</p>\n\n        <p>Assertion (<emu-xref href=\"#sec-assertion\"><a href=\"#sec-assertion\" class=\"excluded-xref\" excluded-id=\"sec-assertion\">#sec-assertion</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"645fd5dc\"><emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> to obtain a Matcher <var>m</var>.</li><li>Return <var>m</var>.</li></ol></emu-alg>\n\n        <p>Assertion (<emu-xref href=\"#sec-assertion\"><a href=\"#sec-assertion\" class=\"excluded-xref\" excluded-id=\"sec-assertion\">#sec-assertion</a></emu-xref>) evaluation rules for the <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cfb94f94\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ba98f6e2\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>!</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> productions are also used for the <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> productions, but with <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt>.</p>\n\n        <p>Atom (<emu-xref href=\"#sec-atom\"><a href=\"#sec-atom\" class=\"excluded-xref\" excluded-id=\"sec-atom\">#sec-atom</a></emu-xref>) evaluation rules for the <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt> productions except for <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"beff52c4\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are also used for the <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> productions, but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Atom\">Atom</a></emu-nt>. The following evaluation rules, with parameter <var>direction</var>, are also added:</p>\n        <p>The production <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dc7c5bc4\">\n        <emu-t>\\</emu-t>\n        <emu-gann>[lookahead = <emu-t>c</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>A</var> be the CharSet containing the single character <code>\\</code> U+005C (REVERSE SOLIDUS).</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"23a78a5b\"><emu-nt><a href=\"#prod-annexB-ExtendedPatternCharacter\">ExtendedPatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character represented by <emu-nt><a href=\"#prod-annexB-ExtendedPatternCharacter\">ExtendedPatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n\n        <p>CharacterEscape (<emu-xref href=\"#sec-characterescape\"><a href=\"#sec-characterescape\" class=\"excluded-xref\" excluded-id=\"sec-characterescape\">#sec-characterescape</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-CharacterEscape\">CharacterEscape</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e8cc2b7c\"><emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>cv</var> be the CharacterValue of this <emu-nt><a href=\"#prod-annexB-CharacterEscape\">CharacterEscape</a></emu-nt>.</li><li>Return the character whose character value is <var>cv</var>.</li></ol></emu-alg>\n\n        <p>NonemptyClassRanges (<emu-xref href=\"#sec-nonemptyclassranges\"><a href=\"#sec-nonemptyclassranges\" class=\"excluded-xref\" excluded-id=\"sec-nonemptyclassranges\">#sec-nonemptyclassranges</a></emu-xref>) modifies the following evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"a5b9453b\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>A</var>.</li><li>Evaluate the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>B</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt> to obtain a CharSet <var>C</var>.</li><li>Let <var>D</var> be !&#160;<emu-xref aoid=\"CharacterRangeOrUnion\"><a href=\"#sec-runtime-semantics-characterrangeorunion-abstract-operation\">CharacterRangeOrUnion</a></emu-xref>(<var>A</var>, <var>B</var>).</li><li>Return the union of <var>D</var> and <var>C</var>.</li></ol></emu-alg>\n\n        <p>NonemptyClassRangesNoDash (<emu-xref href=\"#sec-nonemptyclassrangesnodash\"><a href=\"#sec-nonemptyclassrangesnodash\" class=\"excluded-xref\" excluded-id=\"sec-nonemptyclassrangesnodash\">#sec-nonemptyclassrangesnodash</a></emu-xref>) modifies the following evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e9856041\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> to obtain a CharSet <var>A</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>B</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt> to obtain a CharSet <var>C</var>.</li><li>Let <var>D</var> be !&#160;<emu-xref aoid=\"CharacterRangeOrUnion\"><a href=\"#sec-runtime-semantics-characterrangeorunion-abstract-operation\">CharacterRangeOrUnion</a></emu-xref>(<var>A</var>, <var>B</var>).</li><li>Return the union of <var>D</var> and <var>C</var>.</li></ol></emu-alg>\n\n        <p>ClassEscape (<emu-xref href=\"#sec-classescape\"><a href=\"#sec-classescape\" class=\"excluded-xref\" excluded-id=\"sec-classescape\">#sec-classescape</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ClassEscape\">ClassEscape</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"361f85ec\">\n        <emu-t>c</emu-t>\n        <emu-nt><a href=\"#prod-annexB-ClassControlLetter\">ClassControlLetter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>cv</var> be the CharacterValue of this <emu-nt><a href=\"#prod-annexB-ClassEscape\">ClassEscape</a></emu-nt>.</li><li>Let <var>c</var> be the character whose character value is <var>cv</var>.</li><li>Return the CharSet containing the single character <var>c</var>.</li></ol></emu-alg>\n\n        <p>ClassAtomNoDash (<emu-xref href=\"#sec-classatomnodash\"><a href=\"#sec-classatomnodash\" class=\"excluded-xref\" excluded-id=\"sec-classatomnodash\">#sec-classatomnodash</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"ClassAtomNoDash\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dc7c5bc4\">\n        <emu-t>\\</emu-t>\n        <emu-gann>[lookahead = <emu-t>c</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing the single character <code>\\</code> U+005C (REVERSE SOLIDUS).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">This production can only be reached from the sequence <code>\\c</code> within a character class where it is not followed by an acceptable control character.</div></emu-note>\n\n        <div id=\"excluded-sec-runtime-semantics-characterrangeorunion-abstract-operation\"><h1><span class=\"secnum\">B.1.4.4.1</span>#sec-runtime-semantics-characterrangeorunion-abstract-operation CharacterRangeOrUnion ( A, B )</h1>...</div></emu-annex>\n    "}, "sec-numeric-types-bigint-leftShift": {"num": "6.1.6.2.9", "title": "#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-leftShift\">#sec-numeric-types-bigint-leftShift</span> BigInt::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::leftShift takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>y</var> &lt; <emu-val>0</emu-val><sub>&#8484;</sub>, then<ol><li>Return the BigInt value that represents <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &#247; 2<sup>-<var>y</var></sup>, rounding down to the nearest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, including for negative numbers.</li></ol></li><li>Return the BigInt value that represents <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &#215; 2<sup><var>y</var></sup>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-uri-syntax-and-semantics": {"num": "18.2.6.1", "title": "#sec-uri-syntax-and-semantics URI Syntax and Semantics", "html": "<emu-clause id=\"sec-uri-syntax-and-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-uri-syntax-and-semantics\">#sec-uri-syntax-and-semantics</span> URI Syntax and Semantics</h1>\n        <p>A URI is composed of a sequence of components separated by component separators. The general form is:</p>\n        <div class=\"rhs\">\n          <emu-nt>Scheme</emu-nt> <code>:</code> <emu-nt>First</emu-nt> <code>/</code> <emu-nt>Second</emu-nt> <code>;</code> <emu-nt>Third</emu-nt> <code>?</code> <emu-nt>Fourth</emu-nt>\n        </div>\n        <p>where the italicized names represent components and &#8220;<code>:</code>&#8221;, &#8220;<code>/</code>&#8221;, &#8220;<code>;</code>&#8221; and &#8220;<code>?</code>&#8221; are reserved for use as separators. The <code>encodeURI</code> and <code>decodeURI</code> functions are intended to work with complete URIs; they assume that any reserved code units in the URI are intended to have special meaning and so are not encoded. The <code>encodeURIComponent</code> and <code>decodeURIComponent</code> functions are intended to work with the individual component parts of a URI; they assume that any reserved code units represent text and so must be encoded so that they are not interpreted as reserved code units when the component is part of a complete URI.</p>\n        <p>The following lexical grammar specifies the form of encoded URIs.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\"><emu-production name=\"uri\" type=\"regexp\" id=\"prod-uri\">\n    <emu-nt><a href=\"#prod-uri\">uri</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"0a700980\"><emu-nt optional=\"\"><a href=\"#prod-uriCharacters\">uriCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriCharacters\" type=\"regexp\" id=\"prod-uriCharacters\">\n    <emu-nt><a href=\"#prod-uriCharacters\">uriCharacters</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"1440f450\">\n        <emu-nt><a href=\"#prod-uriCharacter\">uriCharacter</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-uriCharacters\">uriCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"uriCharacter\" type=\"regexp\" id=\"prod-uriCharacter\">\n    <emu-nt><a href=\"#prod-uriCharacter\">uriCharacter</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"345fa263\"><emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"032a420c\"><emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c9e0cc22\"><emu-nt><a href=\"#prod-uriEscaped\">uriEscaped</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriReserved\" type=\"regexp\" oneof=\"\" id=\"prod-uriReserved\">\n    <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>;</emu-t> <emu-t>/</emu-t> <emu-t>?</emu-t> <emu-t>:</emu-t> <emu-t>@</emu-t> <emu-t>&amp;</emu-t> <emu-t>=</emu-t> <emu-t>+</emu-t> <emu-t>$</emu-t> <emu-t>,</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"uriUnescaped\" type=\"regexp\" id=\"prod-uriUnescaped\">\n    <emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"a3a1eef4\"><emu-nt><a href=\"#prod-uriAlpha\">uriAlpha</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"14f39e10\"><emu-nt><a href=\"#prod-uriMark\">uriMark</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriEscaped\" type=\"regexp\" id=\"prod-uriEscaped\">\n    <emu-nt><a href=\"#prod-uriEscaped\">uriEscaped</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"43658761\">\n        <emu-t>%</emu-t>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"uriAlpha\" type=\"regexp\" oneof=\"\" id=\"prod-uriAlpha\">\n    <emu-nt><a href=\"#prod-uriAlpha\">uriAlpha</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>a</emu-t> <emu-t>b</emu-t> <emu-t>c</emu-t> <emu-t>d</emu-t> <emu-t>e</emu-t> <emu-t>f</emu-t> <emu-t>g</emu-t> <emu-t>h</emu-t> <emu-t>i</emu-t> <emu-t>j</emu-t> <emu-t>k</emu-t> <emu-t>l</emu-t> <emu-t>m</emu-t> <emu-t>n</emu-t> <emu-t>o</emu-t> <emu-t>p</emu-t> <emu-t>q</emu-t> <emu-t>r</emu-t> <emu-t>s</emu-t> <emu-t>t</emu-t> <emu-t>u</emu-t> <emu-t>v</emu-t> <emu-t>w</emu-t> <emu-t>x</emu-t> <emu-t>y</emu-t> <emu-t>z</emu-t> <emu-t>A</emu-t> <emu-t>B</emu-t> <emu-t>C</emu-t> <emu-t>D</emu-t> <emu-t>E</emu-t> <emu-t>F</emu-t> <emu-t>G</emu-t> <emu-t>H</emu-t> <emu-t>I</emu-t> <emu-t>J</emu-t> <emu-t>K</emu-t> <emu-t>L</emu-t> <emu-t>M</emu-t> <emu-t>N</emu-t> <emu-t>O</emu-t> <emu-t>P</emu-t> <emu-t>Q</emu-t> <emu-t>R</emu-t> <emu-t>S</emu-t> <emu-t>T</emu-t> <emu-t>U</emu-t> <emu-t>V</emu-t> <emu-t>W</emu-t> <emu-t>X</emu-t> <emu-t>Y</emu-t> <emu-t>Z</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"uriMark\" type=\"regexp\" oneof=\"\" id=\"prod-uriMark\">\n    <emu-nt><a href=\"#prod-uriMark\">uriMark</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>-</emu-t> <emu-t>_</emu-t> <emu-t>.</emu-t> <emu-t>!</emu-t> <emu-t>~</emu-t> <emu-t>*</emu-t> <emu-t>'</emu-t> <emu-t>(</emu-t> <emu-t>)</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The above syntax is based upon RFC 2396 and does not reflect changes introduced by the more recent RFC 3986.</p>\n        </div></emu-note>\n        <h2>Runtime Semantics</h2>\n        <p>When a code unit to be included in a URI is not listed above or is not intended to have the special meaning sometimes given to the reserved code units, that code unit must be encoded. The code unit is transformed into its UTF-8 encoding, with <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pairs</a></emu-xref> first converted from UTF-16 to the corresponding code point value. (Note that for code units in the range [0, 127] this results in a single octet with the same value.) The resulting sequence of octets is then transformed into a String with each octet represented by an escape sequence of the form <emu-val>\"%xx\"</emu-val>.</p>\n\n        <div id=\"excluded-sec-encode\"><h1><span class=\"secnum\">18.2.6.1.1</span>#sec-encode Encode ( string, unescapedSet )</h1>...</div><div id=\"excluded-sec-decode\"><h1><span class=\"secnum\">18.2.6.1.2</span>#sec-decode Decode ( string, reservedSet )</h1>...</div></emu-clause>\n\n      "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\" id=\"prod-annexB-ObjectLiteral\">\n    <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" id=\"prod-annexB-PropertyDefinition\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by PropertyNameList does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the PropertyDefinitionEvaluation algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-algorithm-conventions-syntax-directed-operations": {"num": "5.2.2", "title": "#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations", "html": "<emu-clause id=\"sec-algorithm-conventions-syntax-directed-operations\" namespace=\"algorithm-conventions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions-syntax-directed-operations\">#sec-algorithm-conventions-syntax-directed-operations</span> Syntax-Directed Operations</h1>\n      <p>A <dfn>syntax-directed operation</dfn> is a named operation whose definition consists of algorithms, each of which is associated with one or more productions from one of the ECMAScript grammars. A production that has multiple alternative definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when parsing the source text. The <dfn>source text matched by</dfn> a grammar production is the portion of the source text that starts at the beginning of the first terminal that participated in the match and ends at the end of the last terminal that participated in the match.</p>\n      <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any &#8220;[ ]&#8221; grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no effect on the associated semantics for the alternative.</p>\n      <p>Syntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps <emu-xref href=\"#step-sdo-invocation-example-1\"><a href=\"#step-sdo-invocation-example-1\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-1\">#step-sdo-invocation-example-1</a></emu-xref>, <emu-xref href=\"#step-sdo-invocation-example-2\"><a href=\"#step-sdo-invocation-example-2\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-2\">#step-sdo-invocation-example-2</a></emu-xref>, and <emu-xref href=\"#step-sdo-invocation-example-3\"><a href=\"#step-sdo-invocation-example-3\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-3\">#step-sdo-invocation-example-3</a></emu-xref> in the following algorithm:</p>\n      <emu-alg><ol><li id=\"step-sdo-invocation-example-1\">Let <var>status</var> be SyntaxDirectedOperation of <emu-nt>SomeNonTerminal</emu-nt>.</li><li>Let <var>someParseNode</var> be the parse of some source text.</li><li id=\"step-sdo-invocation-example-2\">Perform SyntaxDirectedOperation of <var>someParseNode</var>.</li><li id=\"step-sdo-invocation-example-3\">Perform SyntaxDirectedOperation of <var>someParseNode</var> passing <emu-val>\"value\"</emu-val> as the argument.</li></ol></emu-alg>\n      <p>Unless explicitly specified otherwise, all chain productions have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain production</a></emu-xref>'s sole right-hand side nonterminal and then returns the result. For example, assume that some algorithm has a step of the form: &#8220;Return the result of evaluating <emu-nt><a href=\"#prod-algorithm-conventions-Block\">Block</a></emu-nt>&#8221; and that there is a production:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"Block\" id=\"prod-algorithm-conventions-Block\">\n    <emu-nt><a href=\"#prod-algorithm-conventions-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>but the Evaluation operation does not associate an algorithm with that production. In that case, the Evaluation operation implicitly includes an association of the form:</p>\n      <p><b>Runtime Semantics: Evaluation</b></p>\n      <emu-grammar type=\"example\"><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-algorithm-conventions-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.3.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\" id=\"prod-annexB-SwitchStatement\">\n    <emu-nt><a href=\"#prod-annexB-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-rules-of-automatic-semicolon-insertion": {"num": "11.9.1", "title": "#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" namespace=\"asi-rules\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</span> Rules of Automatic Semicolon Insertion</h1>\n      <p>In the following rules, &#8220;token&#8221; means the actual recognized lexical token determined using the current lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> as described in clause <emu-xref href=\"#sec-ecmascript-language-lexical-grammar\"><a href=\"#sec-ecmascript-language-lexical-grammar\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</a></emu-xref>.</p>\n      <p>There are three basic rules of semicolon insertion:</p>\n      <ol>\n        <li>\n          <p>When, as the source text is parsed from left to right, a token (called the <em>offending token</em>) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:</p>\n          <ul>\n            <li>\n              The offending token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.\n            </li>\n            <li>\n              The offending token is <code>}</code>.\n            </li>\n            <li>\n              The previous token is <code>)</code> and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (<emu-xref href=\"#sec-do-while-statement\"><a href=\"#sec-do-while-statement\" class=\"excluded-xref\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</a></emu-xref>).\n            </li>\n          </ul>\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single instance of the goal nonterminal, then a semicolon is automatically inserted at the end of the input stream.\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, then a semicolon is automatically inserted before the restricted token.\n        </li>\n      </ol>\n      <p>However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a <code>for</code> statement (see <emu-xref href=\"#sec-for-statement\"><a href=\"#sec-for-statement\" class=\"excluded-xref\" excluded-id=\"sec-for-statement\">#sec-for-statement</a></emu-xref>).</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The following are the only restricted productions in the grammar:</p>\n        <emu-grammar><emu-production name=\"UpdateExpression\" params=\"Yield, Await\" id=\"prod-asi-rules-UpdateExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1063e6f2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>++</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"c40a0c36\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>--</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ContinueStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ContinueStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"14858b1f\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"BreakStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-BreakStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9c83b42f\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ReturnStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ReturnStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b293381\">\n        <emu-t>return</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b7205f0d\">\n        <emu-t>return</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ThrowStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ThrowStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"abf0986c\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-asi-rules-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-asi-rules-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdca54b2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-asi-rules-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-asi-rules-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <p>The practical effect of these restricted productions is as follows:</p>\n        <ul>\n          <li>\n            When a <code>++</code> or <code>--</code> token is encountered where the parser would treat it as a postfix operator, and at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurred between the preceding token and the <code>++</code> or <code>--</code> token, then a semicolon is automatically inserted before the <code>++</code> or <code>--</code> token.\n          </li>\n          <li>\n            When a <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token is encountered and a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is encountered before the next token, a semicolon is automatically inserted after the <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          </li>\n        </ul>\n        <p>The resulting practical advice to ECMAScript programmers is:</p>\n        <ul>\n          <li>\n            A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand.\n          </li>\n          <li>\n            An <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> in a <code>return</code> or <code>throw</code> statement or an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> in a <code>yield</code> expression should start on the same line as the <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          </li>\n          <li>\n            A <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> in a <code>break</code> or <code>continue</code> statement should be on the same line as the <code>break</code> or <code>continue</code> token.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-conformance.normative-optional": {"num": "2.1", "title": "#sec-conformance.normative-optional Example Clause Heading", "html": "<emu-clause id=\"sec-conformance.normative-optional\" type=\"example\" normative-optional=\"\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance.normative-optional\">#sec-conformance.normative-optional</span> Example Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-grammar-notation": {"num": "5.1.5", "title": "#sec-grammar-notation Grammar Notation", "html": "<emu-clause id=\"sec-grammar-notation\" namespace=\"grammar-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</span> Grammar Notation</h1>\n      <p>Terminal symbols are shown in <code>fixed width</code> font, both in the productions of the grammars and throughout this specification whenever the text directly refers to such a terminal symbol. These are to appear in a script exactly as written. All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin range, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n      <p>Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal (also called a &#8220;production&#8221;) is introduced by the name of the nonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar the production belongs.) One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"WhileStatement\" id=\"prod-grammar-notation-WhileStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> represents the token <code>while</code>, followed by a left parenthesis token, followed by an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, followed by a right parenthesis token, followed by a <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>. The occurrences of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> and <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> are themselves nonterminals. As another example, the syntactic definition:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"ArgumentList\" id=\"prod-grammar-notation-ArgumentList\">\n    <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7ff23fee\">\n        <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may represent either a single <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> or an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>, followed by a comma, followed by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. This definition of <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> is recursive, that is, it is defined in terms of itself. The result is that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may contain any positive number of arguments, separated by commas, where each argument expression is an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. Such recursive definitions of nonterminals are common.</p>\n      <p>The subscripted suffix &#8220;<sub>opt</sub>&#8221;, which may appear after a terminal or nonterminal, indicates an optional symbol. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\" id=\"prod-grammar-notation-VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"IterationStatement\" id=\"prod-grammar-notation-IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"180d57b5\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"0acd6093\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which in turn is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"00273dd7\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"d4b04297\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e8d15924\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7f2cbdb0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>so, in this example, the nonterminal <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> actually has four alternative right-hand sides.</p>\n      <p>A production may be parameterized by a subscripted annotation of the form &#8220;<sub>[parameters]</sub>&#8221;, which may appear as a suffix to the nonterminal symbol defined by the production. &#8220;<sub>parameters</sub>&#8221; may be either a single name or a comma separated list of names. A parameterized production is shorthand for a set of productions defining all combinations of the parameter names, preceded by an underscore, appended to the parameterized nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\" params=\"Return\" id=\"prod-grammar-notation-StatementList\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\" id=\"prod-grammar-notation-StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\" params=\"Return, In\">\n    <emu-nt params=\"Return, In\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return, In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_In\" id=\"prod-grammar-notation-StatementList_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_In\">StatementList_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return_In\" id=\"prod-grammar-notation-StatementList_Return_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return_In\">StatementList_Return_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Multiple parameters produce a combinatory number of productions, not all of which are necessarily referenced in a complete grammar.</p>\n      <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb21bdc\"><emu-nt params=\"+In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[+In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to saying:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"93a8206f\"><emu-nt>ExpressionStatement_In</emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70147e05\"><emu-nt params=\"~In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[~In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>A nonterminal reference may have both a parameter list and an &#8220;<sub>opt</sub>&#8221; suffix. For example:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"363e22bb\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"+In\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"693077fa\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Prefixing a parameter name with &#8220;<sub>?</sub>&#8221; on a right-hand side nonterminal reference makes that parameter value dependent upon the occurrence of the parameter name on the reference to the current production's left-hand side symbol. For example:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dde5478d\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"?In\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration_In\" id=\"prod-grammar-notation-VariableDeclaration_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration_In\">VariableDeclaration_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"693077fa\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If a right-hand side alternative is prefixed with &#8220;[+parameter]&#8221; that alternative is only available if the named parameter was used in referencing the production's nonterminal symbol. If a right-hand side alternative is prefixed with &#8220;[~parameter]&#8221; that alternative is only available if the named parameter was <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a712bea8\" constraints=\"+Return\"><emu-constraints>[+Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9abebc34\" constraints=\"~Return\"><emu-constraints>[~Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>When the words &#8220;<b>one of</b>&#8221; follow the colon(s) in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for ECMAScript contains the production:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\" id=\"prod-grammar-notation-NonZeroDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which is merely a convenient abbreviation for:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"NonZeroDigit\" type=\"lexical\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n    <emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n    <emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n    <emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n    <emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n    <emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n    <emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n    <emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n    <emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If the phrase &#8220;[empty]&#8221; appears as the right-hand side of a production, it indicates that the production's right-hand side contains no terminals or nonterminals.</p>\n      <p>If the phrase &#8220;[lookahead = <var>seq</var>]&#8221; appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence <var>seq</var> is a prefix of the immediately following input token sequence. Similarly, &#8220;[lookahead &#8712; <var>set</var>]&#8221;, where <var>set</var> is a finite nonempty set of token sequences, indicates that the production may only be used if some element of <var>set</var> is a prefix of the immediately following token sequence. For convenience, the set can also be written as a nonterminal, in which case it represents the set of all token sequences to which that nonterminal could expand. It is considered an editorial error if the nonterminal could expand to infinitely many distinct token sequences.</p>\n      <p>These conditions may be negated. &#8220;[lookahead &#8800; <var>seq</var>]&#8221; indicates that the containing production may only be used if <var>seq</var> is <em>not</em> a prefix of the immediately following input token sequence, and &#8220;[lookahead &#8713; <var>set</var>]&#8221; indicates that the production may only be used if <em>no</em> element of <var>set</var> is a prefix of the immediately following token sequence.</p>\n      <p>As an example, given the definitions:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" id=\"prod-grammar-notation-DecimalDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalDigits\" type=\"lexical\" id=\"prod-grammar-notation-DecimalDigits\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f250657\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>the definition:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"LookaheadExample\" type=\"lexical\" id=\"prod-grammar-notation-LookaheadExample\">\n    <emu-nt><a href=\"#prod-grammar-notation-LookaheadExample\">LookaheadExample</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e21e12ce\">\n        <emu-t>n</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>1</emu-t>, <emu-t>3</emu-t>, <emu-t>5</emu-t>, <emu-t>7</emu-t>, <emu-t>9</emu-t> }]</emu-gann>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"195cbc6c\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>matches either the letter <code>n</code> followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>\n      <p>Note that when these phrases are used in the syntactic grammar, it may not be possible to unambiguously identify the immediately following token sequence because determining later tokens requires knowing which lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> to use at later positions. As such, when these are used in the syntactic grammar, it is considered an editorial error for a token sequence <var>seq</var> to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not <var>seq</var> would be a prefix of the resulting token sequence.</p>\n      <p>If the phrase &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is <em>a restricted production</em>: it may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the input stream at the indicated position. For example, the production:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"ThrowStatement\" id=\"prod-grammar-notation-ThrowStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ThrowStatement\">ThrowStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ff4ec866\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>indicates that the production may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the script between the <code>throw</code> token and the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n      <p>Unless the presence of a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is forbidden by a restricted production, any number of occurrences of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the script.</p>\n      <p>When an alternative in a production of the lexical grammar or the numeric string grammar appears to be a multi-code point token, it represents the sequence of code points that would make up such a token.</p>\n      <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase &#8220;<b>but not</b>&#8221; and then indicating the expansions to be excluded. For example, the production:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"Identifier\" type=\"lexical\" id=\"prod-grammar-notation-Identifier\">\n    <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>means that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> may be replaced by any sequence of code points that could replace <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> provided that the same sequence of code points could not replace <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      <p>Finally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it would be impractical to list all the alternatives:</p>\n      <emu-grammar type=\"example\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-grammar-notation-SourceCharacter\">\n    <emu-nt><a href=\"#prod-grammar-notation-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n</emu-grammar>\n    </emu-clause>\n  "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.3.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\" id=\"prod-annexB-Block\">\n    <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-async-arrow-function-definitions": {"num": "14.8", "title": "#sec-async-arrow-function-definitions Async Arrow Function Definitions", "html": "<emu-clause id=\"sec-async-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</span> Async Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" id=\"prod-AsyncArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncConciseBody\" params=\"In\" id=\"prod-AsyncConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\" id=\"prod-AsyncArrowBindingIdentifier\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f747be5d\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowHead\" id=\"prod-AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.8.1</span>#sec-async-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead\"><h1><span class=\"secnum\">14.8.2</span>#sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead Static Semantics: CoveredAsyncArrowHead</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.8.3</span>#sec-async-arrow-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.8.4</span>#sec-async-arrow-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-ContainsExpression\"><h1><span class=\"secnum\">14.8.5</span>#sec-async-arrow-function-definitions-static-semantics-ContainsExpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.8.6</span>#sec-async-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-ExpectedArgumentCount\"><h1><span class=\"secnum\">14.8.7</span>#sec-async-arrow-function-definitions-static-semantics-ExpectedArgumentCount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.8.8</span>#sec-async-arrow-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-IsSimpleParameterList\"><h1><span class=\"secnum\">14.8.9</span>#sec-async-arrow-function-definitions-static-semantics-IsSimpleParameterList Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"><h1><span class=\"secnum\">14.8.10</span>#sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"><h1><span class=\"secnum\">14.8.11</span>#sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"><h1><span class=\"secnum\">14.8.12</span>#sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"><h1><span class=\"secnum\">14.8.13</span>#sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-IteratorBindingInitialization\"><h1><span class=\"secnum\">14.8.14</span>#sec-async-arrow-function-definitions-IteratorBindingInitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.8.15</span>#sec-async-arrow-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.8.16</span>#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.8.17</span>#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-left-hand-side-expressions-static-semantics-coveredcallexpression": {"num": "12.3.1.2", "title": "#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">#sec-left-hand-side-expressions-static-semantics-coveredcallexpression</span> Static Semantics: CoveredCallExpression</h1>\n        <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\" id=\"prod-CoverCallExpressionAndAsyncArrowHead\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be44becf\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\" id=\"prod-annexB-BindingIdentifier\">\n    <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of LabelledEvaluation in <emu-xref href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><a href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> is not finite, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>x</var>)).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <var>n</var> &#247; 10<sup><var>f</var></sup> - <var>x</var> is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>.</li><li>Let <var>b</var> be the other <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent Number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-labelled-function-declarations": {"num": "B.3.2", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-annexB-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\" id=\"prod-annexB-LabelledItem\">\n    <emu-nt><a href=\"#prod-annexB-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any <ins>strict mode</ins> source code matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-strict-mode-of-ecmascript", "sec-returnifabrupt-shorthands", "sec-patterns-static-semantics-early-errors-annexb", "sec-functions-and-classes", "sec-algorithm-conventions", "sec-variablestatements-in-catch-blocks", "sec-regular-expression-patterns-semantics", "sec-numeric-types-bigint-leftShift", "sec-uri-syntax-and-semantics", "sec-__proto__-property-names-in-object-initializers", "sec-algorithm-conventions-syntax-directed-operations", "sec-switch-duplicates-allowed-static-semantics", "sec-rules-of-automatic-semicolon-insertion", "sec-conformance.normative-optional", "sec-grammar-notation", "sec-block-duplicates-allowed-static-semantics", "sec-async-arrow-function-definitions", "sec-left-hand-side-expressions-static-semantics-coveredcallexpression", "sec-initializers-in-forin-statement-heads", "sec-number.prototype.tofixed", "sec-labelled-function-declarations"], "secData": {"sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-xref href=\"#prod-annexB-LegacyOctalIntegerLiteral\"><a href=\"#prod-annexB-LegacyOctalIntegerLiteral\"><emu-nt>LegacyOctalIntegerLiteral</emu-nt></a></emu-xref>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-xref href=\"#prod-annexB-NonOctalDecimalIntegerLiteral\"><a href=\"#prod-annexB-NonOctalDecimalIntegerLiteral\"><emu-nt>NonOctalDecimalIntegerLiteral</emu-nt></a></emu-xref>.\n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-xref href=\"#prod-annexB-LegacyOctalEscapeSequence\"><a href=\"#prod-annexB-LegacyOctalEscapeSequence\"><emu-nt>LegacyOctalEscapeSequence</emu-nt></a></emu-xref> or <emu-xref href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\"><emu-nt>NonOctalDecimalEscapeSequence</emu-nt></a></emu-xref> as described in <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable Reference. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>, <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } or otherwise cannot be deleted (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-returnifabrupt-shorthands": {"num": "5.2.3.4", "title": "#sec-returnifabrupt-shorthands ReturnIfAbrupt Shorthands", "html": "<emu-clause id=\"sec-returnifabrupt-shorthands\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-returnifabrupt-shorthands\">#sec-returnifabrupt-shorthands</span> ReturnIfAbrupt Shorthands</h1>\n        <p>Invocations of <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> and syntax-directed operations that are prefixed by <code>?</code> indicate that <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>. For example, the step:</p>\n        <emu-alg example=\"\"><ol><li>?&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following step:</p>\n        <emu-alg example=\"\"><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(OperationName()).</li></ol></emu-alg>\n        <p>Similarly, for method application style, the step:</p>\n        <emu-alg example=\"\"><ol><li>? <var>someValue</var>.OperationName().</li></ol></emu-alg>\n        <p>is equivalent to:</p>\n        <emu-alg example=\"\"><ol><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.OperationName()).</li></ol></emu-alg>\n        <p>Similarly, prefix <code>!</code> is used to indicate that the following invocation of an abstract or syntax-directed operation will never return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and that the resulting <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Value]] field should be used in place of the return value of the operation. For example, the step:</p>\n        <emu-alg example=\"\"><ol><li>Let <var>val</var> be !&#160;OperationName().</li></ol></emu-alg>\n        <p>is equivalent to the following steps:</p>\n        <emu-alg example=\"\"><ol><li>Let <var>val</var> be OperationName().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>, set <var>val</var> to <var>val</var>.[[Value]].</li></ol></emu-alg>\n        <p>Syntax-directed operations for <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> make use of this shorthand by placing <code>!</code> or <code>?</code> before the invocation of the operation:</p>\n        <emu-alg example=\"\"><ol><li>Perform ! SyntaxDirectedOperation of <emu-nt>NonTerminal</emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-patterns-static-semantics-early-errors-annexb": {"num": "B.1.4.1", "title": "#sec-patterns-static-semantics-early-errors-annexb Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-patterns-static-semantics-early-errors-annexb\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-patterns-static-semantics-early-errors-annexb\">#sec-patterns-static-semantics-early-errors-annexb</span> Static Semantics: Early Errors</h1>\n        <p>The semantics of <emu-xref href=\"#sec-patterns-static-semantics-early-errors\"><a href=\"#sec-patterns-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-patterns-static-semantics-early-errors\">#sec-patterns-static-semantics-early-errors</a></emu-xref> is extended as follows:</p>\n        <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bbd715bb\"><emu-nt><a href=\"#prod-annexB-InvalidBracedQuantifier\">InvalidBracedQuantifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any source text matches this rule.\n          </li>\n        </ul>\n        <p>Additionally, the rules for the following productions are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"a5b9453b\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if IsCharacterClass of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> or IsCharacterClass of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[U]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if IsCharacterClass of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and IsCharacterClass of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the CharacterValue of the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is larger than the CharacterValue of the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n        <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e9856041\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if IsCharacterClass of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>true</emu-val> or IsCharacterClass of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>true</emu-val> <ins>and this production has a <sub>[U]</sub> parameter</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if IsCharacterClass of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is <emu-val>false</emu-val> and IsCharacterClass of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> is <emu-val>false</emu-val> and the CharacterValue of <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> is larger than the CharacterValue of <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n\n      "}, "sec-functions-and-classes": {"num": "A.4", "title": "#sec-functions-and-classes Functions and Classes", "html": "<emu-annex id=\"sec-functions-and-classes\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functions-and-classes\">#sec-functions-and-classes</span> Functions and Classes</h1>\n    <emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"607f4086\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameterList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FormalParameter\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"FunctionStatementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdca54b2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ArrowParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7a8157ec\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7b95b3\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ExpressionBody\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"ArrowParameters\" params=\"Yield, Await\" a=\"parencover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b7561ab3\">\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncConciseBody\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f747be5d\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>When processing an instance of the production\n      <br>\n      <emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" a=\"callcover\" class=\" inline\" collapsed=\"\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs></emu-production>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n    <emu-production name=\"AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <p>&#160;</p>\n    <emu-production name=\"MethodDefinition\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19d49312\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"55774850\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncMethod\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"AwaitExpression\" params=\"Yield\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassDeclaration\" params=\"Yield, Await, Default\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"afef225f\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"788487dc\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassExpression\">ClassExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dd578cac\">\n        <emu-t>class</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassTail\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassTail\">ClassTail</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d2d0a98e\">\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\" optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassHeritage\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7989e09f\">\n        <emu-t>extends</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassBody\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1c8eab17\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElementList\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2fb64cb4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"180d43b5\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElementList\">ClassElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n    <emu-production name=\"ClassElement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ClassElement\">ClassElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b4234e8\">\n        <emu-t>static</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4a0dac03\"><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n  </emu-annex>\n\n  "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized with an ordered, comma-separated sequence of alias names which may be used within the algorithm steps to reference the argument passed in that position. Optional parameters are denoted with surrounding brackets ([ , <var>name</var> ]) and are no different from required parameters within algorithm steps. A rest parameter may appear at the end of a parameter list, denoted with leading ellipsis (, ...<var>name</var>). The rest parameter captures all of the arguments provided following the required and optional parameters into a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. If there are no such additional arguments, that <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is empty.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg example=\"\"><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div><div id=\"excluded-sec-value-notation\"><h1><span class=\"secnum\">5.2.6</span>#sec-value-notation Value Notation</h1>...</div></emu-clause>\n"}, "sec-variablestatements-in-catch-blocks": {"num": "B.3.5", "title": "#sec-variablestatements-in-catch-blocks VariableStatements in Catch Blocks", "html": "<emu-annex id=\"sec-variablestatements-in-catch-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-variablestatements-in-catch-blocks\">#sec-variablestatements-in-catch-blocks</span> VariableStatements in Catch Blocks</h1>\n      <p>The content of subclause <emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref> is replaced with the following:</p>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains any duplicate elements.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> unless <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> is <emu-grammar><emu-production name=\"CatchParameter\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause may contain <code>var</code> declarations that bind a name that is also bound by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>. At runtime, such bindings are instantiated in the VariableDeclarationEnvironment. They do not shadow the same-named bindings introduced by the <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> and hence the <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> for such <code>var</code> declarations will assign to the corresponding catch parameter rather than the <code>var</code> binding.</p>\n      </div></emu-note>\n      <p>This modified behaviour also applies to <code>var</code> and <code>function</code> declarations introduced by <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> calls contained within the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> of a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause. This change is accomplished by modifying the algorithm of <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref> as follows:</p>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\"><a href=\"#step-evaldeclarationinstantiation-throw-duplicate-binding\">3.d.i.2.a.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-throw-duplicate-binding\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></emu-alg>\n      <p>Step <emu-xref href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\"><a href=\"#step-evaldeclarationinstantiation-web-compat-bindingexists\">7.d.ii.4.a.i.i</a></emu-xref> is replaced by:</p>\n      <emu-alg replaces-step=\"step-evaldeclarationinstantiation-web-compat-bindingexists\"><ol start=\"1\" class=\"nested-lots\"><li>If <var>thisEnv</var> is not the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause, let <var>bindingExists</var> be <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-regular-expression-patterns-semantics": {"num": "B.1.4.4", "title": "#sec-regular-expression-patterns-semantics Pattern Semantics", "html": "<emu-annex id=\"sec-regular-expression-patterns-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regular-expression-patterns-semantics\">#sec-regular-expression-patterns-semantics</span> Pattern Semantics</h1>\n        <p>The semantics of <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> is extended as follows:</p>\n        <p>Within <emu-xref href=\"#sec-term\"><a href=\"#sec-term\" class=\"excluded-xref\" excluded-id=\"sec-term\">#sec-term</a></emu-xref> reference to &#8220;<emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"59aa089b\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221; are to be interpreted as meaning &#8220;<emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"59aa089b\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221; or &#8220;<emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"34eb148f\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> &#8221;.</p>\n\n        <p>Term (<emu-xref href=\"#sec-term\"><a href=\"#sec-term\" class=\"excluded-xref\" excluded-id=\"sec-term\">#sec-term</a></emu-xref>) includes the following additional evaluation rules:</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fd5c877d\">\n        <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"44aed0a4\">\n        <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> substituted for <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"74fbcc1b\">\n        <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"44aed0a4\">\n        <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9700dc98\"><emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates the same as the production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"41dded41\"><emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</p>\n\n        <p>Assertion (<emu-xref href=\"#sec-assertion\"><a href=\"#sec-assertion\" class=\"excluded-xref\" excluded-id=\"sec-assertion\">#sec-assertion</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"645fd5dc\"><emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> to obtain a Matcher <var>m</var>.</li><li>Return <var>m</var>.</li></ol></emu-alg>\n\n        <p>Assertion (<emu-xref href=\"#sec-assertion\"><a href=\"#sec-assertion\" class=\"excluded-xref\" excluded-id=\"sec-assertion\">#sec-assertion</a></emu-xref>) evaluation rules for the <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cfb94f94\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> and <emu-grammar><emu-production name=\"Assertion\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"ba98f6e2\">\n        <emu-t>(</emu-t>\n        <emu-t>?</emu-t>\n        <emu-t>!</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> productions are also used for the <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> productions, but with <emu-nt><a href=\"#prod-annexB-QuantifiableAssertion\">QuantifiableAssertion</a></emu-nt> substituted for <emu-nt><a href=\"#prod-annexB-Assertion\">Assertion</a></emu-nt>.</p>\n\n        <p>Atom (<emu-xref href=\"#sec-atom\"><a href=\"#sec-atom\" class=\"excluded-xref\" excluded-id=\"sec-atom\">#sec-atom</a></emu-xref>) evaluation rules for the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> productions except for <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"beff52c4\"><emu-nt><a href=\"#prod-PatternCharacter\">PatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are also used for the <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> productions, but with <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> substituted for <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. The following evaluation rules, with parameter <var>direction</var>, are also added:</p>\n        <p>The production <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dc7c5bc4\">\n        <emu-t>\\</emu-t>\n        <emu-gann>[lookahead = <emu-t>c</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>A</var> be the CharSet containing the single character <code>\\</code> U+005C (REVERSE SOLIDUS).</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"ExtendedAtom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ExtendedAtom\">ExtendedAtom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"23a78a5b\"><emu-nt><a href=\"#prod-annexB-ExtendedPatternCharacter\">ExtendedPatternCharacter</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ch</var> be the character represented by <emu-nt><a href=\"#prod-annexB-ExtendedPatternCharacter\">ExtendedPatternCharacter</a></emu-nt>.</li><li>Let <var>A</var> be a one-element CharSet containing the character <var>ch</var>.</li><li>Return !&#160;<emu-xref aoid=\"CharacterSetMatcher\"><a href=\"#sec-runtime-semantics-charactersetmatcher-abstract-operation\">CharacterSetMatcher</a></emu-xref>(<var>A</var>, <emu-val>false</emu-val>, <var>direction</var>).</li></ol></emu-alg>\n\n        <p>CharacterEscape (<emu-xref href=\"#sec-characterescape\"><a href=\"#sec-characterescape\" class=\"excluded-xref\" excluded-id=\"sec-characterescape\">#sec-characterescape</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"CharacterEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-CharacterEscape\">CharacterEscape</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e8cc2b7c\"><emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>cv</var> be the CharacterValue of this <emu-nt><a href=\"#prod-annexB-CharacterEscape\">CharacterEscape</a></emu-nt>.</li><li>Return the character whose character value is <var>cv</var>.</li></ol></emu-alg>\n\n        <p>NonemptyClassRanges (<emu-xref href=\"#sec-nonemptyclassranges\"><a href=\"#sec-nonemptyclassranges\" class=\"excluded-xref\" excluded-id=\"sec-nonemptyclassranges\">#sec-nonemptyclassranges</a></emu-xref>) modifies the following evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"NonemptyClassRanges\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonemptyClassRanges\">NonemptyClassRanges</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"a5b9453b\">\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate the first <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>A</var>.</li><li>Evaluate the second <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>B</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt> to obtain a CharSet <var>C</var>.</li><li>Let <var>D</var> be !&#160;<emu-xref aoid=\"CharacterRangeOrUnion\"><a href=\"#sec-runtime-semantics-characterrangeorunion-abstract-operation\">CharacterRangeOrUnion</a></emu-xref>(<var>A</var>, <var>B</var>).</li><li>Return the union of <var>D</var> and <var>C</var>.</li></ol></emu-alg>\n\n        <p>NonemptyClassRangesNoDash (<emu-xref href=\"#sec-nonemptyclassrangesnodash\"><a href=\"#sec-nonemptyclassrangesnodash\" class=\"excluded-xref\" excluded-id=\"sec-nonemptyclassrangesnodash\">#sec-nonemptyclassrangesnodash</a></emu-xref>) modifies the following evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"NonemptyClassRangesNoDash\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-NonemptyClassRangesNoDash\">NonemptyClassRangesNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e9856041\">\n        <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt>\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt>\n        <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> to obtain a CharSet <var>A</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassAtom\">ClassAtom</a></emu-nt> to obtain a CharSet <var>B</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-ClassRanges\">ClassRanges</a></emu-nt> to obtain a CharSet <var>C</var>.</li><li>Let <var>D</var> be !&#160;<emu-xref aoid=\"CharacterRangeOrUnion\"><a href=\"#sec-runtime-semantics-characterrangeorunion-abstract-operation\">CharacterRangeOrUnion</a></emu-xref>(<var>A</var>, <var>B</var>).</li><li>Return the union of <var>D</var> and <var>C</var>.</li></ol></emu-alg>\n\n        <p>ClassEscape (<emu-xref href=\"#sec-classescape\"><a href=\"#sec-classescape\" class=\"excluded-xref\" excluded-id=\"sec-classescape\">#sec-classescape</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"ClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ClassEscape\">ClassEscape</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"361f85ec\">\n        <emu-t>c</emu-t>\n        <emu-nt><a href=\"#prod-annexB-ClassControlLetter\">ClassControlLetter</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>cv</var> be the CharacterValue of this <emu-nt><a href=\"#prod-annexB-ClassEscape\">ClassEscape</a></emu-nt>.</li><li>Let <var>c</var> be the character whose character value is <var>cv</var>.</li><li>Return the CharSet containing the single character <var>c</var>.</li></ol></emu-alg>\n\n        <p>ClassAtomNoDash (<emu-xref href=\"#sec-classatomnodash\"><a href=\"#sec-classatomnodash\" class=\"excluded-xref\" excluded-id=\"sec-classatomnodash\">#sec-classatomnodash</a></emu-xref>) includes the following additional evaluation rule:</p>\n        <p>The production <emu-grammar><emu-production name=\"ClassAtomNoDash\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-annexB-ClassAtomNoDash\">ClassAtomNoDash</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dc7c5bc4\">\n        <emu-t>\\</emu-t>\n        <emu-gann>[lookahead = <emu-t>c</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing the single character <code>\\</code> U+005C (REVERSE SOLIDUS).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">This production can only be reached from the sequence <code>\\c</code> within a character class where it is not followed by an acceptable control character.</div></emu-note>\n\n        <div id=\"excluded-sec-runtime-semantics-characterrangeorunion-abstract-operation\"><h1><span class=\"secnum\">B.1.4.4.1</span>#sec-runtime-semantics-characterrangeorunion-abstract-operation CharacterRangeOrUnion ( A, B )</h1>...</div></emu-annex>\n    "}, "sec-numeric-types-bigint-leftShift": {"num": "6.1.6.2.9", "title": "#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-leftShift\">#sec-numeric-types-bigint-leftShift</span> BigInt::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::leftShift takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>y</var> &lt; <emu-val>0</emu-val><sub>&#8484;</sub>, then<ol><li>Return the BigInt value that represents <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) / 2<sup>-<var>y</var></sup>, rounding down to the nearest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, including for negative numbers.</li></ol></li><li>Return the BigInt value that represents <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &#215; 2<sup><var>y</var></sup>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-uri-syntax-and-semantics": {"num": "18.2.6.1", "title": "#sec-uri-syntax-and-semantics URI Syntax and Semantics", "html": "<emu-clause id=\"sec-uri-syntax-and-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-uri-syntax-and-semantics\">#sec-uri-syntax-and-semantics</span> URI Syntax and Semantics</h1>\n        <p>A URI is composed of a sequence of components separated by component separators. The general form is:</p>\n        <div class=\"rhs\">\n          <em>Scheme</em> <code>:</code> <em>First</em> <code>/</code> <em>Second</em> <code>;</code> <em>Third</em> <code>?</code> <em>Fourth</em>\n        </div>\n        <p>where the italicized names represent components and &#8220;<code>:</code>&#8221;, &#8220;<code>/</code>&#8221;, &#8220;<code>;</code>&#8221; and &#8220;<code>?</code>&#8221; are reserved for use as separators. The <code>encodeURI</code> and <code>decodeURI</code> functions are intended to work with complete URIs; they assume that any reserved code units in the URI are intended to have special meaning and so are not encoded. The <code>encodeURIComponent</code> and <code>decodeURIComponent</code> functions are intended to work with the individual component parts of a URI; they assume that any reserved code units represent text and so must be encoded so that they are not interpreted as reserved code units when the component is part of a complete URI.</p>\n        <p>The following lexical grammar specifies the form of encoded URIs.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\"><emu-production name=\"uri\" type=\"regexp\" id=\"prod-uri\">\n    <emu-nt><a href=\"#prod-uri\">uri</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"0a700980\"><emu-nt optional=\"\"><a href=\"#prod-uriCharacters\">uriCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriCharacters\" type=\"regexp\" id=\"prod-uriCharacters\">\n    <emu-nt><a href=\"#prod-uriCharacters\">uriCharacters</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"1440f450\">\n        <emu-nt><a href=\"#prod-uriCharacter\">uriCharacter</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-uriCharacters\">uriCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"uriCharacter\" type=\"regexp\" id=\"prod-uriCharacter\">\n    <emu-nt><a href=\"#prod-uriCharacter\">uriCharacter</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"345fa263\"><emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"032a420c\"><emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c9e0cc22\"><emu-nt><a href=\"#prod-uriEscaped\">uriEscaped</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriReserved\" type=\"regexp\" oneof=\"\" id=\"prod-uriReserved\">\n    <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>;</emu-t> <emu-t>/</emu-t> <emu-t>?</emu-t> <emu-t>:</emu-t> <emu-t>@</emu-t> <emu-t>&amp;</emu-t> <emu-t>=</emu-t> <emu-t>+</emu-t> <emu-t>$</emu-t> <emu-t>,</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"uriUnescaped\" type=\"regexp\" id=\"prod-uriUnescaped\">\n    <emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"a3a1eef4\"><emu-nt><a href=\"#prod-uriAlpha\">uriAlpha</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"14f39e10\"><emu-nt><a href=\"#prod-uriMark\">uriMark</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"uriEscaped\" type=\"regexp\" id=\"prod-uriEscaped\">\n    <emu-nt><a href=\"#prod-uriEscaped\">uriEscaped</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"43658761\">\n        <emu-t>%</emu-t>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n        <emu-nt><a href=\"#prod-HexDigit\">HexDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"uriAlpha\" type=\"regexp\" oneof=\"\" id=\"prod-uriAlpha\">\n    <emu-nt><a href=\"#prod-uriAlpha\">uriAlpha</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>a</emu-t> <emu-t>b</emu-t> <emu-t>c</emu-t> <emu-t>d</emu-t> <emu-t>e</emu-t> <emu-t>f</emu-t> <emu-t>g</emu-t> <emu-t>h</emu-t> <emu-t>i</emu-t> <emu-t>j</emu-t> <emu-t>k</emu-t> <emu-t>l</emu-t> <emu-t>m</emu-t> <emu-t>n</emu-t> <emu-t>o</emu-t> <emu-t>p</emu-t> <emu-t>q</emu-t> <emu-t>r</emu-t> <emu-t>s</emu-t> <emu-t>t</emu-t> <emu-t>u</emu-t> <emu-t>v</emu-t> <emu-t>w</emu-t> <emu-t>x</emu-t> <emu-t>y</emu-t> <emu-t>z</emu-t> <emu-t>A</emu-t> <emu-t>B</emu-t> <emu-t>C</emu-t> <emu-t>D</emu-t> <emu-t>E</emu-t> <emu-t>F</emu-t> <emu-t>G</emu-t> <emu-t>H</emu-t> <emu-t>I</emu-t> <emu-t>J</emu-t> <emu-t>K</emu-t> <emu-t>L</emu-t> <emu-t>M</emu-t> <emu-t>N</emu-t> <emu-t>O</emu-t> <emu-t>P</emu-t> <emu-t>Q</emu-t> <emu-t>R</emu-t> <emu-t>S</emu-t> <emu-t>T</emu-t> <emu-t>U</emu-t> <emu-t>V</emu-t> <emu-t>W</emu-t> <emu-t>X</emu-t> <emu-t>Y</emu-t> <emu-t>Z</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"uriMark\" type=\"regexp\" oneof=\"\" id=\"prod-uriMark\">\n    <emu-nt><a href=\"#prod-uriMark\">uriMark</a></emu-nt> <emu-geq>:::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>-</emu-t> <emu-t>_</emu-t> <emu-t>.</emu-t> <emu-t>!</emu-t> <emu-t>~</emu-t> <emu-t>*</emu-t> <emu-t>'</emu-t> <emu-t>(</emu-t> <emu-t>)</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The above syntax is based upon RFC 2396 and does not reflect changes introduced by the more recent RFC 3986.</p>\n        </div></emu-note>\n        <h2>Runtime Semantics</h2>\n        <p>When a code unit to be included in a URI is not listed above or is not intended to have the special meaning sometimes given to the reserved code units, that code unit must be encoded. The code unit is transformed into its UTF-8 encoding, with <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pairs</a></emu-xref> first converted from UTF-16 to the corresponding code point value. (Note that for code units in the range [0, 127] this results in a single octet with the same value.) The resulting sequence of octets is then transformed into a String with each octet represented by an escape sequence of the form <emu-val>\"%xx\"</emu-val>.</p>\n\n        <div id=\"excluded-sec-encode\"><h1><span class=\"secnum\">18.2.6.1.1</span>#sec-encode Encode ( string, unescapedSet )</h1>...</div><div id=\"excluded-sec-decode\"><h1><span class=\"secnum\">18.2.6.1.2</span>#sec-decode Decode ( string, reservedSet )</h1>...</div></emu-clause>\n\n      "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by PropertyNameList does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the PropertyDefinitionEvaluation algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-algorithm-conventions-syntax-directed-operations": {"num": "5.2.2", "title": "#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations", "html": "<emu-clause id=\"sec-algorithm-conventions-syntax-directed-operations\" namespace=\"algorithm-conventions\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions-syntax-directed-operations\">#sec-algorithm-conventions-syntax-directed-operations</span> Syntax-Directed Operations</h1>\n      <p>A <dfn>syntax-directed operation</dfn> is a named operation whose definition consists of algorithms, each of which is associated with one or more productions from one of the ECMAScript grammars. A production that has multiple alternative definitions will typically have a distinct algorithm for each alternative. When an algorithm is associated with a grammar production, it may reference the terminal and nonterminal symbols of the production alternative as if they were parameters of the algorithm. When used in this manner, nonterminal symbols refer to the actual alternative definition that is matched when parsing the source text. The <dfn>source text matched by</dfn> a grammar production is the portion of the source text that starts at the beginning of the first terminal that participated in the match and ends at the end of the last terminal that participated in the match.</p>\n      <p>When an algorithm is associated with a production alternative, the alternative is typically shown without any &#8220;[ ]&#8221; grammar annotations. Such annotations should only affect the syntactic recognition of the alternative and have no effect on the associated semantics for the alternative.</p>\n      <p>Syntax-directed operations are invoked with a parse node and, optionally, other parameters by using the conventions on steps <emu-xref href=\"#step-sdo-invocation-example-1\"><a href=\"#step-sdo-invocation-example-1\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-1\">#step-sdo-invocation-example-1</a></emu-xref>, <emu-xref href=\"#step-sdo-invocation-example-2\"><a href=\"#step-sdo-invocation-example-2\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-2\">#step-sdo-invocation-example-2</a></emu-xref>, and <emu-xref href=\"#step-sdo-invocation-example-3\"><a href=\"#step-sdo-invocation-example-3\" class=\"excluded-xref\" excluded-id=\"step-sdo-invocation-example-3\">#step-sdo-invocation-example-3</a></emu-xref> in the following algorithm:</p>\n      <emu-alg example=\"\"><ol><li id=\"step-sdo-invocation-example-1\">Let <var>status</var> be SyntaxDirectedOperation of <emu-nt>SomeNonTerminal</emu-nt>.</li><li>Let <var>someParseNode</var> be the parse of some source text.</li><li id=\"step-sdo-invocation-example-2\">Perform SyntaxDirectedOperation of <var>someParseNode</var>.</li><li id=\"step-sdo-invocation-example-3\">Perform SyntaxDirectedOperation of <var>someParseNode</var> passing <emu-val>\"value\"</emu-val> as the argument.</li></ol></emu-alg>\n      <p>Unless explicitly specified otherwise, all chain productions have an implicit definition for every operation that might be applied to that production's left-hand side nonterminal. The implicit definition simply reapplies the same operation with the same parameters, if any, to the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">chain production</a></emu-xref>'s sole right-hand side nonterminal and then returns the result. For example, assume that some algorithm has a step of the form: &#8220;Return the result of evaluating <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>&#8221; and that there is a production:</p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>but the Evaluation operation does not associate an algorithm with that production. In that case, the Evaluation operation implicitly includes an association of the form:</p>\n      <p><b>Runtime Semantics: Evaluation</b></p>\n      <emu-grammar example=\"\"><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-switch-duplicates-allowed-static-semantics": {"num": "B.3.3.5", "title": "#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-switch-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-duplicates-allowed-static-semantics\">#sec-switch-duplicates-allowed-static-semantics</span> Changes to <code>switch</code> Statement Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-switch-statement-static-semantics-early-errors\"><a href=\"#sec-switch-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-static-semantics-early-errors\">#sec-switch-statement-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-rules-of-automatic-semicolon-insertion": {"num": "11.9.1", "title": "#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" namespace=\"asi-rules\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</span> Rules of Automatic Semicolon Insertion</h1>\n      <p>In the following rules, &#8220;token&#8221; means the actual recognized lexical token determined using the current lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> as described in clause <emu-xref href=\"#sec-ecmascript-language-lexical-grammar\"><a href=\"#sec-ecmascript-language-lexical-grammar\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</a></emu-xref>.</p>\n      <p>There are three basic rules of semicolon insertion:</p>\n      <ol>\n        <li>\n          <p>When, as the source text is parsed from left to right, a token (called the <em>offending token</em>) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:</p>\n          <ul>\n            <li>\n              The offending token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.\n            </li>\n            <li>\n              The offending token is <code>}</code>.\n            </li>\n            <li>\n              The previous token is <code>)</code> and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (<emu-xref href=\"#sec-do-while-statement\"><a href=\"#sec-do-while-statement\" class=\"excluded-xref\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</a></emu-xref>).\n            </li>\n          </ul>\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single instance of the goal nonterminal, then a semicolon is automatically inserted at the end of the input stream.\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, then a semicolon is automatically inserted before the restricted token.\n        </li>\n      </ol>\n      <p>However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a <code>for</code> statement (see <emu-xref href=\"#sec-for-statement\"><a href=\"#sec-for-statement\" class=\"excluded-xref\" excluded-id=\"sec-for-statement\">#sec-for-statement</a></emu-xref>).</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The following are the only restricted productions in the grammar:</p>\n        <emu-grammar><emu-production name=\"UpdateExpression\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1063e6f2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>++</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"c40a0c36\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>--</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ContinueStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"14858b1f\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"BreakStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9c83b42f\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ReturnStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b293381\">\n        <emu-t>return</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b7205f0d\">\n        <emu-t>return</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ThrowStatement\" params=\"Yield, Await\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"abf0986c\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bdca54b2\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <p>The practical effect of these restricted productions is as follows:</p>\n        <ul>\n          <li>\n            When a <code>++</code> or <code>--</code> token is encountered where the parser would treat it as a postfix operator, and at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurred between the preceding token and the <code>++</code> or <code>--</code> token, then a semicolon is automatically inserted before the <code>++</code> or <code>--</code> token.\n          </li>\n          <li>\n            When a <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token is encountered and a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is encountered before the next token, a semicolon is automatically inserted after the <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          </li>\n        </ul>\n        <p>The resulting practical advice to ECMAScript programmers is:</p>\n        <ul>\n          <li>\n            A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand.\n          </li>\n          <li>\n            An <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> in a <code>return</code> or <code>throw</code> statement or an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> in a <code>yield</code> expression should start on the same line as the <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          </li>\n          <li>\n            A <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> in a <code>break</code> or <code>continue</code> statement should be on the same line as the <code>break</code> or <code>continue</code> token.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-conformance.normative-optional": {"num": "2.1", "title": "#sec-conformance.normative-optional Example Clause Heading", "html": "<emu-clause id=\"sec-conformance.normative-optional\" example=\"\" normative-optional=\"\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance.normative-optional\">#sec-conformance.normative-optional</span> Example Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-grammar-notation": {"num": "5.1.5", "title": "#sec-grammar-notation Grammar Notation", "html": "<emu-clause id=\"sec-grammar-notation\" namespace=\"grammar-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</span> Grammar Notation</h1>\n      <p>Terminal symbols are shown in <code>fixed width</code> font, both in the productions of the grammars and throughout this specification whenever the text directly refers to such a terminal symbol. These are to appear in a script exactly as written. All terminal symbol code points specified in this way are to be understood as the appropriate Unicode code points from the Basic Latin range, as opposed to any similar-looking code points from other Unicode ranges. A code point in a terminal symbol cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n      <p>Nonterminal symbols are shown in <i>italic</i> type. The definition of a nonterminal (also called a &#8220;production&#8221;) is introduced by the name of the nonterminal being defined followed by one or more colons. (The number of colons indicates to which grammar the production belongs.) One or more alternative right-hand sides for the nonterminal then follow on succeeding lines. For example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"WhileStatement\" id=\"prod-grammar-notation-WhileStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-WhileStatement\">WhileStatement</a></emu-nt> represents the token <code>while</code>, followed by a left parenthesis token, followed by an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, followed by a right parenthesis token, followed by a <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>. The occurrences of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> and <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> are themselves nonterminals. As another example, the syntactic definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ArgumentList\" id=\"prod-grammar-notation-ArgumentList\">\n    <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d4fc7da4\"><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7ff23fee\">\n        <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>states that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may represent either a single <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> or an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt>, followed by a comma, followed by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. This definition of <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> is recursive, that is, it is defined in terms of itself. The result is that an <emu-nt><a href=\"#prod-grammar-notation-ArgumentList\">ArgumentList</a></emu-nt> may contain any positive number of arguments, separated by commas, where each argument expression is an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>. Such recursive definitions of nonterminals are common.</p>\n      <p>The subscripted suffix &#8220;<sub>opt</sub>&#8221;, which may appear after a terminal or nonterminal, indicates an optional symbol. The alternative containing the optional symbol actually specifies two right-hand sides, one that omits the optional element and one that includes it. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0b9344a8\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"180d57b5\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"0acd6093\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which in turn is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"IterationStatement\" id=\"prod-grammar-notation-IterationStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"00273dd7\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"d4b04297\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"e8d15924\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7f2cbdb0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>so, in this example, the nonterminal <emu-nt><a href=\"#prod-grammar-notation-IterationStatement\">IterationStatement</a></emu-nt> actually has four alternative right-hand sides.</p>\n      <p>A production may be parameterized by a subscripted annotation of the form &#8220;<sub>[parameters]</sub>&#8221;, which may appear as a suffix to the nonterminal symbol defined by the production. &#8220;<sub>parameters</sub>&#8221; may be either a single name or a comma separated list of names. A parameterized production is shorthand for a set of productions defining all combinations of the parameter names, preceded by an underscore, appended to the parameterized nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return, In\">\n    <emu-nt params=\"Return, In\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return, In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_In\" id=\"prod-grammar-notation-StatementList_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_In\">StatementList_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return_In\" id=\"prod-grammar-notation-StatementList_Return_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return_In\">StatementList_Return_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Multiple parameters produce a combinatory number of productions, not all of which are necessarily referenced in a complete grammar.</p>\n      <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb21bdc\"><emu-nt params=\"+In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[+In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to saying:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"93a8206f\"><emu-nt>ExpressionStatement_In</emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70147e05\"><emu-nt params=\"~In\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[~In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is equivalent to:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>A nonterminal reference may have both a parameter list and an &#8220;<sub>opt</sub>&#8221; suffix. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"363e22bb\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"+In\" optional=\"\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"693077fa\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>Prefixing a parameter name with &#8220;<sub>?</sub>&#8221; on a right-hand side nonterminal reference makes that parameter value dependent upon the occurrence of the parameter name on the reference to the current production's left-hand side symbol. For example:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" params=\"In\">\n    <emu-nt params=\"In\"><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dde5478d\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt params=\"?In\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"VariableDeclaration\" id=\"prod-grammar-notation-VariableDeclaration\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration\">VariableDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89becb83\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"VariableDeclaration_In\" id=\"prod-grammar-notation-VariableDeclaration_In\">\n    <emu-nt><a href=\"#prod-grammar-notation-VariableDeclaration_In\">VariableDeclaration_In</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"693077fa\">\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt>Initializer_In</emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If a right-hand side alternative is prefixed with &#8220;[+parameter]&#8221; that alternative is only available if the named parameter was used in referencing the production's nonterminal symbol. If a right-hand side alternative is prefixed with &#8220;[~parameter]&#8221; that alternative is only available if the named parameter was <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a712bea8\" constraints=\"+Return\"><emu-constraints>[+Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>and that:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" params=\"Return\">\n    <emu-nt params=\"Return\"><a href=\"#prod-grammar-notation-StatementList\">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9abebc34\" constraints=\"~Return\"><emu-constraints>[~Return]</emu-constraints><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>is an abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"StatementList\" id=\"prod-grammar-notation-StatementList\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList_Return\" id=\"prod-grammar-notation-StatementList_Return\">\n    <emu-nt><a href=\"#prod-grammar-notation-StatementList_Return\">StatementList_Return</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>When the words &#8220;<b>one of</b>&#8221; follow the colon(s) in a grammar definition, they signify that each of the terminal symbols on the following line or lines is an alternative definition. For example, the lexical grammar for ECMAScript contains the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" oneof=\"\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>which is merely a convenient abbreviation for:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"NonZeroDigit\" type=\"lexical\" id=\"prod-grammar-notation-NonZeroDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-NonZeroDigit\">NonZeroDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"292aa5dd\"><emu-t>1</emu-t></emu-rhs>\n    <emu-rhs a=\"5ca73105\"><emu-t>2</emu-t></emu-rhs>\n    <emu-rhs a=\"ec6bb6b2\"><emu-t>3</emu-t></emu-rhs>\n    <emu-rhs a=\"58ec4a73\"><emu-t>4</emu-t></emu-rhs>\n    <emu-rhs a=\"8fcdef77\"><emu-t>5</emu-t></emu-rhs>\n    <emu-rhs a=\"0b64877d\"><emu-t>6</emu-t></emu-rhs>\n    <emu-rhs a=\"ea5e07a4\"><emu-t>7</emu-t></emu-rhs>\n    <emu-rhs a=\"7a5bd8c3\"><emu-t>8</emu-t></emu-rhs>\n    <emu-rhs a=\"163f4308\"><emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>If the phrase &#8220;[empty]&#8221; appears as the right-hand side of a production, it indicates that the production's right-hand side contains no terminals or nonterminals.</p>\n      <p>If the phrase &#8220;[lookahead = <var>seq</var>]&#8221; appears in the right-hand side of a production, it indicates that the production may only be used if the token sequence <var>seq</var> is a prefix of the immediately following input token sequence. Similarly, &#8220;[lookahead &#8712; <var>set</var>]&#8221;, where <var>set</var> is a finite nonempty set of token sequences, indicates that the production may only be used if some element of <var>set</var> is a prefix of the immediately following token sequence. For convenience, the set can also be written as a nonterminal, in which case it represents the set of all token sequences to which that nonterminal could expand. It is considered an editorial error if the nonterminal could expand to infinitely many distinct token sequences.</p>\n      <p>These conditions may be negated. &#8220;[lookahead &#8800; <var>seq</var>]&#8221; indicates that the containing production may only be used if <var>seq</var> is <em>not</em> a prefix of the immediately following input token sequence, and &#8220;[lookahead &#8713; <var>set</var>]&#8221; indicates that the production may only be used if <em>no</em> element of <var>set</var> is a prefix of the immediately following token sequence.</p>\n      <p>As an example, given the definitions:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"DecimalDigit\" type=\"lexical\" oneof=\"\" id=\"prod-grammar-notation-DecimalDigit\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t> <emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t> <emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"DecimalDigits\" type=\"lexical\" id=\"prod-grammar-notation-DecimalDigits\">\n    <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"b3831ee0\"><emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9f250657\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>the definition:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"LookaheadExample\" type=\"lexical\" id=\"prod-grammar-notation-LookaheadExample\">\n    <emu-nt><a href=\"#prod-grammar-notation-LookaheadExample\">LookaheadExample</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"e21e12ce\">\n        <emu-t>n</emu-t>\n        <emu-gann>[lookahead &#8713; { <emu-t>1</emu-t>, <emu-t>3</emu-t>, <emu-t>5</emu-t>, <emu-t>7</emu-t>, <emu-t>9</emu-t> }]</emu-gann>\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigits\">DecimalDigits</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"195cbc6c\">\n        <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-grammar-notation-DecimalDigit\">DecimalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>matches either the letter <code>n</code> followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>\n      <p>Note that when these phrases are used in the syntactic grammar, it may not be possible to unambiguously identify the immediately following token sequence because determining later tokens requires knowing which lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> to use at later positions. As such, when these are used in the syntactic grammar, it is considered an editorial error for a token sequence <var>seq</var> to appear in a lookahead restriction (including as part of a set of sequences) if the choices of lexical goal symbols to use could change whether or not <var>seq</var> would be a prefix of the resulting token sequence.</p>\n      <p>If the phrase &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is <em>a restricted production</em>: it may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the input stream at the indicated position. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"ThrowStatement\" id=\"prod-grammar-notation-ThrowStatement\">\n    <emu-nt><a href=\"#prod-grammar-notation-ThrowStatement\">ThrowStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ff4ec866\">\n        <emu-t>throw</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>indicates that the production may not be used if a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs in the script between the <code>throw</code> token and the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n      <p>Unless the presence of a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is forbidden by a restricted production, any number of occurrences of <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> may appear between any two consecutive tokens in the stream of input elements without affecting the syntactic acceptability of the script.</p>\n      <p>When an alternative in a production of the lexical grammar or the numeric string grammar appears to be a multi-code point token, it represents the sequence of code points that would make up such a token.</p>\n      <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase &#8220;<b>but not</b>&#8221; and then indicating the expansions to be excluded. For example, the production:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"Identifier\" type=\"lexical\" id=\"prod-grammar-notation-Identifier\">\n    <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"bfa5c374\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-gmod>but not <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>means that the nonterminal <emu-nt><a href=\"#prod-grammar-notation-Identifier\">Identifier</a></emu-nt> may be replaced by any sequence of code points that could replace <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> provided that the same sequence of code points could not replace <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>.</p>\n      <p>Finally, a few nonterminal symbols are described by a descriptive phrase in sans-serif type in cases where it would be impractical to list all the alternatives:</p>\n      <emu-grammar type=\"definition\" example=\"\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-grammar-notation-SourceCharacter\">\n    <emu-nt><a href=\"#prod-grammar-notation-SourceCharacter\">SourceCharacter</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production>\n</emu-grammar>\n    </emu-clause>\n  "}, "sec-block-duplicates-allowed-static-semantics": {"num": "B.3.3.4", "title": "#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors", "html": "<emu-annex id=\"sec-block-duplicates-allowed-static-semantics\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-duplicates-allowed-static-semantics\">#sec-block-duplicates-allowed-static-semantics</span> Changes to Block Static Semantics: Early Errors</h1>\n        <p>The rules for the following production in <emu-xref href=\"#sec-block-static-semantics-early-errors\"><a href=\"#sec-block-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-early-errors\">#sec-block-static-semantics-early-errors</a></emu-xref> are modified with the addition of the <ins>highlighted</ins> text:</p>\n        <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782c9a7\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> contains any duplicate entries<ins>, unless the source code matching this production is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the duplicate entries are only bound by FunctionDeclarations</ins>.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-annex>\n      "}, "sec-async-arrow-function-definitions": {"num": "14.8", "title": "#sec-async-arrow-function-definitions Async Arrow Function Definitions", "html": "<emu-clause id=\"sec-async-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions\">#sec-async-arrow-function-definitions</span> Async Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowFunction\" params=\"In, Yield, Await\" id=\"prod-AsyncArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bb50dce4\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"callcover\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt params=\"?In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncConciseBody\" params=\"In\" id=\"prod-AsyncConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6cf537fe\">\n        <emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann>\n        <emu-nt params=\"?In, +Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6ccf9be6\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncArrowBindingIdentifier\" params=\"Yield\" id=\"prod-AsyncArrowBindingIdentifier\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"614a19b0\"><emu-nt params=\"?Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" params=\"Yield, Await\" id=\"prod-CoverCallExpressionAndAsyncArrowHead\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f747be5d\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MemberExpression\">MemberExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Arguments\">Arguments</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"694c2ff0\">\n        <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>\n        <emu-t>=&gt;</emu-t>\n        <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> is refined using the following grammar:</p>\n\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncArrowHead\" id=\"prod-AsyncArrowHead\">\n    <emu-nt><a href=\"#prod-AsyncArrowHead\">AsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c9d14bfe\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.8.1</span>#sec-async-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead\"><h1><span class=\"secnum\">14.8.2</span>#sec-async-arrow-function-definitions-static-semantics-CoveredAsyncArrowHead Static Semantics: CoveredAsyncArrowHead</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.8.3</span>#sec-async-arrow-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.8.4</span>#sec-async-arrow-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-ContainsExpression\"><h1><span class=\"secnum\">14.8.5</span>#sec-async-arrow-function-definitions-static-semantics-ContainsExpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.8.6</span>#sec-async-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-ExpectedArgumentCount\"><h1><span class=\"secnum\">14.8.7</span>#sec-async-arrow-function-definitions-static-semantics-ExpectedArgumentCount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.8.8</span>#sec-async-arrow-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-IsSimpleParameterList\"><h1><span class=\"secnum\">14.8.9</span>#sec-async-arrow-function-definitions-static-semantics-IsSimpleParameterList Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames\"><h1><span class=\"secnum\">14.8.10</span>#sec-async-arrow-function-definitions-static-semantics-LexicallyDeclaredNames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations\"><h1><span class=\"secnum\">14.8.11</span>#sec-async-arrow-function-definitions-static-semantics-LexicallyScopedDeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames\"><h1><span class=\"secnum\">14.8.12</span>#sec-async-arrow-function-definitions-static-semantics-VarDeclaredNames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations\"><h1><span class=\"secnum\">14.8.13</span>#sec-async-arrow-function-definitions-static-semantics-VarScopedDeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-IteratorBindingInitialization\"><h1><span class=\"secnum\">14.8.14</span>#sec-async-arrow-function-definitions-IteratorBindingInitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.8.15</span>#sec-async-arrow-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.8.16</span>#sec-async-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.8.17</span>#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-left-hand-side-expressions-static-semantics-coveredcallexpression": {"num": "12.3.1.2", "title": "#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-coveredcallexpression\">#sec-left-hand-side-expressions-static-semantics-coveredcallexpression</span> Static Semantics: CoveredCallExpression</h1>\n        <emu-grammar><emu-production name=\"CoverCallExpressionAndAsyncArrowHead\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be44becf\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the <emu-nt><a href=\"#prod-CallMemberExpression\">CallMemberExpression</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of LabelledEvaluation in <emu-xref href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><a href=\"#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\">#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-number.prototype.tofixed": {"num": "20.1.3.3", "title": "#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )", "html": "<emu-clause id=\"sec-number.prototype.tofixed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.prototype.tofixed\">#sec-number.prototype.tofixed</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><code>toFixed</code> returns a String containing this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> represented in decimal fixed-point notation with <var>fractionDigits</var> digits after the decimal point. If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, 0 is assumed.</p>\n        </div></emu-note>\n        <p>The following steps are performed:</p>\n        <emu-alg><ol><li>Let <var>x</var> be ?&#160;<emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>f</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>fractionDigits</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>fractionDigits</var> is <emu-val>undefined</emu-val>, then <var>f</var> is 0.</li><li>If <var>f</var> is not finite, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; 100, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>x</var> is not finite, return ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(<var>x</var>).</li><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Let <var>s</var> be the empty String.</li><li>If <var>x</var> &lt; 0, then<ol><li>Set <var>s</var> to <emu-val>\"-\"</emu-val>.</li><li>Set <var>x</var> to -<var>x</var>.</li></ol></li><li>If <var>x</var> &#8805; 10<sup>21</sup>, then<ol><li>Let <var>m</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>x</var>)).</li></ol></li><li>Else,<ol><li>Let <var>n</var> be an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> for which <var>n</var> / 10<sup><var>f</var></sup> - <var>x</var> is as close to zero as possible. If there are two such <var>n</var>, pick the larger <var>n</var>.</li><li>If <var>n</var> = 0, let <var>m</var> be the String <emu-val>\"0\"</emu-val>. Otherwise, let <var>m</var> be the String value consisting of the digits of the decimal representation of <var>n</var> (in order, with no leading zeroes).</li><li>If <var>f</var> &#8800; 0, then<ol><li>Let <var>k</var> be the length of <var>m</var>.</li><li>If <var>k</var> &#8804; <var>f</var>, then<ol><li>Let <var>z</var> be the String value consisting of <var>f</var> + 1 - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>z</var> and <var>m</var>.</li><li>Set <var>k</var> to <var>f</var> + 1.</li></ol></li><li>Let <var>a</var> be the first <var>k</var> - <var>f</var> code units of <var>m</var>.</li><li>Let <var>b</var> be the other <var>f</var> code units of <var>m</var>.</li><li>Set <var>m</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>a</var>, <emu-val>\".\"</emu-val>, and <var>b</var>.</li></ol></li></ol></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>s</var> and <var>m</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The output of <code>toFixed</code> may be more precise than <code>toString</code> for some values because toString only prints enough significant digits to distinguish the number from adjacent Number values. For example,</p>\n          <p><code>(1000000000000000128).toString()</code> returns <emu-val>\"1000000000000000100\"</emu-val>, while\n            <br>\n            <code>(1000000000000000128).toFixed(0)</code> returns <emu-val>\"1000000000000000128\"</emu-val>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-labelled-function-declarations": {"num": "B.3.2", "title": "#sec-labelled-function-declarations Labelled Function Declarations", "html": "<emu-annex id=\"sec-labelled-function-declarations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-function-declarations\">#sec-labelled-function-declarations</span> Labelled Function Declarations</h1>\n      <p>Prior to ECMAScript 2015, the specification of <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> did not allow for the association of a statement label with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>. However, a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension for <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref> and most browser-hosted ECMAScript implementations supported that extension. In ECMAScript 2015 and later, the grammar production for <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> permits use of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as a <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> but <emu-xref href=\"#sec-labelled-statements-static-semantics-early-errors\"><a href=\"#sec-labelled-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-labelled-statements-static-semantics-early-errors\">#sec-labelled-statements-static-semantics-early-errors</a></emu-xref> includes an Early Error rule that produces a Syntax Error if that occurs. That rule is modified with the addition of the <ins>highlighted</ins> text:</p>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if any <ins>strict mode</ins> source code matches this rule.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>, <emu-nt><a href=\"#prod-annexB-IfStatement\">IfStatement</a></emu-nt>, and <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> prevent these statements from containing a labelled <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-annex>\n\n    "}}, "figData": {}}}