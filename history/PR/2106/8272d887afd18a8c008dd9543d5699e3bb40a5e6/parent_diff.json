{"from": {"secList": ["sec-meta-properties-runtime-semantics-evaluation"], "secData": {"sec-meta-properties-runtime-semantics-evaluation": {"num": "12.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">12.3.12.1.1</span>#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">12.3.12.1.2</span>#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-meta-properties-runtime-semantics-evaluation"], "secData": {"sec-meta-properties-runtime-semantics-evaluation": {"num": "12.3.12.1", "title": "#sec-meta-properties-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-meta-properties-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-meta-properties-runtime-semantics-evaluation\">#sec-meta-properties-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"NewTarget\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"GetNewTarget\"><a href=\"#sec-getnewtarget\">GetNewTarget</a></emu-xref>().</li></ol></emu-alg>\n\n        <emu-grammar><emu-production name=\"ImportMeta\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>module</var> be !&#160;<emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>.</li><li>Let <var>importMeta</var> be <var>module</var>.[[ImportMeta]].</li><li>If <var>importMeta</var> is <emu-const>empty</emu-const>, then<ol><li>Set <var>importMeta</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref>, <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> { [[Configurable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Value]]: <emu-val>\"ImportMeta\"</emu-val> } ).</li><li>Let <var>importMetaValues</var> be !&#160;<emu-xref aoid=\"HostGetImportMetaProperties\"><a href=\"#sec-hostgetimportmetaproperties\">HostGetImportMetaProperties</a></emu-xref>(<var>module</var>).</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>importMetaValues</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>importMeta</var>, <var>p</var>.[[Key]], <var>p</var>.[[Value]]).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"HostFinalizeImportMeta\"><a href=\"#sec-hostfinalizeimportmeta\">HostFinalizeImportMeta</a></emu-xref>(<var>importMeta</var>, <var>module</var>).</li><li>Set <var>module</var>.[[ImportMeta]] to <var>importMeta</var>.</li><li>Return <var>importMeta</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>importMeta</var>) is Object.</li><li>Return <var>importMeta</var>.</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-hostgetimportmetaproperties\"><h1><span class=\"secnum\">12.3.12.1.1</span>#sec-hostgetimportmetaproperties Runtime Semantics: HostGetImportMetaProperties ( moduleRecord )</h1>...</div><div id=\"excluded-sec-hostfinalizeimportmeta\"><h1><span class=\"secnum\">12.3.12.1.2</span>#sec-hostfinalizeimportmeta Runtime Semantics: HostFinalizeImportMeta ( importMeta, moduleRecord )</h1>...</div></emu-clause>\n    "}}, "figData": {}}}