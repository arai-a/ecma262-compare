{"from": {"secList": ["sec-executable-code-and-execution-contexts", "sec-cleanup-finalization-registry", "sec-weakref-processing-model", "sec-weakref-execution", "sec-weak-ref-target"], "secData": {"sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-environment-records\"><h1><span class=\"secnum\">8.1</span>#sec-environment-records Environment Records</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs\"><h1><span class=\"secnum\">8.4</span>#sec-jobs Jobs and Host Operations to Enqueue Jobs</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.6</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.7</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.8</span>#sec-forward-progress Forward Progress</h1>...</div><div id=\"excluded-sec-weakref-processing-model\"><h1><span class=\"secnum\">8.9</span>#sec-weakref-processing-model Processing model of WeakRef and FinalizationRegistry objects</h1>...</div><div id=\"excluded-sec-clear-kept-objects\"><h1><span class=\"secnum\">8.10</span>#sec-clear-kept-objects ClearKeptObjects ( )</h1>...</div><div id=\"excluded-sec-addtokeptobjects\"><h1><span class=\"secnum\">8.11</span>#sec-addtokeptobjects AddToKeptObjects ( object )</h1>...</div><div id=\"excluded-sec-cleanup-finalization-registry\"><h1><span class=\"secnum\">8.12</span>#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )</h1>...</div></emu-clause>\n\n"}, "sec-cleanup-finalization-registry": {"num": "8.12", "title": "#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )", "html": "<emu-clause id=\"sec-cleanup-finalization-registry\" aoid=\"CleanupFinalizationRegistry\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cleanup-finalization-registry\">#sec-cleanup-finalization-registry</span> CleanupFinalizationRegistry ( <var>finalizationRegistry</var> )</h1>\n    <p>The abstract operation CleanupFinalizationRegistry takes argument <var>finalizationRegistry</var> (a finalization registry object). It performs the following steps when called:</p>\n    <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>finalizationRegistry</var> has [[Cells]] and [[CleanupCallback]] internal slots.</li><li>Set <var>callback</var> to <var>finalizationRegistry</var>.[[CleanupCallback]].</li><li>While <var>finalizationRegistry</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <emu-const>empty</emu-const>, an implementation may perform the following steps:<ol><li>Choose any such <var>cell</var>.</li><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callback</var>, <emu-val>undefined</emu-val>, &#171; <var>cell</var>.[[HeldValue]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n  </emu-clause>\n"}, "sec-weakref-processing-model": {"num": "8.9", "title": "#sec-weakref-processing-model Processing model of WeakRef and FinalizationRegistry objects", "html": "<emu-clause id=\"sec-weakref-processing-model\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-processing-model\">#sec-weakref-processing-model</span> Processing model of WeakRef and FinalizationRegistry objects</h1>\n    <div id=\"excluded-sec-weakref-invariants\"><h1><span class=\"secnum\">8.9.1</span>#sec-weakref-invariants Objectives</h1>...</div><div id=\"excluded-sec-liveness\"><h1><span class=\"secnum\">8.9.2</span>#sec-liveness Liveness</h1>...</div><div id=\"excluded-sec-weakref-execution\"><h1><span class=\"secnum\">8.9.3</span>#sec-weakref-execution Execution</h1>...</div><div id=\"excluded-sec-weakref-host-hooks\"><h1><span class=\"secnum\">8.9.4</span>#sec-weakref-host-hooks Host Hooks</h1>...</div></emu-clause>\n\n  "}, "sec-weakref-execution": {"num": "8.9.3", "title": "#sec-weakref-execution Execution", "html": "<emu-clause id=\"sec-weakref-execution\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-execution\">#sec-weakref-execution</span> Execution</h1>\n\n      <p>At any time, if a set of objects <var>S</var> is not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>, an ECMAScript implementation may perform the following steps atomically:</p>\n\n      <emu-alg><ol><li>For each <var>obj</var> of <var>S</var>, do<ol><li>For each <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> <var>ref</var> such that <var>ref</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>ref</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <var>fg</var> such that <var>fg</var>.[[Cells]] contains <var>cell</var>, and <var>cell</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>cell</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li><li>Optionally, perform !&#160;<emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref>(<var>fg</var>).</li></ol></li><li>For each WeakMap <var>map</var> such that <var>map</var>.[[WeakMapData]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value <var>r</var> such that <var>r</var>.[[Key]] is <var>obj</var>, do<ol><li>Set <var>r</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>r</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each WeakSet <var>set</var> such that <var>set</var>.[[WeakSetData]] contains <var>obj</var>, do<ol><li>Replace the element of <var>set</var> whose value is <var>obj</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li></ol></li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Together with the definition of liveness, this clause prescribes legal optimizations that an implementation may apply regarding WeakRefs.</p>\n\n        <p>It is possible to access an object without observing its identity. Optimizations such as dead variable elimination and scalar replacement on properties of non-escaping objects whose identity is not observed are allowed. These optimizations are thus allowed to observably empty WeakRefs that point to such objects.</p>\n\n        <p>On the other hand, if an object's identity is observable, and that object is in the [[WeakRefTarget]] internal slot of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>, optimizations such as rematerialization that observably empty the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> are prohibited.</p>\n\n        <p>Because calling <emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref> is optional, registered objects in a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> do not necessarily hold that <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. Implementations may omit <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> callbacks for any reason, e.g., if the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> itself becomes dead, or if the application is shutting down.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Implementations are not obligated to empty WeakRefs for maximal sets of non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> objects.</p>\n        <p>If an implementation chooses a non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> set <var>S</var> in which to empty WeakRefs, it must empty WeakRefs for all objects in <var>S</var> simultaneously. In other words, an implementation must not empty a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> pointing to an object <var>obj</var> without emptying out other WeakRefs that, if not emptied, could result in an execution that observes the Object value of <var>obj</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-weak-ref-target": {"num": "25.1.1.1", "title": "#sec-weak-ref-target WeakRef ( target )", "html": "<emu-clause id=\"sec-weak-ref-target\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref-target\">#sec-weak-ref-target</span> WeakRef ( <var>target</var> )</h1>\n        <p>When the <code>WeakRef</code> function is called with argument <var>target</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>weakRef</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <code>\"%WeakRef.prototype%\"</code>, &#171; [[WeakRefTarget]] &#187;).</li><li>Perfom !&#160;<emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref>(<var>target</var>).</li><li>Set <var>weakRef</var>.[[WeakRefTarget]] to <var>target</var>.</li><li>Return <var>weakRef</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-executable-code-and-execution-contexts", "sec-cleanup-finalization-registry", "sec-weakref-processing-model", "sec-weakref-execution", "sec-weak-ref-target"], "secData": {"sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-environment-records\"><h1><span class=\"secnum\">8.1</span>#sec-environment-records Environment Records</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs\"><h1><span class=\"secnum\">8.4</span>#sec-jobs Jobs and Host Operations to Enqueue Jobs</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.6</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.7</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.8</span>#sec-forward-progress Forward Progress</h1>...</div><div id=\"excluded-sec-weakref-processing-model\"><h1><span class=\"secnum\">8.9</span>#sec-weakref-processing-model Processing Model of WeakRef and FinalizationRegistry Objects</h1>...</div><div id=\"excluded-sec-clear-kept-objects\"><h1><span class=\"secnum\">8.10</span>#sec-clear-kept-objects ClearKeptObjects ( )</h1>...</div><div id=\"excluded-sec-addtokeptobjects\"><h1><span class=\"secnum\">8.11</span>#sec-addtokeptobjects AddToKeptObjects ( object )</h1>...</div><div id=\"excluded-sec-cleanup-finalization-registry\"><h1><span class=\"secnum\">8.12</span>#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )</h1>...</div></emu-clause>\n\n"}, "sec-cleanup-finalization-registry": {"num": "8.12", "title": "#sec-cleanup-finalization-registry CleanupFinalizationRegistry ( finalizationRegistry )", "html": "<emu-clause id=\"sec-cleanup-finalization-registry\" aoid=\"CleanupFinalizationRegistry\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cleanup-finalization-registry\">#sec-cleanup-finalization-registry</span> CleanupFinalizationRegistry ( <var>finalizationRegistry</var> )</h1>\n    <p>The abstract operation CleanupFinalizationRegistry takes argument <var>finalizationRegistry</var> (a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>). It performs the following steps when called:</p>\n    <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>finalizationRegistry</var> has [[Cells]] and [[CleanupCallback]] internal slots.</li><li>Let <var>callback</var> be <var>finalizationRegistry</var>.[[CleanupCallback]].</li><li>While <var>finalizationRegistry</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <emu-const>empty</emu-const>, an implementation may perform the following steps:<ol><li>Choose any such <var>cell</var>.</li><li>Remove <var>cell</var> from <var>finalizationRegistry</var>.[[Cells]].</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>callback</var>, <emu-val>undefined</emu-val>, &#171; <var>cell</var>.[[HeldValue]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n  </emu-clause>\n"}, "sec-weakref-processing-model": {"num": "8.9", "title": "#sec-weakref-processing-model Processing Model of WeakRef and FinalizationRegistry Objects", "html": "<emu-clause id=\"sec-weakref-processing-model\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-processing-model\">#sec-weakref-processing-model</span> Processing Model of WeakRef and FinalizationRegistry Objects</h1>\n    <div id=\"excluded-sec-weakref-invariants\"><h1><span class=\"secnum\">8.9.1</span>#sec-weakref-invariants Objectives</h1>...</div><div id=\"excluded-sec-liveness\"><h1><span class=\"secnum\">8.9.2</span>#sec-liveness Liveness</h1>...</div><div id=\"excluded-sec-weakref-execution\"><h1><span class=\"secnum\">8.9.3</span>#sec-weakref-execution Execution</h1>...</div><div id=\"excluded-sec-weakref-host-hooks\"><h1><span class=\"secnum\">8.9.4</span>#sec-weakref-host-hooks Host Hooks</h1>...</div></emu-clause>\n\n  "}, "sec-weakref-execution": {"num": "8.9.3", "title": "#sec-weakref-execution Execution", "html": "<emu-clause id=\"sec-weakref-execution\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-execution\">#sec-weakref-execution</span> Execution</h1>\n\n      <p>At any time, if a set of objects <var>S</var> is not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>, an ECMAScript implementation may perform the following steps atomically:</p>\n\n      <emu-alg><ol><li>For each <var>obj</var> of <var>S</var>, do<ol><li>For each <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> <var>ref</var> such that <var>ref</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>ref</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <var>fg</var> such that <var>fg</var>.[[Cells]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>cell</var> such that <var>cell</var>.[[WeakRefTarget]] is <var>obj</var>, do<ol><li>Set <var>cell</var>.[[WeakRefTarget]] to <emu-const>empty</emu-const>.</li><li>Optionally, perform !&#160;<emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref>(<var>fg</var>).</li></ol></li><li>For each WeakMap <var>map</var> such that <var>map</var>.[[WeakMapData]] contains a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>r</var> such that <var>r</var>.[[Key]] is <var>obj</var>, do<ol><li>Set <var>r</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>r</var>.[[Value]] to <emu-const>empty</emu-const>.</li></ol></li><li>For each WeakSet <var>set</var> such that <var>set</var>.[[WeakSetData]] contains <var>obj</var>, do<ol><li>Replace the element of <var>set</var>.[[WeakSetData]] whose value is <var>obj</var> with an element whose value is <emu-const>empty</emu-const>.</li></ol></li></ol></li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Together with the definition of liveness, this clause prescribes legal optimizations that an implementation may apply regarding WeakRefs.</p>\n\n        <p>It is possible to access an object without observing its identity. Optimizations such as dead variable elimination and scalar replacement on properties of non-escaping objects whose identity is not observed are allowed. These optimizations are thus allowed to observably empty WeakRefs that point to such objects.</p>\n\n        <p>On the other hand, if an object's identity is observable, and that object is in the [[WeakRefTarget]] internal slot of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>, optimizations such as rematerialization that observably empty the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> are prohibited.</p>\n\n        <p>Because calling <emu-xref aoid=\"HostEnqueueFinalizationRegistryCleanupJob\"><a href=\"#sec-host-cleanup-finalization-registry\">HostEnqueueFinalizationRegistryCleanupJob</a></emu-xref> is optional, registered objects in a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> do not necessarily hold that <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. Implementations may omit <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> callbacks for any reason, e.g., if the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> itself becomes dead, or if the application is shutting down.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Implementations are not obligated to empty WeakRefs for maximal sets of non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> objects.</p>\n        <p>If an implementation chooses a non-<emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> set <var>S</var> in which to empty WeakRefs, it must empty WeakRefs for all objects in <var>S</var> simultaneously. In other words, an implementation must not empty a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> pointing to an object <var>obj</var> without emptying out other WeakRefs that, if not emptied, could result in an execution that observes the Object value of <var>obj</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-weak-ref-target": {"num": "25.1.1.1", "title": "#sec-weak-ref-target WeakRef ( target )", "html": "<emu-clause id=\"sec-weak-ref-target\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref-target\">#sec-weak-ref-target</span> WeakRef ( <var>target</var> )</h1>\n        <p>When the <code>WeakRef</code> function is called with argument <var>target</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>weakRef</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%WeakRef.prototype%\"</emu-val>, &#171; [[WeakRefTarget]] &#187;).</li><li>Perform !&#160;<emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref>(<var>target</var>).</li><li>Set <var>weakRef</var>.[[WeakRefTarget]] to <var>target</var>.</li><li>Return <var>weakRef</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}