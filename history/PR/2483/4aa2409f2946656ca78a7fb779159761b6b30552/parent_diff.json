{"from": {"secList": ["sec-initializetypedarrayfromarraylike", "sec-ispropertyreference", "sec-flattenintoarray", "sec-createforiniterator", "sec-isvalidintegerindex", "sec-isdetachedbuffer", "sec-createarrayiterator", "sec-ordinarytoprimitive", "sec-getsubstitution", "sec-%asyncfromsynciteratorprototype%.next", "sec-createiterresultobject", "sec-parsemodule", "sec-ordinaryfunctioncreate", "sec-globaldeclarationinstantiation", "sec-ordinarycreatefromconstructor", "sec-definepropertyorthrow", "sec-createdataproperty", "sec-stringpad", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-timestring", "sec-resolvebinding", "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver", "sec-numberbitwiseop", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-initializetypedarrayfromlist", "sec-module-environment-records-getbindingvalue-n-s", "sec-getmodifysetvalueinbuffer", "sec-runtime-semantics-caseclauseisselected", "sec-copydataproperties", "sec-trimstring", "sec-ordinaryset", "sec-deletepropertyorthrow", "sec-issuperreference", "sec-stringindexof", "sec-integer-indexed-exotic-objects-get-p-receiver", "sec-settypedarrayfromtypedarray", "sec-integerindexedelementset", "sec-getexportednames", "sec-makeclassconstructor", "sec-createregexpstringiterator", "sec-abstract-operations-for-typedarray-objects", "sec-asyncgeneratorstart", "sec-validateatomicaccess", "sec-enumerate-object-properties", "sec-parse-script", "sec-initializetypedarrayfromtypedarray", "sec-evaluate-property-access-with-identifier-key", "sec-isprivatereference", "sec-hasownproperty", "sec-iteratorcomplete", "sec-string-exotic-objects-defineownproperty-p-desc", "sec-iteratorclose", "sec-getv", "sec-hasproperty", "sec-iteratorvalue", "sec-createarrayfromlist", "sec-createdatapropertyorthrow", "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver", "sec-regexpinitialize", "sec-ordinarydelete", "sec-clonearraybuffer", "sec-bigintbitwiseop", "sec-%asyncfromsynciteratorprototype%.return", "sec-issharedarraybuffer", "sec-ordinarygetownproperty", "sec-add-entries-from-iterable", "sec-ordinaryhasproperty", "sec-isintailposition", "sec-detacharraybuffer", "sec-getiterator", "sec-initializeboundname", "sec-set-o-p-v-throw", "sec-ordinarysetwithowndescriptor", "sec-integer-indexed-exotic-objects-getownproperty-p", "sec-string-exotic-objects-getownproperty-p", "sec-setvalueinbuffer", "sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "sec-prepareforordinarycall", "sec-createbuiltinfunction", "sec-isanonymousfunctiondefinition", "sec-allocatetypedarraybuffer", "sec-getmethod", "sec-createsetiterator", "sec-samevaluenonnumeric", "sec-createmapiterator", "sec-setintegritylevel", "sec-stringgetownproperty", "sec-getmodulenamespace", "sec-getwaiterlist", "sec-integer-indexed-exotic-objects-ownpropertykeys", "sec-testintegritylevel", "sec-enumerableownpropertynames", "sec-invoke", "sec-canonicalnumericindexstring", "sec-resolveexport", "sec-makeconstructor", "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "sec-bytelistbitwiseop", "sec-promise-resolve", "sec-timezoneestring", "sec-finishdynamicimport", "sec-generatorstart", "sec-runtime-semantics-unicodematchproperty-p", "sec-binaryor", "sec-initializetypedarrayfromarraybuffer", "sec-boundfunctioncreate", "sec-todatestring", "sec-settypedarrayfromarraylike", "sec-asynciterator-interface", "sec-%asyncfromsynciteratorprototype%.throw", "sec-regexpexec", "sec-valueofreadevent", "sec-web-compat-blockdeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-completepropertydescriptor", "sec-integer-indexed-exotic-objects-delete-p", "sec-blockdeclarationinstantiation", "sec-integer-indexed-exotic-objects-set-p-v-receiver", "sec-isextensible-o", "sec-toprimitive", "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v", "sec-ecmascript-function-objects-call-thisargument-argumentslist", "sec-isstringprefix", "sec-makemethod", "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p", "sec-modulenamespacecreate", "sec-asynciteratorclose", "sec-ordinaryget", "sec-newpromisereactionjob", "sec-generatoryield", "sec-array-exotic-objects-defineownproperty-p-desc", "sec-binaryand", "sec-getprototypefromconstructor", "sec-objectdefineproperties", "sec-module-namespace-exotic-objects-delete-p", "sec-lengthofarraylike", "sec-newfunctionenvironment", "sec-get-o-p", "sec-speciesconstructor", "sec-datestring", "sec-createimportbinding", "sec-integerindexedelementget", "sec-binaryxor", "sec-runtime-semantics-unicodematchpropertyvalue-p-v", "sec-symboldescriptivestring", "sec-makebasicobject", "sec-isvalidregularexpressionliteral", "sec-regexpbuiltinexec", "sec-integer-indexed-exotic-objects-hasproperty-p", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-proxy-object-internal-methods-and-internal-slots-delete-p", "sec-isunresolvablereference", "sec-createmethodproperty", "sec-arraysetlength", "sec-evaluatenew"], "secData": {"sec-initializetypedarrayfromarraylike": {"num": "23.2.5.1.5", "title": "#sec-initializetypedarrayfromarraylike InitializeTypedArrayFromArrayLike ( O, arrayLike )", "html": "<emu-clause id=\"sec-initializetypedarrayfromarraylike\" aoid=\"InitializeTypedArrayFromArrayLike\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromarraylike\">#sec-initializetypedarrayfromarraylike</span> InitializeTypedArrayFromArrayLike ( <var>O</var>, <var>arrayLike</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromArrayLike takes arguments <var>O</var> (a TypedArray object) and <var>arrayLike</var> (an Object that is neither a TypedArray object nor an ArrayBuffer object). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ispropertyreference": {"num": "6.2.4.1", "title": "#sec-ispropertyreference IsPropertyReference ( V )", "html": "<emu-clause id=\"sec-ispropertyreference\" oldids=\"ao-ispropertyreference\" aoid=\"IsPropertyReference\"><span id=\"ao-ispropertyreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ispropertyreference\">#sec-ispropertyreference</span> IsPropertyReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPropertyReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>V</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</li><li>If <var>V</var>.[[Base]] is <emu-const>unresolvable</emu-const>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>.[[Base]]) is Boolean, String, Symbol, BigInt, Number, or Object, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-flattenintoarray": {"num": "23.1.3.10.1", "title": "#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-flattenintoarray\" aoid=\"FlattenIntoArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-flattenintoarray\">#sec-flattenintoarray</span> FlattenIntoArray ( <var>target</var>, <var>source</var>, <var>sourceLen</var>, <var>start</var>, <var>depth</var> [ , <var>mapperFunction</var> [ , <var>thisArg</var> ] ] )</h1>\n          <p>The abstract operation FlattenIntoArray takes arguments <var>target</var>, <var>source</var>, <var>sourceLen</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>start</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>depth</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;) and optional arguments <var>mapperFunction</var> and <var>thisArg</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>source</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>mapperFunction</var> is present, then !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapperFunction</var>) is <emu-val>true</emu-val>, <var>thisArg</var> is present, and <var>depth</var> is 1.</li><li>Let <var>targetIndex</var> be <var>start</var>.</li><li>Let <var>sourceIndex</var> be <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Repeat, while <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>sourceIndex</var>) &lt; <var>sourceLen</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>sourceIndex</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>source</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>source</var>, <var>P</var>).</li><li>If <var>mapperFunction</var> is present, then<ol><li>Set <var>element</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapperFunction</var>, <var>thisArg</var>, &#171; <var>element</var>, <var>sourceIndex</var>, <var>source</var> &#187;).</li></ol></li><li>Let <var>shouldFlatten</var> be <emu-val>false</emu-val>.</li><li>If <var>depth</var> &gt; 0, then<ol><li>Set <var>shouldFlatten</var> to ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>element</var>).</li></ol></li><li>If <var>shouldFlatten</var> is <emu-val>true</emu-val>, then<ol><li>If <var>depth</var> is +&#8734;, let <var>newDepth</var> be +&#8734;.</li><li>Else, let <var>newDepth</var> be <var>depth</var> - 1.</li><li>Let <var>elementLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>element</var>).</li><li>Set <var>targetIndex</var> to ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>target</var>, <var>element</var>, <var>elementLen</var>, <var>targetIndex</var>, <var>newDepth</var>).</li></ol></li><li>Else,<ol><li>If <var>targetIndex</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>targetIndex</var>)), <var>element</var>).</li><li>Set <var>targetIndex</var> to <var>targetIndex</var> + 1.</li></ol></li></ol></li><li>Set <var>sourceIndex</var> to <var>sourceIndex</var> + <emu-val>1</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Return <var>targetIndex</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-createforiniterator": {"num": "14.7.5.10.1", "title": "#sec-createforiniterator CreateForInIterator ( object )", "html": "<emu-clause id=\"sec-createforiniterator\" aoid=\"CreateForInIterator\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createforiniterator\">#sec-createforiniterator</span> CreateForInIterator ( <var>object</var> )</h1>\n          <p>The abstract operation CreateForInIterator takes argument <var>object</var>. It is used to create a For-In Iterator object which iterates over the own and inherited enumerable string properties of <var>object</var> in a specific order. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>object</var>) is Object.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%foriniteratorprototype%-object\"><a href=\"#sec-%foriniteratorprototype%-object\">%ForInIteratorPrototype%</a></emu-xref>, &#171; [[Object]], [[ObjectWasVisited]], [[VisitedKeys]], [[RemainingKeys]] &#187;).</li><li>Set <var>iterator</var>.[[Object]] to <var>object</var>.</li><li>Set <var>iterator</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>Set <var>iterator</var>.[[VisitedKeys]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>iterator</var>.[[RemainingKeys]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-isvalidintegerindex": {"num": "10.4.5.9", "title": "#sec-isvalidintegerindex IsValidIntegerIndex ( O, index )", "html": "<emu-clause id=\"sec-isvalidintegerindex\" aoid=\"IsValidIntegerIndex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidintegerindex\">#sec-isvalidintegerindex</span> IsValidIntegerIndex ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IsValidIntegerIndex takes arguments <var>O</var> and <var>index</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#8805; <var>O</var>.[[ArrayLength]], return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isdetachedbuffer": {"num": "25.1.2.2", "title": "#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )", "html": "<emu-clause id=\"sec-isdetachedbuffer\" aoid=\"IsDetachedBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isdetachedbuffer\">#sec-isdetachedbuffer</span> IsDetachedBuffer ( <var>arrayBuffer</var> )</h1>\n        <p>The abstract operation IsDetachedBuffer takes argument <var>arrayBuffer</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and <var>arrayBuffer</var> has an [[ArrayBufferData]] internal slot.</li><li>If <var>arrayBuffer</var>.[[ArrayBufferData]] is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createarrayiterator": {"num": "23.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" oldids=\"sec-properties-of-array-iterator-instances,table-48,table-internal-slots-of-array-iterator-instances\" aoid=\"CreateArrayIterator\"><span id=\"table-internal-slots-of-array-iterator-instances\"></span><span id=\"table-48\"></span><span id=\"sec-properties-of-array-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> and <var>kind</var>. It is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>array</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>kind</var> and <var>array</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>If <var>array</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>array</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>array</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>If <var>kind</var> is <emu-const>key</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Else,<ol><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, <var>elementKey</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>elementValue</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>), <var>elementValue</var> &#187;)).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%ArrayIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> and <var>hint</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>string</emu-const> or <emu-const>number</emu-const>.</li><li>If <var>hint</var> is <emu-const>string</emu-const>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each element <var>name</var> of <var>methodNames</var>, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-getsubstitution": {"num": "22.1.3.17.1", "title": "#sec-getsubstitution GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution takes arguments <var>matched</var>, <var>str</var>, <var>position</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>captures</var>, <var>namedCaptures</var>, and <var>replacement</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>matched</var>) is String.</li><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captures</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacement</var>) is String.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-replacement-text-symbol-substitutions\"><a href=\"#table-replacement-text-symbol-substitutions\" class=\"excluded-xref\" excluded-id=\"table-replacement-text-symbol-substitutions\">#table-replacement-text-symbol-substitutions</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n          <emu-table id=\"table-replacement-text-symbol-substitutions\" caption=\"Replacement Text Symbol Substitutions\" oldids=\"table-45\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-replacement-text-symbol-substitutions\">#table-replacement-text-symbol-substitutions</span>: Replacement Text Symbol Substitutions</figcaption><span id=\"table-45\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                </th>\n                <th>\n                  Unicode Characters\n                </th>\n                <th>\n                  Replacement text\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                </td>\n                <td>\n                  <code>$$</code>\n                </td>\n                <td>\n                  <code>$</code>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                </td>\n                <td>\n                  <code>$&amp;</code>\n                </td>\n                <td>\n                  <var>matched</var>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  The replacement is the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>str</var> from 0 to <var>position</var>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                </td>\n                <td>\n                  <code>$'</code>\n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>str</var> from <var>tailPos</var>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  <br>\n                  Where\n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                </td>\n                <td>\n                  <code>$n</code> where\n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  <br>\n                  Where\n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                </td>\n                <td>\n                  <code>$nn</code> where\n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                </td>\n                <td>\n                  <code>$&lt;</code>\n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>namedCaptures</var>) is Object.</li><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed <emu-not-ref>substring</emu-not-ref>.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty String.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).</li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                </td>\n                <td>\n                  <code>$</code>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "27.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( [ <var>value</var> ] )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createiterresultobject": {"num": "7.4.8", "title": "#sec-createiterresultobject CreateIterResultObject ( value, done )", "html": "<emu-clause id=\"sec-createiterresultobject\" aoid=\"CreateIterResultObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiterresultobject\">#sec-createiterresultobject</span> CreateIterResultObject ( <var>value</var>, <var>done</var> )</h1>\n      <p>The abstract operation CreateIterResultObject takes arguments <var>value</var> and <var>done</var>. It creates an object that supports the IteratorResult interface. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>done</var>) is Boolean.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>value</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"done\"</emu-val>, <var>done</var>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-parsemodule": {"num": "16.2.1.6.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <var>body</var>.</li><li>Let <var>importEntries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> of <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-globaldeclarationinstantiation": {"num": "16.1.7", "title": "#sec-globaldeclarationinstantiation GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global environment in which bindings are to be created.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current global environment. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>script</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>script</var>.</li><li>For each element <var>name</var> of <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>script</var>.</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-ordinarycreatefromconstructor": {"num": "10.1.13", "title": "#sec-ordinarycreatefromconstructor OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )", "html": "<emu-clause id=\"sec-ordinarycreatefromconstructor\" aoid=\"OrdinaryCreateFromConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycreatefromconstructor\">#sec-ordinarycreatefromconstructor</span> OrdinaryCreateFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> [ , <var>internalSlotsList</var> ] )</h1>\n      <p>The abstract operation OrdinaryCreateFromConstructor takes arguments <var>constructor</var> and <var>intrinsicDefaultProto</var> and optional argument <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots). It creates an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> whose [[Prototype]] value is retrieved from a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. If <var>internalSlotsList</var> is not provided, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>intrinsicDefaultProto</var> is a String value that is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>constructor</var>, <var>intrinsicDefaultProto</var>).</li><li>Return !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>proto</var>, <var>internalSlotsList</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-definepropertyorthrow": {"num": "7.3.8", "title": "#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )", "html": "<emu-clause id=\"sec-definepropertyorthrow\" aoid=\"DefinePropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definepropertyorthrow\">#sec-definepropertyorthrow</span> DefinePropertyOrThrow ( <var>O</var>, <var>P</var>, <var>desc</var> )</h1>\n      <p>The abstract operation DefinePropertyOrThrow takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It is used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>desc</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdataproperty": {"num": "7.3.5", "title": "#sec-createdataproperty CreateDataProperty ( O, P, V )", "html": "<emu-clause id=\"sec-createdataproperty\" aoid=\"CreateDataProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdataproperty\">#sec-createdataproperty</span> CreateDataProperty ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateDataProperty takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>newDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-stringpad": {"num": "22.1.3.15.1", "title": "#sec-stringpad StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>The abstract operation StringPad takes arguments <var>O</var>, <var>maxLength</var>, <var>fillString</var>, and <var>placement</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>placement</var> is <emu-const>start</emu-const> or <emu-const>end</emu-const>.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>)).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> &#8804; <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <emu-const>start</emu-const>, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <emu-val>\" \"</emu-val> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "10.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are only String and Symbol values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-timestring": {"num": "21.4.4.41.1", "title": "#sec-timestring TimeString ( tv )", "html": "<emu-clause id=\"sec-timestring\" aoid=\"TimeString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timestring\">#sec-timestring</span> TimeString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>hour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>minute</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>second</var> be the String representation of <emu-xref aoid=\"SecFromTime\"><a href=\"#eqn-SecFromTime\">SecFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>hour</var>, <emu-val>\":\"</emu-val>, <var>minute</var>, <emu-val>\":\"</emu-val>, <var>second</var>, the code unit 0x0020 (SPACE), and <emu-val>\"GMT\"</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver": {"num": "10.5.8", "title": "#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver\">#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n      <p>The [[Get]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>Receiver</var> &#187;).</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>trapResult</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>If <var>trapResult</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Get]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n          </li>\n          <li>\n            The value reported for a property must be <emu-val>undefined</emu-val> if the corresponding target object property is a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> that has <emu-val>undefined</emu-val> as its [[Get]] attribute.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>x</var>, and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Let <var>lbits</var> be the 32-bit two's complement bit string representing <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>lnum</var>).</li><li>Let <var>rbits</var> be the 32-bit two's complement bit string representing <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>rnum</var>).</li><li>If <var>op</var> is <code>&amp;</code>, let <var>result</var> be the result of applying the bitwise AND operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>result</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>result</var> be the result of applying the bitwise inclusive OR operation to <var>lbits</var> and <var>rbits</var>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the 32-bit two's complement bit string <var>result</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "10.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>initializeResult</var> be <emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>thisArgument</var>, <var>F</var>).</li><li>If <var>initializeResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>initializeResult</var>).</li></ol></li></ol></li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>constructorEnv</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializetypedarrayfromlist": {"num": "23.2.5.1.4", "title": "#sec-initializetypedarrayfromlist InitializeTypedArrayFromList ( O, values )", "html": "<emu-clause id=\"sec-initializetypedarrayfromlist\" aoid=\"InitializeTypedArrayFromList\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromlist\">#sec-initializetypedarrayfromlist</span> InitializeTypedArrayFromList ( <var>O</var>, <var>values</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromList takes arguments <var>O</var> (a TypedArray object) and <var>values</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (a Boolean). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-getmodifysetvalueinbuffer": {"num": "25.1.2.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer object or a SharedArrayBuffer object), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a <emu-xref href=\"#sec-typedarray-objects\"><a href=\"#sec-typedarray-objects\">TypedArray element type</a></emu-xref>), <var>value</var> (a Number or a BigInt), and <var>op</var> (a <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> whose elements are nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>SeqCst</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else,<ol><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> whose elements are the sequence of <var>elementSize</var> bytes starting with <var>block</var>[<var>byteIndex</var>].</li><li>Let <var>rawBytesModified</var> be <var>op</var>(<var>rawBytesRead</var>, <var>rawBytes</var>).</li><li>Store the individual bytes of <var>rawBytesModified</var> into <var>block</var>, starting at <var>block</var>[<var>byteIndex</var>].</li></ol></li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-caseclauseisselected": {"num": "14.12.3", "title": "#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\" aoid=\"CaseClauseIsSelected\"><span id=\"sec-runtime-semantics-caseselectorevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>input</var>, <var>clauseSelector</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var>, <var>source</var>, and <var>excludedItems</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>excludedItems</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys.</li><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-trimstring": {"num": "22.1.3.29.1", "title": "#sec-trimstring TrimString ( string, where )", "html": "<emu-clause id=\"sec-trimstring\" aoid=\"TrimString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-trimstring\">#sec-trimstring</span> TrimString ( <var>string</var>, <var>where</var> )</h1>\n          <p>The abstract operation TrimString takes arguments <var>string</var> and <var>where</var>. It interprets <var>string</var> as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>str</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>str</var>).</li><li>If <var>where</var> is <emu-const>start</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with leading white space removed.</li><li>Else if <var>where</var> is <emu-const>end</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with trailing white space removed.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>where</var> is <emu-const>start+end</emu-const>.</li><li>Let <var>T</var> be the String value that is a copy of <var>S</var> with both leading and trailing white space removed.</li></ol></li><li>Return <var>T</var>.</li></ol></emu-alg>\n          <p>The definition of white space is the union of <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> and <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. When determining whether a Unicode code point is in Unicode general category &#8220;Space_Separator&#8221; (&#8220;Zs&#8221;), code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        </emu-clause>\n      "}, "sec-ordinaryset": {"num": "10.1.9.1", "title": "#sec-ordinaryset OrdinarySet ( O, P, V, Receiver )", "html": "<emu-clause id=\"sec-ordinaryset\" aoid=\"OrdinarySet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryset\">#sec-ordinaryset</span> OrdinarySet ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The abstract operation OrdinarySet takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>ownDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Return <emu-xref aoid=\"OrdinarySetWithOwnDescriptor\"><a href=\"#sec-ordinarysetwithowndescriptor\">OrdinarySetWithOwnDescriptor</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>, <var>ownDesc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-deletepropertyorthrow": {"num": "7.3.9", "title": "#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )", "html": "<emu-clause id=\"sec-deletepropertyorthrow\" aoid=\"DeletePropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-deletepropertyorthrow\">#sec-deletepropertyorthrow</span> DeletePropertyOrThrow ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation DeletePropertyOrThrow takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It is used to remove a specific own property of an object. It throws an exception if the property is not configurable. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ? <var>O</var>.[[Delete]](<var>P</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-issuperreference": {"num": "6.2.4.3", "title": "#sec-issuperreference IsSuperReference ( V )", "html": "<emu-clause id=\"sec-issuperreference\" oldids=\"ao-issuperreference\" aoid=\"IsSuperReference\"><span id=\"ao-issuperreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issuperreference\">#sec-issuperreference</span> IsSuperReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsSuperReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>V</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</li><li>If <var>V</var>.[[ThisValue]] is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var> is a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with <var>fromIndex</var> such that <var>i</var> &#8804; <var>len</var> - <var>searchLen</var>, in ascending order, do<ol><li>Let <var>candidate</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>i</var> to <var>i</var> + <var>searchLen</var>.</li><li>If <var>candidate</var> is the same sequence of code units as <var>searchValue</var>, return <var>i</var>.</li></ol></li><li>Return -1.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is the empty String and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-get-p-receiver": {"num": "10.4.5.4", "title": "#sec-integer-indexed-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-get-p-receiver\">#sec-integer-indexed-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"IntegerIndexedElementGet\"><a href=\"#sec-integerindexedelementget\">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-settypedarrayfromtypedarray": {"num": "23.2.3.23.1", "title": "#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )", "html": "<emu-clause id=\"sec-settypedarrayfromtypedarray\" oldids=\"sec-%typedarray%.prototype.set-typedarray-offset\" aoid=\"SetTypedArrayFromTypedArray\"><span id=\"sec-%typedarray%.prototype.set-typedarray-offset\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-settypedarrayfromtypedarray\">#sec-settypedarrayfromtypedarray</span> SetTypedArrayFromTypedArray ( <var>target</var>, <var>targetOffset</var>, <var>source</var> )</h1>\n          <p>The abstract operation SetTypedArrayFromTypedArray takes arguments <var>target</var> (a TypedArray object), <var>targetOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), and <var>source</var> (a TypedArray object). It sets multiple values in <var>target</var>, starting at index <var>targetOffset</var>, reading the values from <var>source</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>source</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>srcBuffer</var> be <var>source</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>srcName</var> be the String value of <var>source</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcLength</var> be <var>source</var>.[[ArrayLength]].</li><li>Let <var>srcByteOffset</var> be <var>source</var>.[[ByteOffset]].</li><li>If <var>targetOffset</var> is +&#8734;, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>target</var>.[[ContentType]] &#8800; <var>source</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>If both <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcBuffer</var>) and <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>targetBuffer</var>) are <emu-val>true</emu-val>, then<ol><li>If <var>srcBuffer</var>.[[ArrayBufferData]] and <var>targetBuffer</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, let <var>same</var> be <emu-val>true</emu-val>; else let <var>same</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else, let <var>same</var> be <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcBuffer</var>, <var>targetBuffer</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>srcByteLength</var> be <var>source</var>.[[ByteLength]].</li><li>Set <var>srcBuffer</var> to ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcByteLength</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>NOTE: <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref> is used to clone <var>srcBuffer</var> because is it known to not have any observable side-effects.</li><li>Let <var>srcByteIndex</var> be 0.</li></ol></li><li>Else, let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>If <var>srcType</var> is the same as <var>targetType</var>, then<ol><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <emu-const>Uint8</emu-const>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <emu-const>Uint8</emu-const>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-integerindexedelementset": {"num": "10.4.5.11", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet takes arguments <var>O</var>, <var>index</var> (a Number), and <var>value</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This operation always appears to succeed, but it has no effect when attempting to write past the end of a TypedArray or to a TypedArray which is backed by a detached ArrayBuffer.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-getexportednames": {"num": "16.2.1.6.2", "title": "#sec-getexportednames GetExportedNames ( [ exportStarSet ] )", "html": "<emu-clause id=\"sec-getexportednames\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getexportednames\">#sec-getexportednames</span> GetExportedNames ( [ <var>exportStarSet</var> ] )</h1>\n          <p>The GetExportedNames concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes optional argument <var>exportStarSet</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>exportStarSet</var> is not present, set <var>exportStarSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exportStarSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Source Text Module Records.</li><li>If <var>exportStarSet</var> contains <var>module</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: We've reached the starting point of an <code>export *</code> circularity.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></li><li>Append <var>module</var> to <var>exportStarSet</var>.</li><li>Let <var>exportedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>requestedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>starNames</var> be ? <var>requestedModule</var>.GetExportedNames(<var>exportStarSet</var>).</li><li>For each element <var>n</var> of <var>starNames</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>n</var>, <emu-val>\"default\"</emu-val>) is <emu-val>false</emu-val>, then<ol><li>If <var>n</var> is not an element of <var>exportedNames</var>, then<ol><li>Append <var>n</var> to <var>exportedNames</var>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>exportedNames</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>GetExportedNames does not filter out or throw an exception for names that have ambiguous star export bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-makeclassconstructor": {"num": "10.2.6", "title": "#sec-makeclassconstructor MakeClassConstructor ( F )", "html": "<emu-clause id=\"sec-makeclassconstructor\" aoid=\"MakeClassConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeclassconstructor\">#sec-makeclassconstructor</span> MakeClassConstructor ( <var>F</var> )</h1>\n      <p>The abstract operation MakeClassConstructor takes argument <var>F</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var>.[[IsClassConstructor]] is <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createregexpstringiterator": {"num": "22.2.7.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" oldids=\"sec-properties-of-regexp-string-iterator-instances,table-regexp-string-iterator-instance-slots\" aoid=\"CreateRegExpStringIterator\"><span id=\"table-regexp-string-iterator-instance-slots\"></span><span id=\"sec-properties-of-regexp-string-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n        <p>The abstract operation CreateRegExpStringIterator takes arguments <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var> and performs the following steps when called:<ol><li>Repeat,<ol><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%RegExpStringIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-abstract-operations-for-typedarray-objects": {"num": "23.2.4", "title": "#sec-abstract-operations-for-typedarray-objects Abstract Operations for TypedArray Objects", "html": "<emu-clause id=\"sec-abstract-operations-for-typedarray-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-typedarray-objects\">#sec-abstract-operations-for-typedarray-objects</span> Abstract Operations for TypedArray Objects</h1>\n\n      <emu-clause id=\"typedarray-species-create\" aoid=\"TypedArraySpeciesCreate\">\n        <h1><span class=\"secnum\">23.2.4.1</span> TypedArraySpeciesCreate ( <var>exemplar</var>, <var>argumentList</var> )</h1>\n        <p>The abstract operation TypedArraySpeciesCreate takes arguments <var>exemplar</var> and <var>argumentList</var>. It is used to specify the creation of a new TypedArray object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is derived from <var>exemplar</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exemplar</var> is an Object that has [[TypedArrayName]] and [[ContentType]] internal slots.</li><li>Let <var>defaultConstructor</var> be the intrinsic object listed in column one of <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>exemplar</var>.[[TypedArrayName]].</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>exemplar</var>, <var>defaultConstructor</var>).</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>constructor</var>, <var>argumentList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> has [[TypedArrayName]] and [[ContentType]] internal slots.</li><li>If <var>result</var>.[[ContentType]] &#8800; <var>exemplar</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"typedarray-create\" aoid=\"TypedArrayCreate\">\n        <h1><span class=\"secnum\">23.2.4.2</span> TypedArrayCreate ( <var>constructor</var>, <var>argumentList</var> )</h1>\n        <p>The abstract operation TypedArrayCreate takes arguments <var>constructor</var> and <var>argumentList</var>. It is used to specify the creation of a new TypedArray object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>newTypedArray</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argumentList</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>newTypedArray</var>).</li><li>If <var>argumentList</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of a single Number, then<ol><li>If <var>newTypedArray</var>.[[ArrayLength]] &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>argumentList</var>[0]), throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>newTypedArray</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">23.2.4.3</span>#sec-validatetypedarray ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n    "}, "sec-asyncgeneratorstart": {"num": "27.6.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorCompleteStep\"><a href=\"#sec-asyncgeneratorcompletestep\">AsyncGeneratorCompleteStep</a></emu-xref>(<var>generator</var>, <var>result</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorDrainQueue\"><a href=\"#sec-asyncgeneratordrainqueue\">AsyncGeneratorDrainQueue</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validateatomicaccess": {"num": "25.4.2.2", "title": "#sec-validateatomicaccess ValidateAtomicAccess ( typedArray, requestIndex )", "html": "<emu-clause id=\"sec-validateatomicaccess\" aoid=\"ValidateAtomicAccess\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateatomicaccess\">#sec-validateatomicaccess</span> ValidateAtomicAccess ( <var>typedArray</var>, <var>requestIndex</var> )</h1>\n        <p>The abstract operation ValidateAtomicAccess takes arguments <var>typedArray</var> and <var>requestIndex</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> is an Object that has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>length</var> be <var>typedArray</var>.[[ArrayLength]].</li><li>Let <var>accessIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>accessIndex</var> &#8805; 0.</li><li>If <var>accessIndex</var> &#8805; <var>length</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Return (<var>accessIndex</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerate-object-properties": {"num": "14.7.5.9", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>ECMAScript implementations are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(obj) {\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.<span class=\"hljs-title function_\">add</span>(key);\n      <span class=\"hljs-keyword\">if</span> (desc.<span class=\"hljs-property\">enumerable</span>) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-parse-script": {"num": "16.1.5", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-initializetypedarrayfromtypedarray": {"num": "23.2.5.1.2", "title": "#sec-initializetypedarrayfromtypedarray InitializeTypedArrayFromTypedArray ( O, srcArray )", "html": "<emu-clause id=\"sec-initializetypedarrayfromtypedarray\" oldids=\"sec-typedarray-typedarray\" aoid=\"InitializeTypedArrayFromTypedArray\"><span id=\"sec-typedarray-typedarray\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromtypedarray\">#sec-initializetypedarrayfromtypedarray</span> InitializeTypedArrayFromTypedArray ( <var>O</var>, <var>srcArray</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromTypedArray takes arguments <var>O</var> (a TypedArray object) and <var>srcArray</var> (a TypedArray object). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>srcArray</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <var>elementType</var> is the same as <var>srcType</var>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>srcArray</var>.[[ContentType]] &#8800; <var>O</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-evaluate-property-access-with-identifier-key": {"num": "13.3.4", "title": "#sec-evaluate-property-access-with-identifier-key EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-identifier-key\" oldids=\"sec-evaluate-identifier-key-property-access\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><span id=\"sec-evaluate-identifier-key-property-access\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-identifier-key\">#sec-evaluate-property-access-with-identifier-key</span> EvaluatePropertyAccessWithIdentifierKey ( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>identifierName</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>identifierName</var> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <var>identifierName</var>.</li><li>Return the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> { [[Base]]: <var>bv</var>, [[ReferencedName]]: <var>propertyNameString</var>, [[Strict]]: <var>strict</var>, [[ThisValue]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-isprivatereference": {"num": "6.2.4.4", "title": "#sec-isprivatereference IsPrivateReference ( V )", "html": "<emu-clause id=\"sec-isprivatereference\" aoid=\"IsPrivateReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isprivatereference\">#sec-isprivatereference</span> IsPrivateReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPrivateReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>V</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</li><li>If <var>V</var>.[[ReferencedName]] is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-hasownproperty": {"num": "7.3.12", "title": "#sec-hasownproperty HasOwnProperty ( O, P )", "html": "<emu-clause id=\"sec-hasownproperty\" aoid=\"HasOwnProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasownproperty\">#sec-hasownproperty</span> HasOwnProperty ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation HasOwnProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether an object has an own property with the specified property key. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-iteratorcomplete": {"num": "7.4.3", "title": "#sec-iteratorcomplete IteratorComplete ( iterResult )", "html": "<emu-clause id=\"sec-iteratorcomplete\" aoid=\"IteratorComplete\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorcomplete\">#sec-iteratorcomplete</span> IteratorComplete ( <var>iterResult</var> )</h1>\n      <p>The abstract operation IteratorComplete takes argument <var>iterResult</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterResult</var>) is Object.</li><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>iterResult</var>, <emu-val>\"done\"</emu-val>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string-exotic-objects-defineownproperty-p-desc": {"num": "10.4.3.2", "title": "#sec-string-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-string-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-defineownproperty-p-desc\">#sec-string-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>S</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>stringDesc</var> be !&#160;<emu-xref aoid=\"StringGetOwnProperty\"><a href=\"#sec-stringgetownproperty\">StringGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li><li>If <var>stringDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>extensible</var> be <var>S</var>.[[Extensible]].</li><li>Return !&#160;<emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensible</var>, <var>Desc</var>, <var>stringDesc</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-iteratorclose": {"num": "7.4.6", "title": "#sec-iteratorclose IteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-iteratorclose\" aoid=\"IteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorclose\">#sec-iteratorclose</span> IteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation IteratorClose takes arguments <var>iteratorRecord</var> and <var>completion</var>. It is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getv": {"num": "7.3.3", "title": "#sec-getv GetV ( V, P )", "html": "<emu-clause id=\"sec-getv\" aoid=\"GetV\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getv\">#sec-getv</span> GetV ( <var>V</var>, <var>P</var> )</h1>\n      <p>The abstract operation GetV takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key). It is used to retrieve the value of a specific property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>. If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>).</li><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>V</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-hasproperty": {"num": "7.3.11", "title": "#sec-hasproperty HasProperty ( O, P )", "html": "<emu-clause id=\"sec-hasproperty\" aoid=\"HasProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasproperty\">#sec-hasproperty</span> HasProperty ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation HasProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether an object has a property with the specified property key. The property may be either an own or inherited. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Return ? <var>O</var>.[[HasProperty]](<var>P</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-iteratorvalue": {"num": "7.4.4", "title": "#sec-iteratorvalue IteratorValue ( iterResult )", "html": "<emu-clause id=\"sec-iteratorvalue\" aoid=\"IteratorValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorvalue\">#sec-iteratorvalue</span> IteratorValue ( <var>iterResult</var> )</h1>\n      <p>The abstract operation IteratorValue takes argument <var>iterResult</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterResult</var>) is Object.</li><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>iterResult</var>, <emu-val>\"value\"</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createarrayfromlist": {"num": "7.3.17", "title": "#sec-createarrayfromlist CreateArrayFromList ( elements )", "html": "<emu-clause id=\"sec-createarrayfromlist\" aoid=\"CreateArrayFromList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayfromlist\">#sec-createarrayfromlist</span> CreateArrayFromList ( <var>elements</var> )</h1>\n      <p>The abstract operation CreateArrayFromList takes argument <var>elements</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>). It is used to create an Array object whose elements are provided by <var>elements</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>elements</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are all ECMAScript language values.</li><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>elements</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>e</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>array</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdatapropertyorthrow": {"num": "7.3.7", "title": "#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )", "html": "<emu-clause id=\"sec-createdatapropertyorthrow\" aoid=\"CreateDataPropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdatapropertyorthrow\">#sec-createdatapropertyorthrow</span> CreateDataPropertyOrThrow ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateDataPropertyOrThrow takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It throws a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val> causing this operation to throw a <emu-val>TypeError</emu-val> exception.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver": {"num": "10.5.9", "title": "#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver\">#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n      <p>The [[Set]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>V</var>, <var>Receiver</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>V</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Set]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[Set]] is a Boolean value.\n          </li>\n          <li>\n            Cannot change the value of a property to be different from the value of the corresponding target object property if the corresponding target object property is a non-writable, non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n          </li>\n          <li>\n            Cannot set the value of a property if the corresponding target object property is a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> that has <emu-val>undefined</emu-val> as its [[Set]] attribute.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var>, <var>pattern</var>, and <var>flags</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ordinarydelete": {"num": "10.1.10.1", "title": "#sec-ordinarydelete OrdinaryDelete ( O, P )", "html": "<emu-clause id=\"sec-ordinarydelete\" aoid=\"OrdinaryDelete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarydelete\">#sec-ordinarydelete</span> OrdinaryDelete ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryDelete takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>desc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Remove the own property with name <var>P</var> from <var>O</var>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-clonearraybuffer": {"num": "25.1.2.4", "title": "#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )", "html": "<emu-clause id=\"sec-clonearraybuffer\" aoid=\"CloneArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-clonearraybuffer\">#sec-clonearraybuffer</span> CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var>, <var>cloneConstructor</var> )</h1>\n        <p>The abstract operation CloneArrayBuffer takes arguments <var>srcBuffer</var> (an ArrayBuffer object), <var>srcByteOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>srcLength</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>cloneConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer</var>'s data over the range starting at <var>srcByteOffset</var> and continuing for <var>srcLength</var> bytes. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>srcBuffer</var>) is Object and <var>srcBuffer</var> has an [[ArrayBufferData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>cloneConstructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>targetBuffer</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>cloneConstructor</var>, <var>srcLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcBlock</var> be <var>srcBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>targetBlock</var> be <var>targetBuffer</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>targetBlock</var>, 0, <var>srcBlock</var>, <var>srcByteOffset</var>, <var>srcLength</var>).</li><li>Return <var>targetBuffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bigintbitwiseop": {"num": "6.1.6.2.19", "title": "#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-bigintbitwiseop\" aoid=\"BigIntBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigintbitwiseop\">#sec-bigintbitwiseop</span> BigIntBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigIntBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>x</var> (a BigInt), and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Set <var>y</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>).</li><li>Let <var>result</var> be 0.</li><li>Let <var>shift</var> be 0.</li><li>Repeat, until (<var>x</var> = 0 or <var>x</var> = -1) and (<var>y</var> = 0 or <var>y</var> = -1),<ol><li>Let <var>xDigit</var> be <var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>Let <var>yDigit</var> be <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>If <var>op</var> is <code>&amp;</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else if <var>op</var> is <code>|</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>^</code>.</li><li>Set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li></ol></li><li>Set <var>shift</var> to <var>shift</var> + 1.</li><li>Set <var>x</var> to (<var>x</var> - <var>xDigit</var>) / 2.</li><li>Set <var>y</var> to (<var>y</var> - <var>yDigit</var>) / 2.</li></ol></li><li>If <var>op</var> is <code>&amp;</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else if <var>op</var> is <code>|</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>^</code>.</li><li>Let <var>tmp</var> be <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li></ol></li><li>If <var>tmp</var> &#8800; 0, then<ol><li>Set <var>result</var> to <var>result</var> - 2<sup><var>shift</var></sup>.</li><li>NOTE: This extends the sign.</li></ol></li><li>Return the BigInt value for <var>result</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.return": {"num": "27.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"return\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-issharedarraybuffer": {"num": "25.2.1.2", "title": "#sec-issharedarraybuffer IsSharedArrayBuffer ( obj )", "html": "<emu-clause id=\"sec-issharedarraybuffer\" aoid=\"IsSharedArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issharedarraybuffer\">#sec-issharedarraybuffer</span> IsSharedArrayBuffer ( <var>obj</var> )</h1>\n        <p>The abstract operation IsSharedArrayBuffer takes argument <var>obj</var>. It tests whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype of either. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is Object and <var>obj</var> has an [[ArrayBufferData]] internal slot.</li><li>Let <var>bufferData</var> be <var>obj</var>.[[ArrayBufferData]].</li><li>If <var>bufferData</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarygetownproperty": {"num": "10.1.5.1", "title": "#sec-ordinarygetownproperty OrdinaryGetOwnProperty ( O, P )", "html": "<emu-clause id=\"sec-ordinarygetownproperty\" aoid=\"OrdinaryGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarygetownproperty\">#sec-ordinarygetownproperty</span> OrdinaryGetOwnProperty ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryGetOwnProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var> does not have an own property with key <var>P</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>D</var> be a newly created <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> with no fields.</li><li>Let <var>X</var> be <var>O</var>'s own property whose key is <var>P</var>.</li><li>If <var>X</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, then<ol><li>Set <var>D</var>.[[Value]] to the value of <var>X</var>'s [[Value]] attribute.</li><li>Set <var>D</var>.[[Writable]] to the value of <var>X</var>'s [[Writable]] attribute.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>X</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>.</li><li>Set <var>D</var>.[[Get]] to the value of <var>X</var>'s [[Get]] attribute.</li><li>Set <var>D</var>.[[Set]] to the value of <var>X</var>'s [[Set]] attribute.</li></ol></li><li>Set <var>D</var>.[[Enumerable]] to the value of <var>X</var>'s [[Enumerable]] attribute.</li><li>Set <var>D</var>.[[Configurable]] to the value of <var>X</var>'s [[Configurable]] attribute.</li><li>Return <var>D</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-add-entries-from-iterable": {"num": "24.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is present, and is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li>If <var>k</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>k</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>v</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>.[[Value]], <var>v</var>.[[Value]] &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-ordinaryhasproperty": {"num": "10.1.7.1", "title": "#sec-ordinaryhasproperty OrdinaryHasProperty ( O, P )", "html": "<emu-clause id=\"sec-ordinaryhasproperty\" aoid=\"OrdinaryHasProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryhasproperty\">#sec-ordinaryhasproperty</span> OrdinaryHasProperty ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryHasProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>hasOwn</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>hasOwn</var> is not <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>call</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>If the source code matching <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-detacharraybuffer": {"num": "25.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>arrayBuffer</var>) is Object and <var>arrayBuffer</var> has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> or implementation may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator takes argument <var>obj</var> and optional arguments <var>hint</var> and <var>method</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>sync</emu-const> or <emu-const>async</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@asyncIterator</a></emu-xref>).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return !&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializeboundname": {"num": "8.5.2.1", "title": "#sec-initializeboundname InitializeBoundName ( name, value, environment )", "html": "<emu-clause id=\"sec-initializeboundname\" aoid=\"InitializeBoundName\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeboundname\">#sec-initializeboundname</span> InitializeBoundName ( <var>name</var>, <var>value</var>, <var>environment</var> )</h1>\n        <p>The abstract operation InitializeBoundName takes arguments <var>name</var>, <var>value</var>, and <var>environment</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>name</var>) is String.</li><li>If <var>environment</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>environment</var>.InitializeBinding(<var>name</var>, <var>value</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>name</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-set-o-p-v-throw": {"num": "7.3.4", "title": "#sec-set-o-p-v-throw Set ( O, P, V, Throw )", "html": "<emu-clause id=\"sec-set-o-p-v-throw\" aoid=\"Set\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-o-p-v-throw\">#sec-set-o-p-v-throw</span> Set ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Throw</var> )</h1>\n      <p>The abstract operation Set takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Throw</var> (a Boolean). It is used to set the value of a specific property of an object. <var>V</var> is the new value for the property. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>Throw</var>) is Boolean.</li><li>Let <var>success</var> be ? <var>O</var>.[[Set]](<var>P</var>, <var>V</var>, <var>O</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val> and <var>Throw</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ordinarysetwithowndescriptor": {"num": "10.1.9.2", "title": "#sec-ordinarysetwithowndescriptor OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )", "html": "<emu-clause id=\"sec-ordinarysetwithowndescriptor\" aoid=\"OrdinarySetWithOwnDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarysetwithowndescriptor\">#sec-ordinarysetwithowndescriptor</span> OrdinarySetWithOwnDescriptor ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>, <var>ownDesc</var> )</h1>\n        <p>The abstract operation OrdinarySetWithOwnDescriptor takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>ownDesc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>ownDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Else,<ol><li>Set <var>ownDesc</var> to the PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li></ol></li></ol></li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>ownDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>Receiver</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>existingDescriptor</var> be ? <var>Receiver</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>existingDescriptor</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>existingDescriptor</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingDescriptor</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>valueDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li><li>Return ? <var>Receiver</var>.[[DefineOwnProperty]](<var>P</var>, <var>valueDesc</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Receiver</var> does not currently have a property <var>P</var>.</li><li>Return ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>Receiver</var>, <var>P</var>, <var>V</var>).</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>setter</var> be <var>ownDesc</var>.[[Set]].</li><li>If <var>setter</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>Receiver</var>, &#171; <var>V</var> &#187;).</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-getownproperty-p": {"num": "10.4.5.1", "title": "#sec-integer-indexed-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-getownproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-getownproperty-p\">#sec-integer-indexed-exotic-objects-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n        <p>The [[GetOwnProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>value</var> be !&#160;<emu-xref aoid=\"IntegerIndexedElementGet\"><a href=\"#sec-integerindexedelementget\">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li><li>If <var>value</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return the PropertyDescriptor { [[Value]]: <var>value</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li></ol></li></ol></li><li>Return <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects-getownproperty-p": {"num": "10.4.3.1", "title": "#sec-string-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-string-exotic-objects-getownproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-getownproperty-p\">#sec-string-exotic-objects-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n        <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>S</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, return <var>desc</var>.</li><li>Return !&#160;<emu-xref aoid=\"StringGetOwnProperty\"><a href=\"#sec-stringgetownproperty\">StringGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setvalueinbuffer": {"num": "25.1.2.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer or SharedArrayBuffer), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a <emu-xref href=\"#sec-typedarray-objects\"><a href=\"#sec-typedarray-objects\">TypedArray element type</a></emu-xref>), <var>value</var> (a Number or a BigInt), <var>isTypedArray</var> (a Boolean), and <var>order</var> (one of <emu-const>SeqCst</emu-const>, <emu-const>Unordered</emu-const>, or <emu-const>Init</emu-const>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-defineownproperty-p-desc": {"num": "10.4.5.3", "title": "#sec-integer-indexed-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-defineownproperty-p-desc\">#sec-integer-indexed-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has an [[Enumerable]] field and if <var>Desc</var>.[[Enumerable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Writable]] field and if <var>Desc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Value]] field, perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>Desc</var>.[[Value]]).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-prepareforordinarycall": {"num": "10.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation PrepareForOrdinaryCall takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>newTarget</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the PrivateEnvironment of <var>calleeContext</var> to <var>F</var>.[[PrivateEnvironment]].</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createbuiltinfunction": {"num": "10.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( behaviour, length, name, additionalInternalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>behaviour</var>, <var>length</var>, <var>name</var>, <var>additionalInternalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> [ , <var>prefix</var> ] ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>behaviour</var>, <var>length</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>name</var> (a property key), and <var>additionalInternalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>), <var>prototype</var> (an Object or <emu-val>null</emu-val>), and <var>prefix</var> (a String). <var>additionalInternalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>behaviour</var> is either an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification.</li><li>If <var>realm</var> is not present, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>internalSlotsList</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref> requires for the built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is about to be created.</li><li>Append to <var>internalSlotsList</var> the elements of <var>additionalInternalSlotsList</var>.</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that, when called, performs the action described by <var>behaviour</var> using the provided arguments as the values of the corresponding parameters specified by <var>behaviour</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>, and an [[InitialName]] internal slot.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[InitialName]] to <emu-val>null</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>func</var>, <var>length</var>).</li><li>If <var>prefix</var> is not present, then<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>, <var>prefix</var>).</li></ol></li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n  "}, "sec-isanonymousfunctiondefinition": {"num": "8.3.3", "title": "#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )", "html": "<emu-clause id=\"sec-isanonymousfunctiondefinition\" aoid=\"IsAnonymousFunctionDefinition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isanonymousfunctiondefinition\">#sec-isanonymousfunctiondefinition</span> Static Semantics: IsAnonymousFunctionDefinition ( <var>expr</var> )</h1>\n      <p>The abstract operation IsAnonymousFunctionDefinition takes argument <var>expr</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> or a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>). It determines if its argument is a function definition that does not bind a name. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsFunctionDefinition\"><a href=\"#sec-static-semantics-isfunctiondefinition\">IsFunctionDefinition</a></emu-xref> of <var>expr</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>hasName</var> be <emu-xref aoid=\"HasName\"><a href=\"#sec-static-semantics-hasname\">HasName</a></emu-xref> of <var>expr</var>.</li><li>If <var>hasName</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-allocatetypedarraybuffer": {"num": "23.2.5.1.6", "title": "#sec-allocatetypedarraybuffer AllocateTypedArrayBuffer ( O, length )", "html": "<emu-clause id=\"sec-allocatetypedarraybuffer\" aoid=\"AllocateTypedArrayBuffer\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-allocatetypedarraybuffer\">#sec-allocatetypedarraybuffer</span> AllocateTypedArrayBuffer ( <var>O</var>, <var>length</var> )</h1>\n          <p>The abstract operation AllocateTypedArrayBuffer takes arguments <var>O</var> (a TypedArray object) and <var>length</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It allocates and associates an ArrayBuffer with <var>O</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has a [[ViewedArrayBuffer]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var>.[[ViewedArrayBuffer]] is <emu-val>undefined</emu-val>.</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>length</var>.</li><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>, <var>byteLength</var>).</li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>length</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-getmethod": {"num": "7.3.10", "title": "#sec-getmethod GetMethod ( V, P )", "html": "<emu-clause id=\"sec-getmethod\" aoid=\"GetMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmethod\">#sec-getmethod</span> GetMethod ( <var>V</var>, <var>P</var> )</h1>\n      <p>The abstract operation GetMethod takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key). It is used to get the value of a specific property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> when the value of the property is expected to be a function. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>If <var>func</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>func</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\" aoid=\"CreateSetIterator\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> and <var>kind</var>. It is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const> or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-samevaluenonnumeric": {"num": "7.2.12", "title": "#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )", "html": "<emu-clause id=\"sec-samevaluenonnumeric\" oldids=\"sec-samevaluenonnumber\" aoid=\"SameValueNonNumeric\"><span id=\"sec-samevaluenonnumber\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluenonnumeric\">#sec-samevaluenonnumeric</span> SameValueNonNumeric ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueNonNumeric takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not Number or BigInt.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Undefined, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Null, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String, then<ol><li>If <var>x</var> and <var>y</var> are exactly the same sequence of code units (same length and same code units at corresponding indices), return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, then<ol><li>If <var>x</var> and <var>y</var> are both <emu-val>true</emu-val> or both <emu-val>false</emu-val>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Symbol, then<ol><li>If <var>x</var> and <var>y</var> are both the same Symbol value, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <var>x</var> and <var>y</var> are the same Object value, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\" aoid=\"CreateMapIterator\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> and <var>kind</var>. It is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setintegritylevel": {"num": "7.3.15", "title": "#sec-setintegritylevel SetIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-setintegritylevel\" aoid=\"SetIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setintegritylevel\">#sec-setintegritylevel</span> SetIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation SetIntegrityLevel takes arguments <var>O</var> and <var>level</var>. It is used to fix the set of own properties of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>.</li><li>Let <var>status</var> be ? <var>O</var>.[[PreventExtensions]]().</li><li>If <var>status</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>If <var>level</var> is <emu-const>sealed</emu-const>, then<ol><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is <emu-const>frozen</emu-const>.</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, <var>desc</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-stringgetownproperty": {"num": "10.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> and <var>P</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>S</var> is an Object that has a [[StringData]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <var>len</var> &#8804; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>), return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>).</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-getmodulenamespace": {"num": "16.2.1.10", "title": "#sec-getmodulenamespace GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var>. It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>name</var> of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getwaiterlist": {"num": "25.4.2.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>The abstract operation GetWaiterList takes arguments <var>block</var> (a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>) and <var>i</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> is divisible by 4.</li><li>Return the <emu-xref href=\"#sec-waiterlist-objects\"><a href=\"#sec-waiterlist-objects\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-ownpropertykeys": {"num": "10.4.5.7", "title": "#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">#sec-integer-indexed-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>false</emu-val>, then<ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>O</var>.[[ArrayLength]], in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)) as the last element of <var>keys</var>.</li></ol></li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-testintegritylevel": {"num": "7.3.16", "title": "#sec-testintegritylevel TestIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-testintegritylevel\" aoid=\"TestIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testintegritylevel\">#sec-testintegritylevel</span> TestIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation TestIntegrityLevel takes arguments <var>O</var> and <var>level</var>. It is used to determine if the set of own properties of an object are fixed. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>.</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>O</var>).</li><li>If <var>extensible</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>NOTE: If the object is extensible, none of its properties are examined.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>level</var> is <emu-const>frozen</emu-const> and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" oldids=\"sec-enumerableownproperties\" aoid=\"EnumerableOwnPropertyNames\"><span id=\"sec-enumerableownproperties\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (one of <emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-invoke": {"num": "7.3.20", "title": "#sec-invoke Invoke ( V, P [ , argumentsList ] )", "html": "<emu-clause id=\"sec-invoke\" aoid=\"Invoke\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invoke\">#sec-invoke</span> Invoke ( <var>V</var>, <var>P</var> [ , <var>argumentsList</var> ] )</h1>\n      <p>The abstract operation Invoke takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key) and optional argument <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It is used to call a method property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>. <var>V</var> serves as both the lookup point for the property and the <emu-val>this</emu-val> value of the call. <var>argumentsList</var> is the list of arguments values passed to the method. If <var>argumentsList</var> is not present, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used as its value. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>argumentsList</var> is not present, set <var>argumentsList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-canonicalnumericindexstring": {"num": "7.1.21", "title": "#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )", "html": "<emu-clause id=\"sec-canonicalnumericindexstring\" aoid=\"CanonicalNumericIndexString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</span> CanonicalNumericIndexString ( <var>argument</var> )</h1>\n      <p>The abstract operation CanonicalNumericIndexString takes argument <var>argument</var>. It returns <var>argument</var> converted to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> if it is a String representation of a Number that would be produced by <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, or the string <emu-val>\"-0\"</emu-val>. Otherwise, it returns <emu-val>undefined</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is String.</li><li>If <var>argument</var> is <emu-val>\"-0\"</emu-val>, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>argument</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n      <p>A <em>canonical numeric string</em> is any String value for which the CanonicalNumericIndexString abstract operation does not return <emu-val>undefined</emu-val>.</p>\n    </emu-clause>\n\n    "}, "sec-resolveexport": {"num": "16.2.1.6.3", "title": "#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] )", "html": "<emu-clause id=\"sec-resolveexport\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolveexport\">#sec-resolveexport</span> ResolveExport ( <var>exportName</var> [ , <var>resolveSet</var> ] )</h1>\n          <p>The ResolveExport concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes argument <var>exportName</var> (a String) and optional argument <var>resolveSet</var>.</p>\n              <p>ResolveExport attempts to resolve an imported binding to the actual defining module and local binding name. The defining module may be the module represented by the <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> this method was invoked on or some other module that is imported by that module. The parameter <var>resolveSet</var> is used to detect unresolved circular import/export paths. If a pair consisting of specific <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <var>exportName</var> is reached that is already in <var>resolveSet</var>, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of <var>module</var> and <var>exportName</var> is added to <var>resolveSet</var>.</p>\n              <p>If a defining module is found, a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]], [[BindingName]] } is returned. This record identifies the resolved binding of the originally requested export, unless this is the export of a namespace with no local binding. In this case, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. If no definition was found or the request is found to be circular, <emu-val>null</emu-val> is returned. If the request is found to be ambiguous, the string <emu-val>\"ambiguous\"</emu-val> is returned.</p>\n            \n\n          <p>It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>If <var>resolveSet</var> is not present, set <var>resolveSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolveSet</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] }.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] } <var>r</var> of <var>resolveSet</var>, do<ol><li>If <var>module</var> and <var>r</var>.[[Module]] are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>r</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is a circular import request.</li><li>Return <emu-val>null</emu-val>.</li></ol></li></ol></li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]]: <var>module</var>, [[ExportName]]: <var>exportName</var> } to <var>resolveSet</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>module</var>, [[BindingName]]: <var>e</var>.[[LocalName]] }.</li></ol></li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>If <var>e</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> does not provide the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>importedModule</var>, [[BindingName]]: <emu-val>\"*namespace*\"</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Return <var>importedModule</var>.ResolveExport(<var>e</var>.[[ImportName]], <var>resolveSet</var>).</li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <emu-val>\"default\"</emu-val>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: A <code>default</code> export was not explicitly defined by this module.</li><li>Return <emu-val>null</emu-val>.</li><li>NOTE: A <code>default</code> export cannot be provided by an <code>export *</code> or <code>export * from \"mod\"</code> declaration.</li></ol></li><li>Let <var>starResolution</var> be <emu-val>null</emu-val>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>exportName</var>, <var>resolveSet</var>).</li><li>If <var>resolution</var> is <emu-val>\"ambiguous\"</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li><li>If <var>resolution</var> is not <emu-val>null</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>If <var>starResolution</var> is <emu-val>null</emu-val>, set <var>starResolution</var> to <var>resolution</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There is more than one <code>*</code> import that includes the requested name.</li><li>If <var>resolution</var>.[[Module]] and <var>starResolution</var>.[[Module]] are not the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>.[[BindingName]], <var>starResolution</var>.[[BindingName]]) is <emu-val>false</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <var>starResolution</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-makeconstructor": {"num": "10.2.5", "title": "#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )", "html": "<emu-clause id=\"sec-makeconstructor\" aoid=\"MakeConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeconstructor\">#sec-makeconstructor</span> MakeConstructor ( <var>F</var> [ , <var>writablePrototype</var> [ , <var>prototype</var> ] ] )</h1>\n      <p>The abstract operation MakeConstructor takes argument <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and optional arguments <var>writablePrototype</var> (a Boolean) and <var>prototype</var> (an Object). It converts <var>F</var> into a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>If <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>F</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <emu-val>\"prototype\"</emu-val> own property.</li><li>Set <var>F</var>.[[Construct]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>F</var>.[[ConstructorKind]] to <emu-const>base</emu-const>.</li><li>If <var>writablePrototype</var> is not present, set <var>writablePrototype</var> to <emu-val>true</emu-val>.</li><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>prototype</var>, <emu-val>\"constructor\"</emu-val>, PropertyDescriptor { [[Value]]: <var>F</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc": {"num": "10.5.6", "title": "#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n      <p>The [[DefineOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"defineProperty\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[DefineOwnProperty]](<var>P</var>, <var>Desc</var>).</li></ol></li><li>Let <var>descObj</var> be <emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>Desc</var>).</li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>descObj</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Let <var>settingConfigFalse</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else, let <var>settingConfigFalse</var> be <emu-val>false</emu-val>.</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>Desc</var>, <var>targetDesc</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val>, <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, and <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> has a [[Writable]] field and <var>Desc</var>.[[Writable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[DefineOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[DefineOwnProperty]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be added, if the target object is not extensible.\n          </li>\n          <li>\n            A property cannot be non-configurable, unless there exists a corresponding non-configurable own property of the target object.\n          </li>\n          <li>\n            A non-configurable property cannot be non-writable, unless there exists a corresponding non-configurable, non-writable own property of the target object.\n          </li>\n          <li>\n            If a property has a corresponding target object property then applying the <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> of the property to the target object using [[DefineOwnProperty]] will not throw an exception.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-bytelistbitwiseop": {"num": "25.4.2.12", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp ( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp ( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (a sequence of Unicode code points), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>&amp;</code>, <code>^</code>, or <code>|</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>If <var>op</var> is <code>&amp;</code>, let <var>resultByte</var> be the result of applying the bitwise AND operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>resultByte</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>resultByte</var> be the result of applying the bitwise inclusive OR operation to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promise-resolve": {"num": "27.2.4.7.1", "title": "#sec-promise-resolve PromiseResolve ( C, x )", "html": "<emu-clause id=\"sec-promise-resolve\" aoid=\"PromiseResolve\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve\">#sec-promise-resolve</span> PromiseResolve ( <var>C</var>, <var>x</var> )</h1>\n          <p>The abstract operation PromiseResolve takes arguments <var>C</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) and <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a new promise resolved with <var>x</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is Object.</li><li>If <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>x</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>xConstructor</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>x</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>xConstructor</var>, <var>C</var>) is <emu-val>true</emu-val>, return <var>x</var>.</li></ol></li><li>Let <var>promiseCapability</var> be ?&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<var>C</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>x</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-timezoneestring": {"num": "21.4.4.41.3", "title": "#sec-timezoneestring TimeZoneString ( tv )", "html": "<emu-clause id=\"sec-timezoneestring\" aoid=\"TimeZoneString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timezoneestring\">#sec-timezoneestring</span> TimeZoneString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeZoneString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>offset</var> be <emu-xref aoid=\"LocalTZA\"><a href=\"#sec-local-time-zone-adjustment\">LocalTZA</a></emu-xref>(<var>tv</var>, <emu-val>true</emu-val>).</li><li>If <var>offset</var> &#8805; <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>Let <var>offsetSign</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>absOffset</var> be <var>offset</var>.</li></ol></li><li>Else,<ol><li>Let <var>offsetSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>absOffset</var> be -<var>offset</var>.</li></ol></li><li>Let <var>offsetMin</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<var>absOffset</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>offsetHour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<var>absOffset</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>tzName</var> be an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> string that is either the empty String or the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>offsetSign</var>, <var>offsetHour</var>, <var>offsetMin</var>, and <var>tzName</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>completion</var>. FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> and <var>completion</var>.[[Value]] is <emu-val>undefined</emu-val>.</li><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorstart": {"num": "27.5.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "22.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> and <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n        "}, "sec-binaryor": {"num": "6.1.6.2.17", "title": "#sec-binaryor BinaryOr ( x, y )", "html": "<emu-clause id=\"sec-binaryor\" aoid=\"BinaryOr\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryor\">#sec-binaryor</span> BinaryOr ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryOr takes arguments <var>x</var> and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 or <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-initializetypedarrayfromarraybuffer": {"num": "23.2.5.1.3", "title": "#sec-initializetypedarrayfromarraybuffer InitializeTypedArrayFromArrayBuffer ( O, buffer, byteOffset, length )", "html": "<emu-clause id=\"sec-initializetypedarrayfromarraybuffer\" oldids=\"sec-typedarray-buffer-byteoffset-length\" aoid=\"InitializeTypedArrayFromArrayBuffer\"><span id=\"sec-typedarray-buffer-byteoffset-length\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromarraybuffer\">#sec-initializetypedarrayfromarraybuffer</span> InitializeTypedArrayFromArrayBuffer ( <var>O</var>, <var>buffer</var>, <var>byteOffset</var>, <var>length</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromArrayBuffer takes arguments <var>O</var> (a TypedArray object), <var>buffer</var> (an ArrayBuffer object), <var>byteOffset</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>length</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has a [[TypedArrayName]] internal slot.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>buffer</var> is an Object that has an [[ArrayBufferData]] internal slot.</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>offset</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>byteOffset</var>).</li><li>If <var>offset</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>length</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>newLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>bufferByteLength</var> be <var>buffer</var>.[[ArrayBufferByteLength]].</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>bufferByteLength</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>newByteLength</var> be <var>bufferByteLength</var> - <var>offset</var>.</li><li>If <var>newByteLength</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>Let <var>newByteLength</var> be <var>newLength</var> &#215; <var>elementSize</var>.</li><li>If <var>offset</var> + <var>newByteLength</var> &gt; <var>bufferByteLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>buffer</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>newByteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to <var>offset</var>.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>newByteLength</var> / <var>elementSize</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-boundfunctioncreate": {"num": "10.4.1.3", "title": "#sec-boundfunctioncreate BoundFunctionCreate ( targetFunction, boundThis, boundArgs )", "html": "<emu-clause id=\"sec-boundfunctioncreate\" aoid=\"BoundFunctionCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-boundfunctioncreate\">#sec-boundfunctioncreate</span> BoundFunctionCreate ( <var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var> )</h1>\n        <p>The abstract operation BoundFunctionCreate takes arguments <var>targetFunction</var>, <var>boundThis</var>, and <var>boundArgs</var>. It is used to specify the creation of new bound function exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>targetFunction</var>) is Object.</li><li>Let <var>proto</var> be ? <var>targetFunction</var>.[[GetPrototypeOf]]().</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-bound-function-exotic-objects\"><a href=\"#table-internal-slots-of-bound-function-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-bound-function-exotic-objects\">#table-internal-slots-of-bound-function-exotic-objects</a></emu-xref>, plus [[Prototype]] and [[Extensible]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Call]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\"><a href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>targetFunction</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>obj</var>.[[Construct]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\"><a href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>obj</var>.[[BoundTargetFunction]] to <var>targetFunction</var>.</li><li>Set <var>obj</var>.[[BoundThis]] to <var>boundThis</var>.</li><li>Set <var>obj</var>.[[BoundArguments]] to <var>boundArgs</var>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-todatestring": {"num": "21.4.4.41.4", "title": "#sec-todatestring ToDateString ( tv )", "html": "<emu-clause id=\"sec-todatestring\" aoid=\"ToDateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-todatestring\">#sec-todatestring</span> ToDateString ( <var>tv</var> )</h1>\n          <p>The abstract operation ToDateString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <emu-val>\"Invalid Date\"</emu-val>.</li><li>Let <var>t</var> be <emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(<var>tv</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-xref aoid=\"DateString\"><a href=\"#sec-datestring\">DateString</a></emu-xref>(<var>t</var>), the code unit 0x0020 (SPACE), <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>t</var>), and <emu-xref aoid=\"TimeZoneString\"><a href=\"#sec-timezoneestring\">TimeZoneString</a></emu-xref>(<var>tv</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-settypedarrayfromarraylike": {"num": "23.2.3.23.2", "title": "#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )", "html": "<emu-clause id=\"sec-settypedarrayfromarraylike\" oldids=\"sec-%typedarray%.prototype.set-array-offset\" aoid=\"SetTypedArrayFromArrayLike\"><span id=\"sec-%typedarray%.prototype.set-array-offset\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-settypedarrayfromarraylike\">#sec-settypedarrayfromarraylike</span> SetTypedArrayFromArrayLike ( <var>target</var>, <var>targetOffset</var>, <var>source</var> )</h1>\n          <p>The abstract operation SetTypedArrayFromArrayLike takes arguments <var>target</var> (a TypedArray object), <var>targetOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), and <var>source</var> (an ECMAScript value other than a TypedArray object). It sets multiple values in <var>target</var>, starting at index <var>targetOffset</var>, reading the values from <var>source</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>source</var> is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> other than an Object with a [[TypedArrayName]] internal slot.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>targetOffset</var> is +&#8734;, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-asynciterator-interface": {"num": "27.1.1.4", "title": "#sec-asynciterator-interface The AsyncIterator Interface", "html": "<emu-clause id=\"sec-asynciterator-interface\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciterator-interface\">#sec-asynciterator-interface</span> The <i>AsyncIterator</i> Interface</h1>\n        <p>An object that implements the <i>AsyncIterator</i> interface must include the properties in <emu-xref href=\"#table-async-iterator-required\"><a href=\"#table-async-iterator-required\" class=\"excluded-xref\" excluded-id=\"table-async-iterator-required\">#table-async-iterator-required</a></emu-xref>. Such objects may also implement the properties in <emu-xref href=\"#table-async-iterator-optional\"><a href=\"#table-async-iterator-optional\" class=\"excluded-xref\" excluded-id=\"table-async-iterator-optional\">#table-async-iterator-optional</a></emu-xref>.</p>\n        <emu-table id=\"table-async-iterator-required\" caption=\"&lt;i&gt;AsyncIterator&lt;/i&gt; Interface Required Properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-iterator-required\">#table-async-iterator-required</span>: <i>AsyncIterator</i> Interface Required Properties</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>Property</th>\n              <th>Value</th>\n              <th>Requirements</th>\n            </tr>\n            <tr>\n              <td><emu-val>\"next\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object which conforms to the <i>IteratorResult</i> interface. If a previous call to the <code>next</code> method of an <i>AsyncIterator</i> has returned a promise for an <i>IteratorResult</i> object whose <emu-val>\"done\"</emu-val> property is <emu-val>true</emu-val>, then all subsequent calls to the <code>next</code> method of that object should also return a promise for an <i>IteratorResult</i> object whose <emu-val>\"done\"</emu-val> property is <emu-val>true</emu-val>. However, this requirement is not enforced.</p>\n\n                <p>Additionally, the <i>IteratorResult</i> object that serves as a fulfillment value should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"). However, this requirement is also not enforced.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Arguments may be passed to the <code>next</code> function but their interpretation and validity is dependent upon the target <i>AsyncIterator</i>. The <code>for</code>-<code>await</code>-<code>of</code> statement and other common users of <em>AsyncIterators</em> do not pass any arguments, so <i>AsyncIterator</i> objects that expect to be used in such a manner must be prepared to deal with being called with no arguments.</p>\n        </div></emu-note>\n        <emu-table id=\"table-async-iterator-optional\" caption=\"&lt;i&gt;AsyncIterator&lt;/i&gt; Interface Optional Properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-iterator-optional\">#table-async-iterator-optional</span>: <i>AsyncIterator</i> Interface Optional Properties</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>Property</th>\n              <th>Value</th>\n              <th>Requirements</th>\n            </tr>\n            <tr>\n              <td><emu-val>\"return\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object which conforms to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>AsyncIterator</i> object that the caller does not intend to make any more <code>next</code> method calls to the <i>AsyncIterator</i>. The returned promise will fulfill with an <i>IteratorResult</i> object which will typically have a <emu-val>\"done\"</emu-val> property whose value is <emu-val>true</emu-val>, and a <emu-val>\"value\"</emu-val> property with the value passed as the argument of the <code>return</code> method. However, this requirement is not enforced.</p>\n\n                <p>Additionally, the <i>IteratorResult</i> object that serves as a fulfillment value should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"). If the argument value is used in the typical manner, then if it is a rejected promise, a promise rejected with the same reason should be returned; if it is a fulfilled promise, then its fulfillment value should be used as the <emu-val>\"value\"</emu-val> property of the returned promise's <i>IteratorResult</i> object fulfillment value. However, these requirements are also not enforced.</p>\n              </td>\n            </tr>\n            <tr>\n              <td><emu-val>\"throw\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object which conforms to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>AsyncIterator</i> object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to return a rejected promise which rejects with the value passed as the argument.</p>\n\n                <p>If the returned promise is fulfilled, the <i>IteratorResult</i> fulfillment value will typically have a <emu-val>\"done\"</emu-val> property whose value is <emu-val>true</emu-val>. Additionally, it should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"), but this requirement is not enforced.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Typically callers of these methods should check for their existence before invoking them. Certain ECMAScript language features including <code>for</code>-<code>await</code>-<code>of</code> and <code>yield*</code> call these methods after performing an existence check.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "27.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( [ <var>value</var> ] )</h1>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In this specification, <var>value</var> is always provided, but is left optional for consistency with <emu-xref title=\"\" href=\"#sec-%asyncfromsynciteratorprototype%.return\"><a href=\"#sec-%asyncfromsynciteratorprototype%.return\">%AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</a></emu-xref>.</div></emu-note>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexpexec": {"num": "22.2.5.2.1", "title": "#sec-regexpexec RegExpExec ( R, S )", "html": "<emu-clause id=\"sec-regexpexec\" aoid=\"RegExpExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpexec\">#sec-regexpexec</span> RegExpExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpExec takes arguments <var>R</var> and <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>exec</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"exec\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>exec</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exec</var>, <var>R</var>, &#171; <var>S</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>result</var>.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>If a callable <emu-val>\"exec\"</emu-val> property is not found this algorithm falls back to attempting to use the built-in RegExp matching algorithm. This provides compatible behaviour for code written for prior editions where most built-in algorithms that use regular expressions did not perform a dynamic property lookup of <emu-val>\"exec\"</emu-val>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-valueofreadevent": {"num": "29.5.5", "title": "#sec-valueofreadevent ValueOfReadEvent ( execution, R )", "html": "<emu-clause id=\"sec-valueofreadevent\" aoid=\"ValueOfReadEvent\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valueofreadevent\">#sec-valueofreadevent</span> ValueOfReadEvent ( <var>execution</var>, <var>R</var> )</h1>\n      <p>The abstract operation ValueOfReadEvent takes arguments <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>) and <var>R</var> (a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event.</li><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Ws</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events with length equal to <var>R</var>.[[ElementSize]].</li><li>Return <emu-xref aoid=\"ComposeWriteEventBytes\"><a href=\"#sec-composewriteeventbytes\">ComposeWriteEventBytes</a></emu-xref>(<var>execution</var>, <var>R</var>.[[ByteIndex]], <var>Ws</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.2.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-createmutablebinding\"><a href=\"#step-blockdeclarationinstantiation-createmutablebinding\">4.a.ii.1</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-createmutablebinding\"><ol start=\"1\" class=\"nested-thrice\"><li>If <var>env</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-initializebinding\"><a href=\"#step-blockdeclarationinstantiation-initializebinding\">4.b.iii</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-initializebinding\"><ol start=\"3\" class=\"nested-twice\"><li>If the binding for <var>fn</var> in <var>env</var> is an uninitialized binding, then<ol><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>env</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.2.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"13\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declaredFunctionNames</var> and <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-completepropertydescriptor": {"num": "6.2.5.6", "title": "#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-completepropertydescriptor\" aoid=\"CompletePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completepropertydescriptor\">#sec-completepropertydescriptor</span> CompletePropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>The abstract operation CompletePropertyDescriptor takes argument <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Desc</var> is a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>.</li><li>Let <var>like</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>false</emu-val>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <emu-val>undefined</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> does not have a [[Value]] field, set <var>Desc</var>.[[Value]] to <var>like</var>.[[Value]].</li><li>If <var>Desc</var> does not have a [[Writable]] field, set <var>Desc</var>.[[Writable]] to <var>like</var>.[[Writable]].</li></ol></li><li>Else,<ol><li>If <var>Desc</var> does not have a [[Get]] field, set <var>Desc</var>.[[Get]] to <var>like</var>.[[Get]].</li><li>If <var>Desc</var> does not have a [[Set]] field, set <var>Desc</var>.[[Set]] to <var>like</var>.[[Set]].</li></ol></li><li>If <var>Desc</var> does not have an [[Enumerable]] field, set <var>Desc</var>.[[Enumerable]] to <var>like</var>.[[Enumerable]].</li><li>If <var>Desc</var> does not have a [[Configurable]] field, set <var>Desc</var>.[[Configurable]] to <var>like</var>.[[Configurable]].</li><li>Return <var>Desc</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-delete-p": {"num": "10.4.5.6", "title": "#sec-integer-indexed-exotic-objects-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-delete-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-delete-p\">#sec-integer-indexed-exotic-objects-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n        <p>The [[Delete]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryDelete\"><a href=\"#sec-ordinarydelete\">OrdinaryDelete</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-blockdeclarationinstantiation": {"num": "14.2.3", "title": "#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>For each element <var>d</var> of <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-integer-indexed-exotic-objects-set-p-v-receiver": {"num": "10.4.5.5", "title": "#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">#sec-integer-indexed-exotic-objects-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The [[Set]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>V</var>).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinarySet\"><a href=\"#sec-ordinaryset\">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isextensible-o": {"num": "7.2.5", "title": "#sec-isextensible-o IsExtensible ( O )", "html": "<emu-clause id=\"sec-isextensible-o\" aoid=\"IsExtensible\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isextensible-o\">#sec-isextensible-o</span> IsExtensible ( <var>O</var> )</h1>\n      <p>The abstract operation IsExtensible takes argument <var>O</var> (an Object). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether additional properties can be added to <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return ? <var>O</var>.[[IsExtensible]]().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , preferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" oldids=\"table-9\" aoid=\"ToPrimitive\"><span id=\"table-9\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>preferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>preferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>preferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>preferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>preferredType</var> is <emu-const>string</emu-const>, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>preferredType</var> is <emu-const>number</emu-const>.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>preferredType</var> is not present, let <var>preferredType</var> be <emu-const>number</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>preferredType</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were <emu-const>number</emu-const>. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were <emu-const>string</emu-const>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v": {"num": "10.5.2", "title": "#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v [[SetPrototypeOf]] ( V )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v\">#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v</span> [[SetPrototypeOf]] ( <var>V</var> )</h1>\n      <p>The [[SetPrototypeOf]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>V</var> (an Object or <emu-val>null</emu-val>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Either <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is Object or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is Null.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"setPrototypeOf\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[SetPrototypeOf]](<var>V</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>V</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>targetProto</var> be ? <var>target</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>V</var>, <var>targetProto</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[SetPrototypeOf]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[SetPrototypeOf]] is a Boolean value.\n          </li>\n          <li>\n            If the target object is not extensible, the argument value must be the same as the result of [[GetPrototypeOf]] applied to target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects-call-thisargument-argumentslist": {"num": "10.2.1", "title": "#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>F</var>.[[IsClassConstructor]] is <emu-val>true</emu-val>, then<ol><li>Let <var>error</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>NOTE: <var>error</var> is created in <var>calleeContext</var> with <var>F</var>'s associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li></ol></li><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li id=\"step-call-pop-context-stack\">Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> in step <emu-xref href=\"#step-call-pop-context-stack\"><a href=\"#step-call-pop-context-stack\" class=\"excluded-xref\" excluded-id=\"step-call-pop-context-stack\">#step-call-pop-context-stack</a></emu-xref> it must not be destroyed if it is suspended and retained for later resumption by an accessible generator object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-prepareforordinarycall\"><h1><span class=\"secnum\">10.2.1.1</span>#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )</h1>...</div><div id=\"excluded-sec-ordinarycallbindthis\"><h1><span class=\"secnum\">10.2.1.2</span>#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">10.2.1.3</span>#sec-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-ordinarycallevaluatebody\"><h1><span class=\"secnum\">10.2.1.4</span>#sec-ordinarycallevaluatebody OrdinaryCallEvaluateBody ( F, argumentsList )</h1>...</div></emu-clause>\n\n    "}, "sec-isstringprefix": {"num": "7.2.9", "title": "#sec-isstringprefix IsStringPrefix ( p, q )", "html": "<emu-clause id=\"sec-isstringprefix\" aoid=\"IsStringPrefix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstringprefix\">#sec-isstringprefix</span> IsStringPrefix ( <var>p</var>, <var>q</var> )</h1>\n      <p>The abstract operation IsStringPrefix takes arguments <var>p</var> (a String) and <var>q</var> (a String). It determines if <var>p</var> is a prefix of <var>q</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>p</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>q</var>) is String.</li><li>If <var>q</var> can be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>p</var> and some other String <var>r</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Any String is a prefix of itself, because <var>r</var> may be the empty String.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-makemethod": {"num": "10.2.7", "title": "#sec-makemethod MakeMethod ( F, homeObject )", "html": "<emu-clause id=\"sec-makemethod\" aoid=\"MakeMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makemethod\">#sec-makemethod</span> MakeMethod ( <var>F</var>, <var>homeObject</var> )</h1>\n      <p>The abstract operation MakeMethod takes arguments <var>F</var> and <var>homeObject</var>. It configures <var>F</var> as a method. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>homeObject</var>) is Object.</li><li>Set <var>F</var>.[[HomeObject]] to <var>homeObject</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p": {"num": "10.5.5", "title": "#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n      <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"getOwnPropertyDescriptor\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li></ol></li><li>Let <var>trapResultObj</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>trapResultObj</var>) is neither Object nor Undefined, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>trapResultObj</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>resultDesc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>trapResultObj</var>).</li><li>Call <emu-xref aoid=\"CompletePropertyDescriptor\"><a href=\"#sec-completepropertydescriptor\">CompletePropertyDescriptor</a></emu-xref>(<var>resultDesc</var>).</li><li>Let <var>valid</var> be <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>resultDesc</var>, <var>targetDesc</var>).</li><li>If <var>valid</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>resultDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val> or <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>resultDesc</var> has a [[Writable]] field and <var>resultDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>resultDesc</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[GetOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[GetOwnProperty]] must be either an Object or <emu-val>undefined</emu-val>.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if the target object is not extensible, unless it does not exist as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as existent, if the target object is not extensible, unless it exists as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-configurable, unless it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as both non-configurable and non-writable, unless it exists as a non-configurable, non-writable own property of the target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p": {"num": "10.5.7", "title": "#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p [[HasProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p</span> [[HasProperty]] ( <var>P</var> )</h1>\n      <p>The [[HasProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"has\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>booleanTrapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[HasProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[HasProperty]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as an own property of the target object and the target object is not extensible.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-modulenamespacecreate": {"num": "10.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> and <var>exports</var>. It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exports</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String values.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-asynciteratorclose": {"num": "7.4.7", "title": "#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-asynciteratorclose\" aoid=\"AsyncIteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciteratorclose\">#sec-asynciteratorclose</span> AsyncIteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation AsyncIteratorClose takes arguments <var>iteratorRecord</var> and <var>completion</var>. It is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>innerResult</var> to <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>.[[Value]]).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ordinaryget": {"num": "10.1.8.1", "title": "#sec-ordinaryget OrdinaryGet ( O, P, Receiver )", "html": "<emu-clause id=\"sec-ordinaryget\" aoid=\"OrdinaryGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryget\">#sec-ordinaryget</span> OrdinaryGet ( <var>O</var>, <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The abstract operation OrdinaryGet takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ? <var>parent</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>getter</var> be <var>desc</var>.[[Get]].</li><li>If <var>getter</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-newpromisereactionjob": {"num": "27.2.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" oldids=\"sec-promisereactionjob\" aoid=\"NewPromiseReactionJob\"><span id=\"sec-promisereactionjob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>, set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "27.5.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects-defineownproperty-p-desc": {"num": "10.4.2.1", "title": "#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-array-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> <var>A</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>P</var> is <emu-val>\"length\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"ArraySetLength\"><a href=\"#sec-arraysetlength\">ArraySetLength</a></emu-xref>(<var>A</var>, <var>Desc</var>).</li></ol></li><li>Else if <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, then<ol><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLen</var> is a non-negative <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> &#8805; <var>oldLen</var> and <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> &#8805; <var>oldLen</var>, then<ol><li>Set <var>oldLenDesc</var>.[[Value]] to <var>index</var> + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Set <var>succeeded</var> to <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>oldLenDesc</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binaryand": {"num": "6.1.6.2.16", "title": "#sec-binaryand BinaryAnd ( x, y )", "html": "<emu-clause id=\"sec-binaryand\" aoid=\"BinaryAnd\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryand\">#sec-binaryand</span> BinaryAnd ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryAnd takes arguments <var>x</var> and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 and <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-getprototypefromconstructor": {"num": "10.1.14", "title": "#sec-getprototypefromconstructor GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )", "html": "<emu-clause id=\"sec-getprototypefromconstructor\" aoid=\"GetPrototypeFromConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getprototypefromconstructor\">#sec-getprototypefromconstructor</span> GetPrototypeFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> )</h1>\n      <p>The abstract operation GetPrototypeFromConstructor takes arguments <var>constructor</var> and <var>intrinsicDefaultProto</var>. It determines the [[Prototype]] value that should be used to create an object corresponding to a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. The value is retrieved from the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>intrinsicDefaultProto</var> is a String value that is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>constructor</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>proto</var>) is not Object, then<ol><li>Let <var>realm</var> be ?&#160;<emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>constructor</var>).</li><li>Set <var>proto</var> to <var>realm</var>'s intrinsic object named <var>intrinsicDefaultProto</var>.</li></ol></li><li>Return <var>proto</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>If <var>constructor</var> does not supply a [[Prototype]] value, the default value that is used is obtained from the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <var>constructor</var> function rather than from the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-objectdefineproperties": {"num": "20.1.2.3.1", "title": "#sec-objectdefineproperties ObjectDefineProperties ( O, Properties )", "html": "<emu-clause id=\"sec-objectdefineproperties\" aoid=\"ObjectDefineProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objectdefineproperties\">#sec-objectdefineproperties</span> ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )</h1>\n          <p>The abstract operation ObjectDefineProperties takes arguments <var>O</var> and <var>Properties</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>props</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>Properties</var>).</li><li>Let <var>keys</var> be ? <var>props</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>propDesc</var> be ? <var>props</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>propDesc</var> is not <emu-val>undefined</emu-val> and <var>propDesc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>descObj</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>props</var>, <var>nextKey</var>).</li><li>Let <var>desc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>descObj</var>).</li><li>Append the pair (a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>) consisting of <var>nextKey</var> and <var>desc</var> to the end of <var>descriptors</var>.</li></ol></li></ol></li><li>For each element <var>pair</var> of <var>descriptors</var>, do<ol><li>Let <var>P</var> be the first element of <var>pair</var>.</li><li>Let <var>desc</var> be the second element of <var>pair</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>P</var>, <var>desc</var>).</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-module-namespace-exotic-objects-delete-p": {"num": "10.4.6.9", "title": "#sec-module-namespace-exotic-objects-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-delete-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-delete-p\">#sec-module-namespace-exotic-objects-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n        <p>The [[Delete]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryDelete\"><a href=\"#sec-ordinarydelete\">OrdinaryDelete</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is an element of <var>exports</var>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-lengthofarraylike": {"num": "7.3.18", "title": "#sec-lengthofarraylike LengthOfArrayLike ( obj )", "html": "<emu-clause id=\"sec-lengthofarraylike\" aoid=\"LengthOfArrayLike\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lengthofarraylike\">#sec-lengthofarraylike</span> LengthOfArrayLike ( <var>obj</var> )</h1>\n      <p>The abstract operation LengthOfArrayLike takes argument <var>obj</var>. It returns the value of the <emu-val>\"length\"</emu-val> property of an array-like object (as a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is Object.</li><li>Return <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>))).</li></ol></emu-alg>\n      <p>An <dfn>array-like object</dfn> is any object for which this operation returns an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> rather than an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        Typically, an array-like object would also have some properties with <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> names. However, that is not a requirement of this definition.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        Array objects and String objects are examples of array-like objects.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-newfunctionenvironment": {"num": "9.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> and <var>newTarget</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Set <var>env</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-o-p": {"num": "7.3.2", "title": "#sec-get-o-p Get ( O, P )", "html": "<emu-clause id=\"sec-get-o-p\" aoid=\"Get\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-o-p\">#sec-get-o-p</span> Get ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation Get takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It is used to retrieve the value of a specific property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-speciesconstructor": {"num": "7.3.22", "title": "#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )", "html": "<emu-clause id=\"sec-speciesconstructor\" aoid=\"SpeciesConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-speciesconstructor\">#sec-speciesconstructor</span> SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )</h1>\n      <p>The abstract operation SpeciesConstructor takes arguments <var>O</var> (an Object) and <var>defaultConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It is used to retrieve the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that should be used to create new objects that are derived from <var>O</var>. <var>defaultConstructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property cannot be found starting from <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref>).</li><li>If <var>S</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>S</var>) is <emu-val>true</emu-val>, return <var>S</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-datestring": {"num": "21.4.4.41.2", "title": "#sec-datestring DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> DateString ( <var>tv</var> )</h1>\n          <p>The abstract operation DateString takes argument <var>tv</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; <emu-val>+0</emu-val><sub>&#120125;</sub>, let <var>yearSign</var> be the empty String; otherwise, let <var>yearSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>yv</var>)), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, <emu-val>4</emu-val><sub>&#120125;</sub>, <emu-val>\"0\"</emu-val>, <emu-const>start</emu-const>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.</li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                </th>\n                <th>\n                  Name\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>+0</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sun\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>1</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Mon\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>2</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Tue\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>3</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Wed\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>4</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Thu\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>5</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Fri\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>6</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sat\"</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                </th>\n                <th>\n                  Name\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>+0</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jan\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>1</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Feb\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>2</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Mar\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>3</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Apr\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>4</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"May\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>5</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jun\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>6</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jul\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>7</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Aug\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>8</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sep\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>9</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Oct\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>10</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Nov\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>11</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Dec\"</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "9.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The CreateImportBinding concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>M</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), and <var>N2</var> (a String). It creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-integerindexedelementget": {"num": "10.4.5.10", "title": "#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )", "html": "<emu-clause id=\"sec-integerindexedelementget\" aoid=\"IntegerIndexedElementGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementget\">#sec-integerindexedelementget</span> IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementGet takes arguments <var>O</var> and <var>index</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binaryxor": {"num": "6.1.6.2.18", "title": "#sec-binaryxor BinaryXor ( x, y )", "html": "<emu-clause id=\"sec-binaryxor\" aoid=\"BinaryXor\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryxor\">#sec-binaryxor</span> BinaryXor ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryXor takes arguments <var>x</var> and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is 0 or 1.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is 0 or 1.</li><li>If <var>x</var> is 1 and <var>y</var> is 0, return 1.</li><li>Else if <var>x</var> is 0 and <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-unicodematchpropertyvalue-p-v": {"num": "22.2.2.8.4", "title": "#sec-runtime-semantics-unicodematchpropertyvalue-p-v UnicodeMatchPropertyValue ( p, v )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\" aoid=\"UnicodeMatchPropertyValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\">#sec-runtime-semantics-unicodematchpropertyvalue-p-v</span> UnicodeMatchPropertyValue ( <var>p</var>, <var>v</var> )</h1>\n          <p>The abstract operation UnicodeMatchPropertyValue takes arguments <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points) and <var>v</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a canonical, unaliased Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> listed in the &#8220;Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>v</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a property value or property value alias for Unicode property <var>p</var> listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> or <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>.</li><li>Let <var>value</var> be the canonical property value of <var>v</var> as given in the &#8220;Canonical property value&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>value</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property value names and aliases listed in <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> and <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>. To ensure interoperability, implementations must not support any other property value names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Xpeo</code> and <code>Old_Persian</code> are valid <code>Script_Extensions</code> values, but <code>xpeo</code> and <code>Old Persian</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This algorithm differs from <a href=\"https://unicode.org/reports/tr44/#Matching_Symbolic\">the matching rules for symbolic values listed in UAX44</a>: case, <emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\">white space</a></emu-xref>, U+002D (HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the <code>Is</code> prefix is not supported.</p>\n          </div></emu-note>\n          <emu-import href=\"table-unicode-general-category-values.html\"><emu-table id=\"table-unicode-general-category-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</span>: Value aliases and canonical values for the Unicode property <a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Cased_Letter</code></td>\n      <td rowspan=\"2\"><code>Cased_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>LC</code></td>\n    </tr>\n    <tr>\n      <td><code>Close_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Close_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pe</code></td>\n    </tr>\n    <tr>\n      <td><code>Connector_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Connector_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pc</code></td>\n    </tr>\n    <tr>\n      <td><code>Control</code></td>\n      <td rowspan=\"3\"><code>Control</code></td>\n    </tr>\n    <tr>\n      <td><code>Cc</code></td>\n    </tr>\n    <tr>\n      <td><code>cntrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Currency_Symbol</code></td>\n      <td rowspan=\"2\"><code>Currency_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Dash_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pd</code></td>\n    </tr>\n    <tr>\n      <td><code>Decimal_Number</code></td>\n      <td rowspan=\"3\"><code>Decimal_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nd</code></td>\n    </tr>\n    <tr>\n      <td><code>digit</code></td>\n    </tr>\n    <tr>\n      <td><code>Enclosing_Mark</code></td>\n      <td rowspan=\"2\"><code>Enclosing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Me</code></td>\n    </tr>\n    <tr>\n      <td><code>Final_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Final_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pf</code></td>\n    </tr>\n    <tr>\n      <td><code>Format</code></td>\n      <td rowspan=\"2\"><code>Format</code></td>\n    </tr>\n    <tr>\n      <td><code>Cf</code></td>\n    </tr>\n    <tr>\n      <td><code>Initial_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Initial_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pi</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter</code></td>\n      <td rowspan=\"2\"><code>Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter_Number</code></td>\n      <td rowspan=\"2\"><code>Letter_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nl</code></td>\n    </tr>\n    <tr>\n      <td><code>Line_Separator</code></td>\n      <td rowspan=\"2\"><code>Line_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zl</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Lowercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Ll</code></td>\n    </tr>\n    <tr>\n      <td><code>Mark</code></td>\n      <td rowspan=\"3\"><code>Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>M</code></td>\n    </tr>\n    <tr>\n      <td><code>Combining_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Math_Symbol</code></td>\n      <td rowspan=\"2\"><code>Math_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Letter</code></td>\n      <td rowspan=\"2\"><code>Modifier_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Symbol</code></td>\n      <td rowspan=\"2\"><code>Modifier_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sk</code></td>\n    </tr>\n    <tr>\n      <td><code>Nonspacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Nonspacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mn</code></td>\n    </tr>\n    <tr>\n      <td><code>Number</code></td>\n      <td rowspan=\"2\"><code>Number</code></td>\n    </tr>\n    <tr>\n      <td><code>N</code></td>\n    </tr>\n    <tr>\n      <td><code>Open_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Open_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Ps</code></td>\n    </tr>\n    <tr>\n      <td><code>Other</code></td>\n      <td rowspan=\"2\"><code>Other</code></td>\n    </tr>\n    <tr>\n      <td><code>C</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Letter</code></td>\n      <td rowspan=\"2\"><code>Other_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lo</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Number</code></td>\n      <td rowspan=\"2\"><code>Other_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>No</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Other_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Po</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Symbol</code></td>\n      <td rowspan=\"2\"><code>Other_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>So</code></td>\n    </tr>\n    <tr>\n      <td><code>Paragraph_Separator</code></td>\n      <td rowspan=\"2\"><code>Paragraph_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zp</code></td>\n    </tr>\n    <tr>\n      <td><code>Private_Use</code></td>\n      <td rowspan=\"2\"><code>Private_Use</code></td>\n    </tr>\n    <tr>\n      <td><code>Co</code></td>\n    </tr>\n    <tr>\n      <td><code>Punctuation</code></td>\n      <td rowspan=\"3\"><code>Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n    </tr>\n    <tr>\n      <td><code>punct</code></td>\n    </tr>\n    <tr>\n      <td><code>Separator</code></td>\n      <td rowspan=\"2\"><code>Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Z</code></td>\n    </tr>\n    <tr>\n      <td><code>Space_Separator</code></td>\n      <td rowspan=\"2\"><code>Space_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zs</code></td>\n    </tr>\n    <tr>\n      <td><code>Spacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Spacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mc</code></td>\n    </tr>\n    <tr>\n      <td><code>Surrogate</code></td>\n      <td rowspan=\"2\"><code>Surrogate</code></td>\n    </tr>\n    <tr>\n      <td><code>Cs</code></td>\n    </tr>\n    <tr>\n      <td><code>Symbol</code></td>\n      <td rowspan=\"2\"><code>Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>S</code></td>\n    </tr>\n    <tr>\n      <td><code>Titlecase_Letter</code></td>\n      <td rowspan=\"2\"><code>Titlecase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lt</code></td>\n    </tr>\n    <tr>\n      <td><code>Unassigned</code></td>\n      <td rowspan=\"2\"><code>Unassigned</code></td>\n    </tr>\n    <tr>\n      <td><code>Cn</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Uppercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lu</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-unicode-script-values.html\"><emu-table id=\"table-unicode-script-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</span>: Value aliases and canonical values for the Unicode properties <a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a> and <a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Adlam</code></td>\n      <td rowspan=\"2\"><code>Adlam</code></td>\n    </tr>\n    <tr>\n      <td><code>Adlm</code></td>\n    </tr>\n    <tr>\n      <td><code>Ahom</code></td>\n      <td><code>Ahom</code></td>\n    </tr>\n    <tr>\n      <td><code>Anatolian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Anatolian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Hluw</code></td>\n    </tr>\n    <tr>\n      <td><code>Arabic</code></td>\n      <td rowspan=\"2\"><code>Arabic</code></td>\n    </tr>\n    <tr>\n      <td><code>Arab</code></td>\n    </tr>\n    <tr>\n      <td><code>Armenian</code></td>\n      <td rowspan=\"2\"><code>Armenian</code></td>\n    </tr>\n    <tr>\n      <td><code>Armn</code></td>\n    </tr>\n    <tr>\n      <td><code>Avestan</code></td>\n      <td rowspan=\"2\"><code>Avestan</code></td>\n    </tr>\n    <tr>\n      <td><code>Avst</code></td>\n    </tr>\n    <tr>\n      <td><code>Balinese</code></td>\n      <td rowspan=\"2\"><code>Balinese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bali</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamum</code></td>\n      <td rowspan=\"2\"><code>Bamum</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamu</code></td>\n    </tr>\n    <tr>\n      <td><code>Bassa_Vah</code></td>\n      <td rowspan=\"2\"><code>Bassa_Vah</code></td>\n    </tr>\n    <tr>\n      <td><code>Bass</code></td>\n    </tr>\n    <tr>\n      <td><code>Batak</code></td>\n      <td rowspan=\"2\"><code>Batak</code></td>\n    </tr>\n    <tr>\n      <td><code>Batk</code></td>\n    </tr>\n    <tr>\n      <td><code>Bengali</code></td>\n      <td rowspan=\"2\"><code>Bengali</code></td>\n    </tr>\n    <tr>\n      <td><code>Beng</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhaiksuki</code></td>\n      <td rowspan=\"2\"><code>Bhaiksuki</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhks</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopomofo</code></td>\n      <td rowspan=\"2\"><code>Bopomofo</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopo</code></td>\n    </tr>\n    <tr>\n      <td><code>Brahmi</code></td>\n      <td rowspan=\"2\"><code>Brahmi</code></td>\n    </tr>\n    <tr>\n      <td><code>Brah</code></td>\n    </tr>\n    <tr>\n      <td><code>Braille</code></td>\n      <td rowspan=\"2\"><code>Braille</code></td>\n    </tr>\n    <tr>\n      <td><code>Brai</code></td>\n    </tr>\n    <tr>\n      <td><code>Buginese</code></td>\n      <td rowspan=\"2\"><code>Buginese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bugi</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhid</code></td>\n      <td rowspan=\"2\"><code>Buhid</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhd</code></td>\n    </tr>\n    <tr>\n      <td><code>Canadian_Aboriginal</code></td>\n      <td rowspan=\"2\"><code>Canadian_Aboriginal</code></td>\n    </tr>\n    <tr>\n      <td><code>Cans</code></td>\n    </tr>\n    <tr>\n      <td><code>Carian</code></td>\n      <td rowspan=\"2\"><code>Carian</code></td>\n    </tr>\n    <tr>\n      <td><code>Cari</code></td>\n    </tr>\n    <tr>\n      <td><code>Caucasian_Albanian</code></td>\n      <td rowspan=\"2\"><code>Caucasian_Albanian</code></td>\n    </tr>\n    <tr>\n      <td><code>Aghb</code></td>\n    </tr>\n    <tr>\n      <td><code>Chakma</code></td>\n      <td rowspan=\"2\"><code>Chakma</code></td>\n    </tr>\n    <tr>\n      <td><code>Cakm</code></td>\n    </tr>\n    <tr>\n      <td><code>Cham</code></td>\n      <td><code>Cham</code></td>\n    </tr>\n    <tr>\n      <td><code>Chorasmian</code></td>\n      <td rowspan=\"2\"><code>Chorasmian</code></td>\n    </tr>\n    <tr>\n      <td><code>Chrs</code></td>\n    </tr>\n    <tr>\n      <td><code>Cherokee</code></td>\n      <td rowspan=\"2\"><code>Cherokee</code></td>\n    </tr>\n    <tr>\n      <td><code>Cher</code></td>\n    </tr>\n    <tr>\n      <td><code>Common</code></td>\n      <td rowspan=\"2\"><code>Common</code></td>\n    </tr>\n    <tr>\n      <td><code>Zyyy</code></td>\n    </tr>\n    <tr>\n      <td><code>Coptic</code></td>\n      <td rowspan=\"3\"><code>Coptic</code></td>\n    </tr>\n    <tr>\n      <td><code>Copt</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaac</code></td>\n    </tr>\n    <tr>\n      <td><code>Cuneiform</code></td>\n      <td rowspan=\"2\"><code>Cuneiform</code></td>\n    </tr>\n    <tr>\n      <td><code>Xsux</code></td>\n    </tr>\n    <tr>\n      <td><code>Cypriot</code></td>\n      <td rowspan=\"2\"><code>Cypriot</code></td>\n    </tr>\n    <tr>\n      <td><code>Cprt</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrillic</code></td>\n      <td rowspan=\"2\"><code>Cyrillic</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Deseret</code></td>\n      <td rowspan=\"2\"><code>Deseret</code></td>\n    </tr>\n    <tr>\n      <td><code>Dsrt</code></td>\n    </tr>\n    <tr>\n      <td><code>Devanagari</code></td>\n      <td rowspan=\"2\"><code>Devanagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Deva</code></td>\n    </tr>\n    <tr>\n      <td><code>Dives_Akuru</code></td>\n      <td rowspan=\"2\"><code>Dives_Akuru</code></td>\n    </tr>\n    <tr>\n      <td><code>Diak</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogra</code></td>\n      <td rowspan=\"2\"><code>Dogra</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogr</code></td>\n    </tr>\n    <tr>\n      <td><code>Duployan</code></td>\n      <td rowspan=\"2\"><code>Duployan</code></td>\n    </tr>\n    <tr>\n      <td><code>Dupl</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyptian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Egyptian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyp</code></td>\n    </tr>\n    <tr>\n      <td><code>Elbasan</code></td>\n      <td rowspan=\"2\"><code>Elbasan</code></td>\n    </tr>\n    <tr>\n      <td><code>Elba</code></td>\n    </tr>\n    <tr>\n      <td><code>Elymaic</code></td>\n      <td rowspan=\"2\"><code>Elymaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Elym</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethiopic</code></td>\n      <td rowspan=\"2\"><code>Ethiopic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethi</code></td>\n    </tr>\n    <tr>\n      <td><code>Georgian</code></td>\n      <td rowspan=\"2\"><code>Georgian</code></td>\n    </tr>\n    <tr>\n      <td><code>Geor</code></td>\n    </tr>\n    <tr>\n      <td><code>Glagolitic</code></td>\n      <td rowspan=\"2\"><code>Glagolitic</code></td>\n    </tr>\n    <tr>\n      <td><code>Glag</code></td>\n    </tr>\n    <tr>\n      <td><code>Gothic</code></td>\n      <td rowspan=\"2\"><code>Gothic</code></td>\n    </tr>\n    <tr>\n      <td><code>Goth</code></td>\n    </tr>\n    <tr>\n      <td><code>Grantha</code></td>\n      <td rowspan=\"2\"><code>Grantha</code></td>\n    </tr>\n    <tr>\n      <td><code>Gran</code></td>\n    </tr>\n    <tr>\n      <td><code>Greek</code></td>\n      <td rowspan=\"2\"><code>Greek</code></td>\n    </tr>\n    <tr>\n      <td><code>Grek</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujarati</code></td>\n      <td rowspan=\"2\"><code>Gujarati</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujr</code></td>\n    </tr>\n    <tr>\n      <td><code>Gunjala_Gondi</code></td>\n      <td rowspan=\"2\"><code>Gunjala_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gong</code></td>\n    </tr>\n    <tr>\n      <td><code>Gurmukhi</code></td>\n      <td rowspan=\"2\"><code>Gurmukhi</code></td>\n    </tr>\n    <tr>\n      <td><code>Guru</code></td>\n    </tr>\n    <tr>\n      <td><code>Han</code></td>\n      <td rowspan=\"2\"><code>Han</code></td>\n    </tr>\n    <tr>\n      <td><code>Hani</code></td>\n    </tr>\n    <tr>\n      <td><code>Hangul</code></td>\n      <td rowspan=\"2\"><code>Hangul</code></td>\n    </tr>\n    <tr>\n      <td><code>Hang</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanifi_Rohingya</code></td>\n      <td rowspan=\"2\"><code>Hanifi_Rohingya</code></td>\n    </tr>\n    <tr>\n      <td><code>Rohg</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanunoo</code></td>\n      <td rowspan=\"2\"><code>Hanunoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Hano</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatran</code></td>\n      <td rowspan=\"2\"><code>Hatran</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebrew</code></td>\n      <td rowspan=\"2\"><code>Hebrew</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hiragana</code></td>\n      <td rowspan=\"2\"><code>Hiragana</code></td>\n    </tr>\n    <tr>\n      <td><code>Hira</code></td>\n    </tr>\n    <tr>\n      <td><code>Imperial_Aramaic</code></td>\n      <td rowspan=\"2\"><code>Imperial_Aramaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Armi</code></td>\n    </tr>\n    <tr>\n      <td><code>Inherited</code></td>\n      <td rowspan=\"3\"><code>Inherited</code></td>\n    </tr>\n    <tr>\n      <td><code>Zinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaai</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phli</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Parthian</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Parthian</code></td>\n    </tr>\n    <tr>\n      <td><code>Prti</code></td>\n    </tr>\n    <tr>\n      <td><code>Javanese</code></td>\n      <td rowspan=\"2\"><code>Javanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Java</code></td>\n    </tr>\n    <tr>\n      <td><code>Kaithi</code></td>\n      <td rowspan=\"2\"><code>Kaithi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kannada</code></td>\n      <td rowspan=\"2\"><code>Kannada</code></td>\n    </tr>\n    <tr>\n      <td><code>Knda</code></td>\n    </tr>\n    <tr>\n      <td><code>Katakana</code></td>\n      <td rowspan=\"2\"><code>Katakana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kayah_Li</code></td>\n      <td rowspan=\"2\"><code>Kayah_Li</code></td>\n    </tr>\n    <tr>\n      <td><code>Kali</code></td>\n    </tr>\n    <tr>\n      <td><code>Kharoshthi</code></td>\n      <td rowspan=\"2\"><code>Kharoshthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Khar</code></td>\n    </tr>\n    <tr>\n      <td><code>Khitan_Small_Script</code></td>\n      <td rowspan=\"2\"><code>Khitan_Small_Script</code></td>\n    </tr>\n    <tr>\n      <td><code>Kits</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmer</code></td>\n      <td rowspan=\"2\"><code>Khmer</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmr</code></td>\n    </tr>\n    <tr>\n      <td><code>Khojki</code></td>\n      <td rowspan=\"2\"><code>Khojki</code></td>\n    </tr>\n    <tr>\n      <td><code>Khoj</code></td>\n    </tr>\n    <tr>\n      <td><code>Khudawadi</code></td>\n      <td rowspan=\"2\"><code>Khudawadi</code></td>\n    </tr>\n    <tr>\n      <td><code>Sind</code></td>\n    </tr>\n    <tr>\n      <td><code>Lao</code></td>\n      <td rowspan=\"2\"><code>Lao</code></td>\n    </tr>\n    <tr>\n      <td><code>Laoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Latin</code></td>\n      <td rowspan=\"2\"><code>Latin</code></td>\n    </tr>\n    <tr>\n      <td><code>Latn</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepcha</code></td>\n      <td rowspan=\"2\"><code>Lepcha</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepc</code></td>\n    </tr>\n    <tr>\n      <td><code>Limbu</code></td>\n      <td rowspan=\"2\"><code>Limbu</code></td>\n    </tr>\n    <tr>\n      <td><code>Limb</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_A</code></td>\n      <td rowspan=\"2\"><code>Linear_A</code></td>\n    </tr>\n    <tr>\n      <td><code>Lina</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_B</code></td>\n      <td rowspan=\"2\"><code>Linear_B</code></td>\n    </tr>\n    <tr>\n      <td><code>Linb</code></td>\n    </tr>\n    <tr>\n      <td><code>Lisu</code></td>\n      <td><code>Lisu</code></td>\n    </tr>\n    <tr>\n      <td><code>Lycian</code></td>\n      <td rowspan=\"2\"><code>Lycian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lyci</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydian</code></td>\n      <td rowspan=\"2\"><code>Lydian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahajani</code></td>\n      <td rowspan=\"2\"><code>Mahajani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahj</code></td>\n    </tr>\n    <tr>\n      <td><code>Makasar</code></td>\n      <td rowspan=\"2\"><code>Makasar</code></td>\n    </tr>\n    <tr>\n      <td><code>Maka</code></td>\n    </tr>\n    <tr>\n      <td><code>Malayalam</code></td>\n      <td rowspan=\"2\"><code>Malayalam</code></td>\n    </tr>\n    <tr>\n      <td><code>Mlym</code></td>\n    </tr>\n    <tr>\n      <td><code>Mandaic</code></td>\n      <td rowspan=\"2\"><code>Mandaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Mand</code></td>\n    </tr>\n    <tr>\n      <td><code>Manichaean</code></td>\n      <td rowspan=\"2\"><code>Manichaean</code></td>\n    </tr>\n    <tr>\n      <td><code>Mani</code></td>\n    </tr>\n    <tr>\n      <td><code>Marchen</code></td>\n      <td rowspan=\"2\"><code>Marchen</code></td>\n    </tr>\n    <tr>\n      <td><code>Marc</code></td>\n    </tr>\n    <tr>\n      <td><code>Medefaidrin</code></td>\n      <td rowspan=\"2\"><code>Medefaidrin</code></td>\n    </tr>\n    <tr>\n      <td><code>Medf</code></td>\n    </tr>\n    <tr>\n      <td><code>Masaram_Gondi</code></td>\n      <td rowspan=\"2\"><code>Masaram_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gonm</code></td>\n    </tr>\n    <tr>\n      <td><code>Meetei_Mayek</code></td>\n      <td rowspan=\"2\"><code>Meetei_Mayek</code></td>\n    </tr>\n    <tr>\n      <td><code>Mtei</code></td>\n    </tr>\n    <tr>\n      <td><code>Mende_Kikakui</code></td>\n      <td rowspan=\"2\"><code>Mende_Kikakui</code></td>\n    </tr>\n    <tr>\n      <td><code>Mend</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Cursive</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Cursive</code></td>\n    </tr>\n    <tr>\n      <td><code>Merc</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Mero</code></td>\n    </tr>\n    <tr>\n      <td><code>Miao</code></td>\n      <td rowspan=\"2\"><code>Miao</code></td>\n    </tr>\n    <tr>\n      <td><code>Plrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Modi</code></td>\n      <td><code>Modi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mongolian</code></td>\n      <td rowspan=\"2\"><code>Mongolian</code></td>\n    </tr>\n    <tr>\n      <td><code>Mong</code></td>\n    </tr>\n    <tr>\n      <td><code>Mro</code></td>\n      <td rowspan=\"2\"><code>Mro</code></td>\n    </tr>\n    <tr>\n      <td><code>Mroo</code></td>\n    </tr>\n    <tr>\n      <td><code>Multani</code></td>\n      <td rowspan=\"2\"><code>Multani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mult</code></td>\n    </tr>\n    <tr>\n      <td><code>Myanmar</code></td>\n      <td rowspan=\"2\"><code>Myanmar</code></td>\n    </tr>\n    <tr>\n      <td><code>Mymr</code></td>\n    </tr>\n    <tr>\n      <td><code>Nabataean</code></td>\n      <td rowspan=\"2\"><code>Nabataean</code></td>\n    </tr>\n    <tr>\n      <td><code>Nbat</code></td>\n    </tr>\n    <tr>\n      <td><code>Nandinagari</code></td>\n      <td rowspan=\"2\"><code>Nandinagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Nand</code></td>\n    </tr>\n    <tr>\n      <td><code>New_Tai_Lue</code></td>\n      <td rowspan=\"2\"><code>New_Tai_Lue</code></td>\n    </tr>\n    <tr>\n      <td><code>Talu</code></td>\n    </tr>\n    <tr>\n      <td><code>Newa</code></td>\n      <td><code>Newa</code></td>\n    </tr>\n    <tr>\n      <td><code>Nko</code></td>\n      <td rowspan=\"2\"><code>Nko</code></td>\n    </tr>\n    <tr>\n      <td><code>Nkoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Nushu</code></td>\n      <td rowspan=\"2\"><code>Nushu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nshu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nyiakeng_Puachue_Hmong</code></td>\n      <td rowspan=\"2\"><code>Nyiakeng_Puachue_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmnp</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogham</code></td>\n      <td rowspan=\"2\"><code>Ogham</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogam</code></td>\n    </tr>\n    <tr>\n      <td><code>Ol_Chiki</code></td>\n      <td rowspan=\"2\"><code>Ol_Chiki</code></td>\n    </tr>\n    <tr>\n      <td><code>Olck</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Hungarian</code></td>\n      <td rowspan=\"2\"><code>Old_Hungarian</code></td>\n    </tr>\n    <tr>\n      <td><code>Hung</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Italic</code></td>\n      <td rowspan=\"2\"><code>Old_Italic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ital</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_North_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_North_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Narb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Permic</code></td>\n      <td rowspan=\"2\"><code>Old_Permic</code></td>\n    </tr>\n    <tr>\n      <td><code>Perm</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Persian</code></td>\n      <td rowspan=\"2\"><code>Old_Persian</code></td>\n    </tr>\n    <tr>\n      <td><code>Xpeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Sogdian</code></td>\n      <td rowspan=\"2\"><code>Old_Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_South_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_South_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sarb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Turkic</code></td>\n      <td rowspan=\"2\"><code>Old_Turkic</code></td>\n    </tr>\n    <tr>\n      <td><code>Orkh</code></td>\n    </tr>\n    <tr>\n      <td><code>Oriya</code></td>\n      <td rowspan=\"2\"><code>Oriya</code></td>\n    </tr>\n    <tr>\n      <td><code>Orya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osage</code></td>\n      <td rowspan=\"2\"><code>Osage</code></td>\n    </tr>\n    <tr>\n      <td><code>Osge</code></td>\n    </tr>\n    <tr>\n      <td><code>Osmanya</code></td>\n      <td rowspan=\"2\"><code>Osmanya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osma</code></td>\n    </tr>\n    <tr>\n      <td><code>Pahawh_Hmong</code></td>\n      <td rowspan=\"2\"><code>Pahawh_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmng</code></td>\n    </tr>\n    <tr>\n      <td><code>Palmyrene</code></td>\n      <td rowspan=\"2\"><code>Palmyrene</code></td>\n    </tr>\n    <tr>\n      <td><code>Palm</code></td>\n    </tr>\n    <tr>\n      <td><code>Pau_Cin_Hau</code></td>\n      <td rowspan=\"2\"><code>Pau_Cin_Hau</code></td>\n    </tr>\n    <tr>\n      <td><code>Pauc</code></td>\n    </tr>\n    <tr>\n      <td><code>Phags_Pa</code></td>\n      <td rowspan=\"2\"><code>Phags_Pa</code></td>\n    </tr>\n    <tr>\n      <td><code>Phag</code></td>\n    </tr>\n    <tr>\n      <td><code>Phoenician</code></td>\n      <td rowspan=\"2\"><code>Phoenician</code></td>\n    </tr>\n    <tr>\n      <td><code>Phnx</code></td>\n    </tr>\n    <tr>\n      <td><code>Psalter_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Psalter_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phlp</code></td>\n    </tr>\n    <tr>\n      <td><code>Rejang</code></td>\n      <td rowspan=\"2\"><code>Rejang</code></td>\n    </tr>\n    <tr>\n      <td><code>Rjng</code></td>\n    </tr>\n    <tr>\n      <td><code>Runic</code></td>\n      <td rowspan=\"2\"><code>Runic</code></td>\n    </tr>\n    <tr>\n      <td><code>Runr</code></td>\n    </tr>\n    <tr>\n      <td><code>Samaritan</code></td>\n      <td rowspan=\"2\"><code>Samaritan</code></td>\n    </tr>\n    <tr>\n      <td><code>Samr</code></td>\n    </tr>\n    <tr>\n      <td><code>Saurashtra</code></td>\n      <td rowspan=\"2\"><code>Saurashtra</code></td>\n    </tr>\n    <tr>\n      <td><code>Saur</code></td>\n    </tr>\n    <tr>\n      <td><code>Sharada</code></td>\n      <td rowspan=\"2\"><code>Sharada</code></td>\n    </tr>\n    <tr>\n      <td><code>Shrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Shavian</code></td>\n      <td rowspan=\"2\"><code>Shavian</code></td>\n    </tr>\n    <tr>\n      <td><code>Shaw</code></td>\n    </tr>\n    <tr>\n      <td><code>Siddham</code></td>\n      <td rowspan=\"2\"><code>Siddham</code></td>\n    </tr>\n    <tr>\n      <td><code>Sidd</code></td>\n    </tr>\n    <tr>\n      <td><code>SignWriting</code></td>\n      <td rowspan=\"2\"><code>SignWriting</code></td>\n    </tr>\n    <tr>\n      <td><code>Sgnw</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinhala</code></td>\n      <td rowspan=\"2\"><code>Sinhala</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogdian</code></td>\n      <td rowspan=\"2\"><code>Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogd</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora_Sompeng</code></td>\n      <td rowspan=\"2\"><code>Sora_Sompeng</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyombo</code></td>\n      <td rowspan=\"2\"><code>Soyombo</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyo</code></td>\n    </tr>\n    <tr>\n      <td><code>Sundanese</code></td>\n      <td rowspan=\"2\"><code>Sundanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Sund</code></td>\n    </tr>\n    <tr>\n      <td><code>Syloti_Nagri</code></td>\n      <td rowspan=\"2\"><code>Syloti_Nagri</code></td>\n    </tr>\n    <tr>\n      <td><code>Sylo</code></td>\n    </tr>\n    <tr>\n      <td><code>Syriac</code></td>\n      <td rowspan=\"2\"><code>Syriac</code></td>\n    </tr>\n    <tr>\n      <td><code>Syrc</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagalog</code></td>\n      <td rowspan=\"2\"><code>Tagalog</code></td>\n    </tr>\n    <tr>\n      <td><code>Tglg</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagbanwa</code></td>\n      <td rowspan=\"2\"><code>Tagbanwa</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagb</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Le</code></td>\n      <td rowspan=\"2\"><code>Tai_Le</code></td>\n    </tr>\n    <tr>\n      <td><code>Tale</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Tham</code></td>\n      <td rowspan=\"2\"><code>Tai_Tham</code></td>\n    </tr>\n    <tr>\n      <td><code>Lana</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Viet</code></td>\n      <td rowspan=\"2\"><code>Tai_Viet</code></td>\n    </tr>\n    <tr>\n      <td><code>Tavt</code></td>\n    </tr>\n    <tr>\n      <td><code>Takri</code></td>\n      <td rowspan=\"2\"><code>Takri</code></td>\n    </tr>\n    <tr>\n      <td><code>Takr</code></td>\n    </tr>\n    <tr>\n      <td><code>Tamil</code></td>\n      <td rowspan=\"2\"><code>Tamil</code></td>\n    </tr>\n    <tr>\n      <td><code>Taml</code></td>\n    </tr>\n    <tr>\n      <td><code>Tangut</code></td>\n      <td rowspan=\"2\"><code>Tangut</code></td>\n    </tr>\n    <tr>\n      <td><code>Tang</code></td>\n    </tr>\n    <tr>\n      <td><code>Telugu</code></td>\n      <td rowspan=\"2\"><code>Telugu</code></td>\n    </tr>\n    <tr>\n      <td><code>Telu</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaana</code></td>\n      <td rowspan=\"2\"><code>Thaana</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaa</code></td>\n    </tr>\n    <tr>\n      <td><code>Thai</code></td>\n      <td><code>Thai</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibetan</code></td>\n      <td rowspan=\"2\"><code>Tibetan</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibt</code></td>\n    </tr>\n    <tr>\n      <td><code>Tifinagh</code></td>\n      <td rowspan=\"2\"><code>Tifinagh</code></td>\n    </tr>\n    <tr>\n      <td><code>Tfng</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirhuta</code></td>\n      <td rowspan=\"2\"><code>Tirhuta</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirh</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugaritic</code></td>\n      <td rowspan=\"2\"><code>Ugaritic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugar</code></td>\n    </tr>\n    <tr>\n      <td><code>Vai</code></td>\n      <td rowspan=\"2\"><code>Vai</code></td>\n    </tr>\n    <tr>\n      <td><code>Vaii</code></td>\n    </tr>\n    <tr>\n      <td><code>Wancho</code></td>\n      <td rowspan=\"2\"><code>Wancho</code></td>\n    </tr>\n    <tr>\n      <td><code>Wcho</code></td>\n    </tr>\n    <tr>\n      <td><code>Warang_Citi</code></td>\n      <td rowspan=\"2\"><code>Warang_Citi</code></td>\n    </tr>\n    <tr>\n      <td><code>Wara</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezidi</code></td>\n      <td rowspan=\"2\"><code>Yezidi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yi</code></td>\n      <td rowspan=\"2\"><code>Yi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yiii</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanabazar_Square</code></td>\n      <td rowspan=\"2\"><code>Zanabazar_Square</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanb</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n      "}, "sec-symboldescriptivestring": {"num": "20.4.3.3.1", "title": "#sec-symboldescriptivestring SymbolDescriptiveString ( sym )", "html": "<emu-clause id=\"sec-symboldescriptivestring\" aoid=\"SymbolDescriptiveString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symboldescriptivestring\">#sec-symboldescriptivestring</span> SymbolDescriptiveString ( <var>sym</var> )</h1>\n          <p>The abstract operation SymbolDescriptiveString takes argument <var>sym</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>sym</var>) is Symbol.</li><li>Let <var>desc</var> be <var>sym</var>'s [[Description]] value.</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, set <var>desc</var> to the empty String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>desc</var>) is String.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"Symbol(\"</emu-val>, <var>desc</var>, and <emu-val>\")\"</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-makebasicobject": {"num": "7.3.1", "title": "#sec-makebasicobject MakeBasicObject ( internalSlotsList )", "html": "<emu-clause id=\"sec-makebasicobject\" aoid=\"MakeBasicObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makebasicobject\">#sec-makebasicobject</span> MakeBasicObject ( <var>internalSlotsList</var> )</h1>\n      <p>The abstract operation MakeBasicObject takes argument <var>internalSlotsList</var>. It is the source of all ECMAScript objects that are created algorithmically, including both ordinary objects and exotic objects. It factors out common steps used in creating all objects, and centralizes object creation. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>internalSlotsList</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of internal slot names.</li><li>Let <var>obj</var> be a newly created object with an internal slot for each name in <var>internalSlotsList</var>.</li><li>Set <var>obj</var>'s essential internal methods to the default <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the caller will not be overriding both <var>obj</var>'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then <var>internalSlotsList</var> contains [[Prototype]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the caller will not be overriding all of <var>obj</var>'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then <var>internalSlotsList</var> contains [[Extensible]].</li><li>If <var>internalSlotsList</var> contains [[Extensible]], set <var>obj</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Within this specification, exotic objects are created in <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> such as <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref> and <emu-xref aoid=\"BoundFunctionCreate\"><a href=\"#sec-boundfunctioncreate\">BoundFunctionCreate</a></emu-xref> by first calling MakeBasicObject to obtain a basic, foundational object, and then overriding some or all of that object's internal methods. In order to encapsulate <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> creation, the object's essential internal methods are never modified outside those operations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isvalidregularexpressionliteral": {"num": "13.2.7.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral takes argument <var>literal</var>. It determines if its argument is a valid regular expression literal. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>literal</var> is a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>patternText</var> be <emu-xref aoid=\"BodyText\"><a href=\"#sec-static-semantics-bodytext\">BodyText</a></emu-xref> of <var>literal</var>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains <code>u</code>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>stringValue</var> be <emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>patternText</var>).</li><li>Set <var>patternText</var> to the sequence of code points resulting from interpreting each of the 16-bit elements of <var>stringValue</var> as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> and <var>S</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>R</var> is an initialized RegExp instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>lastIndex</var> to <var>e</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, in ascending order, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>captureI</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-integer-indexed-exotic-objects-hasproperty-p": {"num": "10.4.5.2", "title": "#sec-integer-indexed-exotic-objects-hasproperty-p [[HasProperty]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-hasproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-hasproperty-p\">#sec-integer-indexed-exotic-objects-hasproperty-p</span> [[HasProperty]] ( <var>P</var> )</h1>\n        <p>The [[HasProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasProperty\"><a href=\"#sec-ordinaryhasproperty\">OrdinaryHasProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "10.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-delete-p": {"num": "10.5.10", "title": "#sec-proxy-object-internal-methods-and-internal-slots-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-delete-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-delete-p\">#sec-proxy-object-internal-methods-and-internal-slots-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n      <p>The [[Delete]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"deleteProperty\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Delete]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[Delete]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be reported as deleted, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as deleted, if it exists as an own property of the target object and the target object is non-extensible.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isunresolvablereference": {"num": "6.2.4.2", "title": "#sec-isunresolvablereference IsUnresolvableReference ( V )", "html": "<emu-clause id=\"sec-isunresolvablereference\" oldids=\"ao-isunresolvablereference\" aoid=\"IsUnresolvableReference\"><span id=\"ao-isunresolvablereference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunresolvablereference\">#sec-isunresolvablereference</span> IsUnresolvableReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsUnresolvableReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>V</var> is a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</li><li>If <var>V</var>.[[Base]] is <emu-const>unresolvable</emu-const>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createmethodproperty": {"num": "7.3.6", "title": "#sec-createmethodproperty CreateMethodProperty ( O, P, V )", "html": "<emu-clause id=\"sec-createmethodproperty\" aoid=\"CreateMethodProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmethodproperty\">#sec-createmethodproperty</span> CreateMethodProperty ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateMethodProperty takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>newDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for built-in methods and methods defined using class declaration syntax. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-arraysetlength": {"num": "10.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array object) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li id=\"step-arraysetlength-newlen\">Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li id=\"step-arraysetlength-numberlen\">Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>newLen</var>, <var>numberLen</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>succeeded</var> to !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps <emu-xref href=\"#step-arraysetlength-newlen\"><a href=\"#step-arraysetlength-newlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-newlen\">#step-arraysetlength-newlen</a></emu-xref> and <emu-xref href=\"#step-arraysetlength-numberlen\"><a href=\"#step-arraysetlength-numberlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-numberlen\">#step-arraysetlength-numberlen</a></emu-xref>, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-evaluatenew": {"num": "13.3.5.1.1", "title": "#sec-evaluatenew EvaluateNew ( constructExpr, arguments )", "html": "<emu-clause id=\"sec-evaluatenew\" aoid=\"EvaluateNew\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatenew\">#sec-evaluatenew</span> EvaluateNew ( <var>constructExpr</var>, <var>arguments</var> )</h1>\n          <p>The abstract operation EvaluateNew takes arguments <var>constructExpr</var> and <var>arguments</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructExpr</var> is either a <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> or a <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is either <emu-const>empty</emu-const> or an <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>.</li><li>Let <var>ref</var> be the result of evaluating <var>constructExpr</var>.</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>arguments</var> is <emu-const>empty</emu-const>, let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else,<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li></ol></li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 33", "table-internal-slots-of-bound-function-exotic-objects": "Table 34", "table-internal-slots-of-module-namespace-exotic-objects": "Table 35", "sec-todatestring-day-names": "Table 55", "sec-todatestring-month-names": "Table 56", "table-replacement-text-symbol-substitutions": "Table 57", "table-nonbinary-unicode-properties": "Table 59", "table-binary-unicode-properties": "Table 60", "table-unicode-general-category-values": "Table 61", "table-unicode-script-values": "Table 62", "table-the-typedarray-constructors": "Table 63", "table-async-iterator-required": "Table 69", "table-async-iterator-optional": "Table 70"}}, "to": {"secList": ["sec-initializetypedarrayfromarraylike", "sec-ispropertyreference", "sec-flattenintoarray", "sec-createforiniterator", "sec-isvalidintegerindex", "sec-isdetachedbuffer", "sec-createarrayiterator", "sec-ordinarytoprimitive", "sec-getsubstitution", "sec-%asyncfromsynciteratorprototype%.next", "sec-createiterresultobject", "sec-parsemodule", "sec-ordinaryfunctioncreate", "sec-globaldeclarationinstantiation", "sec-ordinarycreatefromconstructor", "sec-definepropertyorthrow", "sec-createdataproperty", "sec-stringpad", "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys", "sec-timestring", "sec-resolvebinding", "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver", "sec-numberbitwiseop", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-initializetypedarrayfromlist", "sec-module-environment-records-getbindingvalue-n-s", "sec-getmodifysetvalueinbuffer", "sec-runtime-semantics-caseclauseisselected", "sec-copydataproperties", "sec-trimstring", "sec-ordinaryset", "sec-deletepropertyorthrow", "sec-issuperreference", "sec-stringindexof", "sec-integer-indexed-exotic-objects-get-p-receiver", "sec-settypedarrayfromtypedarray", "sec-integerindexedelementset", "sec-getexportednames", "sec-makeclassconstructor", "sec-createregexpstringiterator", "sec-abstract-operations-for-typedarray-objects", "sec-asyncgeneratorstart", "sec-validateatomicaccess", "sec-enumerate-object-properties", "sec-parse-script", "sec-initializetypedarrayfromtypedarray", "sec-evaluate-property-access-with-identifier-key", "sec-isprivatereference", "sec-hasownproperty", "sec-iteratorcomplete", "sec-string-exotic-objects-defineownproperty-p-desc", "sec-iteratorclose", "sec-getv", "sec-hasproperty", "sec-iteratorvalue", "sec-createarrayfromlist", "sec-createdatapropertyorthrow", "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver", "sec-regexpinitialize", "sec-ordinarydelete", "sec-clonearraybuffer", "sec-bigintbitwiseop", "sec-%asyncfromsynciteratorprototype%.return", "sec-issharedarraybuffer", "sec-ordinarygetownproperty", "sec-add-entries-from-iterable", "sec-ordinaryhasproperty", "sec-isintailposition", "sec-detacharraybuffer", "sec-getiterator", "sec-initializeboundname", "sec-set-o-p-v-throw", "sec-ordinarysetwithowndescriptor", "sec-integer-indexed-exotic-objects-getownproperty-p", "sec-string-exotic-objects-getownproperty-p", "sec-setvalueinbuffer", "sec-integer-indexed-exotic-objects-defineownproperty-p-desc", "sec-prepareforordinarycall", "sec-createbuiltinfunction", "sec-isanonymousfunctiondefinition", "sec-allocatetypedarraybuffer", "sec-getmethod", "sec-createsetiterator", "sec-samevaluenonnumeric", "sec-createmapiterator", "sec-setintegritylevel", "sec-stringgetownproperty", "sec-getmodulenamespace", "sec-getwaiterlist", "sec-integer-indexed-exotic-objects-ownpropertykeys", "sec-testintegritylevel", "sec-enumerableownpropertynames", "sec-invoke", "sec-canonicalnumericindexstring", "sec-resolveexport", "sec-makeconstructor", "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc", "sec-bytelistbitwiseop", "sec-promise-resolve", "sec-timezoneestring", "sec-finishdynamicimport", "sec-generatorstart", "sec-runtime-semantics-unicodematchproperty-p", "sec-binaryor", "sec-initializetypedarrayfromarraybuffer", "sec-boundfunctioncreate", "sec-todatestring", "sec-settypedarrayfromarraylike", "sec-asynciterator-interface", "sec-%asyncfromsynciteratorprototype%.throw", "sec-regexpexec", "sec-valueofreadevent", "sec-web-compat-blockdeclarationinstantiation", "sec-web-compat-globaldeclarationinstantiation", "sec-completepropertydescriptor", "sec-integer-indexed-exotic-objects-delete-p", "sec-blockdeclarationinstantiation", "sec-integer-indexed-exotic-objects-set-p-v-receiver", "sec-isextensible-o", "sec-toprimitive", "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v", "sec-ecmascript-function-objects-call-thisargument-argumentslist", "sec-isstringprefix", "sec-makemethod", "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p", "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p", "sec-modulenamespacecreate", "sec-asynciteratorclose", "sec-ordinaryget", "sec-newpromisereactionjob", "sec-generatoryield", "sec-array-exotic-objects-defineownproperty-p-desc", "sec-binaryand", "sec-getprototypefromconstructor", "sec-objectdefineproperties", "sec-module-namespace-exotic-objects-delete-p", "sec-lengthofarraylike", "sec-newfunctionenvironment", "sec-get-o-p", "sec-speciesconstructor", "sec-datestring", "sec-createimportbinding", "sec-integerindexedelementget", "sec-binaryxor", "sec-runtime-semantics-unicodematchpropertyvalue-p-v", "sec-symboldescriptivestring", "sec-makebasicobject", "sec-isvalidregularexpressionliteral", "sec-regexpbuiltinexec", "sec-integer-indexed-exotic-objects-hasproperty-p", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-proxy-object-internal-methods-and-internal-slots-delete-p", "sec-isunresolvablereference", "sec-createmethodproperty", "sec-arraysetlength", "sec-evaluatenew"], "secData": {"sec-initializetypedarrayfromarraylike": {"num": "23.2.5.1.5", "title": "#sec-initializetypedarrayfromarraylike InitializeTypedArrayFromArrayLike ( O, arrayLike )", "html": "<emu-clause id=\"sec-initializetypedarrayfromarraylike\" aoid=\"InitializeTypedArrayFromArrayLike\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromarraylike\">#sec-initializetypedarrayfromarraylike</span> InitializeTypedArrayFromArrayLike ( <var>O</var>, <var>arrayLike</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromArrayLike takes arguments <var>O</var> (a TypedArray) and <var>arrayLike</var> (an Object, but not a TypedArray or an ArrayBuffer). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ispropertyreference": {"num": "6.2.4.1", "title": "#sec-ispropertyreference IsPropertyReference ( V )", "html": "<emu-clause id=\"sec-ispropertyreference\" oldids=\"ao-ispropertyreference\" aoid=\"IsPropertyReference\"><span id=\"ao-ispropertyreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ispropertyreference\">#sec-ispropertyreference</span> IsPropertyReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPropertyReference takes argument <var>V</var> (a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>V</var>.[[Base]] is <emu-const>unresolvable</emu-const>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>.[[Base]]) is Boolean, String, Symbol, BigInt, Number, or Object, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-flattenintoarray": {"num": "23.1.3.10.1", "title": "#sec-flattenintoarray FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-flattenintoarray\" aoid=\"FlattenIntoArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-flattenintoarray\">#sec-flattenintoarray</span> FlattenIntoArray ( <var>target</var>, <var>source</var>, <var>sourceLen</var>, <var>start</var>, <var>depth</var> [ , <var>mapperFunction</var> [ , <var>thisArg</var> ] ] )</h1>\n          <p>The abstract operation FlattenIntoArray takes arguments <var>target</var> (an Object), <var>source</var> (an Object), <var>sourceLen</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>start</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>depth</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;) and optional arguments <var>mapperFunction</var> and <var>thisArg</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>mapperFunction</var> is present, then !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapperFunction</var>) is <emu-val>true</emu-val>, <var>thisArg</var> is present, and <var>depth</var> is 1.</li><li>Let <var>targetIndex</var> be <var>start</var>.</li><li>Let <var>sourceIndex</var> be <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Repeat, while <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>sourceIndex</var>) &lt; <var>sourceLen</var>,<ol><li>Let <var>P</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>sourceIndex</var>).</li><li>Let <var>exists</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>source</var>, <var>P</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>element</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>source</var>, <var>P</var>).</li><li>If <var>mapperFunction</var> is present, then<ol><li>Set <var>element</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapperFunction</var>, <var>thisArg</var>, &#171; <var>element</var>, <var>sourceIndex</var>, <var>source</var> &#187;).</li></ol></li><li>Let <var>shouldFlatten</var> be <emu-val>false</emu-val>.</li><li>If <var>depth</var> &gt; 0, then<ol><li>Set <var>shouldFlatten</var> to ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>element</var>).</li></ol></li><li>If <var>shouldFlatten</var> is <emu-val>true</emu-val>, then<ol><li>If <var>depth</var> is +&#8734;, let <var>newDepth</var> be +&#8734;.</li><li>Else, let <var>newDepth</var> be <var>depth</var> - 1.</li><li>Let <var>elementLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>element</var>).</li><li>Set <var>targetIndex</var> to ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>target</var>, <var>element</var>, <var>elementLen</var>, <var>targetIndex</var>, <var>newDepth</var>).</li></ol></li><li>Else,<ol><li>If <var>targetIndex</var> &#8805; 2<sup>53</sup> - 1, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>targetIndex</var>)), <var>element</var>).</li><li>Set <var>targetIndex</var> to <var>targetIndex</var> + 1.</li></ol></li></ol></li><li>Set <var>sourceIndex</var> to <var>sourceIndex</var> + <emu-val>1</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Return <var>targetIndex</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-createforiniterator": {"num": "14.7.5.10.1", "title": "#sec-createforiniterator CreateForInIterator ( object )", "html": "<emu-clause id=\"sec-createforiniterator\" aoid=\"CreateForInIterator\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createforiniterator\">#sec-createforiniterator</span> CreateForInIterator ( <var>object</var> )</h1>\n          <p>The abstract operation CreateForInIterator takes argument <var>object</var> (an Object). It is used to create a For-In Iterator object which iterates over the own and inherited enumerable string properties of <var>object</var> in a specific order. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%foriniteratorprototype%-object\"><a href=\"#sec-%foriniteratorprototype%-object\">%ForInIteratorPrototype%</a></emu-xref>, &#171; [[Object]], [[ObjectWasVisited]], [[VisitedKeys]], [[RemainingKeys]] &#187;).</li><li>Set <var>iterator</var>.[[Object]] to <var>object</var>.</li><li>Set <var>iterator</var>.[[ObjectWasVisited]] to <emu-val>false</emu-val>.</li><li>Set <var>iterator</var>.[[VisitedKeys]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>iterator</var>.[[RemainingKeys]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-isvalidintegerindex": {"num": "10.4.5.9", "title": "#sec-isvalidintegerindex IsValidIntegerIndex ( O, index )", "html": "<emu-clause id=\"sec-isvalidintegerindex\" aoid=\"IsValidIntegerIndex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidintegerindex\">#sec-isvalidintegerindex</span> IsValidIntegerIndex ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IsValidIntegerIndex takes arguments <var>O</var> (an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>) and <var>index</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#8805; <var>O</var>.[[ArrayLength]], return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isdetachedbuffer": {"num": "25.1.2.2", "title": "#sec-isdetachedbuffer IsDetachedBuffer ( arrayBuffer )", "html": "<emu-clause id=\"sec-isdetachedbuffer\" aoid=\"IsDetachedBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isdetachedbuffer\">#sec-isdetachedbuffer</span> IsDetachedBuffer ( <var>arrayBuffer</var> )</h1>\n        <p>The abstract operation IsDetachedBuffer takes argument <var>arrayBuffer</var> (an Object that has an [[ArrayBufferData]] internal slot). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>arrayBuffer</var>.[[ArrayBufferData]] is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createarrayiterator": {"num": "23.1.5.1", "title": "#sec-createarrayiterator CreateArrayIterator ( array, kind )", "html": "<emu-clause id=\"sec-createarrayiterator\" oldids=\"sec-properties-of-array-iterator-instances,table-48,table-internal-slots-of-array-iterator-instances\" aoid=\"CreateArrayIterator\"><span id=\"table-internal-slots-of-array-iterator-instances\"></span><span id=\"table-48\"></span><span id=\"sec-properties-of-array-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayiterator\">#sec-createarrayiterator</span> CreateArrayIterator ( <var>array</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateArrayIterator takes arguments <var>array</var> (an Object) and <var>kind</var> (<emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>). It is used to create iterator objects for Array methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>kind</var> and <var>array</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Repeat,<ol><li>If <var>array</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>array</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>array</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>array</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, return <emu-val>undefined</emu-val>.</li><li>If <var>kind</var> is <emu-const>key</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Else,<ol><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>)).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>array</var>, <var>elementKey</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>elementValue</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>index</var>), <var>elementValue</var> &#187;)).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%ArrayIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ordinarytoprimitive": {"num": "7.1.1.1", "title": "#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )", "html": "<emu-clause id=\"sec-ordinarytoprimitive\" aoid=\"OrdinaryToPrimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarytoprimitive\">#sec-ordinarytoprimitive</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</h1>\n        <p>The abstract operation OrdinaryToPrimitive takes arguments <var>O</var> (an Object) and <var>hint</var> (<emu-const>string</emu-const> or <emu-const>number</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>hint</var> is <emu-const>string</emu-const>, then<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"toString\"</emu-val>, <emu-val>\"valueOf\"</emu-val> &#187;.</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be &#171; <emu-val>\"valueOf\"</emu-val>, <emu-val>\"toString\"</emu-val> &#187;.</li></ol></li><li>For each element <var>name</var> of <var>methodNames</var>, do<ol><li>Let <var>method</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-getsubstitution": {"num": "22.1.3.17.1", "title": "#sec-getsubstitution GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )", "html": "<emu-clause id=\"sec-getsubstitution\" aoid=\"GetSubstitution\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getsubstitution\">#sec-getsubstitution</span> GetSubstitution ( <var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>namedCaptures</var>, <var>replacement</var> )</h1>\n          <p>The abstract operation GetSubstitution takes arguments <var>matched</var> (a String), <var>str</var> (a String), <var>position</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>captures</var> (a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings), <var>namedCaptures</var> (an Object or <emu-val>undefined</emu-val>), and <var>replacement</var> (a String). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>matchLength</var> be the number of code units in <var>matched</var>.</li><li>Let <var>stringLength</var> be the number of code units in <var>str</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>position</var> &#8804; <var>stringLength</var>.</li><li>Let <var>tailPos</var> be <var>position</var> + <var>matchLength</var>.</li><li>Let <var>m</var> be the number of elements in <var>captures</var>.</li><li>Let <var>result</var> be the String value derived from <var>replacement</var> by copying code unit elements from <var>replacement</var> to <var>result</var> while performing replacements as specified in <emu-xref href=\"#table-replacement-text-symbol-substitutions\"><a href=\"#table-replacement-text-symbol-substitutions\" class=\"excluded-xref\" excluded-id=\"table-replacement-text-symbol-substitutions\">#table-replacement-text-symbol-substitutions</a></emu-xref>. These <code>$</code> replacements are done left-to-right, and, once such a replacement is performed, the new replacement text is not subject to further replacements.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n          <emu-table id=\"table-replacement-text-symbol-substitutions\" caption=\"Replacement Text Symbol Substitutions\" oldids=\"table-45\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-replacement-text-symbol-substitutions\">#table-replacement-text-symbol-substitutions</span>: Replacement Text Symbol Substitutions</figcaption><span id=\"table-45\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Code units\n                </th>\n                <th>\n                  Unicode Characters\n                </th>\n                <th>\n                  Replacement text\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0024\n                </td>\n                <td>\n                  <code>$$</code>\n                </td>\n                <td>\n                  <code>$</code>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0026\n                </td>\n                <td>\n                  <code>$&amp;</code>\n                </td>\n                <td>\n                  <var>matched</var>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0060\n                </td>\n                <td>\n                  <code>$`</code>\n                </td>\n                <td>\n                  The replacement is the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>str</var> from 0 to <var>position</var>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x0027\n                </td>\n                <td>\n                  <code>$'</code>\n                </td>\n                <td>\n                  If <var>tailPos</var> &#8805; <var>stringLength</var>, the replacement is the empty String. Otherwise the replacement is the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>str</var> from <var>tailPos</var>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N\n                  <br>\n                  Where\n                  <br>\n                  0x0031 &#8804; N &#8804; 0x0039\n                </td>\n                <td>\n                  <code>$n</code> where\n                  <br>\n                  <code>n</code> is one of <code>1 2 3 4 5 6 7 8 9</code> and <code>$n</code> is not followed by a decimal digit\n                </td>\n                <td>\n                  The <var>n</var><sup>th</sup> element of <var>captures</var>, where <var>n</var> is a single digit in the range 1 to 9. If <var>n</var> &#8804; <var>m</var> and the <var>n</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>n</var> &gt; <var>m</var>, no replacement is done.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, N, N\n                  <br>\n                  Where\n                  <br>\n                  0x0030 &#8804; N &#8804; 0x0039\n                </td>\n                <td>\n                  <code>$nn</code> where\n                  <br>\n                  <code>n</code> is one of <code>0 1 2 3 4 5 6 7 8 9</code>\n                </td>\n                <td>\n                  The <var>nn</var><sup>th</sup> element of <var>captures</var>, where <var>nn</var> is a two-digit decimal number in the range 01 to 99. If <var>nn</var> &#8804; <var>m</var> and the <var>nn</var><sup>th</sup> element of <var>captures</var> is <emu-val>undefined</emu-val>, use the empty String instead. If <var>nn</var> is 00 or <var>nn</var> &gt; <var>m</var>, no replacement is done.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024, 0x003C\n                </td>\n                <td>\n                  <code>$&lt;</code>\n                </td>\n                <td>\n                  <emu-alg><ol><li>If <var>namedCaptures</var> is <emu-val>undefined</emu-val>, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>namedCaptures</var>) is Object.</li><li>Scan until the next <code>&gt;</code> U+003E (GREATER-THAN SIGN).</li><li>If none is found, the replacement text is the String <emu-val>\"$&lt;\"</emu-val>.</li><li>Else,<ol><li>Let <var>groupName</var> be the enclosed <emu-not-ref>substring</emu-not-ref>.</li><li>Let <var>capture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>namedCaptures</var>, <var>groupName</var>).</li><li>If <var>capture</var> is <emu-val>undefined</emu-val>, replace the text through <code>&gt;</code> with the empty String.</li><li>Otherwise, replace the text through <code>&gt;</code> with ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>capture</var>).</li></ol></li></ol></li></ol></emu-alg>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  0x0024\n                </td>\n                <td>\n                  <code>$</code> in any context that does not match any of the above.\n                </td>\n                <td>\n                  <code>$</code>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "27.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( [ <var>value</var> ] )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object with a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-createiterresultobject": {"num": "7.4.8", "title": "#sec-createiterresultobject CreateIterResultObject ( value, done )", "html": "<emu-clause id=\"sec-createiterresultobject\" aoid=\"CreateIterResultObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createiterresultobject\">#sec-createiterresultobject</span> CreateIterResultObject ( <var>value</var>, <var>done</var> )</h1>\n      <p>The abstract operation CreateIterResultObject takes arguments <var>value</var> and <var>done</var> (a Boolean). It creates an object that conforms to the <i>IteratorResult</i> interface. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"value\"</emu-val>, <var>value</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"done\"</emu-val>, <var>done</var>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-parsemodule": {"num": "16.2.1.6.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the <emu-xref aoid=\"ModuleRequests\"><a href=\"#sec-static-semantics-modulerequests\">ModuleRequests</a></emu-xref> of <var>body</var>.</li><li>Let <var>importEntries</var> be <emu-xref aoid=\"ImportEntries\"><a href=\"#sec-static-semantics-importentries\">ImportEntries</a></emu-xref> of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be <emu-xref aoid=\"ExportEntries\"><a href=\"#sec-static-semantics-exportentries\">ExportEntries</a></emu-xref> of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> of <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <emu-val>\"*\"</emu-val> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[ImportMeta]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "10.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope, PrivateScope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\" aoid=\"OrdinaryFunctionCreate\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var>, <var>PrivateScope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>), and <var>PrivateScope</var> (a <emu-xref href=\"#privateenvironment-record\"><a href=\"#privateenvironment-record\">PrivateEnvironment Record</a></emu-xref> or <emu-val>null</emu-val>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-ecmascript-function-objects\"><a href=\"#table-internal-slots-of-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-ecmascript-function-objects\">#table-internal-slots-of-ecmascript-function-objects</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[PrivateEnvironment]] to <var>PrivateScope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[Fields]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[PrivateMethods]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>F</var>.[[ClassFieldInitializerName]] to <emu-const>empty</emu-const>.</li><li>Let <var>len</var> be the <emu-xref aoid=\"ExpectedArgumentCount\"><a href=\"#sec-static-semantics-expectedargumentcount\">ExpectedArgumentCount</a></emu-xref> of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-globaldeclarationinstantiation": {"num": "16.1.7", "title": "#sec-globaldeclarationinstantiation GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <p>The abstract operation GlobalDeclarationInstantiation takes arguments <var>script</var> (a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>). <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global environment in which bindings are to be created.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current global environment. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>lexNames</var> be the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <var>script</var>.</li><li>Let <var>varNames</var> be the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <var>script</var>.</li><li>For each element <var>name</var> of <var>lexNames</var>, do<ol><li>If <var>env</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>env</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each element <var>name</var> of <var>varNames</var>, do<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, in reverse <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>d</var> of <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>script</var>.</li><li>Let <var>privateEnv</var> be <emu-val>null</emu-val>.</li><li>For each element <var>d</var> of <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> of <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>f</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>f</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li>Perform ? <var>env</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> of <var>declaredVarNames</var>, do<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-ordinarycreatefromconstructor": {"num": "10.1.13", "title": "#sec-ordinarycreatefromconstructor OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )", "html": "<emu-clause id=\"sec-ordinarycreatefromconstructor\" aoid=\"OrdinaryCreateFromConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycreatefromconstructor\">#sec-ordinarycreatefromconstructor</span> OrdinaryCreateFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> [ , <var>internalSlotsList</var> ] )</h1>\n      <p>The abstract operation OrdinaryCreateFromConstructor takes arguments <var>constructor</var> and <var>intrinsicDefaultProto</var> (a String) and optional argument <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots). It creates an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> whose [[Prototype]] value is retrieved from a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. If <var>internalSlotsList</var> is not provided, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>intrinsicDefaultProto</var> is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>constructor</var>, <var>intrinsicDefaultProto</var>).</li><li>Return !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>proto</var>, <var>internalSlotsList</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-definepropertyorthrow": {"num": "7.3.8", "title": "#sec-definepropertyorthrow DefinePropertyOrThrow ( O, P, desc )", "html": "<emu-clause id=\"sec-definepropertyorthrow\" aoid=\"DefinePropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-definepropertyorthrow\">#sec-definepropertyorthrow</span> DefinePropertyOrThrow ( <var>O</var>, <var>P</var>, <var>desc</var> )</h1>\n      <p>The abstract operation DefinePropertyOrThrow takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It is used to call the [[DefineOwnProperty]] internal method of an object in a manner that will throw a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>success</var> be ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>desc</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdataproperty": {"num": "7.3.5", "title": "#sec-createdataproperty CreateDataProperty ( O, P, V )", "html": "<emu-clause id=\"sec-createdataproperty\" aoid=\"CreateDataProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdataproperty\">#sec-createdataproperty</span> CreateDataProperty ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateDataProperty takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>newDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-stringpad": {"num": "22.1.3.15.1", "title": "#sec-stringpad StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>The abstract operation StringPad takes arguments <var>O</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>maxLength</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>fillString</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>placement</var> (<emu-const>start</emu-const> or <emu-const>end</emu-const>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>)).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> &#8804; <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <emu-const>start</emu-const>, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <emu-val>\" \"</emu-val> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": {"num": "10.5.11", "title": "#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys\">#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n      <p>The [[OwnPropertyKeys]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"ownKeys\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var> &#187;).</li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"CreateListFromArrayLike\"><a href=\"#sec-createlistfromarraylike\">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, &#171; String, Symbol &#187;).</li><li>If <var>trapResult</var> contains any duplicate entries, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are Strings or Symbols.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetKeys</var> contains no duplicate entries.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>targetKeys</var>, do<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetNonconfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>For each element <var>key</var> of <var>targetConfigurableKeys</var>, do<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[OwnPropertyKeys]] is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> contains no duplicate entries.\n          </li>\n          <li>\n            The Type of each result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> element is either String or Symbol.\n          </li>\n          <li>\n            The result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.\n          </li>\n          <li>\n            If the target object is not extensible, then the result <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-timestring": {"num": "21.4.4.41.1", "title": "#sec-timestring TimeString ( tv )", "html": "<emu-clause id=\"sec-timestring\" aoid=\"TimeString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timestring\">#sec-timestring</span> TimeString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeString takes argument <var>tv</var> (a Number, but not <emu-val>NaN</emu-val>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>hour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>minute</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>second</var> be the String representation of <emu-xref aoid=\"SecFromTime\"><a href=\"#eqn-SecFromTime\">SecFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>hour</var>, <emu-val>\":\"</emu-val>, <var>minute</var>, <emu-val>\":\"</emu-val>, <var>second</var>, the code unit 0x0020 (SPACE), and <emu-val>\"GMT\"</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-resolvebinding": {"num": "9.4.2", "title": "#sec-resolvebinding ResolveBinding ( name [ , env ] )", "html": "<emu-clause id=\"sec-resolvebinding\" aoid=\"ResolveBinding\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolvebinding\">#sec-resolvebinding</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</h1>\n      <p>The abstract operation ResolveBinding takes argument <var>name</var> (a String) and optional argument <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> or <emu-val>undefined</emu-val>). It is used to determine the binding of <var>name</var>. <var>env</var> can be used to explicitly provide the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is to be searched for the binding. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>env</var> is not present or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Set <var>env</var> to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>env</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>; else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIdentifierReference\"><a href=\"#sec-getidentifierreference\">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The result of ResolveBinding is always a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> whose [[ReferencedName]] field is <var>name</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver": {"num": "10.5.8", "title": "#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver\">#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n      <p>The [[Get]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"get\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>trapResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>Receiver</var> &#187;).</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>trapResult</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>If <var>trapResult</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>trapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Get]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The value reported for a property must be the same as the value of the corresponding target object property if the target object property is a non-writable, non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n          </li>\n          <li>\n            The value reported for a property must be <emu-val>undefined</emu-val> if the corresponding target object property is a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> that has <emu-val>undefined</emu-val> as its [[Get]] attribute.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-numberbitwiseop": {"num": "6.1.6.1.16", "title": "#sec-numberbitwiseop NumberBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-numberbitwiseop\" aoid=\"NumberBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numberbitwiseop\">#sec-numberbitwiseop</span> NumberBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation NumberBitwiseOp takes arguments <var>op</var> (<code>&amp;</code>, <code>^</code>, or <code>|</code>), <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>lnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>x</var>).</li><li>Let <var>rnum</var> be !&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>y</var>).</li><li>Let <var>lbits</var> be the 32-bit two's complement bit string representing <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>lnum</var>).</li><li>Let <var>rbits</var> be the 32-bit two's complement bit string representing <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>rnum</var>).</li><li>If <var>op</var> is <code>&amp;</code>, let <var>result</var> be the result of applying the bitwise AND operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>result</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>lbits</var> and <var>rbits</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>result</var> be the result of applying the bitwise inclusive OR operation to <var>lbits</var> and <var>rbits</var>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the 32-bit two's complement bit string <var>result</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "10.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values) and <var>newTarget</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <emu-val>\"%Object.prototype%\"</emu-val>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>initializeResult</var> be <emu-xref aoid=\"InitializeInstanceElements\"><a href=\"#sec-initializeinstanceelements\">InitializeInstanceElements</a></emu-xref>(<var>thisArgument</var>, <var>F</var>).</li><li>If <var>initializeResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>initializeResult</var>).</li></ol></li></ol></li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>constructorEnv</var>.GetThisBinding().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializetypedarrayfromlist": {"num": "23.2.5.1.4", "title": "#sec-initializetypedarrayfromlist InitializeTypedArrayFromList ( O, values )", "html": "<emu-clause id=\"sec-initializetypedarrayfromlist\" aoid=\"InitializeTypedArrayFromList\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromlist\">#sec-initializetypedarrayfromlist</span> InitializeTypedArrayFromList ( <var>O</var>, <var>values</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromList takes arguments <var>O</var> (a TypedArray) and <var>values</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-module-environment-records-getbindingvalue-n-s": {"num": "9.1.1.5.1", "title": "#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )", "html": "<emu-clause id=\"sec-module-environment-records-getbindingvalue-n-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records-getbindingvalue-n-s\">#sec-module-environment-records-getbindingvalue-n-s</span> GetBindingValue ( <var>N</var>, <var>S</var> )</h1>\n          <p>The GetBindingValue concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String) and <var>S</var> (<emu-val>true</emu-val>). It returns the value of its bound identifier whose name is the value of the argument <var>N</var>. However, if the binding is an indirect binding the value of the target binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-getmodifysetvalueinbuffer": {"num": "25.1.2.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer or a SharedArrayBuffer), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a <emu-xref href=\"#sec-typedarray-objects\"><a href=\"#sec-typedarray-objects\">TypedArray element type</a></emu-xref>), <var>value</var> (a Number or a BigInt), and <var>op</var> (a <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> whose elements are nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>SeqCst</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else,<ol><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> whose elements are the sequence of <var>elementSize</var> bytes starting with <var>block</var>[<var>byteIndex</var>].</li><li>Let <var>rawBytesModified</var> be <var>op</var>(<var>rawBytesRead</var>, <var>rawBytes</var>).</li><li>Store the individual bytes of <var>rawBytesModified</var> into <var>block</var>, starting at <var>block</var>[<var>byteIndex</var>].</li></ol></li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-runtime-semantics-caseclauseisselected": {"num": "14.12.3", "title": "#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\" aoid=\"CaseClauseIsSelected\"><span id=\"sec-runtime-semantics-caseselectorevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"x20nmjyd\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>input</var>, <var>clauseSelector</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-copydataproperties": {"num": "7.3.25", "title": "#sec-copydataproperties CopyDataProperties ( target, source, excludedItems )", "html": "<emu-clause id=\"sec-copydataproperties\" aoid=\"CopyDataProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydataproperties\">#sec-copydataproperties</span> CopyDataProperties ( <var>target</var>, <var>source</var>, <var>excludedItems</var> )</h1>\n      <p>The abstract operation CopyDataProperties takes arguments <var>target</var> (an Object), <var>source</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>excludedItems</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of property keys). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>source</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>target</var>.</li><li>Let <var>from</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>keys</var> be ? <var>from</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>excluded</var> be <emu-val>false</emu-val>.</li><li>For each element <var>e</var> of <var>excludedItems</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>nextKey</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>excluded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>excluded</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>desc</var> be ? <var>from</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>from</var>, <var>nextKey</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>target</var>, <var>nextKey</var>, <var>propValue</var>).</li></ol></li></ol></li></ol></li><li>Return <var>target</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The target passed in here is always a newly created object which is not directly accessible in case of an error being thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-trimstring": {"num": "22.1.3.29.1", "title": "#sec-trimstring TrimString ( string, where )", "html": "<emu-clause id=\"sec-trimstring\" aoid=\"TrimString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-trimstring\">#sec-trimstring</span> TrimString ( <var>string</var>, <var>where</var> )</h1>\n          <p>The abstract operation TrimString takes arguments <var>string</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>where</var> (<emu-const>start</emu-const>, <emu-const>end</emu-const>, or <emu-const>start+end</emu-const>). It interprets <var>string</var> as a sequence of UTF-16 encoded code points, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>str</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>str</var>).</li><li>If <var>where</var> is <emu-const>start</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with leading white space removed.</li><li>Else if <var>where</var> is <emu-const>end</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with trailing white space removed.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>where</var> is <emu-const>start+end</emu-const>.</li><li>Let <var>T</var> be the String value that is a copy of <var>S</var> with both leading and trailing white space removed.</li></ol></li><li>Return <var>T</var>.</li></ol></emu-alg>\n          <p>The definition of white space is the union of <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> and <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. When determining whether a Unicode code point is in Unicode general category &#8220;Space_Separator&#8221; (&#8220;Zs&#8221;), code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        </emu-clause>\n      "}, "sec-ordinaryset": {"num": "10.1.9.1", "title": "#sec-ordinaryset OrdinarySet ( O, P, V, Receiver )", "html": "<emu-clause id=\"sec-ordinaryset\" aoid=\"OrdinarySet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryset\">#sec-ordinaryset</span> OrdinarySet ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The abstract operation OrdinarySet takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>ownDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Return <emu-xref aoid=\"OrdinarySetWithOwnDescriptor\"><a href=\"#sec-ordinarysetwithowndescriptor\">OrdinarySetWithOwnDescriptor</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>, <var>ownDesc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-deletepropertyorthrow": {"num": "7.3.9", "title": "#sec-deletepropertyorthrow DeletePropertyOrThrow ( O, P )", "html": "<emu-clause id=\"sec-deletepropertyorthrow\" aoid=\"DeletePropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-deletepropertyorthrow\">#sec-deletepropertyorthrow</span> DeletePropertyOrThrow ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation DeletePropertyOrThrow takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It is used to remove a specific own property of an object. It throws an exception if the property is not configurable. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>success</var> be ? <var>O</var>.[[Delete]](<var>P</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-issuperreference": {"num": "6.2.4.3", "title": "#sec-issuperreference IsSuperReference ( V )", "html": "<emu-clause id=\"sec-issuperreference\" oldids=\"ao-issuperreference\" aoid=\"IsSuperReference\"><span id=\"ao-issuperreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issuperreference\">#sec-issuperreference</span> IsSuperReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsSuperReference takes argument <var>V</var> (a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>V</var>.[[ThisValue]] is not <emu-const>empty</emu-const>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with <var>fromIndex</var> such that <var>i</var> &#8804; <var>len</var> - <var>searchLen</var>, in ascending order, do<ol><li>Let <var>candidate</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>i</var> to <var>i</var> + <var>searchLen</var>.</li><li>If <var>candidate</var> is the same sequence of code units as <var>searchValue</var>, return <var>i</var>.</li></ol></li><li>Return -1.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is the empty String and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-get-p-receiver": {"num": "10.4.5.4", "title": "#sec-integer-indexed-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-get-p-receiver\">#sec-integer-indexed-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"IntegerIndexedElementGet\"><a href=\"#sec-integerindexedelementget\">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-settypedarrayfromtypedarray": {"num": "23.2.3.23.1", "title": "#sec-settypedarrayfromtypedarray SetTypedArrayFromTypedArray ( target, targetOffset, source )", "html": "<emu-clause id=\"sec-settypedarrayfromtypedarray\" oldids=\"sec-%typedarray%.prototype.set-typedarray-offset\" aoid=\"SetTypedArrayFromTypedArray\"><span id=\"sec-%typedarray%.prototype.set-typedarray-offset\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-settypedarrayfromtypedarray\">#sec-settypedarrayfromtypedarray</span> SetTypedArrayFromTypedArray ( <var>target</var>, <var>targetOffset</var>, <var>source</var> )</h1>\n          <p>The abstract operation SetTypedArrayFromTypedArray takes arguments <var>target</var> (a TypedArray), <var>targetOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), and <var>source</var> (a TypedArray). It sets multiple values in <var>target</var>, starting at index <var>targetOffset</var>, reading the values from <var>source</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>srcBuffer</var> be <var>source</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>srcName</var> be the String value of <var>source</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcLength</var> be <var>source</var>.[[ArrayLength]].</li><li>Let <var>srcByteOffset</var> be <var>source</var>.[[ByteOffset]].</li><li>If <var>targetOffset</var> is +&#8734;, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>target</var>.[[ContentType]] &#8800; <var>source</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>If both <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcBuffer</var>) and <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>targetBuffer</var>) are <emu-val>true</emu-val>, then<ol><li>If <var>srcBuffer</var>.[[ArrayBufferData]] and <var>targetBuffer</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, let <var>same</var> be <emu-val>true</emu-val>; else let <var>same</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else, let <var>same</var> be <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcBuffer</var>, <var>targetBuffer</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>srcByteLength</var> be <var>source</var>.[[ByteLength]].</li><li>Set <var>srcBuffer</var> to ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcByteLength</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>NOTE: <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref> is used to clone <var>srcBuffer</var> because is it known to not have any observable side-effects.</li><li>Let <var>srcByteIndex</var> be 0.</li></ol></li><li>Else, let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>If <var>srcType</var> is the same as <var>targetType</var>, then<ol><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <emu-const>Uint8</emu-const>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <emu-const>Uint8</emu-const>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-integerindexedelementset": {"num": "10.4.5.11", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet takes arguments <var>O</var> (an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>), <var>index</var> (a Number), and <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This operation always appears to succeed, but it has no effect when attempting to write past the end of a TypedArray or to a TypedArray which is backed by a detached ArrayBuffer.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-getexportednames": {"num": "16.2.1.6.2", "title": "#sec-getexportednames GetExportedNames ( [ exportStarSet ] )", "html": "<emu-clause id=\"sec-getexportednames\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getexportednames\">#sec-getexportednames</span> GetExportedNames ( [ <var>exportStarSet</var> ] )</h1>\n          <p>The GetExportedNames concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes optional argument <var>exportStarSet</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Source Text Module Records). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>exportStarSet</var> is not present, set <var>exportStarSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>exportStarSet</var> contains <var>module</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: We've reached the starting point of an <code>export *</code> circularity.</li><li>Return a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li></ol></li><li>Append <var>module</var> to <var>exportStarSet</var>.</li><li>Let <var>exportedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Append <var>e</var>.[[ExportName]] to <var>exportedNames</var>.</li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>requestedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>starNames</var> be ? <var>requestedModule</var>.GetExportedNames(<var>exportStarSet</var>).</li><li>For each element <var>n</var> of <var>starNames</var>, do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>n</var>, <emu-val>\"default\"</emu-val>) is <emu-val>false</emu-val>, then<ol><li>If <var>n</var> is not an element of <var>exportedNames</var>, then<ol><li>Append <var>n</var> to <var>exportedNames</var>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <var>exportedNames</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>GetExportedNames does not filter out or throw an exception for names that have ambiguous star export bindings.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-makeclassconstructor": {"num": "10.2.6", "title": "#sec-makeclassconstructor MakeClassConstructor ( F )", "html": "<emu-clause id=\"sec-makeclassconstructor\" aoid=\"MakeClassConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeclassconstructor\">#sec-makeclassconstructor</span> MakeClassConstructor ( <var>F</var> )</h1>\n      <p>The abstract operation MakeClassConstructor takes argument <var>F</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var>.[[IsClassConstructor]] is <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createregexpstringiterator": {"num": "22.2.7.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" oldids=\"sec-properties-of-regexp-string-iterator-instances,table-regexp-string-iterator-instance-slots\" aoid=\"CreateRegExpStringIterator\"><span id=\"table-regexp-string-iterator-instance-slots\"></span><span id=\"sec-properties-of-regexp-string-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n        <p>The abstract operation CreateRegExpStringIterator takes arguments <var>R</var> (an Object), <var>S</var> (a String), <var>global</var> (a Boolean), and <var>fullUnicode</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>R</var>, <var>S</var>, <var>global</var>, and <var>fullUnicode</var> and performs the following steps when called:<ol><li>Repeat,<ol><li>Let <var>match</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li><li>If <var>match</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>match</var>, <emu-val>\"0\"</emu-val>)).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>nextIndex</var> be !&#160;<emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>nextIndex</var>), <emu-val>true</emu-val>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>match</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%RegExpStringIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-abstract-operations-for-typedarray-objects": {"num": "23.2.4", "title": "#sec-abstract-operations-for-typedarray-objects Abstract Operations for TypedArray Objects", "html": "<emu-clause id=\"sec-abstract-operations-for-typedarray-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-typedarray-objects\">#sec-abstract-operations-for-typedarray-objects</span> Abstract Operations for TypedArray Objects</h1>\n\n      <emu-clause id=\"typedarray-species-create\" aoid=\"TypedArraySpeciesCreate\">\n        <h1><span class=\"secnum\">23.2.4.1</span> TypedArraySpeciesCreate ( <var>exemplar</var>, <var>argumentList</var> )</h1>\n        <p>The abstract operation TypedArraySpeciesCreate takes arguments <var>exemplar</var> (an Object that has [[TypedArrayName]] and [[ContentType]] internal slots) and <var>argumentList</var>. It is used to specify the creation of a new TypedArray object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is derived from <var>exemplar</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>defaultConstructor</var> be the intrinsic object listed in column one of <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>exemplar</var>.[[TypedArrayName]].</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>exemplar</var>, <var>defaultConstructor</var>).</li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>constructor</var>, <var>argumentList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> has [[TypedArrayName]] and [[ContentType]] internal slots.</li><li>If <var>result</var>.[[ContentType]] &#8800; <var>exemplar</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      <emu-clause id=\"typedarray-create\" aoid=\"TypedArrayCreate\">\n        <h1><span class=\"secnum\">23.2.4.2</span> TypedArrayCreate ( <var>constructor</var>, <var>argumentList</var> )</h1>\n        <p>The abstract operation TypedArrayCreate takes arguments <var>constructor</var> and <var>argumentList</var>. It is used to specify the creation of a new TypedArray object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>newTypedArray</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argumentList</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>newTypedArray</var>).</li><li>If <var>argumentList</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of a single Number, then<ol><li>If <var>newTypedArray</var>.[[ArrayLength]] &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>argumentList</var>[0]), throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>newTypedArray</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">23.2.4.3</span>#sec-validatetypedarray ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n    "}, "sec-asyncgeneratorstart": {"num": "27.6.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation AsyncGeneratorStart takes arguments <var>generator</var> (an AsyncGenerator) and <var>generatorBody</var> (a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorCompleteStep\"><a href=\"#sec-asyncgeneratorcompletestep\">AsyncGeneratorCompleteStep</a></emu-xref>(<var>generator</var>, <var>result</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorDrainQueue\"><a href=\"#sec-asyncgeneratordrainqueue\">AsyncGeneratorDrainQueue</a></emu-xref>(<var>generator</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validateatomicaccess": {"num": "25.4.2.2", "title": "#sec-validateatomicaccess ValidateAtomicAccess ( typedArray, requestIndex )", "html": "<emu-clause id=\"sec-validateatomicaccess\" aoid=\"ValidateAtomicAccess\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateatomicaccess\">#sec-validateatomicaccess</span> ValidateAtomicAccess ( <var>typedArray</var>, <var>requestIndex</var> )</h1>\n        <p>The abstract operation ValidateAtomicAccess takes arguments <var>typedArray</var> (an Object that has a [[ViewedArrayBuffer]] internal slot) and <var>requestIndex</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>length</var> be <var>typedArray</var>.[[ArrayLength]].</li><li>Let <var>accessIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>accessIndex</var> &#8805; 0.</li><li>If <var>accessIndex</var> &#8805; <var>length</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Return (<var>accessIndex</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerate-object-properties": {"num": "14.7.5.9", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var> (an Object). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>ECMAScript implementations are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(obj) {\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.<span class=\"hljs-title function_\">add</span>(key);\n      <span class=\"hljs-keyword\">if</span> (desc.<span class=\"hljs-property\">enumerable</span>) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-parse-script": {"num": "16.1.5", "title": "#sec-parse-script ParseScript ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parse-script\" aoid=\"ParseScript\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parse-script\">#sec-parse-script</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n      <p>The abstract operation ParseScript takes arguments <var>sourceText</var> (ECMAScript source text), <var>realm</var>, and <var>hostDefined</var>. It creates a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>body</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>sourceText</var>, <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Return <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An implementation may parse script source text and analyse it for Early Error conditions prior to evaluation of ParseScript for that script source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseScript upon that source text.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-initializetypedarrayfromtypedarray": {"num": "23.2.5.1.2", "title": "#sec-initializetypedarrayfromtypedarray InitializeTypedArrayFromTypedArray ( O, srcArray )", "html": "<emu-clause id=\"sec-initializetypedarrayfromtypedarray\" oldids=\"sec-typedarray-typedarray\" aoid=\"InitializeTypedArrayFromTypedArray\"><span id=\"sec-typedarray-typedarray\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromtypedarray\">#sec-initializetypedarrayfromtypedarray</span> InitializeTypedArrayFromTypedArray ( <var>O</var>, <var>srcArray</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromTypedArray takes arguments <var>O</var> (a TypedArray) and <var>srcArray</var> (a TypedArray). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <var>elementType</var> is the same as <var>srcType</var>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>srcArray</var>.[[ContentType]] &#8800; <var>O</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0,<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-evaluate-property-access-with-identifier-key": {"num": "13.3.4", "title": "#sec-evaluate-property-access-with-identifier-key EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-identifier-key\" oldids=\"sec-evaluate-identifier-key-property-access\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\"><span id=\"sec-evaluate-identifier-key-property-access\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-identifier-key\">#sec-evaluate-property-access-with-identifier-key</span> EvaluatePropertyAccessWithIdentifierKey ( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>identifierName</var> (an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <var>identifierName</var>.</li><li>Return the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> { [[Base]]: <var>bv</var>, [[ReferencedName]]: <var>propertyNameString</var>, [[Strict]]: <var>strict</var>, [[ThisValue]]: <emu-const>empty</emu-const> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-isprivatereference": {"num": "6.2.4.4", "title": "#sec-isprivatereference IsPrivateReference ( V )", "html": "<emu-clause id=\"sec-isprivatereference\" aoid=\"IsPrivateReference\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isprivatereference\">#sec-isprivatereference</span> IsPrivateReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPrivateReference takes argument <var>V</var> (a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>V</var>.[[ReferencedName]] is a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-hasownproperty": {"num": "7.3.12", "title": "#sec-hasownproperty HasOwnProperty ( O, P )", "html": "<emu-clause id=\"sec-hasownproperty\" aoid=\"HasOwnProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasownproperty\">#sec-hasownproperty</span> HasOwnProperty ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation HasOwnProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether an object has an own property with the specified property key. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-iteratorcomplete": {"num": "7.4.3", "title": "#sec-iteratorcomplete IteratorComplete ( iterResult )", "html": "<emu-clause id=\"sec-iteratorcomplete\" aoid=\"IteratorComplete\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorcomplete\">#sec-iteratorcomplete</span> IteratorComplete ( <var>iterResult</var> )</h1>\n      <p>The abstract operation IteratorComplete takes argument <var>iterResult</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>iterResult</var>, <emu-val>\"done\"</emu-val>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-string-exotic-objects-defineownproperty-p-desc": {"num": "10.4.3.2", "title": "#sec-string-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-string-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-defineownproperty-p-desc\">#sec-string-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>S</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>stringDesc</var> be !&#160;<emu-xref aoid=\"StringGetOwnProperty\"><a href=\"#sec-stringgetownproperty\">StringGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li><li>If <var>stringDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>extensible</var> be <var>S</var>.[[Extensible]].</li><li>Return !&#160;<emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensible</var>, <var>Desc</var>, <var>stringDesc</var>).</li></ol></li><li>Return !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-iteratorclose": {"num": "7.4.6", "title": "#sec-iteratorclose IteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-iteratorclose\" aoid=\"IteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorclose\">#sec-iteratorclose</span> IteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation IteratorClose takes arguments <var>iteratorRecord</var> and <var>completion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>). It is used to notify an iterator that it should perform any actions it would normally perform when it has reached its completed state. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getv": {"num": "7.3.3", "title": "#sec-getv GetV ( V, P )", "html": "<emu-clause id=\"sec-getv\" aoid=\"GetV\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getv\">#sec-getv</span> GetV ( <var>V</var>, <var>P</var> )</h1>\n      <p>The abstract operation GetV takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key). It is used to retrieve the value of a specific property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>. If the value is not an object, the property lookup is performed using a wrapper object appropriate for the type of the value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>V</var>).</li><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>V</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-hasproperty": {"num": "7.3.11", "title": "#sec-hasproperty HasProperty ( O, P )", "html": "<emu-clause id=\"sec-hasproperty\" aoid=\"HasProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasproperty\">#sec-hasproperty</span> HasProperty ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation HasProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether an object has a property with the specified property key. The property may be either an own or inherited. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return ? <var>O</var>.[[HasProperty]](<var>P</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-iteratorvalue": {"num": "7.4.4", "title": "#sec-iteratorvalue IteratorValue ( iterResult )", "html": "<emu-clause id=\"sec-iteratorvalue\" aoid=\"IteratorValue\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteratorvalue\">#sec-iteratorvalue</span> IteratorValue ( <var>iterResult</var> )</h1>\n      <p>The abstract operation IteratorValue takes argument <var>iterResult</var> (an Object). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>iterResult</var>, <emu-val>\"value\"</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createarrayfromlist": {"num": "7.3.17", "title": "#sec-createarrayfromlist CreateArrayFromList ( elements )", "html": "<emu-clause id=\"sec-createarrayfromlist\" aoid=\"CreateArrayFromList\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createarrayfromlist\">#sec-createarrayfromlist</span> CreateArrayFromList ( <var>elements</var> )</h1>\n      <p>The abstract operation CreateArrayFromList takes argument <var>elements</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It is used to create an Array object whose elements are provided by <var>elements</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>elements</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>n</var>)), <var>e</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Return <var>array</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createdatapropertyorthrow": {"num": "7.3.7", "title": "#sec-createdatapropertyorthrow CreateDataPropertyOrThrow ( O, P, V )", "html": "<emu-clause id=\"sec-createdatapropertyorthrow\" aoid=\"CreateDataPropertyOrThrow\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdatapropertyorthrow\">#sec-createdatapropertyorthrow</span> CreateDataPropertyOrThrow ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateDataPropertyOrThrow takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It throws a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>success</var> be ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for properties created by the ECMAScript language assignment operator. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val> causing this operation to throw a <emu-val>TypeError</emu-val> exception.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver": {"num": "10.5.9", "title": "#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver\">#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n      <p>The [[Set]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"set\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>V</var>, <var>Receiver</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>V</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Set]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[Set]] is a Boolean value.\n          </li>\n          <li>\n            Cannot change the value of a property to be different from the value of the corresponding target object property if the corresponding target object property is a non-writable, non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n          </li>\n          <li>\n            Cannot set the value of a property if the corresponding target object property is a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> that has <emu-val>undefined</emu-val> as its [[Set]] attribute.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-regexpinitialize": {"num": "22.2.3.2.2", "title": "#sec-regexpinitialize RegExpInitialize ( obj, pattern, flags )", "html": "<emu-clause id=\"sec-regexpinitialize\" aoid=\"RegExpInitialize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpinitialize\">#sec-regexpinitialize</span> RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</h1>\n          <p>The abstract operation RegExpInitialize takes arguments <var>obj</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>pattern</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>flags</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>pattern</var> is <emu-val>undefined</emu-val>, let <var>P</var> be the empty String.</li><li>Else, let <var>P</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>pattern</var>).</li><li>If <var>flags</var> is <emu-val>undefined</emu-val>, let <var>F</var> be the empty String.</li><li>Else, let <var>F</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>).</li><li>If <var>F</var> contains any code unit other than <emu-val>\"g\"</emu-val>, <emu-val>\"i\"</emu-val>, <emu-val>\"m\"</emu-val>, <emu-val>\"s\"</emu-val>, <emu-val>\"u\"</emu-val>, or <emu-val>\"y\"</emu-val> or if it contains the same code unit more than once, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>F</var> contains <emu-val>\"u\"</emu-val>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>patternText</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>P</var>).</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code points of <var>patternText</var>.</li></ol></li><li>Else,<ol><li>Let <var>patternText</var> be the result of interpreting each of <var>P</var>'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li><li>Let <var>patternCharacters</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the code unit elements of <var>P</var>.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a non-empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-val>SyntaxError</emu-val> objects, throw a <emu-val>SyntaxError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>parseResult</var> is a <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt>.</li><li>Set <var>obj</var>.[[OriginalSource]] to <var>P</var>.</li><li>Set <var>obj</var>.[[OriginalFlags]] to <var>F</var>.</li><li>Set <var>obj</var>.[[RegExpMatcher]] to the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that evaluates <var>parseResult</var> by applying the semantics provided in <emu-xref href=\"#sec-pattern-semantics\"><a href=\"#sec-pattern-semantics\" class=\"excluded-xref\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</a></emu-xref> using <var>patternCharacters</var> as the pattern's <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values and <var>F</var> as the flag parameters.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>obj</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-ordinarydelete": {"num": "10.1.10.1", "title": "#sec-ordinarydelete OrdinaryDelete ( O, P )", "html": "<emu-clause id=\"sec-ordinarydelete\" aoid=\"OrdinaryDelete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarydelete\">#sec-ordinarydelete</span> OrdinaryDelete ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryDelete takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>desc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Remove the own property with name <var>P</var> from <var>O</var>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-clonearraybuffer": {"num": "25.1.2.4", "title": "#sec-clonearraybuffer CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength, cloneConstructor )", "html": "<emu-clause id=\"sec-clonearraybuffer\" aoid=\"CloneArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-clonearraybuffer\">#sec-clonearraybuffer</span> CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var>, <var>cloneConstructor</var> )</h1>\n        <p>The abstract operation CloneArrayBuffer takes arguments <var>srcBuffer</var> (an ArrayBuffer), <var>srcByteOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>srcLength</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>cloneConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It creates a new ArrayBuffer whose data is a copy of <var>srcBuffer</var>'s data over the range starting at <var>srcByteOffset</var> and continuing for <var>srcLength</var> bytes. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>cloneConstructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>targetBuffer</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>cloneConstructor</var>, <var>srcLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcBlock</var> be <var>srcBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>targetBlock</var> be <var>targetBuffer</var>.[[ArrayBufferData]].</li><li>Perform <emu-xref aoid=\"CopyDataBlockBytes\"><a href=\"#sec-copydatablockbytes\">CopyDataBlockBytes</a></emu-xref>(<var>targetBlock</var>, 0, <var>srcBlock</var>, <var>srcByteOffset</var>, <var>srcLength</var>).</li><li>Return <var>targetBuffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bigintbitwiseop": {"num": "6.1.6.2.19", "title": "#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-bigintbitwiseop\" aoid=\"BigIntBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigintbitwiseop\">#sec-bigintbitwiseop</span> BigIntBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigIntBitwiseOp takes arguments <var>op</var> (<code>&amp;</code>, <code>^</code>, or <code>|</code>), <var>x</var> (a BigInt), and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Set <var>x</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>).</li><li>Set <var>y</var> to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>).</li><li>Let <var>result</var> be 0.</li><li>Let <var>shift</var> be 0.</li><li>Repeat, until (<var>x</var> = 0 or <var>x</var> = -1) and (<var>y</var> = 0 or <var>y</var> = -1),<ol><li>Let <var>xDigit</var> be <var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>Let <var>yDigit</var> be <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>If <var>op</var> is <code>&amp;</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else if <var>op</var> is <code>|</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>^</code>.</li><li>Set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li></ol></li><li>Set <var>shift</var> to <var>shift</var> + 1.</li><li>Set <var>x</var> to (<var>x</var> - <var>xDigit</var>) / 2.</li><li>Set <var>y</var> to (<var>y</var> - <var>yDigit</var>) / 2.</li></ol></li><li>If <var>op</var> is <code>&amp;</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else if <var>op</var> is <code>|</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>^</code>.</li><li>Let <var>tmp</var> be <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li></ol></li><li>If <var>tmp</var> &#8800; 0, then<ol><li>Set <var>result</var> to <var>result</var> - 2<sup><var>shift</var></sup>.</li><li>NOTE: This extends the sign.</li></ol></li><li>Return the BigInt value for <var>result</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.return": {"num": "27.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object with a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"return\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-issharedarraybuffer": {"num": "25.2.1.2", "title": "#sec-issharedarraybuffer IsSharedArrayBuffer ( obj )", "html": "<emu-clause id=\"sec-issharedarraybuffer\" aoid=\"IsSharedArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issharedarraybuffer\">#sec-issharedarraybuffer</span> IsSharedArrayBuffer ( <var>obj</var> )</h1>\n        <p>The abstract operation IsSharedArrayBuffer takes argument <var>obj</var> (an Object that has an [[ArrayBufferData]] internal slot). It tests whether an object is an ArrayBuffer, a SharedArrayBuffer, or a subtype of either. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>bufferData</var> be <var>obj</var>.[[ArrayBufferData]].</li><li>If <var>bufferData</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref>, return <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>bufferData</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinarygetownproperty": {"num": "10.1.5.1", "title": "#sec-ordinarygetownproperty OrdinaryGetOwnProperty ( O, P )", "html": "<emu-clause id=\"sec-ordinarygetownproperty\" aoid=\"OrdinaryGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarygetownproperty\">#sec-ordinarygetownproperty</span> OrdinaryGetOwnProperty ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryGetOwnProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>O</var> does not have an own property with key <var>P</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>D</var> be a newly created <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> with no fields.</li><li>Let <var>X</var> be <var>O</var>'s own property whose key is <var>P</var>.</li><li>If <var>X</var> is a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, then<ol><li>Set <var>D</var>.[[Value]] to the value of <var>X</var>'s [[Value]] attribute.</li><li>Set <var>D</var>.[[Writable]] to the value of <var>X</var>'s [[Writable]] attribute.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>X</var> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>.</li><li>Set <var>D</var>.[[Get]] to the value of <var>X</var>'s [[Get]] attribute.</li><li>Set <var>D</var>.[[Set]] to the value of <var>X</var>'s [[Set]] attribute.</li></ol></li><li>Set <var>D</var>.[[Enumerable]] to the value of <var>X</var>'s [[Enumerable]] attribute.</li><li>Set <var>D</var>.[[Configurable]] to the value of <var>X</var>'s [[Configurable]] attribute.</li><li>Return <var>D</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-add-entries-from-iterable": {"num": "24.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li>If <var>k</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>k</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>v</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>.[[Value]], <var>v</var>.[[Value]] &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-ordinaryhasproperty": {"num": "10.1.7.1", "title": "#sec-ordinaryhasproperty OrdinaryHasProperty ( O, P )", "html": "<emu-clause id=\"sec-ordinaryhasproperty\" aoid=\"OrdinaryHasProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryhasproperty\">#sec-ordinaryhasproperty</span> OrdinaryHasProperty ( <var>O</var>, <var>P</var> )</h1>\n        <p>The abstract operation OrdinaryHasProperty takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>hasOwn</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>hasOwn</var> is not <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-isintailposition": {"num": "15.10.1", "title": "#sec-isintailposition Static Semantics: IsInTailPosition ( call )", "html": "<emu-clause id=\"sec-isintailposition\" aoid=\"IsInTailPosition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isintailposition\">#sec-isintailposition</span> Static Semantics: IsInTailPosition ( <var>call</var> )</h1>\n      <p>The abstract operation IsInTailPosition takes argument <var>call</var> (a <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, an <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, or a <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the source code matching <var>call</var> is <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>call</var> is not contained within a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt> that most closely contains <var>call</var>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of a <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is the <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>body</var> is an <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of <emu-xref aoid=\"HasCallInTailPosition\"><a href=\"#sec-static-semantics-hascallintailposition\">HasCallInTailPosition</a></emu-xref> of <var>body</var> with argument <var>call</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Tail Position calls are only defined in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> because of a common non-standard language extension (see <emu-xref href=\"#sec-addrestrictedfunctionproperties\"><a href=\"#sec-addrestrictedfunctionproperties\" class=\"excluded-xref\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</a></emu-xref>) that enables observation of the chain of caller contexts.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-detacharraybuffer": {"num": "25.1.2.3", "title": "#sec-detacharraybuffer DetachArrayBuffer ( arrayBuffer [ , key ] )", "html": "<emu-clause id=\"sec-detacharraybuffer\" aoid=\"DetachArrayBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-detacharraybuffer\">#sec-detacharraybuffer</span> DetachArrayBuffer ( <var>arrayBuffer</var> [ , <var>key</var> ] )</h1>\n        <p>The abstract operation DetachArrayBuffer takes argument <var>arrayBuffer</var> (an Object that has [[ArrayBufferData]], [[ArrayBufferByteLength]], and [[ArrayBufferDetachKey]] internal slots) and optional argument <var>key</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li>If <var>key</var> is not present, set <var>key</var> to <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>arrayBuffer</var>.[[ArrayBufferDetachKey]], <var>key</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferData]] to <emu-val>null</emu-val>.</li><li>Set <var>arrayBuffer</var>.[[ArrayBufferByteLength]] to 0.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Detaching an ArrayBuffer instance disassociates the <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> used as its backing store from the instance and sets the byte length of the buffer to 0. No operations defined by this specification use the DetachArrayBuffer abstract operation. However, an ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> or implementation may define such operations.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator takes argument <var>obj</var> and optional arguments <var>hint</var> (<emu-const>sync</emu-const> or <emu-const>async</emu-const>) and <var>method</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@asyncIterator</a></emu-xref>).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return !&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializeboundname": {"num": "8.5.2.1", "title": "#sec-initializeboundname InitializeBoundName ( name, value, environment )", "html": "<emu-clause id=\"sec-initializeboundname\" aoid=\"InitializeBoundName\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializeboundname\">#sec-initializeboundname</span> InitializeBoundName ( <var>name</var>, <var>value</var>, <var>environment</var> )</h1>\n        <p>The abstract operation InitializeBoundName takes arguments <var>name</var> (a String), <var>value</var>, and <var>environment</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>environment</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>environment</var>.InitializeBinding(<var>name</var>, <var>value</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>lhs</var> be <emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>name</var>).</li><li>Return ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-set-o-p-v-throw": {"num": "7.3.4", "title": "#sec-set-o-p-v-throw Set ( O, P, V, Throw )", "html": "<emu-clause id=\"sec-set-o-p-v-throw\" aoid=\"Set\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set-o-p-v-throw\">#sec-set-o-p-v-throw</span> Set ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Throw</var> )</h1>\n      <p>The abstract operation Set takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Throw</var> (a Boolean). It is used to set the value of a specific property of an object. <var>V</var> is the new value for the property. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>success</var> be ? <var>O</var>.[[Set]](<var>P</var>, <var>V</var>, <var>O</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val> and <var>Throw</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ordinarysetwithowndescriptor": {"num": "10.1.9.2", "title": "#sec-ordinarysetwithowndescriptor OrdinarySetWithOwnDescriptor ( O, P, V, Receiver, ownDesc )", "html": "<emu-clause id=\"sec-ordinarysetwithowndescriptor\" aoid=\"OrdinarySetWithOwnDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarysetwithowndescriptor\">#sec-ordinarysetwithowndescriptor</span> OrdinarySetWithOwnDescriptor ( <var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>, <var>ownDesc</var> )</h1>\n        <p>The abstract operation OrdinarySetWithOwnDescriptor takes arguments <var>O</var> (an Object), <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>ownDesc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>If <var>ownDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Else,<ol><li>Set <var>ownDesc</var> to the PropertyDescriptor { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li></ol></li></ol></li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>ownDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>Receiver</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>existingDescriptor</var> be ? <var>Receiver</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>existingDescriptor</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>existingDescriptor</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingDescriptor</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>valueDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var> }.</li><li>Return ? <var>Receiver</var>.[[DefineOwnProperty]](<var>P</var>, <var>valueDesc</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Receiver</var> does not currently have a property <var>P</var>.</li><li>Return ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>Receiver</var>, <var>P</var>, <var>V</var>).</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>setter</var> be <var>ownDesc</var>.[[Set]].</li><li>If <var>setter</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>setter</var>, <var>Receiver</var>, &#171; <var>V</var> &#187;).</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-getownproperty-p": {"num": "10.4.5.1", "title": "#sec-integer-indexed-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-getownproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-getownproperty-p\">#sec-integer-indexed-exotic-objects-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n        <p>The [[GetOwnProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>value</var> be !&#160;<emu-xref aoid=\"IntegerIndexedElementGet\"><a href=\"#sec-integerindexedelementget\">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li><li>If <var>value</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return the PropertyDescriptor { [[Value]]: <var>value</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li></ol></li></ol></li><li>Return <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string-exotic-objects-getownproperty-p": {"num": "10.4.3.1", "title": "#sec-string-exotic-objects-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-string-exotic-objects-getownproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-exotic-objects-getownproperty-p\">#sec-string-exotic-objects-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n        <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> <var>S</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>desc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, return <var>desc</var>.</li><li>Return !&#160;<emu-xref aoid=\"StringGetOwnProperty\"><a href=\"#sec-stringgetownproperty\">StringGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setvalueinbuffer": {"num": "25.1.2.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes arguments <var>arrayBuffer</var> (an ArrayBuffer or SharedArrayBuffer), <var>byteIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>type</var> (a <emu-xref href=\"#sec-typedarray-objects\"><a href=\"#sec-typedarray-objects\">TypedArray element type</a></emu-xref>), <var>value</var> (a Number or a BigInt), <var>isTypedArray</var> (a Boolean), and <var>order</var> (<emu-const>SeqCst</emu-const>, <emu-const>Unordered</emu-const>, or <emu-const>Init</emu-const>) and optional argument <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-defineownproperty-p-desc": {"num": "10.4.5.3", "title": "#sec-integer-indexed-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-defineownproperty-p-desc\">#sec-integer-indexed-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has an [[Enumerable]] field and if <var>Desc</var>.[[Enumerable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Writable]] field and if <var>Desc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Value]] field, perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>Desc</var>.[[Value]]).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-prepareforordinarycall": {"num": "10.2.1.1", "title": "#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )", "html": "<emu-clause id=\"sec-prepareforordinarycall\" aoid=\"PrepareForOrdinaryCall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prepareforordinarycall\">#sec-prepareforordinarycall</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation PrepareForOrdinaryCall takes arguments <var>F</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>newTarget</var> (an Object or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid=\"NewFunctionEnvironment\"><a href=\"#sec-newfunctionenvironment\">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the PrivateEnvironment of <var>calleeContext</var> to <var>F</var>.[[PrivateEnvironment]].</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createbuiltinfunction": {"num": "10.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( behaviour, length, name, additionalInternalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>behaviour</var>, <var>length</var>, <var>name</var>, <var>additionalInternalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> [ , <var>prefix</var> ] ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>behaviour</var> (an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification), <var>length</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>name</var> (a property key), and <var>additionalInternalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>), <var>prototype</var> (an Object or <emu-val>null</emu-val>), and <var>prefix</var> (a String). <var>additionalInternalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>realm</var> is not present, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>internalSlotsList</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the names of all the internal slots that <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</a></emu-xref> requires for the built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that is about to be created.</li><li>Append to <var>internalSlotsList</var> the elements of <var>additionalInternalSlotsList</var>.</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that, when called, performs the action described by <var>behaviour</var> using the provided arguments as the values of the corresponding parameters specified by <var>behaviour</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>, and an [[InitialName]] internal slot.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[InitialName]] to <emu-val>null</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>func</var>, <var>length</var>).</li><li>If <var>prefix</var> is not present, then<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>, <var>prefix</var>).</li></ol></li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n  "}, "sec-isanonymousfunctiondefinition": {"num": "8.3.3", "title": "#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )", "html": "<emu-clause id=\"sec-isanonymousfunctiondefinition\" aoid=\"IsAnonymousFunctionDefinition\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isanonymousfunctiondefinition\">#sec-isanonymousfunctiondefinition</span> Static Semantics: IsAnonymousFunctionDefinition ( <var>expr</var> )</h1>\n      <p>The abstract operation IsAnonymousFunctionDefinition takes argument <var>expr</var> (an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It determines if its argument is a function definition that does not bind a name. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"IsFunctionDefinition\"><a href=\"#sec-static-semantics-isfunctiondefinition\">IsFunctionDefinition</a></emu-xref> of <var>expr</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>hasName</var> be <emu-xref aoid=\"HasName\"><a href=\"#sec-static-semantics-hasname\">HasName</a></emu-xref> of <var>expr</var>.</li><li>If <var>hasName</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-allocatetypedarraybuffer": {"num": "23.2.5.1.6", "title": "#sec-allocatetypedarraybuffer AllocateTypedArrayBuffer ( O, length )", "html": "<emu-clause id=\"sec-allocatetypedarraybuffer\" aoid=\"AllocateTypedArrayBuffer\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-allocatetypedarraybuffer\">#sec-allocatetypedarraybuffer</span> AllocateTypedArrayBuffer ( <var>O</var>, <var>length</var> )</h1>\n          <p>The abstract operation AllocateTypedArrayBuffer takes arguments <var>O</var> (a TypedArray that has a [[ViewedArrayBuffer]] internal slot) and <var>length</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It allocates and associates an ArrayBuffer with <var>O</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var>.[[ViewedArrayBuffer]] is <emu-val>undefined</emu-val>.</li><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>length</var>.</li><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>, <var>byteLength</var>).</li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>length</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-getmethod": {"num": "7.3.10", "title": "#sec-getmethod GetMethod ( V, P )", "html": "<emu-clause id=\"sec-getmethod\" aoid=\"GetMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmethod\">#sec-getmethod</span> GetMethod ( <var>V</var>, <var>P</var> )</h1>\n      <p>The abstract operation GetMethod takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key). It is used to get the value of a specific property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> when the value of the property is expected to be a function. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>If <var>func</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>func</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createsetiterator": {"num": "24.2.5.1", "title": "#sec-createsetiterator CreateSetIterator ( set, kind )", "html": "<emu-clause id=\"sec-createsetiterator\" oldids=\"sec-properties-of-set-iterator-instances,table-51,table-internal-slots-of-set-iterator-instances\" aoid=\"CreateSetIterator\"><span id=\"table-internal-slots-of-set-iterator-instances\"></span><span id=\"table-51\"></span><span id=\"sec-properties-of-set-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsetiterator\">#sec-createsetiterator</span> CreateSetIterator ( <var>set</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateSetIterator takes arguments <var>set</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>kind</var> (<emu-const>key+value</emu-const> or <emu-const>value</emu-const>). It is used to create iterator objects for Set methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>set</var>, [[SetData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>set</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>index</var> be 0.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>set</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key+value</emu-const>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(! <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>value</emu-const>.</li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>e</var>).</li></ol></li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%SetIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-samevaluenonnumeric": {"num": "7.2.12", "title": "#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )", "html": "<emu-clause id=\"sec-samevaluenonnumeric\" oldids=\"sec-samevaluenonnumber\" aoid=\"SameValueNonNumeric\"><span id=\"sec-samevaluenonnumber\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluenonnumeric\">#sec-samevaluenonnumeric</span> SameValueNonNumeric ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueNonNumeric takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>, but not a Number or a BigInt) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>, but not a Number or a BigInt). It returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Undefined, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Null, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String, then<ol><li>If <var>x</var> and <var>y</var> are exactly the same sequence of code units (same length and same code units at corresponding indices), return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, then<ol><li>If <var>x</var> and <var>y</var> are both <emu-val>true</emu-val> or both <emu-val>false</emu-val>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Symbol, then<ol><li>If <var>x</var> and <var>y</var> are both the same Symbol value, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <var>x</var> and <var>y</var> are the same Object value, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createmapiterator": {"num": "24.1.5.1", "title": "#sec-createmapiterator CreateMapIterator ( map, kind )", "html": "<emu-clause id=\"sec-createmapiterator\" oldids=\"sec-properties-of-map-iterator-instances,table-50,table-internal-slots-of-map-iterator-instances\" aoid=\"CreateMapIterator\"><span id=\"table-internal-slots-of-map-iterator-instances\"></span><span id=\"table-50\"></span><span id=\"sec-properties-of-map-iterator-instances\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmapiterator\">#sec-createmapiterator</span> CreateMapIterator ( <var>map</var>, <var>kind</var> )</h1>\n        <p>The abstract operation CreateMapIterator takes arguments <var>map</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>kind</var> (<emu-const>key+value</emu-const>, <emu-const>key</emu-const>, or <emu-const>value</emu-const>). It is used to create iterator objects for Map methods that return such iterators. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>map</var>, [[MapData]]).</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>map</var> and <var>kind</var> and performs the following steps when called:<ol><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>map</var>.[[MapData]].</li><li>Let <var>index</var> be 0.</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>Repeat, while <var>index</var> &lt; <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>kind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>(<var>result</var>).</li><li>NOTE: The number of elements in <var>entries</var> may have changed while execution of this abstract operation was paused by <emu-xref aoid=\"Yield\"><a href=\"#sec-yield\">Yield</a></emu-xref>.</li><li>Set <var>numEntries</var> to the number of elements of <var>entries</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"CreateIteratorFromClosure\"><a href=\"#sec-createiteratorfromclosure\">CreateIteratorFromClosure</a></emu-xref>(<var>closure</var>, <emu-val>\"%MapIteratorPrototype%\"</emu-val>, <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setintegritylevel": {"num": "7.3.15", "title": "#sec-setintegritylevel SetIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-setintegritylevel\" aoid=\"SetIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setintegritylevel\">#sec-setintegritylevel</span> SetIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation SetIntegrityLevel takes arguments <var>O</var> (an Object) and <var>level</var> (<emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>). It is used to fix the set of own properties of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>status</var> be ? <var>O</var>.[[PreventExtensions]]().</li><li>If <var>status</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>If <var>level</var> is <emu-const>sealed</emu-const>, then<ol><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is <emu-const>frozen</emu-const>.</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, <var>desc</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-stringgetownproperty": {"num": "10.4.3.5", "title": "#sec-stringgetownproperty StringGetOwnProperty ( S, P )", "html": "<emu-clause id=\"sec-stringgetownproperty\" aoid=\"StringGetOwnProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringgetownproperty\">#sec-stringgetownproperty</span> StringGetOwnProperty ( <var>S</var>, <var>P</var> )</h1>\n        <p>The abstract operation StringGetOwnProperty takes arguments <var>S</var> (an Object that has a [[StringData]] internal slot) and <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"IsIntegralNumber\"><a href=\"#sec-isintegralnumber\">IsIntegralNumber</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be <var>S</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>str</var>) is String.</li><li>Let <var>len</var> be the length of <var>str</var>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &lt; 0 or <var>len</var> &#8804; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>), return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be the String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>).</li><li>Return the PropertyDescriptor { [[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-getmodulenamespace": {"num": "16.2.1.10", "title": "#sec-getmodulenamespace GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> GetModuleNamespace ( <var>module</var> )</h1>\n        <p>The abstract operation GetModuleNamespace takes argument <var>module</var> (an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>). It retrieves the Module Namespace Object representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval. It performs the following steps when called:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>name</var> of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getwaiterlist": {"num": "25.4.2.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>The abstract operation GetWaiterList takes arguments <var>block</var> (a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>) and <var>i</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> which is evenly divisble by 4). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li>Return the <emu-xref href=\"#sec-waiterlist-objects\"><a href=\"#sec-waiterlist-objects\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integer-indexed-exotic-objects-ownpropertykeys": {"num": "10.4.5.7", "title": "#sec-integer-indexed-exotic-objects-ownpropertykeys [[OwnPropertyKeys]] ( )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-ownpropertykeys\">#sec-integer-indexed-exotic-objects-ownpropertykeys</span> [[OwnPropertyKeys]] ( )</h1>\n        <p>The [[OwnPropertyKeys]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes no arguments. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>false</emu-val>, then<ol><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> starting with 0 such that <var>i</var> &lt; <var>O</var>.[[ArrayLength]], in ascending order, do<ol><li>Add !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)) as the last element of <var>keys</var>.</li></ol></li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref>, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation, do<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-testintegritylevel": {"num": "7.3.16", "title": "#sec-testintegritylevel TestIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-testintegritylevel\" aoid=\"TestIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testintegritylevel\">#sec-testintegritylevel</span> TestIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation TestIntegrityLevel takes arguments <var>O</var> (an Object) and <var>level</var> (<emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>). It is used to determine if the set of own properties of an object are fixed. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>O</var>).</li><li>If <var>extensible</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>NOTE: If the object is extensible, none of its properties are examined.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>level</var> is <emu-const>frozen</emu-const> and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" oldids=\"sec-enumerableownproperties\" aoid=\"EnumerableOwnPropertyNames\"><span id=\"sec-enumerableownproperties\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (<emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var>, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-invoke": {"num": "7.3.20", "title": "#sec-invoke Invoke ( V, P [ , argumentsList ] )", "html": "<emu-clause id=\"sec-invoke\" aoid=\"Invoke\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invoke\">#sec-invoke</span> Invoke ( <var>V</var>, <var>P</var> [ , <var>argumentsList</var> ] )</h1>\n      <p>The abstract operation Invoke takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>P</var> (a property key) and optional argument <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It is used to call a method property of an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>. <var>V</var> serves as both the lookup point for the property and the <emu-val>this</emu-val> value of the call. <var>argumentsList</var> is the list of arguments values passed to the method. If <var>argumentsList</var> is not present, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used as its value. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>If <var>argumentsList</var> is not present, set <var>argumentsList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>func</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>V</var>, <var>argumentsList</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-canonicalnumericindexstring": {"num": "7.1.21", "title": "#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )", "html": "<emu-clause id=\"sec-canonicalnumericindexstring\" aoid=\"CanonicalNumericIndexString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</span> CanonicalNumericIndexString ( <var>argument</var> )</h1>\n      <p>The abstract operation CanonicalNumericIndexString takes argument <var>argument</var> (a String). It returns <var>argument</var> converted to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> if it is a String representation of a Number that would be produced by <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, or the string <emu-val>\"-0\"</emu-val>. Otherwise, it returns <emu-val>undefined</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>argument</var> is <emu-val>\"-0\"</emu-val>, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>argument</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n      <p>A <em>canonical numeric string</em> is any String value for which the CanonicalNumericIndexString abstract operation does not return <emu-val>undefined</emu-val>.</p>\n    </emu-clause>\n\n    "}, "sec-resolveexport": {"num": "16.2.1.6.3", "title": "#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] )", "html": "<emu-clause id=\"sec-resolveexport\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-resolveexport\">#sec-resolveexport</span> ResolveExport ( <var>exportName</var> [ , <var>resolveSet</var> ] )</h1>\n          <p>The ResolveExport concrete method of a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var> takes argument <var>exportName</var> (a String) and optional argument <var>resolveSet</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Records that have [[Module]] and [[ExportName]] fields).</p>\n              <p>ResolveExport attempts to resolve an imported binding to the actual defining module and local binding name. The defining module may be the module represented by the <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> this method was invoked on or some other module that is imported by that module. The parameter <var>resolveSet</var> is used to detect unresolved circular import/export paths. If a pair consisting of specific <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <var>exportName</var> is reached that is already in <var>resolveSet</var>, an import circularity has been encountered. Before recursively calling ResolveExport, a pair consisting of <var>module</var> and <var>exportName</var> is added to <var>resolveSet</var>.</p>\n              <p>If a defining module is found, a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]], [[BindingName]] } is returned. This record identifies the resolved binding of the originally requested export, unless this is the export of a namespace with no local binding. In this case, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. If no definition was found or the request is found to be circular, <emu-val>null</emu-val> is returned. If the request is found to be ambiguous, the string <emu-val>\"ambiguous\"</emu-val> is returned.</p>\n            \n\n          <p>It performs the following steps when called:</p>\n\n          <emu-alg><ol><li>If <var>resolveSet</var> is not present, set <var>resolveSet</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]], [[ExportName]] } <var>r</var> of <var>resolveSet</var>, do<ol><li>If <var>module</var> and <var>r</var>.[[Module]] are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>r</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is a circular import request.</li><li>Return <emu-val>null</emu-val>.</li></ol></li></ol></li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Module]]: <var>module</var>, [[ExportName]]: <var>exportName</var> } to <var>resolveSet</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[LocalExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> provides the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>module</var>, [[BindingName]]: <var>e</var>.[[LocalName]] }.</li></ol></li></ol></li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[IndirectExportEntries]], do<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <var>e</var>.[[ExportName]]) is <emu-val>true</emu-val>, then<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>If <var>e</var>.[[ImportName]] is <emu-val>\"*\"</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> does not provide the direct binding for this export.</li><li>Return <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref> { [[Module]]: <var>importedModule</var>, [[BindingName]]: <emu-val>\"*namespace*\"</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> imports a specific binding for this export.</li><li>Return <var>importedModule</var>.ResolveExport(<var>e</var>.[[ImportName]], <var>resolveSet</var>).</li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>exportName</var>, <emu-val>\"default\"</emu-val>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: A <code>default</code> export was not explicitly defined by this module.</li><li>Return <emu-val>null</emu-val>.</li><li>NOTE: A <code>default</code> export cannot be provided by an <code>export *</code> or <code>export * from \"mod\"</code> declaration.</li></ol></li><li>Let <var>starResolution</var> be <emu-val>null</emu-val>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>e</var> of <var>module</var>.[[StarExportEntries]], do<ol><li>Let <var>importedModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>e</var>.[[ModuleRequest]]).</li><li>Let <var>resolution</var> be ? <var>importedModule</var>.ResolveExport(<var>exportName</var>, <var>resolveSet</var>).</li><li>If <var>resolution</var> is <emu-val>\"ambiguous\"</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li><li>If <var>resolution</var> is not <emu-val>null</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>If <var>starResolution</var> is <emu-val>null</emu-val>, set <var>starResolution</var> to <var>resolution</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There is more than one <code>*</code> import that includes the requested name.</li><li>If <var>resolution</var>.[[Module]] and <var>starResolution</var>.[[Module]] are not the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>.[[BindingName]], <var>starResolution</var>.[[BindingName]]) is <emu-val>false</emu-val>, return <emu-val>\"ambiguous\"</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <var>starResolution</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-makeconstructor": {"num": "10.2.5", "title": "#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )", "html": "<emu-clause id=\"sec-makeconstructor\" aoid=\"MakeConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeconstructor\">#sec-makeconstructor</span> MakeConstructor ( <var>F</var> [ , <var>writablePrototype</var> [ , <var>prototype</var> ] ] )</h1>\n      <p>The abstract operation MakeConstructor takes argument <var>F</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and optional arguments <var>writablePrototype</var> (a Boolean) and <var>prototype</var> (an Object). It converts <var>F</var> into a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>F</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <emu-val>\"prototype\"</emu-val> own property.</li><li>Set <var>F</var>.[[Construct]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>F</var>.[[ConstructorKind]] to <emu-const>base</emu-const>.</li><li>If <var>writablePrototype</var> is not present, set <var>writablePrototype</var> to <emu-val>true</emu-val>.</li><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>prototype</var>, <emu-val>\"constructor\"</emu-val>, PropertyDescriptor { [[Value]]: <var>F</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc": {"num": "10.5.6", "title": "#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc\">#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n      <p>The [[DefineOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"defineProperty\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[DefineOwnProperty]](<var>P</var>, <var>Desc</var>).</li></ol></li><li>Let <var>descObj</var> be <emu-xref aoid=\"FromPropertyDescriptor\"><a href=\"#sec-frompropertydescriptor\">FromPropertyDescriptor</a></emu-xref>(<var>Desc</var>).</li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var>, <var>descObj</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Let <var>settingConfigFalse</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else, let <var>settingConfigFalse</var> be <emu-val>false</emu-val>.</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>Desc</var>, <var>targetDesc</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val>, <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, and <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> has a [[Writable]] field and <var>Desc</var>.[[Writable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[DefineOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[DefineOwnProperty]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be added, if the target object is not extensible.\n          </li>\n          <li>\n            A property cannot be non-configurable, unless there exists a corresponding non-configurable own property of the target object.\n          </li>\n          <li>\n            A non-configurable property cannot be non-writable, unless there exists a corresponding non-configurable, non-writable own property of the target object.\n          </li>\n          <li>\n            If a property has a corresponding target object property then applying the <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> of the property to the target object using [[DefineOwnProperty]] will not throw an exception.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-bytelistbitwiseop": {"num": "25.4.2.12", "title": "#sec-bytelistbitwiseop ByteListBitwiseOp ( op, xBytes, yBytes )", "html": "<emu-clause id=\"sec-bytelistbitwiseop\" aoid=\"ByteListBitwiseOp\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bytelistbitwiseop\">#sec-bytelistbitwiseop</span> ByteListBitwiseOp ( <var>op</var>, <var>xBytes</var>, <var>yBytes</var> )</h1>\n        <p>The abstract operation ByteListBitwiseOp takes arguments <var>op</var> (<code>&amp;</code>, <code>^</code>, or <code>|</code>), <var>xBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values), and <var>yBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values). The operation atomically performs a bitwise operation on all byte values of the arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>xBytes</var> and <var>yBytes</var> have the same number of elements.</li><li>Let <var>result</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>i</var> be 0.</li><li>For each element <var>xByte</var> of <var>xBytes</var>, do<ol><li>Let <var>yByte</var> be <var>yBytes</var>[<var>i</var>].</li><li>If <var>op</var> is <code>&amp;</code>, let <var>resultByte</var> be the result of applying the bitwise AND operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else if <var>op</var> is <code>^</code>, let <var>resultByte</var> be the result of applying the bitwise exclusive OR (XOR) operation to <var>xByte</var> and <var>yByte</var>.</li><li>Else, <var>op</var> is <code>|</code>. Let <var>resultByte</var> be the result of applying the bitwise inclusive OR operation to <var>xByte</var> and <var>yByte</var>.</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Append <var>resultByte</var> to the end of <var>result</var>.</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promise-resolve": {"num": "27.2.4.7.1", "title": "#sec-promise-resolve PromiseResolve ( C, x )", "html": "<emu-clause id=\"sec-promise-resolve\" aoid=\"PromiseResolve\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve\">#sec-promise-resolve</span> PromiseResolve ( <var>C</var>, <var>x</var> )</h1>\n          <p>The abstract operation PromiseResolve takes arguments <var>C</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) and <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It returns a new promise resolved with <var>x</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>x</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>xConstructor</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>x</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>xConstructor</var>, <var>C</var>) is <emu-val>true</emu-val>, return <var>x</var>.</li></ol></li><li>Let <var>promiseCapability</var> be ?&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<var>C</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>x</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-timezoneestring": {"num": "21.4.4.41.3", "title": "#sec-timezoneestring TimeZoneString ( tv )", "html": "<emu-clause id=\"sec-timezoneestring\" aoid=\"TimeZoneString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-timezoneestring\">#sec-timezoneestring</span> TimeZoneString ( <var>tv</var> )</h1>\n          <p>The abstract operation TimeZoneString takes argument <var>tv</var> (a Number, but not <emu-val>NaN</emu-val>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>offset</var> be <emu-xref aoid=\"LocalTZA\"><a href=\"#sec-local-time-zone-adjustment\">LocalTZA</a></emu-xref>(<var>tv</var>, <emu-val>true</emu-val>).</li><li>If <var>offset</var> &#8805; <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>Let <var>offsetSign</var> be <emu-val>\"+\"</emu-val>.</li><li>Let <var>absOffset</var> be <var>offset</var>.</li></ol></li><li>Else,<ol><li>Let <var>offsetSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>absOffset</var> be -<var>offset</var>.</li></ol></li><li>Let <var>offsetMin</var> be the String representation of <emu-xref aoid=\"MinFromTime\"><a href=\"#eqn-MinFromTime\">MinFromTime</a></emu-xref>(<var>absOffset</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>offsetHour</var> be the String representation of <emu-xref aoid=\"HourFromTime\"><a href=\"#eqn-HourFromTime\">HourFromTime</a></emu-xref>(<var>absOffset</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>tzName</var> be an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> string that is either the empty String or the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>offsetSign</var>, <var>offsetHour</var>, <var>offsetMin</var>, and <var>tzName</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-finishdynamicimport": {"num": "16.2.1.9", "title": "#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )", "html": "<emu-clause id=\"sec-finishdynamicimport\" aoid=\"FinishDynamicImport\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finishdynamicimport\">#sec-finishdynamicimport</span> FinishDynamicImport ( <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var>, <var>completion</var> )</h1>\n        <p>The abstract operation FinishDynamicImport takes arguments <var>referencingScriptOrModule</var>, <var>specifier</var>, <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>), and <var>completion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref> whose [[Value]] is <emu-val>undefined</emu-val>). FinishDynamicImport completes the process of a dynamic import originally started by an <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> call, resolving or rejecting the promise returned by that call as appropriate according to <var>completion</var>. It is performed by <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments as part of <emu-xref aoid=\"HostImportModuleDynamically\"><a href=\"#sec-hostimportmoduledynamically\">HostImportModuleDynamically</a></emu-xref>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li><li>Else,<ol><li>Let <var>moduleRecord</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>referencingScriptOrModule</var>, <var>specifier</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Evaluate has already been invoked on <var>moduleRecord</var> and successfully completed.</li><li>Let <var>namespace</var> be <emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>moduleRecord</var>).</li><li>If <var>namespace</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li><li>Else, perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>namespace</var>.[[Value]] &#187;).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorstart": {"num": "27.5.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart takes arguments <var>generator</var> and <var>generatorBody</var> (a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>If <var>generatorBody</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, then<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generatorBody</var> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters.</li><li>Let <var>result</var> be <var>generatorBody</var>().</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "22.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> and <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n        "}, "sec-binaryor": {"num": "6.1.6.2.17", "title": "#sec-binaryor BinaryOr ( x, y )", "html": "<emu-clause id=\"sec-binaryor\" aoid=\"BinaryOr\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryor\">#sec-binaryor</span> BinaryOr ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryOr takes arguments <var>x</var> (0 or 1) and <var>y</var> (0 or 1). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is 1 or <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-initializetypedarrayfromarraybuffer": {"num": "23.2.5.1.3", "title": "#sec-initializetypedarrayfromarraybuffer InitializeTypedArrayFromArrayBuffer ( O, buffer, byteOffset, length )", "html": "<emu-clause id=\"sec-initializetypedarrayfromarraybuffer\" oldids=\"sec-typedarray-buffer-byteoffset-length\" aoid=\"InitializeTypedArrayFromArrayBuffer\"><span id=\"sec-typedarray-buffer-byteoffset-length\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializetypedarrayfromarraybuffer\">#sec-initializetypedarrayfromarraybuffer</span> InitializeTypedArrayFromArrayBuffer ( <var>O</var>, <var>buffer</var>, <var>byteOffset</var>, <var>length</var> )</h1>\n          <p>The abstract operation InitializeTypedArrayFromArrayBuffer takes arguments <var>O</var> (a TypedArray), <var>buffer</var> (an ArrayBuffer), <var>byteOffset</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>length</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>constructorName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>offset</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>byteOffset</var>).</li><li>If <var>offset</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>length</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>newLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>bufferByteLength</var> be <var>buffer</var>.[[ArrayBufferByteLength]].</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>bufferByteLength</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>newByteLength</var> be <var>bufferByteLength</var> - <var>offset</var>.</li><li>If <var>newByteLength</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>Let <var>newByteLength</var> be <var>newLength</var> &#215; <var>elementSize</var>.</li><li>If <var>offset</var> + <var>newByteLength</var> &gt; <var>bufferByteLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>buffer</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>newByteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to <var>offset</var>.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>newByteLength</var> / <var>elementSize</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-boundfunctioncreate": {"num": "10.4.1.3", "title": "#sec-boundfunctioncreate BoundFunctionCreate ( targetFunction, boundThis, boundArgs )", "html": "<emu-clause id=\"sec-boundfunctioncreate\" aoid=\"BoundFunctionCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-boundfunctioncreate\">#sec-boundfunctioncreate</span> BoundFunctionCreate ( <var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var> )</h1>\n        <p>The abstract operation BoundFunctionCreate takes arguments <var>targetFunction</var> (a callable Object), <var>boundThis</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>boundArgs</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It is used to specify the creation of new bound function exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>proto</var> be ? <var>targetFunction</var>.[[GetPrototypeOf]]().</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-bound-function-exotic-objects\"><a href=\"#table-internal-slots-of-bound-function-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-bound-function-exotic-objects\">#table-internal-slots-of-bound-function-exotic-objects</a></emu-xref>, plus [[Prototype]] and [[Extensible]].</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Call]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\"><a href=\"#sec-bound-function-exotic-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-call-thisargument-argumentslist\">#sec-bound-function-exotic-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>targetFunction</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>obj</var>.[[Construct]] as described in <emu-xref href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\"><a href=\"#sec-bound-function-exotic-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-bound-function-exotic-objects-construct-argumentslist-newtarget\">#sec-bound-function-exotic-objects-construct-argumentslist-newtarget</a></emu-xref>.</li></ol></li><li>Set <var>obj</var>.[[BoundTargetFunction]] to <var>targetFunction</var>.</li><li>Set <var>obj</var>.[[BoundThis]] to <var>boundThis</var>.</li><li>Set <var>obj</var>.[[BoundArguments]] to <var>boundArgs</var>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-todatestring": {"num": "21.4.4.41.4", "title": "#sec-todatestring ToDateString ( tv )", "html": "<emu-clause id=\"sec-todatestring\" aoid=\"ToDateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-todatestring\">#sec-todatestring</span> ToDateString ( <var>tv</var> )</h1>\n          <p>The abstract operation ToDateString takes argument <var>tv</var> (a Number). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <emu-val>\"Invalid Date\"</emu-val>.</li><li>Let <var>t</var> be <emu-xref aoid=\"LocalTime\"><a href=\"#sec-localtime\">LocalTime</a></emu-xref>(<var>tv</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-xref aoid=\"DateString\"><a href=\"#sec-datestring\">DateString</a></emu-xref>(<var>t</var>), the code unit 0x0020 (SPACE), <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>t</var>), and <emu-xref aoid=\"TimeZoneString\"><a href=\"#sec-timezoneestring\">TimeZoneString</a></emu-xref>(<var>tv</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-settypedarrayfromarraylike": {"num": "23.2.3.23.2", "title": "#sec-settypedarrayfromarraylike SetTypedArrayFromArrayLike ( target, targetOffset, source )", "html": "<emu-clause id=\"sec-settypedarrayfromarraylike\" oldids=\"sec-%typedarray%.prototype.set-array-offset\" aoid=\"SetTypedArrayFromArrayLike\"><span id=\"sec-%typedarray%.prototype.set-array-offset\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-settypedarrayfromarraylike\">#sec-settypedarrayfromarraylike</span> SetTypedArrayFromArrayLike ( <var>target</var>, <var>targetOffset</var>, <var>source</var> )</h1>\n          <p>The abstract operation SetTypedArrayFromArrayLike takes arguments <var>target</var> (a TypedArray), <var>targetOffset</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), and <var>source</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>, but not a TypedArray). It sets multiple values in <var>target</var>, starting at index <var>targetOffset</var>, reading the values from <var>source</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>targetOffset</var> is +&#8734;, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-asynciterator-interface": {"num": "27.1.1.4", "title": "#sec-asynciterator-interface The AsyncIterator Interface", "html": "<emu-clause id=\"sec-asynciterator-interface\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciterator-interface\">#sec-asynciterator-interface</span> The <i>AsyncIterator</i> Interface</h1>\n        <p>An object that implements the <i>AsyncIterator</i> interface must include the properties in <emu-xref href=\"#table-async-iterator-required\"><a href=\"#table-async-iterator-required\" class=\"excluded-xref\" excluded-id=\"table-async-iterator-required\">#table-async-iterator-required</a></emu-xref>. Such objects may also implement the properties in <emu-xref href=\"#table-async-iterator-optional\"><a href=\"#table-async-iterator-optional\" class=\"excluded-xref\" excluded-id=\"table-async-iterator-optional\">#table-async-iterator-optional</a></emu-xref>.</p>\n        <emu-table id=\"table-async-iterator-required\" caption=\"&lt;i&gt;AsyncIterator&lt;/i&gt; Interface Required Properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-iterator-required\">#table-async-iterator-required</span>: <i>AsyncIterator</i> Interface Required Properties</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>Property</th>\n              <th>Value</th>\n              <th>Requirements</th>\n            </tr>\n            <tr>\n              <td><emu-val>\"next\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object that conforms to the <i>IteratorResult</i> interface. If a previous call to the <code>next</code> method of an <i>AsyncIterator</i> has returned a promise for an <i>IteratorResult</i> object whose <emu-val>\"done\"</emu-val> property is <emu-val>true</emu-val>, then all subsequent calls to the <code>next</code> method of that object should also return a promise for an <i>IteratorResult</i> object whose <emu-val>\"done\"</emu-val> property is <emu-val>true</emu-val>. However, this requirement is not enforced.</p>\n\n                <p>Additionally, the <i>IteratorResult</i> object that serves as a fulfillment value should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"). However, this requirement is also not enforced.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Arguments may be passed to the <code>next</code> function but their interpretation and validity is dependent upon the target <i>AsyncIterator</i>. The <code>for</code>-<code>await</code>-<code>of</code> statement and other common users of <em>AsyncIterators</em> do not pass any arguments, so <i>AsyncIterator</i> objects that expect to be used in such a manner must be prepared to deal with being called with no arguments.</p>\n        </div></emu-note>\n        <emu-table id=\"table-async-iterator-optional\" caption=\"&lt;i&gt;AsyncIterator&lt;/i&gt; Interface Optional Properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-iterator-optional\">#table-async-iterator-optional</span>: <i>AsyncIterator</i> Interface Optional Properties</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>Property</th>\n              <th>Value</th>\n              <th>Requirements</th>\n            </tr>\n            <tr>\n              <td><emu-val>\"return\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object that conforms to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>AsyncIterator</i> object that the caller does not intend to make any more <code>next</code> method calls to the <i>AsyncIterator</i>. The returned promise will fulfill with an <i>IteratorResult</i> object which will typically have a <emu-val>\"done\"</emu-val> property whose value is <emu-val>true</emu-val>, and a <emu-val>\"value\"</emu-val> property with the value passed as the argument of the <code>return</code> method. However, this requirement is not enforced.</p>\n\n                <p>Additionally, the <i>IteratorResult</i> object that serves as a fulfillment value should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"). If the argument value is used in the typical manner, then if it is a rejected promise, a promise rejected with the same reason should be returned; if it is a fulfilled promise, then its fulfillment value should be used as the <emu-val>\"value\"</emu-val> property of the returned promise's <i>IteratorResult</i> object fulfillment value. However, these requirements are also not enforced.</p>\n              </td>\n            </tr>\n            <tr>\n              <td><emu-val>\"throw\"</emu-val></td>\n              <td>A function that returns a promise for an <i>IteratorResult</i> object.</td>\n              <td>\n                <p>The returned promise, when fulfilled, must fulfill with an object that conforms to the <i>IteratorResult</i> interface. Invoking this method notifies the <i>AsyncIterator</i> object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to return a rejected promise which rejects with the value passed as the argument.</p>\n\n                <p>If the returned promise is fulfilled, the <i>IteratorResult</i> fulfillment value will typically have a <emu-val>\"done\"</emu-val> property whose value is <emu-val>true</emu-val>. Additionally, it should have a <emu-val>\"value\"</emu-val> property whose value is not a promise (or \"thenable\"), but this requirement is not enforced.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Typically callers of these methods should check for their existence before invoking them. Certain ECMAScript language features including <code>for</code>-<code>await</code>-<code>of</code> and <code>yield*</code> call these methods after performing an existence check.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "27.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( [ <var>value</var> ] )</h1>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In this specification, <var>value</var> is always provided, but is left optional for consistency with <emu-xref title=\"\" href=\"#sec-%asyncfromsynciteratorprototype%.return\"><a href=\"#sec-%asyncfromsynciteratorprototype%.return\">%AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</a></emu-xref>.</div></emu-note>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object with a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexpexec": {"num": "22.2.5.2.1", "title": "#sec-regexpexec RegExpExec ( R, S )", "html": "<emu-clause id=\"sec-regexpexec\" aoid=\"RegExpExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpexec\">#sec-regexpexec</span> RegExpExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpExec takes arguments <var>R</var> (an Object) and <var>S</var> (a String). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>exec</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"exec\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>exec</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exec</var>, <var>R</var>, &#171; <var>S</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>result</var>.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>R</var>, [[RegExpMatcher]]).</li><li>Return ?&#160;<emu-xref aoid=\"RegExpBuiltinExec\"><a href=\"#sec-regexpbuiltinexec\">RegExpBuiltinExec</a></emu-xref>(<var>R</var>, <var>S</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>If a callable <emu-val>\"exec\"</emu-val> property is not found this algorithm falls back to attempting to use the built-in RegExp matching algorithm. This provides compatible behaviour for code written for prior editions where most built-in algorithms that use regular expressions did not perform a dynamic property lookup of <emu-val>\"exec\"</emu-val>.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-valueofreadevent": {"num": "29.5.5", "title": "#sec-valueofreadevent ValueOfReadEvent ( execution, R )", "html": "<emu-clause id=\"sec-valueofreadevent\" aoid=\"ValueOfReadEvent\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valueofreadevent\">#sec-valueofreadevent</span> ValueOfReadEvent ( <var>execution</var>, <var>R</var> )</h1>\n      <p>The abstract operation ValueOfReadEvent takes arguments <var>execution</var> (a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>) and <var>R</var> (a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Ws</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events with length equal to <var>R</var>.[[ElementSize]].</li><li>Return <emu-xref aoid=\"ComposeWriteEventBytes\"><a href=\"#sec-composewriteeventbytes\">ComposeWriteEventBytes</a></emu-xref>(<var>execution</var>, <var>R</var>.[[ByteIndex]], <var>Ws</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-web-compat-blockdeclarationinstantiation": {"num": "B.3.2.6", "title": "#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-blockdeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</span> Changes to BlockDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-createmutablebinding\"><a href=\"#step-blockdeclarationinstantiation-createmutablebinding\">3.a.ii.1</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-createmutablebinding\"><ol start=\"1\" class=\"nested-thrice\"><li>If <var>env</var>.HasBinding(<var>dn</var>) is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n        <p>During <emu-xref aoid=\"BlockDeclarationInstantiation\"><a href=\"#sec-blockdeclarationinstantiation\">BlockDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-blockdeclarationinstantiation-initializebinding\"><a href=\"#step-blockdeclarationinstantiation-initializebinding\">3.b.iii</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-blockdeclarationinstantiation-initializebinding\"><ol start=\"3\" class=\"nested-twice\"><li>If the binding for <var>fn</var> in <var>env</var> is an uninitialized binding, then<ol><li>Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Perform <var>env</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li></ol></emu-alg>\n      </emu-annex>\n    "}, "sec-web-compat-globaldeclarationinstantiation": {"num": "B.3.2.2", "title": "#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation", "html": "<emu-annex id=\"sec-web-compat-globaldeclarationinstantiation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</span> Changes to GlobalDeclarationInstantiation</h1>\n        <p>During <emu-xref aoid=\"GlobalDeclarationInstantiation\"><a href=\"#sec-globaldeclarationinstantiation\">GlobalDeclarationInstantiation</a></emu-xref> the following steps are performed in place of step <emu-xref href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\"><a href=\"#step-globaldeclarationinstantiation-web-compat-insertion-point\" class=\"excluded-xref\" excluded-id=\"step-globaldeclarationinstantiation-web-compat-insertion-point\">#step-globaldeclarationinstantiation-web-compat-insertion-point</a></emu-xref>:</p>\n        <emu-alg replaces-step=\"step-globaldeclarationinstantiation-web-compat-insertion-point\"><ol start=\"12\"><li>Let <var>strict</var> be <emu-xref aoid=\"IsStrict\"><a href=\"#sec-static-semantics-isstrict\">IsStrict</a></emu-xref> of <var>script</var>.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>declaredFunctionOrVarNames</var> be the <emu-xref href=\"#list-concatenation\"><a href=\"#list-concatenation\">list-concatenation</a></emu-xref> of <var>declaredFunctionNames</var> and <var>declaredVarNames</var>.</li><li>For each <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> that is directly contained in the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>, <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>, or <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> Contained within <var>script</var>, do<ol><li>Let <var>F</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of <var>f</var>.</li><li>If replacing the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> with a <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> that has <var>F</var> as a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> would not produce any Early Errors for <var>script</var>, then<ol><li>If <var>env</var>.HasLexicalDeclaration(<var>F</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>fnDefinable</var> be ? <var>env</var>.CanDeclareGlobalVar(<var>F</var>).</li><li>If <var>fnDefinable</var> is <emu-val>true</emu-val>, then<ol><li>NOTE: A var binding for <var>F</var> is only instantiated here if it is neither a VarDeclaredName nor the name of another <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>If <var>declaredFunctionOrVarNames</var> does not contain <var>F</var>, then<ol><li>Perform ? <var>env</var>.CreateGlobalVarBinding(<var>F</var>, <emu-val>false</emu-val>).</li><li>Append <var>F</var> to <var>declaredFunctionOrVarNames</var>.</li></ol></li><li>When the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <var>f</var> is evaluated, perform the following steps in place of the <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> Evaluation algorithm provided in <emu-xref href=\"#sec-function-definitions-runtime-semantics-evaluation\"><a href=\"#sec-function-definitions-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</a></emu-xref>:<ol><li>Let <var>genv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s VariableEnvironment.</li><li>Let <var>benv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>fobj</var> be ! <var>benv</var>.GetBindingValue(<var>F</var>, <emu-val>false</emu-val>).</li><li>Perform ? <var>genv</var>.SetMutableBinding(<var>F</var>, <var>fobj</var>, <emu-val>false</emu-val>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n      </emu-annex>\n      "}, "sec-completepropertydescriptor": {"num": "6.2.5.6", "title": "#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-completepropertydescriptor\" aoid=\"CompletePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completepropertydescriptor\">#sec-completepropertydescriptor</span> CompletePropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>The abstract operation CompletePropertyDescriptor takes argument <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>like</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>false</emu-val>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <emu-val>undefined</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> does not have a [[Value]] field, set <var>Desc</var>.[[Value]] to <var>like</var>.[[Value]].</li><li>If <var>Desc</var> does not have a [[Writable]] field, set <var>Desc</var>.[[Writable]] to <var>like</var>.[[Writable]].</li></ol></li><li>Else,<ol><li>If <var>Desc</var> does not have a [[Get]] field, set <var>Desc</var>.[[Get]] to <var>like</var>.[[Get]].</li><li>If <var>Desc</var> does not have a [[Set]] field, set <var>Desc</var>.[[Set]] to <var>like</var>.[[Set]].</li></ol></li><li>If <var>Desc</var> does not have an [[Enumerable]] field, set <var>Desc</var>.[[Enumerable]] to <var>like</var>.[[Enumerable]].</li><li>If <var>Desc</var> does not have a [[Configurable]] field, set <var>Desc</var>.[[Configurable]] to <var>like</var>.[[Configurable]].</li><li>Return <var>Desc</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-integer-indexed-exotic-objects-delete-p": {"num": "10.4.5.6", "title": "#sec-integer-indexed-exotic-objects-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-delete-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-delete-p\">#sec-integer-indexed-exotic-objects-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n        <p>The [[Delete]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryDelete\"><a href=\"#sec-ordinarydelete\">OrdinaryDelete</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-blockdeclarationinstantiation": {"num": "14.2.3", "title": "#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )", "html": "<emu-clause id=\"sec-blockdeclarationinstantiation\" aoid=\"BlockDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-blockdeclarationinstantiation\">#sec-blockdeclarationinstantiation</span> BlockDeclarationInstantiation ( <var>code</var>, <var>env</var> )</h1>\n      <p>The abstract operation BlockDeclarationInstantiation takes arguments <var>code</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>env</var> (a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>). <var>code</var> is the <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> corresponding to the body of the block. <var>env</var> is the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> in which bindings are to be created.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> or <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> is evaluated a new <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> is created and bindings for each block scoped variable, constant, function, or class declared in the block are instantiated in the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      </div></emu-note>\n      <p>It performs the following steps when called:</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-blockdeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>declarations</var> be the <emu-xref aoid=\"LexicallyScopedDeclarations\"><a href=\"#sec-static-semantics-lexicallyscopeddeclarations\">LexicallyScopedDeclarations</a></emu-xref> of <var>code</var>.</li><li>Let <var>privateEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>For each element <var>d</var> of <var>declarations</var>, do<ol><li>For each element <var>dn</var> of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>, do<ol><li>If <emu-xref aoid=\"IsConstantDeclaration\"><a href=\"#sec-static-semantics-isconstantdeclaration\">IsConstantDeclaration</a></emu-xref> of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>env</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li id=\"step-blockdeclarationinstantiation-createmutablebinding\">Perform ! <var>env</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, then<ol><li>Let <var>fn</var> be the sole element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>d</var>.</li><li>Let <var>fo</var> be <emu-xref aoid=\"InstantiateFunctionObject\"><a href=\"#sec-runtime-semantics-instantiatefunctionobject\">InstantiateFunctionObject</a></emu-xref> of <var>d</var> with arguments <var>env</var> and <var>privateEnv</var>.</li><li id=\"step-blockdeclarationinstantiation-initializebinding\">Perform <var>env</var>.InitializeBinding(<var>fn</var>, <var>fo</var>). NOTE: This step is replaced in section <emu-xref href=\"#sec-web-compat-blockdeclarationinstantiation\"><a href=\"#sec-web-compat-blockdeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-blockdeclarationinstantiation\">#sec-web-compat-blockdeclarationinstantiation</a></emu-xref>.</li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-integer-indexed-exotic-objects-set-p-v-receiver": {"num": "10.4.5.5", "title": "#sec-integer-indexed-exotic-objects-set-p-v-receiver [[Set]] ( P, V, Receiver )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-set-p-v-receiver\">#sec-integer-indexed-exotic-objects-set-p-v-receiver</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h1>\n        <p>The [[Set]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"IntegerIndexedElementSet\"><a href=\"#sec-integerindexedelementset\">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>V</var>).</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinarySet\"><a href=\"#sec-ordinaryset\">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isextensible-o": {"num": "7.2.5", "title": "#sec-isextensible-o IsExtensible ( O )", "html": "<emu-clause id=\"sec-isextensible-o\" aoid=\"IsExtensible\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isextensible-o\">#sec-isextensible-o</span> IsExtensible ( <var>O</var> )</h1>\n      <p>The abstract operation IsExtensible takes argument <var>O</var> (an Object). It returns a completion record which, if its [[Type]] is <emu-const>normal</emu-const>, has a [[Value]] which is a Boolean. It is used to determine whether additional properties can be added to <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return ? <var>O</var>.[[IsExtensible]]().</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , preferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" oldids=\"table-9\" aoid=\"ToPrimitive\"><span id=\"table-9\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>preferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and optional argument <var>preferredType</var> (<emu-const>string</emu-const> or <emu-const>number</emu-const>). It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>preferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>preferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>preferredType</var> is <emu-const>string</emu-const>, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>preferredType</var> is <emu-const>number</emu-const>.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>preferredType</var> is not present, let <var>preferredType</var> be <emu-const>number</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>preferredType</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were <emu-const>number</emu-const>. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were <emu-const>string</emu-const>.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v": {"num": "10.5.2", "title": "#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v [[SetPrototypeOf]] ( V )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v\">#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v</span> [[SetPrototypeOf]] ( <var>V</var> )</h1>\n      <p>The [[SetPrototypeOf]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>V</var> (an Object or <emu-val>null</emu-val>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"setPrototypeOf\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[SetPrototypeOf]](<var>V</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>V</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>targetProto</var> be ? <var>target</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>V</var>, <var>targetProto</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[SetPrototypeOf]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[SetPrototypeOf]] is a Boolean value.\n          </li>\n          <li>\n            If the target object is not extensible, the argument value must be the same as the result of [[GetPrototypeOf]] applied to target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects-call-thisargument-argumentslist": {"num": "10.2.1", "title": "#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> takes arguments <var>thisArgument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>F</var>.[[IsClassConstructor]] is <emu-val>true</emu-val>, then<ol><li>Let <var>error</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>NOTE: <var>error</var> is created in <var>calleeContext</var> with <var>F</var>'s associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>error</var>).</li></ol></li><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li id=\"step-call-pop-context-stack\">Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> in step <emu-xref href=\"#step-call-pop-context-stack\"><a href=\"#step-call-pop-context-stack\" class=\"excluded-xref\" excluded-id=\"step-call-pop-context-stack\">#step-call-pop-context-stack</a></emu-xref> it must not be destroyed if it is suspended and retained for later resumption by an accessible generator object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-prepareforordinarycall\"><h1><span class=\"secnum\">10.2.1.1</span>#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )</h1>...</div><div id=\"excluded-sec-ordinarycallbindthis\"><h1><span class=\"secnum\">10.2.1.2</span>#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">10.2.1.3</span>#sec-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-ordinarycallevaluatebody\"><h1><span class=\"secnum\">10.2.1.4</span>#sec-ordinarycallevaluatebody OrdinaryCallEvaluateBody ( F, argumentsList )</h1>...</div></emu-clause>\n\n    "}, "sec-isstringprefix": {"num": "7.2.9", "title": "#sec-isstringprefix IsStringPrefix ( p, q )", "html": "<emu-clause id=\"sec-isstringprefix\" aoid=\"IsStringPrefix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstringprefix\">#sec-isstringprefix</span> IsStringPrefix ( <var>p</var>, <var>q</var> )</h1>\n      <p>The abstract operation IsStringPrefix takes arguments <var>p</var> (a String) and <var>q</var> (a String). It determines if <var>p</var> is a prefix of <var>q</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>q</var> can be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>p</var> and some other String <var>r</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Any String is a prefix of itself, because <var>r</var> may be the empty String.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-makemethod": {"num": "10.2.7", "title": "#sec-makemethod MakeMethod ( F, homeObject )", "html": "<emu-clause id=\"sec-makemethod\" aoid=\"MakeMethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makemethod\">#sec-makemethod</span> MakeMethod ( <var>F</var>, <var>homeObject</var> )</h1>\n      <p>The abstract operation MakeMethod takes arguments <var>F</var> (an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>) and <var>homeObject</var> (an Object). It configures <var>F</var> as a method. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Set <var>F</var>.[[HomeObject]] to <var>homeObject</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p": {"num": "10.5.5", "title": "#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p [[GetOwnProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p</span> [[GetOwnProperty]] ( <var>P</var> )</h1>\n      <p>The [[GetOwnProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"getOwnPropertyDescriptor\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li></ol></li><li>Let <var>trapResultObj</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>trapResultObj</var>) is neither Object nor Undefined, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>trapResultObj</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>resultDesc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>trapResultObj</var>).</li><li>Call <emu-xref aoid=\"CompletePropertyDescriptor\"><a href=\"#sec-completepropertydescriptor\">CompletePropertyDescriptor</a></emu-xref>(<var>resultDesc</var>).</li><li>Let <var>valid</var> be <emu-xref aoid=\"IsCompatiblePropertyDescriptor\"><a href=\"#sec-iscompatiblepropertydescriptor\">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>resultDesc</var>, <var>targetDesc</var>).</li><li>If <var>valid</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>resultDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val> or <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>resultDesc</var> has a [[Writable]] field and <var>resultDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Writable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>resultDesc</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[GetOwnProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[GetOwnProperty]] must be either an Object or <emu-val>undefined</emu-val>.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if the target object is not extensible, unless it does not exist as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as existent, if the target object is not extensible, unless it exists as an own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-configurable, unless it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as both non-configurable and non-writable, unless it exists as a non-configurable, non-writable own property of the target object.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p": {"num": "10.5.7", "title": "#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p [[HasProperty]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p\">#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p</span> [[HasProperty]] ( <var>P</var> )</h1>\n      <p>The [[HasProperty]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"has\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>booleanTrapResult</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[HasProperty]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[HasProperty]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as non-existent, if it exists as an own property of the target object and the target object is not extensible.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-modulenamespacecreate": {"num": "10.4.6.11", "title": "#sec-modulenamespacecreate ModuleNamespaceCreate ( module, exports )", "html": "<emu-clause id=\"sec-modulenamespacecreate\" aoid=\"ModuleNamespaceCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-modulenamespacecreate\">#sec-modulenamespacecreate</span> ModuleNamespaceCreate ( <var>module</var>, <var>exports</var> )</h1>\n        <p>The abstract operation ModuleNamespaceCreate takes arguments <var>module</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>) and <var>exports</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Strings). It is used to specify the creation of new module namespace exotic objects. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-internal-slots-of-module-namespace-exotic-objects\"><a href=\"#table-internal-slots-of-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"table-internal-slots-of-module-namespace-exotic-objects\">#table-internal-slots-of-module-namespace-exotic-objects</a></emu-xref>.</li><li>Let <var>M</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"><a href=\"#sec-module-namespace-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-exotic-objects\">#sec-module-namespace-exotic-objects</a></emu-xref>.</li><li>Set <var>M</var>.[[Prototype]] to <emu-val>null</emu-val>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the elements of <var>exports</var> ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using <emu-val>undefined</emu-val> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-asynciteratorclose": {"num": "7.4.7", "title": "#sec-asynciteratorclose AsyncIteratorClose ( iteratorRecord, completion )", "html": "<emu-clause id=\"sec-asynciteratorclose\" aoid=\"AsyncIteratorClose\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asynciteratorclose\">#sec-asynciteratorclose</span> AsyncIteratorClose ( <var>iteratorRecord</var>, <var>completion</var> )</h1>\n      <p>The abstract operation AsyncIteratorClose takes arguments <var>iteratorRecord</var> and <var>completion</var> (a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>). It is used to notify an async iterator that it should perform any actions it would normally perform when it has reached its completed state. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]) is Object.</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>innerResult</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>return</var> be <var>innerResult</var>.[[Value]].</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>Set <var>innerResult</var> to <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>normal</emu-const>, set <var>innerResult</var> to <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>.[[Value]]).</li></ol></li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>completion</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ordinaryget": {"num": "10.1.8.1", "title": "#sec-ordinaryget OrdinaryGet ( O, P, Receiver )", "html": "<emu-clause id=\"sec-ordinaryget\" aoid=\"OrdinaryGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryget\">#sec-ordinaryget</span> OrdinaryGet ( <var>O</var>, <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The abstract operation OrdinaryGet takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ? <var>parent</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>getter</var> be <var>desc</var>.[[Get]].</li><li>If <var>getter</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>getter</var>, <var>Receiver</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-newpromisereactionjob": {"num": "27.2.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" oldids=\"sec-promisereactionjob\" aoid=\"NewPromiseReactionJob\"><span id=\"sec-promisereactionjob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> (a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>) and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">normal completion</a></emu-xref>, set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "27.5.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield takes argument <var>iterNextObj</var> (an Object that conforms to the <i>IteratorResult</i> interface). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array-exotic-objects-defineownproperty-p-desc": {"num": "10.4.2.1", "title": "#sec-array-exotic-objects-defineownproperty-p-desc [[DefineOwnProperty]] ( P, Desc )", "html": "<emu-clause id=\"sec-array-exotic-objects-defineownproperty-p-desc\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h1>\n        <p>The [[DefineOwnProperty]] internal method of an <emu-xref href=\"#array-exotic-object\"><a href=\"#array-exotic-object\">Array exotic object</a></emu-xref> <var>A</var> takes arguments <var>P</var> (a property key) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>P</var> is <emu-val>\"length\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"ArraySetLength\"><a href=\"#sec-arraysetlength\">ArraySetLength</a></emu-xref>(<var>A</var>, <var>Desc</var>).</li></ol></li><li>Else if <var>P</var> is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, then<ol><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLen</var> is a non-negative <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> &#8805; <var>oldLen</var> and <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> &#8805; <var>oldLen</var>, then<ol><li>Set <var>oldLenDesc</var>.[[Value]] to <var>index</var> + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Set <var>succeeded</var> to <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>oldLenDesc</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binaryand": {"num": "6.1.6.2.16", "title": "#sec-binaryand BinaryAnd ( x, y )", "html": "<emu-clause id=\"sec-binaryand\" aoid=\"BinaryAnd\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryand\">#sec-binaryand</span> BinaryAnd ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryAnd takes arguments <var>x</var> (0 or 1) and <var>y</var> (0 or 1). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is 1 and <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-getprototypefromconstructor": {"num": "10.1.14", "title": "#sec-getprototypefromconstructor GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )", "html": "<emu-clause id=\"sec-getprototypefromconstructor\" aoid=\"GetPrototypeFromConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getprototypefromconstructor\">#sec-getprototypefromconstructor</span> GetPrototypeFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> )</h1>\n      <p>The abstract operation GetPrototypeFromConstructor takes arguments <var>constructor</var> and <var>intrinsicDefaultProto</var> (a String). It determines the [[Prototype]] value that should be used to create an object corresponding to a specific <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. The value is retrieved from the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>intrinsicDefaultProto</var> is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>constructor</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>proto</var>) is not Object, then<ol><li>Let <var>realm</var> be ?&#160;<emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>constructor</var>).</li><li>Set <var>proto</var> to <var>realm</var>'s intrinsic object named <var>intrinsicDefaultProto</var>.</li></ol></li><li>Return <var>proto</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>If <var>constructor</var> does not supply a [[Prototype]] value, the default value that is used is obtained from the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <var>constructor</var> function rather than from the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-objectdefineproperties": {"num": "20.1.2.3.1", "title": "#sec-objectdefineproperties ObjectDefineProperties ( O, Properties )", "html": "<emu-clause id=\"sec-objectdefineproperties\" aoid=\"ObjectDefineProperties\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objectdefineproperties\">#sec-objectdefineproperties</span> ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )</h1>\n          <p>The abstract operation ObjectDefineProperties takes arguments <var>O</var> (an Object) and <var>Properties</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>props</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>Properties</var>).</li><li>Let <var>keys</var> be ? <var>props</var>.[[OwnPropertyKeys]]().</li><li>Let <var>descriptors</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>nextKey</var> of <var>keys</var>, do<ol><li>Let <var>propDesc</var> be ? <var>props</var>.[[GetOwnProperty]](<var>nextKey</var>).</li><li>If <var>propDesc</var> is not <emu-val>undefined</emu-val> and <var>propDesc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>descObj</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>props</var>, <var>nextKey</var>).</li><li>Let <var>desc</var> be ?&#160;<emu-xref aoid=\"ToPropertyDescriptor\"><a href=\"#sec-topropertydescriptor\">ToPropertyDescriptor</a></emu-xref>(<var>descObj</var>).</li><li>Append the pair (a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>) consisting of <var>nextKey</var> and <var>desc</var> to the end of <var>descriptors</var>.</li></ol></li></ol></li><li>For each element <var>pair</var> of <var>descriptors</var>, do<ol><li>Let <var>P</var> be the first element of <var>pair</var>.</li><li>Let <var>desc</var> be the second element of <var>pair</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>P</var>, <var>desc</var>).</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-module-namespace-exotic-objects-delete-p": {"num": "10.4.6.9", "title": "#sec-module-namespace-exotic-objects-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-delete-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-delete-p\">#sec-module-namespace-exotic-objects-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n        <p>The [[Delete]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryDelete\"><a href=\"#sec-ordinarydelete\">OrdinaryDelete</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is an element of <var>exports</var>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-lengthofarraylike": {"num": "7.3.18", "title": "#sec-lengthofarraylike LengthOfArrayLike ( obj )", "html": "<emu-clause id=\"sec-lengthofarraylike\" aoid=\"LengthOfArrayLike\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-lengthofarraylike\">#sec-lengthofarraylike</span> LengthOfArrayLike ( <var>obj</var> )</h1>\n      <p>The abstract operation LengthOfArrayLike takes argument <var>obj</var> (an Object). It returns the value of the <emu-val>\"length\"</emu-val> property of an array-like object (as a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>))).</li></ol></emu-alg>\n      <p>An <dfn>array-like object</dfn> is any object for which this operation returns an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> rather than an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        Typically, an array-like object would also have some properties with <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> names. However, that is not a requirement of this definition.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        Array objects and String objects are examples of array-like objects.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-newfunctionenvironment": {"num": "9.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>The abstract operation NewFunctionEnvironment takes arguments <var>F</var> (an ECMAScript function) and <var>newTarget</var> (an Object or <emu-val>undefined</emu-val>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>env</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Set <var>env</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>.[[OuterEnv]] to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-get-o-p": {"num": "7.3.2", "title": "#sec-get-o-p Get ( O, P )", "html": "<emu-clause id=\"sec-get-o-p\" aoid=\"Get\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-o-p\">#sec-get-o-p</span> Get ( <var>O</var>, <var>P</var> )</h1>\n      <p>The abstract operation Get takes arguments <var>O</var> (an Object) and <var>P</var> (a property key). It is used to retrieve the value of a specific property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>O</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-speciesconstructor": {"num": "7.3.22", "title": "#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )", "html": "<emu-clause id=\"sec-speciesconstructor\" aoid=\"SpeciesConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-speciesconstructor\">#sec-speciesconstructor</span> SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )</h1>\n      <p>The abstract operation SpeciesConstructor takes arguments <var>O</var> (an Object) and <var>defaultConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It is used to retrieve the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that should be used to create new objects that are derived from <var>O</var>. <var>defaultConstructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property cannot be found starting from <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref>).</li><li>If <var>S</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>S</var>) is <emu-val>true</emu-val>, return <var>S</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-datestring": {"num": "21.4.4.41.2", "title": "#sec-datestring DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> DateString ( <var>tv</var> )</h1>\n          <p>The abstract operation DateString takes argument <var>tv</var> (a Number, but not <emu-val>NaN</emu-val>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with the code unit 0x0030 (DIGIT ZERO) if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; <emu-val>+0</emu-val><sub>&#120125;</sub>, let <var>yearSign</var> be the empty String; otherwise, let <var>yearSign</var> be <emu-val>\"-\"</emu-val>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>yv</var>)), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, <emu-val>4</emu-val><sub>&#120125;</sub>, <emu-val>\"0\"</emu-val>, <emu-const>start</emu-const>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.</li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                </th>\n                <th>\n                  Name\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>+0</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sun\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>1</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Mon\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>2</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Tue\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>3</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Wed\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>4</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Thu\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>5</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Fri\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>6</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sat\"</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                </th>\n                <th>\n                  Name\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>+0</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jan\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>1</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Feb\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>2</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Mar\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>3</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Apr\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>4</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"May\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>5</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jun\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>6</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Jul\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>7</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Aug\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>8</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Sep\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>9</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Oct\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>10</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Nov\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-val>11</emu-val><sub>&#120125;</sub>\n                </td>\n                <td>\n                  <emu-val>\"Dec\"</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-createimportbinding": {"num": "9.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The CreateImportBinding concrete method of a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>M</var> (a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>), and <var>N2</var> (a String). It creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>N2</var> is the name of a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding. It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-integerindexedelementget": {"num": "10.4.5.10", "title": "#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )", "html": "<emu-clause id=\"sec-integerindexedelementget\" aoid=\"IntegerIndexedElementGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementget\">#sec-integerindexedelementget</span> IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementGet takes arguments <var>O</var> (an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>) and <var>index</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>) &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]], <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binaryxor": {"num": "6.1.6.2.18", "title": "#sec-binaryxor BinaryXor ( x, y )", "html": "<emu-clause id=\"sec-binaryxor\" aoid=\"BinaryXor\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binaryxor\">#sec-binaryxor</span> BinaryXor ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BinaryXor takes arguments <var>x</var> (0 or 1) and <var>y</var> (0 or 1). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is 1 and <var>y</var> is 0, return 1.</li><li>Else if <var>x</var> is 0 and <var>y</var> is 1, return 1.</li><li>Else, return 0.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-runtime-semantics-unicodematchpropertyvalue-p-v": {"num": "22.2.2.8.4", "title": "#sec-runtime-semantics-unicodematchpropertyvalue-p-v UnicodeMatchPropertyValue ( p, v )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\" aoid=\"UnicodeMatchPropertyValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\">#sec-runtime-semantics-unicodematchpropertyvalue-p-v</span> UnicodeMatchPropertyValue ( <var>p</var>, <var>v</var> )</h1>\n          <p>The abstract operation UnicodeMatchPropertyValue takes arguments <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points) and <var>v</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a canonical, unaliased Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> listed in the &#8220;Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>v</var> is a property value or property value alias for Unicode property <var>p</var> listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> or <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>.</li><li>Let <var>value</var> be the canonical property value of <var>v</var> as given in the &#8220;Canonical property value&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points <var>value</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property value names and aliases listed in <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> and <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>. To ensure interoperability, implementations must not support any other property value names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Xpeo</code> and <code>Old_Persian</code> are valid <code>Script_Extensions</code> values, but <code>xpeo</code> and <code>Old Persian</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This algorithm differs from <a href=\"https://unicode.org/reports/tr44/#Matching_Symbolic\">the matching rules for symbolic values listed in UAX44</a>: case, <emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\">white space</a></emu-xref>, U+002D (HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the <code>Is</code> prefix is not supported.</p>\n          </div></emu-note>\n          <emu-import href=\"table-unicode-general-category-values.html\"><emu-table id=\"table-unicode-general-category-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</span>: Value aliases and canonical values for the Unicode property <a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Cased_Letter</code></td>\n      <td rowspan=\"2\"><code>Cased_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>LC</code></td>\n    </tr>\n    <tr>\n      <td><code>Close_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Close_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pe</code></td>\n    </tr>\n    <tr>\n      <td><code>Connector_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Connector_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pc</code></td>\n    </tr>\n    <tr>\n      <td><code>Control</code></td>\n      <td rowspan=\"3\"><code>Control</code></td>\n    </tr>\n    <tr>\n      <td><code>Cc</code></td>\n    </tr>\n    <tr>\n      <td><code>cntrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Currency_Symbol</code></td>\n      <td rowspan=\"2\"><code>Currency_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Dash_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pd</code></td>\n    </tr>\n    <tr>\n      <td><code>Decimal_Number</code></td>\n      <td rowspan=\"3\"><code>Decimal_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nd</code></td>\n    </tr>\n    <tr>\n      <td><code>digit</code></td>\n    </tr>\n    <tr>\n      <td><code>Enclosing_Mark</code></td>\n      <td rowspan=\"2\"><code>Enclosing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Me</code></td>\n    </tr>\n    <tr>\n      <td><code>Final_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Final_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pf</code></td>\n    </tr>\n    <tr>\n      <td><code>Format</code></td>\n      <td rowspan=\"2\"><code>Format</code></td>\n    </tr>\n    <tr>\n      <td><code>Cf</code></td>\n    </tr>\n    <tr>\n      <td><code>Initial_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Initial_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pi</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter</code></td>\n      <td rowspan=\"2\"><code>Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter_Number</code></td>\n      <td rowspan=\"2\"><code>Letter_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nl</code></td>\n    </tr>\n    <tr>\n      <td><code>Line_Separator</code></td>\n      <td rowspan=\"2\"><code>Line_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zl</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Lowercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Ll</code></td>\n    </tr>\n    <tr>\n      <td><code>Mark</code></td>\n      <td rowspan=\"3\"><code>Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>M</code></td>\n    </tr>\n    <tr>\n      <td><code>Combining_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Math_Symbol</code></td>\n      <td rowspan=\"2\"><code>Math_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Letter</code></td>\n      <td rowspan=\"2\"><code>Modifier_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Symbol</code></td>\n      <td rowspan=\"2\"><code>Modifier_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sk</code></td>\n    </tr>\n    <tr>\n      <td><code>Nonspacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Nonspacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mn</code></td>\n    </tr>\n    <tr>\n      <td><code>Number</code></td>\n      <td rowspan=\"2\"><code>Number</code></td>\n    </tr>\n    <tr>\n      <td><code>N</code></td>\n    </tr>\n    <tr>\n      <td><code>Open_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Open_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Ps</code></td>\n    </tr>\n    <tr>\n      <td><code>Other</code></td>\n      <td rowspan=\"2\"><code>Other</code></td>\n    </tr>\n    <tr>\n      <td><code>C</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Letter</code></td>\n      <td rowspan=\"2\"><code>Other_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lo</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Number</code></td>\n      <td rowspan=\"2\"><code>Other_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>No</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Other_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Po</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Symbol</code></td>\n      <td rowspan=\"2\"><code>Other_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>So</code></td>\n    </tr>\n    <tr>\n      <td><code>Paragraph_Separator</code></td>\n      <td rowspan=\"2\"><code>Paragraph_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zp</code></td>\n    </tr>\n    <tr>\n      <td><code>Private_Use</code></td>\n      <td rowspan=\"2\"><code>Private_Use</code></td>\n    </tr>\n    <tr>\n      <td><code>Co</code></td>\n    </tr>\n    <tr>\n      <td><code>Punctuation</code></td>\n      <td rowspan=\"3\"><code>Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n    </tr>\n    <tr>\n      <td><code>punct</code></td>\n    </tr>\n    <tr>\n      <td><code>Separator</code></td>\n      <td rowspan=\"2\"><code>Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Z</code></td>\n    </tr>\n    <tr>\n      <td><code>Space_Separator</code></td>\n      <td rowspan=\"2\"><code>Space_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zs</code></td>\n    </tr>\n    <tr>\n      <td><code>Spacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Spacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mc</code></td>\n    </tr>\n    <tr>\n      <td><code>Surrogate</code></td>\n      <td rowspan=\"2\"><code>Surrogate</code></td>\n    </tr>\n    <tr>\n      <td><code>Cs</code></td>\n    </tr>\n    <tr>\n      <td><code>Symbol</code></td>\n      <td rowspan=\"2\"><code>Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>S</code></td>\n    </tr>\n    <tr>\n      <td><code>Titlecase_Letter</code></td>\n      <td rowspan=\"2\"><code>Titlecase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lt</code></td>\n    </tr>\n    <tr>\n      <td><code>Unassigned</code></td>\n      <td rowspan=\"2\"><code>Unassigned</code></td>\n    </tr>\n    <tr>\n      <td><code>Cn</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Uppercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lu</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-unicode-script-values.html\"><emu-table id=\"table-unicode-script-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</span>: Value aliases and canonical values for the Unicode properties <a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a> and <a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Adlam</code></td>\n      <td rowspan=\"2\"><code>Adlam</code></td>\n    </tr>\n    <tr>\n      <td><code>Adlm</code></td>\n    </tr>\n    <tr>\n      <td><code>Ahom</code></td>\n      <td><code>Ahom</code></td>\n    </tr>\n    <tr>\n      <td><code>Anatolian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Anatolian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Hluw</code></td>\n    </tr>\n    <tr>\n      <td><code>Arabic</code></td>\n      <td rowspan=\"2\"><code>Arabic</code></td>\n    </tr>\n    <tr>\n      <td><code>Arab</code></td>\n    </tr>\n    <tr>\n      <td><code>Armenian</code></td>\n      <td rowspan=\"2\"><code>Armenian</code></td>\n    </tr>\n    <tr>\n      <td><code>Armn</code></td>\n    </tr>\n    <tr>\n      <td><code>Avestan</code></td>\n      <td rowspan=\"2\"><code>Avestan</code></td>\n    </tr>\n    <tr>\n      <td><code>Avst</code></td>\n    </tr>\n    <tr>\n      <td><code>Balinese</code></td>\n      <td rowspan=\"2\"><code>Balinese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bali</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamum</code></td>\n      <td rowspan=\"2\"><code>Bamum</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamu</code></td>\n    </tr>\n    <tr>\n      <td><code>Bassa_Vah</code></td>\n      <td rowspan=\"2\"><code>Bassa_Vah</code></td>\n    </tr>\n    <tr>\n      <td><code>Bass</code></td>\n    </tr>\n    <tr>\n      <td><code>Batak</code></td>\n      <td rowspan=\"2\"><code>Batak</code></td>\n    </tr>\n    <tr>\n      <td><code>Batk</code></td>\n    </tr>\n    <tr>\n      <td><code>Bengali</code></td>\n      <td rowspan=\"2\"><code>Bengali</code></td>\n    </tr>\n    <tr>\n      <td><code>Beng</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhaiksuki</code></td>\n      <td rowspan=\"2\"><code>Bhaiksuki</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhks</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopomofo</code></td>\n      <td rowspan=\"2\"><code>Bopomofo</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopo</code></td>\n    </tr>\n    <tr>\n      <td><code>Brahmi</code></td>\n      <td rowspan=\"2\"><code>Brahmi</code></td>\n    </tr>\n    <tr>\n      <td><code>Brah</code></td>\n    </tr>\n    <tr>\n      <td><code>Braille</code></td>\n      <td rowspan=\"2\"><code>Braille</code></td>\n    </tr>\n    <tr>\n      <td><code>Brai</code></td>\n    </tr>\n    <tr>\n      <td><code>Buginese</code></td>\n      <td rowspan=\"2\"><code>Buginese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bugi</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhid</code></td>\n      <td rowspan=\"2\"><code>Buhid</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhd</code></td>\n    </tr>\n    <tr>\n      <td><code>Canadian_Aboriginal</code></td>\n      <td rowspan=\"2\"><code>Canadian_Aboriginal</code></td>\n    </tr>\n    <tr>\n      <td><code>Cans</code></td>\n    </tr>\n    <tr>\n      <td><code>Carian</code></td>\n      <td rowspan=\"2\"><code>Carian</code></td>\n    </tr>\n    <tr>\n      <td><code>Cari</code></td>\n    </tr>\n    <tr>\n      <td><code>Caucasian_Albanian</code></td>\n      <td rowspan=\"2\"><code>Caucasian_Albanian</code></td>\n    </tr>\n    <tr>\n      <td><code>Aghb</code></td>\n    </tr>\n    <tr>\n      <td><code>Chakma</code></td>\n      <td rowspan=\"2\"><code>Chakma</code></td>\n    </tr>\n    <tr>\n      <td><code>Cakm</code></td>\n    </tr>\n    <tr>\n      <td><code>Cham</code></td>\n      <td><code>Cham</code></td>\n    </tr>\n    <tr>\n      <td><code>Chorasmian</code></td>\n      <td rowspan=\"2\"><code>Chorasmian</code></td>\n    </tr>\n    <tr>\n      <td><code>Chrs</code></td>\n    </tr>\n    <tr>\n      <td><code>Cherokee</code></td>\n      <td rowspan=\"2\"><code>Cherokee</code></td>\n    </tr>\n    <tr>\n      <td><code>Cher</code></td>\n    </tr>\n    <tr>\n      <td><code>Common</code></td>\n      <td rowspan=\"2\"><code>Common</code></td>\n    </tr>\n    <tr>\n      <td><code>Zyyy</code></td>\n    </tr>\n    <tr>\n      <td><code>Coptic</code></td>\n      <td rowspan=\"3\"><code>Coptic</code></td>\n    </tr>\n    <tr>\n      <td><code>Copt</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaac</code></td>\n    </tr>\n    <tr>\n      <td><code>Cuneiform</code></td>\n      <td rowspan=\"2\"><code>Cuneiform</code></td>\n    </tr>\n    <tr>\n      <td><code>Xsux</code></td>\n    </tr>\n    <tr>\n      <td><code>Cypriot</code></td>\n      <td rowspan=\"2\"><code>Cypriot</code></td>\n    </tr>\n    <tr>\n      <td><code>Cprt</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrillic</code></td>\n      <td rowspan=\"2\"><code>Cyrillic</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Deseret</code></td>\n      <td rowspan=\"2\"><code>Deseret</code></td>\n    </tr>\n    <tr>\n      <td><code>Dsrt</code></td>\n    </tr>\n    <tr>\n      <td><code>Devanagari</code></td>\n      <td rowspan=\"2\"><code>Devanagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Deva</code></td>\n    </tr>\n    <tr>\n      <td><code>Dives_Akuru</code></td>\n      <td rowspan=\"2\"><code>Dives_Akuru</code></td>\n    </tr>\n    <tr>\n      <td><code>Diak</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogra</code></td>\n      <td rowspan=\"2\"><code>Dogra</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogr</code></td>\n    </tr>\n    <tr>\n      <td><code>Duployan</code></td>\n      <td rowspan=\"2\"><code>Duployan</code></td>\n    </tr>\n    <tr>\n      <td><code>Dupl</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyptian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Egyptian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyp</code></td>\n    </tr>\n    <tr>\n      <td><code>Elbasan</code></td>\n      <td rowspan=\"2\"><code>Elbasan</code></td>\n    </tr>\n    <tr>\n      <td><code>Elba</code></td>\n    </tr>\n    <tr>\n      <td><code>Elymaic</code></td>\n      <td rowspan=\"2\"><code>Elymaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Elym</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethiopic</code></td>\n      <td rowspan=\"2\"><code>Ethiopic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethi</code></td>\n    </tr>\n    <tr>\n      <td><code>Georgian</code></td>\n      <td rowspan=\"2\"><code>Georgian</code></td>\n    </tr>\n    <tr>\n      <td><code>Geor</code></td>\n    </tr>\n    <tr>\n      <td><code>Glagolitic</code></td>\n      <td rowspan=\"2\"><code>Glagolitic</code></td>\n    </tr>\n    <tr>\n      <td><code>Glag</code></td>\n    </tr>\n    <tr>\n      <td><code>Gothic</code></td>\n      <td rowspan=\"2\"><code>Gothic</code></td>\n    </tr>\n    <tr>\n      <td><code>Goth</code></td>\n    </tr>\n    <tr>\n      <td><code>Grantha</code></td>\n      <td rowspan=\"2\"><code>Grantha</code></td>\n    </tr>\n    <tr>\n      <td><code>Gran</code></td>\n    </tr>\n    <tr>\n      <td><code>Greek</code></td>\n      <td rowspan=\"2\"><code>Greek</code></td>\n    </tr>\n    <tr>\n      <td><code>Grek</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujarati</code></td>\n      <td rowspan=\"2\"><code>Gujarati</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujr</code></td>\n    </tr>\n    <tr>\n      <td><code>Gunjala_Gondi</code></td>\n      <td rowspan=\"2\"><code>Gunjala_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gong</code></td>\n    </tr>\n    <tr>\n      <td><code>Gurmukhi</code></td>\n      <td rowspan=\"2\"><code>Gurmukhi</code></td>\n    </tr>\n    <tr>\n      <td><code>Guru</code></td>\n    </tr>\n    <tr>\n      <td><code>Han</code></td>\n      <td rowspan=\"2\"><code>Han</code></td>\n    </tr>\n    <tr>\n      <td><code>Hani</code></td>\n    </tr>\n    <tr>\n      <td><code>Hangul</code></td>\n      <td rowspan=\"2\"><code>Hangul</code></td>\n    </tr>\n    <tr>\n      <td><code>Hang</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanifi_Rohingya</code></td>\n      <td rowspan=\"2\"><code>Hanifi_Rohingya</code></td>\n    </tr>\n    <tr>\n      <td><code>Rohg</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanunoo</code></td>\n      <td rowspan=\"2\"><code>Hanunoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Hano</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatran</code></td>\n      <td rowspan=\"2\"><code>Hatran</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebrew</code></td>\n      <td rowspan=\"2\"><code>Hebrew</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hiragana</code></td>\n      <td rowspan=\"2\"><code>Hiragana</code></td>\n    </tr>\n    <tr>\n      <td><code>Hira</code></td>\n    </tr>\n    <tr>\n      <td><code>Imperial_Aramaic</code></td>\n      <td rowspan=\"2\"><code>Imperial_Aramaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Armi</code></td>\n    </tr>\n    <tr>\n      <td><code>Inherited</code></td>\n      <td rowspan=\"3\"><code>Inherited</code></td>\n    </tr>\n    <tr>\n      <td><code>Zinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaai</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phli</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Parthian</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Parthian</code></td>\n    </tr>\n    <tr>\n      <td><code>Prti</code></td>\n    </tr>\n    <tr>\n      <td><code>Javanese</code></td>\n      <td rowspan=\"2\"><code>Javanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Java</code></td>\n    </tr>\n    <tr>\n      <td><code>Kaithi</code></td>\n      <td rowspan=\"2\"><code>Kaithi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kannada</code></td>\n      <td rowspan=\"2\"><code>Kannada</code></td>\n    </tr>\n    <tr>\n      <td><code>Knda</code></td>\n    </tr>\n    <tr>\n      <td><code>Katakana</code></td>\n      <td rowspan=\"2\"><code>Katakana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kayah_Li</code></td>\n      <td rowspan=\"2\"><code>Kayah_Li</code></td>\n    </tr>\n    <tr>\n      <td><code>Kali</code></td>\n    </tr>\n    <tr>\n      <td><code>Kharoshthi</code></td>\n      <td rowspan=\"2\"><code>Kharoshthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Khar</code></td>\n    </tr>\n    <tr>\n      <td><code>Khitan_Small_Script</code></td>\n      <td rowspan=\"2\"><code>Khitan_Small_Script</code></td>\n    </tr>\n    <tr>\n      <td><code>Kits</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmer</code></td>\n      <td rowspan=\"2\"><code>Khmer</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmr</code></td>\n    </tr>\n    <tr>\n      <td><code>Khojki</code></td>\n      <td rowspan=\"2\"><code>Khojki</code></td>\n    </tr>\n    <tr>\n      <td><code>Khoj</code></td>\n    </tr>\n    <tr>\n      <td><code>Khudawadi</code></td>\n      <td rowspan=\"2\"><code>Khudawadi</code></td>\n    </tr>\n    <tr>\n      <td><code>Sind</code></td>\n    </tr>\n    <tr>\n      <td><code>Lao</code></td>\n      <td rowspan=\"2\"><code>Lao</code></td>\n    </tr>\n    <tr>\n      <td><code>Laoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Latin</code></td>\n      <td rowspan=\"2\"><code>Latin</code></td>\n    </tr>\n    <tr>\n      <td><code>Latn</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepcha</code></td>\n      <td rowspan=\"2\"><code>Lepcha</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepc</code></td>\n    </tr>\n    <tr>\n      <td><code>Limbu</code></td>\n      <td rowspan=\"2\"><code>Limbu</code></td>\n    </tr>\n    <tr>\n      <td><code>Limb</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_A</code></td>\n      <td rowspan=\"2\"><code>Linear_A</code></td>\n    </tr>\n    <tr>\n      <td><code>Lina</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_B</code></td>\n      <td rowspan=\"2\"><code>Linear_B</code></td>\n    </tr>\n    <tr>\n      <td><code>Linb</code></td>\n    </tr>\n    <tr>\n      <td><code>Lisu</code></td>\n      <td><code>Lisu</code></td>\n    </tr>\n    <tr>\n      <td><code>Lycian</code></td>\n      <td rowspan=\"2\"><code>Lycian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lyci</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydian</code></td>\n      <td rowspan=\"2\"><code>Lydian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahajani</code></td>\n      <td rowspan=\"2\"><code>Mahajani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahj</code></td>\n    </tr>\n    <tr>\n      <td><code>Makasar</code></td>\n      <td rowspan=\"2\"><code>Makasar</code></td>\n    </tr>\n    <tr>\n      <td><code>Maka</code></td>\n    </tr>\n    <tr>\n      <td><code>Malayalam</code></td>\n      <td rowspan=\"2\"><code>Malayalam</code></td>\n    </tr>\n    <tr>\n      <td><code>Mlym</code></td>\n    </tr>\n    <tr>\n      <td><code>Mandaic</code></td>\n      <td rowspan=\"2\"><code>Mandaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Mand</code></td>\n    </tr>\n    <tr>\n      <td><code>Manichaean</code></td>\n      <td rowspan=\"2\"><code>Manichaean</code></td>\n    </tr>\n    <tr>\n      <td><code>Mani</code></td>\n    </tr>\n    <tr>\n      <td><code>Marchen</code></td>\n      <td rowspan=\"2\"><code>Marchen</code></td>\n    </tr>\n    <tr>\n      <td><code>Marc</code></td>\n    </tr>\n    <tr>\n      <td><code>Medefaidrin</code></td>\n      <td rowspan=\"2\"><code>Medefaidrin</code></td>\n    </tr>\n    <tr>\n      <td><code>Medf</code></td>\n    </tr>\n    <tr>\n      <td><code>Masaram_Gondi</code></td>\n      <td rowspan=\"2\"><code>Masaram_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gonm</code></td>\n    </tr>\n    <tr>\n      <td><code>Meetei_Mayek</code></td>\n      <td rowspan=\"2\"><code>Meetei_Mayek</code></td>\n    </tr>\n    <tr>\n      <td><code>Mtei</code></td>\n    </tr>\n    <tr>\n      <td><code>Mende_Kikakui</code></td>\n      <td rowspan=\"2\"><code>Mende_Kikakui</code></td>\n    </tr>\n    <tr>\n      <td><code>Mend</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Cursive</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Cursive</code></td>\n    </tr>\n    <tr>\n      <td><code>Merc</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Mero</code></td>\n    </tr>\n    <tr>\n      <td><code>Miao</code></td>\n      <td rowspan=\"2\"><code>Miao</code></td>\n    </tr>\n    <tr>\n      <td><code>Plrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Modi</code></td>\n      <td><code>Modi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mongolian</code></td>\n      <td rowspan=\"2\"><code>Mongolian</code></td>\n    </tr>\n    <tr>\n      <td><code>Mong</code></td>\n    </tr>\n    <tr>\n      <td><code>Mro</code></td>\n      <td rowspan=\"2\"><code>Mro</code></td>\n    </tr>\n    <tr>\n      <td><code>Mroo</code></td>\n    </tr>\n    <tr>\n      <td><code>Multani</code></td>\n      <td rowspan=\"2\"><code>Multani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mult</code></td>\n    </tr>\n    <tr>\n      <td><code>Myanmar</code></td>\n      <td rowspan=\"2\"><code>Myanmar</code></td>\n    </tr>\n    <tr>\n      <td><code>Mymr</code></td>\n    </tr>\n    <tr>\n      <td><code>Nabataean</code></td>\n      <td rowspan=\"2\"><code>Nabataean</code></td>\n    </tr>\n    <tr>\n      <td><code>Nbat</code></td>\n    </tr>\n    <tr>\n      <td><code>Nandinagari</code></td>\n      <td rowspan=\"2\"><code>Nandinagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Nand</code></td>\n    </tr>\n    <tr>\n      <td><code>New_Tai_Lue</code></td>\n      <td rowspan=\"2\"><code>New_Tai_Lue</code></td>\n    </tr>\n    <tr>\n      <td><code>Talu</code></td>\n    </tr>\n    <tr>\n      <td><code>Newa</code></td>\n      <td><code>Newa</code></td>\n    </tr>\n    <tr>\n      <td><code>Nko</code></td>\n      <td rowspan=\"2\"><code>Nko</code></td>\n    </tr>\n    <tr>\n      <td><code>Nkoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Nushu</code></td>\n      <td rowspan=\"2\"><code>Nushu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nshu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nyiakeng_Puachue_Hmong</code></td>\n      <td rowspan=\"2\"><code>Nyiakeng_Puachue_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmnp</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogham</code></td>\n      <td rowspan=\"2\"><code>Ogham</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogam</code></td>\n    </tr>\n    <tr>\n      <td><code>Ol_Chiki</code></td>\n      <td rowspan=\"2\"><code>Ol_Chiki</code></td>\n    </tr>\n    <tr>\n      <td><code>Olck</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Hungarian</code></td>\n      <td rowspan=\"2\"><code>Old_Hungarian</code></td>\n    </tr>\n    <tr>\n      <td><code>Hung</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Italic</code></td>\n      <td rowspan=\"2\"><code>Old_Italic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ital</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_North_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_North_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Narb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Permic</code></td>\n      <td rowspan=\"2\"><code>Old_Permic</code></td>\n    </tr>\n    <tr>\n      <td><code>Perm</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Persian</code></td>\n      <td rowspan=\"2\"><code>Old_Persian</code></td>\n    </tr>\n    <tr>\n      <td><code>Xpeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Sogdian</code></td>\n      <td rowspan=\"2\"><code>Old_Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_South_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_South_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sarb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Turkic</code></td>\n      <td rowspan=\"2\"><code>Old_Turkic</code></td>\n    </tr>\n    <tr>\n      <td><code>Orkh</code></td>\n    </tr>\n    <tr>\n      <td><code>Oriya</code></td>\n      <td rowspan=\"2\"><code>Oriya</code></td>\n    </tr>\n    <tr>\n      <td><code>Orya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osage</code></td>\n      <td rowspan=\"2\"><code>Osage</code></td>\n    </tr>\n    <tr>\n      <td><code>Osge</code></td>\n    </tr>\n    <tr>\n      <td><code>Osmanya</code></td>\n      <td rowspan=\"2\"><code>Osmanya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osma</code></td>\n    </tr>\n    <tr>\n      <td><code>Pahawh_Hmong</code></td>\n      <td rowspan=\"2\"><code>Pahawh_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmng</code></td>\n    </tr>\n    <tr>\n      <td><code>Palmyrene</code></td>\n      <td rowspan=\"2\"><code>Palmyrene</code></td>\n    </tr>\n    <tr>\n      <td><code>Palm</code></td>\n    </tr>\n    <tr>\n      <td><code>Pau_Cin_Hau</code></td>\n      <td rowspan=\"2\"><code>Pau_Cin_Hau</code></td>\n    </tr>\n    <tr>\n      <td><code>Pauc</code></td>\n    </tr>\n    <tr>\n      <td><code>Phags_Pa</code></td>\n      <td rowspan=\"2\"><code>Phags_Pa</code></td>\n    </tr>\n    <tr>\n      <td><code>Phag</code></td>\n    </tr>\n    <tr>\n      <td><code>Phoenician</code></td>\n      <td rowspan=\"2\"><code>Phoenician</code></td>\n    </tr>\n    <tr>\n      <td><code>Phnx</code></td>\n    </tr>\n    <tr>\n      <td><code>Psalter_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Psalter_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phlp</code></td>\n    </tr>\n    <tr>\n      <td><code>Rejang</code></td>\n      <td rowspan=\"2\"><code>Rejang</code></td>\n    </tr>\n    <tr>\n      <td><code>Rjng</code></td>\n    </tr>\n    <tr>\n      <td><code>Runic</code></td>\n      <td rowspan=\"2\"><code>Runic</code></td>\n    </tr>\n    <tr>\n      <td><code>Runr</code></td>\n    </tr>\n    <tr>\n      <td><code>Samaritan</code></td>\n      <td rowspan=\"2\"><code>Samaritan</code></td>\n    </tr>\n    <tr>\n      <td><code>Samr</code></td>\n    </tr>\n    <tr>\n      <td><code>Saurashtra</code></td>\n      <td rowspan=\"2\"><code>Saurashtra</code></td>\n    </tr>\n    <tr>\n      <td><code>Saur</code></td>\n    </tr>\n    <tr>\n      <td><code>Sharada</code></td>\n      <td rowspan=\"2\"><code>Sharada</code></td>\n    </tr>\n    <tr>\n      <td><code>Shrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Shavian</code></td>\n      <td rowspan=\"2\"><code>Shavian</code></td>\n    </tr>\n    <tr>\n      <td><code>Shaw</code></td>\n    </tr>\n    <tr>\n      <td><code>Siddham</code></td>\n      <td rowspan=\"2\"><code>Siddham</code></td>\n    </tr>\n    <tr>\n      <td><code>Sidd</code></td>\n    </tr>\n    <tr>\n      <td><code>SignWriting</code></td>\n      <td rowspan=\"2\"><code>SignWriting</code></td>\n    </tr>\n    <tr>\n      <td><code>Sgnw</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinhala</code></td>\n      <td rowspan=\"2\"><code>Sinhala</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogdian</code></td>\n      <td rowspan=\"2\"><code>Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogd</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora_Sompeng</code></td>\n      <td rowspan=\"2\"><code>Sora_Sompeng</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyombo</code></td>\n      <td rowspan=\"2\"><code>Soyombo</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyo</code></td>\n    </tr>\n    <tr>\n      <td><code>Sundanese</code></td>\n      <td rowspan=\"2\"><code>Sundanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Sund</code></td>\n    </tr>\n    <tr>\n      <td><code>Syloti_Nagri</code></td>\n      <td rowspan=\"2\"><code>Syloti_Nagri</code></td>\n    </tr>\n    <tr>\n      <td><code>Sylo</code></td>\n    </tr>\n    <tr>\n      <td><code>Syriac</code></td>\n      <td rowspan=\"2\"><code>Syriac</code></td>\n    </tr>\n    <tr>\n      <td><code>Syrc</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagalog</code></td>\n      <td rowspan=\"2\"><code>Tagalog</code></td>\n    </tr>\n    <tr>\n      <td><code>Tglg</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagbanwa</code></td>\n      <td rowspan=\"2\"><code>Tagbanwa</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagb</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Le</code></td>\n      <td rowspan=\"2\"><code>Tai_Le</code></td>\n    </tr>\n    <tr>\n      <td><code>Tale</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Tham</code></td>\n      <td rowspan=\"2\"><code>Tai_Tham</code></td>\n    </tr>\n    <tr>\n      <td><code>Lana</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Viet</code></td>\n      <td rowspan=\"2\"><code>Tai_Viet</code></td>\n    </tr>\n    <tr>\n      <td><code>Tavt</code></td>\n    </tr>\n    <tr>\n      <td><code>Takri</code></td>\n      <td rowspan=\"2\"><code>Takri</code></td>\n    </tr>\n    <tr>\n      <td><code>Takr</code></td>\n    </tr>\n    <tr>\n      <td><code>Tamil</code></td>\n      <td rowspan=\"2\"><code>Tamil</code></td>\n    </tr>\n    <tr>\n      <td><code>Taml</code></td>\n    </tr>\n    <tr>\n      <td><code>Tangut</code></td>\n      <td rowspan=\"2\"><code>Tangut</code></td>\n    </tr>\n    <tr>\n      <td><code>Tang</code></td>\n    </tr>\n    <tr>\n      <td><code>Telugu</code></td>\n      <td rowspan=\"2\"><code>Telugu</code></td>\n    </tr>\n    <tr>\n      <td><code>Telu</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaana</code></td>\n      <td rowspan=\"2\"><code>Thaana</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaa</code></td>\n    </tr>\n    <tr>\n      <td><code>Thai</code></td>\n      <td><code>Thai</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibetan</code></td>\n      <td rowspan=\"2\"><code>Tibetan</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibt</code></td>\n    </tr>\n    <tr>\n      <td><code>Tifinagh</code></td>\n      <td rowspan=\"2\"><code>Tifinagh</code></td>\n    </tr>\n    <tr>\n      <td><code>Tfng</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirhuta</code></td>\n      <td rowspan=\"2\"><code>Tirhuta</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirh</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugaritic</code></td>\n      <td rowspan=\"2\"><code>Ugaritic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugar</code></td>\n    </tr>\n    <tr>\n      <td><code>Vai</code></td>\n      <td rowspan=\"2\"><code>Vai</code></td>\n    </tr>\n    <tr>\n      <td><code>Vaii</code></td>\n    </tr>\n    <tr>\n      <td><code>Wancho</code></td>\n      <td rowspan=\"2\"><code>Wancho</code></td>\n    </tr>\n    <tr>\n      <td><code>Wcho</code></td>\n    </tr>\n    <tr>\n      <td><code>Warang_Citi</code></td>\n      <td rowspan=\"2\"><code>Warang_Citi</code></td>\n    </tr>\n    <tr>\n      <td><code>Wara</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezidi</code></td>\n      <td rowspan=\"2\"><code>Yezidi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yi</code></td>\n      <td rowspan=\"2\"><code>Yi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yiii</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanabazar_Square</code></td>\n      <td rowspan=\"2\"><code>Zanabazar_Square</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanb</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n      "}, "sec-symboldescriptivestring": {"num": "20.4.3.3.1", "title": "#sec-symboldescriptivestring SymbolDescriptiveString ( sym )", "html": "<emu-clause id=\"sec-symboldescriptivestring\" aoid=\"SymbolDescriptiveString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symboldescriptivestring\">#sec-symboldescriptivestring</span> SymbolDescriptiveString ( <var>sym</var> )</h1>\n          <p>The abstract operation SymbolDescriptiveString takes argument <var>sym</var> (a Symbol). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>desc</var> be <var>sym</var>'s [[Description]] value.</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, set <var>desc</var> to the empty String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>desc</var>) is String.</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"Symbol(\"</emu-val>, <var>desc</var>, and <emu-val>\")\"</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-makebasicobject": {"num": "7.3.1", "title": "#sec-makebasicobject MakeBasicObject ( internalSlotsList )", "html": "<emu-clause id=\"sec-makebasicobject\" aoid=\"MakeBasicObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makebasicobject\">#sec-makebasicobject</span> MakeBasicObject ( <var>internalSlotsList</var> )</h1>\n      <p>The abstract operation MakeBasicObject takes argument <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of internal slot names). It is the source of all ECMAScript objects that are created algorithmically, including both ordinary objects and exotic objects. It factors out common steps used in creating all objects, and centralizes object creation. It performs the following steps when called:</p>\n\n      <emu-alg><ol><li>Let <var>obj</var> be a newly created object with an internal slot for each name in <var>internalSlotsList</var>.</li><li>Set <var>obj</var>'s essential internal methods to the default <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the caller will not be overriding both <var>obj</var>'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then <var>internalSlotsList</var> contains [[Prototype]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If the caller will not be overriding all of <var>obj</var>'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then <var>internalSlotsList</var> contains [[Extensible]].</li><li>If <var>internalSlotsList</var> contains [[Extensible]], set <var>obj</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Within this specification, exotic objects are created in <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> such as <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref> and <emu-xref aoid=\"BoundFunctionCreate\"><a href=\"#sec-boundfunctioncreate\">BoundFunctionCreate</a></emu-xref> by first calling MakeBasicObject to obtain a basic, foundational object, and then overriding some or all of that object's internal methods. In order to encapsulate <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> creation, the object's essential internal methods are never modified outside those operations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isvalidregularexpressionliteral": {"num": "13.2.7.2", "title": "#sec-isvalidregularexpressionliteral Static Semantics: IsValidRegularExpressionLiteral ( literal )", "html": "<emu-clause id=\"sec-isvalidregularexpressionliteral\" aoid=\"IsValidRegularExpressionLiteral\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isvalidregularexpressionliteral\">#sec-isvalidregularexpressionliteral</span> Static Semantics: IsValidRegularExpressionLiteral ( <var>literal</var> )</h1>\n        <p>The abstract operation IsValidRegularExpressionLiteral takes argument <var>literal</var> (a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It determines if its argument is a valid regular expression literal. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once, return <emu-val>false</emu-val>.</li><li>Let <var>patternText</var> be <emu-xref aoid=\"BodyText\"><a href=\"#sec-static-semantics-bodytext\">BodyText</a></emu-xref> of <var>literal</var>.</li><li>If <emu-xref aoid=\"FlagText\"><a href=\"#sec-static-semantics-flagtext\">FlagText</a></emu-xref> of <var>literal</var> contains <code>u</code>, let <var>u</var> be <emu-val>true</emu-val>; else let <var>u</var> be <emu-val>false</emu-val>.</li><li>If <var>u</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>stringValue</var> be <emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>patternText</var>).</li><li>Set <var>patternText</var> to the sequence of code points resulting from interpreting each of the 16-bit elements of <var>stringValue</var> as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.</li></ol></li><li>Let <var>parseResult</var> be <emu-xref aoid=\"ParsePattern\"><a href=\"#sec-parsepattern\">ParsePattern</a></emu-xref>(<var>patternText</var>, <var>u</var>).</li><li>If <var>parseResult</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, return <emu-val>true</emu-val>; else return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexpbuiltinexec": {"num": "22.2.5.2.2", "title": "#sec-regexpbuiltinexec RegExpBuiltinExec ( R, S )", "html": "<emu-clause id=\"sec-regexpbuiltinexec\" aoid=\"RegExpBuiltinExec\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexpbuiltinexec\">#sec-regexpbuiltinexec</span> RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</h1>\n          <p>The abstract operation RegExpBuiltinExec takes arguments <var>R</var> (an initialized RegExp instance) and <var>S</var> (a String). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>length</var> be the number of code units in <var>S</var>.</li><li>Let <var>lastIndex</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Let <var>flags</var> be <var>R</var>.[[OriginalFlags]].</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>; else let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>sticky</var> be <emu-val>true</emu-val>; else let <var>sticky</var> be <emu-val>false</emu-val>.</li><li>If <var>global</var> is <emu-val>false</emu-val> and <var>sticky</var> is <emu-val>false</emu-val>, set <var>lastIndex</var> to 0.</li><li>Let <var>matcher</var> be <var>R</var>.[[RegExpMatcher]].</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>; else let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Let <var>matchSucceeded</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>matchSucceeded</var> is <emu-val>false</emu-val>,<ol><li>If <var>lastIndex</var> &gt; <var>length</var>, then<ol><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Let <var>r</var> be <var>matcher</var>(<var>S</var>, <var>lastIndex</var>).</li><li>If <var>r</var> is <emu-const>failure</emu-const>, then<ol><li>If <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, <emu-val>true</emu-val>).</li><li>Return <emu-val>null</emu-val>.</li></ol></li><li>Set <var>lastIndex</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>lastIndex</var>, <var>fullUnicode</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a State.</li><li>Set <var>matchSucceeded</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Let <var>e</var> be <var>r</var>'s <var>endIndex</var> value.</li><li>If <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><var>e</var> is an index into the <var>Input</var> character list, derived from <var>S</var>, matched by <var>matcher</var>. Let <var>eUTF</var> be the smallest index into <var>S</var> that corresponds to the character at element <var>e</var> of <var>Input</var>. If <var>e</var> is greater than or equal to the number of elements in <var>Input</var>, then <var>eUTF</var> is the number of code units in <var>S</var>.</li><li>Set <var>e</var> to <var>eUTF</var>.</li></ol></li><li>If <var>global</var> is <emu-val>true</emu-val> or <var>sticky</var> is <emu-val>true</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>e</var>), <emu-val>true</emu-val>).</li></ol></li><li>Let <var>n</var> be the number of elements in <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>. (This is the same value as <emu-xref href=\"#sec-notation\"><a href=\"#sec-notation\" class=\"excluded-xref\" excluded-id=\"sec-notation\">#sec-notation</a></emu-xref>'s <var>NcapturingParens</var>.)</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> &lt; 2<sup>32</sup> - 1.</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>n</var> + 1).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>A</var>'s <emu-val>\"length\"</emu-val> property is <var>n</var> + 1.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"index\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lastIndex</var>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"input\"</emu-val>, <var>S</var>).</li><li>Let <var>matchedSubstr</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>lastIndex</var> to <var>e</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>matchedSubstr</var>).</li><li>If <var>R</var> contains any <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>groups</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>groups</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"groups\"</emu-val>, <var>groups</var>).</li><li>For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var> such that <var>i</var> &#8805; 1 and <var>i</var> &#8804; <var>n</var>, in ascending order, do<ol><li>Let <var>captureI</var> be <var>i</var><sup>th</sup> element of <var>r</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>captureI</var> is <emu-val>undefined</emu-val>, let <var>capturedValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>fullUnicode</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code points.</li><li>Let <var>capturedValue</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>captureI</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fullUnicode</var> is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>captureI</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of code units.</li><li>Let <var>capturedValue</var> be the String value consisting of the code units of <var>captureI</var>.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>)), <var>capturedValue</var>).</li><li>If the <var>i</var><sup>th</sup> capture of <var>R</var> was defined with a <emu-nt><a href=\"#prod-GroupName\">GroupName</a></emu-nt>, then<ol><li>Let <var>s</var> be the <emu-xref aoid=\"CapturingGroupName\"><a href=\"#sec-static-semantics-capturinggroupname\">CapturingGroupName</a></emu-xref> of the corresponding <emu-nt><a href=\"#prod-RegExpIdentifierName\">RegExpIdentifierName</a></emu-nt>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>groups</var>, <var>s</var>, <var>capturedValue</var>).</li></ol></li></ol></li><li>Return <var>A</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-integer-indexed-exotic-objects-hasproperty-p": {"num": "10.4.5.2", "title": "#sec-integer-indexed-exotic-objects-hasproperty-p [[HasProperty]] ( P )", "html": "<emu-clause id=\"sec-integer-indexed-exotic-objects-hasproperty-p\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integer-indexed-exotic-objects-hasproperty-p\">#sec-integer-indexed-exotic-objects-hasproperty-p</span> [[HasProperty]] ( <var>P</var> )</h1>\n        <p>The [[HasProperty]] internal method of an <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be !&#160;<emu-xref aoid=\"CanonicalNumericIndexString\"><a href=\"#sec-canonicalnumericindexstring\">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"IsValidIntegerIndex\"><a href=\"#sec-isvalidintegerindex\">IsValidIntegerIndex</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasProperty\"><a href=\"#sec-ordinaryhasproperty\">OrdinaryHasProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "10.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>The [[Get]] internal method of a <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref> <var>O</var> takes arguments <var>P</var> (a property key) and <var>Receiver</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return ? <var>targetEnv</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-proxy-object-internal-methods-and-internal-slots-delete-p": {"num": "10.5.10", "title": "#sec-proxy-object-internal-methods-and-internal-slots-delete-p [[Delete]] ( P )", "html": "<emu-clause id=\"sec-proxy-object-internal-methods-and-internal-slots-delete-p\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-object-internal-methods-and-internal-slots-delete-p\">#sec-proxy-object-internal-methods-and-internal-slots-delete-p</span> [[Delete]] ( <var>P</var> )</h1>\n      <p>The [[Delete]] internal method of a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> <var>O</var> takes argument <var>P</var> (a property key). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>handler</var>, <emu-val>\"deleteProperty\"</emu-val>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, &#171; <var>target</var>, <var>P</var> &#187;)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>[[Delete]] for proxy objects enforces the following invariants:</p>\n        <ul>\n          <li>\n            The result of [[Delete]] is a Boolean value.\n          </li>\n          <li>\n            A property cannot be reported as deleted, if it exists as a non-configurable own property of the target object.\n          </li>\n          <li>\n            A property cannot be reported as deleted, if it exists as an own property of the target object and the target object is non-extensible.\n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-isunresolvablereference": {"num": "6.2.4.2", "title": "#sec-isunresolvablereference IsUnresolvableReference ( V )", "html": "<emu-clause id=\"sec-isunresolvablereference\" oldids=\"ao-isunresolvablereference\" aoid=\"IsUnresolvableReference\"><span id=\"ao-isunresolvablereference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunresolvablereference\">#sec-isunresolvablereference</span> IsUnresolvableReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsUnresolvableReference takes argument <var>V</var> (a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>V</var>.[[Base]] is <emu-const>unresolvable</emu-const>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createmethodproperty": {"num": "7.3.6", "title": "#sec-createmethodproperty CreateMethodProperty ( O, P, V )", "html": "<emu-clause id=\"sec-createmethodproperty\" aoid=\"CreateMethodProperty\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmethodproperty\">#sec-createmethodproperty</span> CreateMethodProperty ( <var>O</var>, <var>P</var>, <var>V</var> )</h1>\n      <p>The abstract operation CreateMethodProperty takes arguments <var>O</var> (an Object), <var>P</var> (a property key), and <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It is used to create a new own property of an object. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>newDesc</var> be the PropertyDescriptor { [[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This abstract operation creates a property whose attributes are set to the same defaults used for built-in methods and methods defined using class declaration syntax. Normally, the property will not already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-arraysetlength": {"num": "10.4.2.4", "title": "#sec-arraysetlength ArraySetLength ( A, Desc )", "html": "<emu-clause id=\"sec-arraysetlength\" aoid=\"ArraySetLength\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraysetlength\">#sec-arraysetlength</span> ArraySetLength ( <var>A</var>, <var>Desc</var> )</h1>\n        <p>The abstract operation ArraySetLength takes arguments <var>A</var> (an Array) and <var>Desc</var> (a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>Desc</var>.[[Value]] is absent, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li id=\"step-arraysetlength-newlen\">Let <var>newLen</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li id=\"step-arraysetlength-numberlen\">Let <var>numberLen</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <emu-xref aoid=\"SameValueZero\"><a href=\"#sec-samevaluezero\">SameValueZero</a></emu-xref>(<var>newLen</var>, <var>numberLen</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid=\"OrdinaryGetOwnProperty\"><a href=\"#sec-ordinarygetownproperty\">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>oldLenDesc</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>oldLenDesc</var>.[[Configurable]] is <emu-val>false</emu-val>.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> &#8805; <var>oldLen</var>, then<ol><li>Return <emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>NOTE: Setting the [[Writable]] attribute to <emu-val>false</emu-val> is deferred in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>For each own property key <var>P</var> of <var>A</var> that is an <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref>, whose numeric value is greater than or equal to <var>newLen</var>, in descending numeric index order, do<ol><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](<var>P</var>).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to !&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>P</var>) + <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>succeeded</var> to !&#160;<emu-xref aoid=\"OrdinaryDefineOwnProperty\"><a href=\"#sec-ordinarydefineownproperty\">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Writable]]: <emu-val>false</emu-val> }).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In steps <emu-xref href=\"#step-arraysetlength-newlen\"><a href=\"#step-arraysetlength-newlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-newlen\">#step-arraysetlength-newlen</a></emu-xref> and <emu-xref href=\"#step-arraysetlength-numberlen\"><a href=\"#step-arraysetlength-numberlen\" class=\"excluded-xref\" excluded-id=\"step-arraysetlength-numberlen\">#step-arraysetlength-numberlen</a></emu-xref>, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-evaluatenew": {"num": "13.3.5.1.1", "title": "#sec-evaluatenew EvaluateNew ( constructExpr, arguments )", "html": "<emu-clause id=\"sec-evaluatenew\" aoid=\"EvaluateNew\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatenew\">#sec-evaluatenew</span> EvaluateNew ( <var>constructExpr</var>, <var>arguments</var> )</h1>\n          <p>The abstract operation EvaluateNew takes arguments <var>constructExpr</var> (a <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> or a <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>) and <var>arguments</var> (<emu-const>empty</emu-const> or an <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <var>constructExpr</var>.</li><li>Let <var>constructor</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>arguments</var> is <emu-const>empty</emu-const>, let <var>argList</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else,<ol><li>Let <var>argList</var> be ? <emu-xref aoid=\"ArgumentListEvaluation\"><a href=\"#sec-runtime-semantics-argumentlistevaluation\">ArgumentListEvaluation</a></emu-xref> of <var>arguments</var>.</li></ol></li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>constructor</var>, <var>argList</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}}, "figData": {"table-internal-slots-of-ecmascript-function-objects": "Table 33", "table-internal-slots-of-bound-function-exotic-objects": "Table 34", "table-internal-slots-of-module-namespace-exotic-objects": "Table 35", "sec-todatestring-day-names": "Table 55", "sec-todatestring-month-names": "Table 56", "table-replacement-text-symbol-substitutions": "Table 57", "table-nonbinary-unicode-properties": "Table 59", "table-binary-unicode-properties": "Table 60", "table-unicode-general-category-values": "Table 61", "table-unicode-script-values": "Table 62", "table-the-typedarray-constructors": "Table 63", "table-async-iterator-required": "Table 69", "table-async-iterator-optional": "Table 70"}}}