{"from": {"secList": ["sec-ordinaryfunctioncreate", "sec-assignment-operators-runtime-semantics-evaluation", "sec-performeval", "sec-source-text", "sec-delete-operator-runtime-semantics-evaluation", "sec-arrow-function-definitions", "sec-function-definitions", "sec-strict-mode-of-ecmascript", "sec-function.prototype.tostring", "sec-ecmascript-function-objects", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-syntactic-grammar", "sec-directive-prologues-and-the-use-strict-directive", "sec-error-objects", "sec-time-values-and-time-range"], "secData": {"sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When an assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step 1.e of the first algorithm or step 8 of the second algorithm is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-source-text": {"num": "10.1", "title": "#sec-source-text Source Text", "html": "<emu-clause id=\"sec-source-text\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text\">#sec-source-text</span> Source Text</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-SourceCharacter\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production></emu-grammar>\n    <p>ECMAScript code is expressed using Unicode. ECMAScript source text is a sequence of code points. All Unicode code point values from U+0000 to U+10FFFF, including surrogate code points, may occur in source text where permitted by the ECMAScript grammars. The actual encodings used to store and interchange ECMAScript source text is not relevant to this specification. Regardless of the external source text encoding, a conforming ECMAScript implementation processes the source text as if it was an equivalent sequence of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values, each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> being a Unicode code point. Conforming ECMAScript implementations are not required to perform any normalization of source text, or behave as though they were performing normalization of source text.</p>\n    <p>The components of a combining character sequence are treated as individual Unicode code points even though a user might think of the whole sequence as a single character.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>In string literals, regular expression literals, template literals and identifiers, any Unicode code point may also be expressed using Unicode escape sequences that explicitly express a code point's numeric value. Within a comment, such an escape sequence is effectively ignored as part of the comment.</p>\n      <p>ECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a Java program, if the Unicode escape sequence <code>\\u000A</code>, for example, occurs within a single-line comment, it is interpreted as a line terminator (Unicode code point U+000A is LINE FEED (LF)) and therefore the next code point is not part of the comment. Similarly, if the Unicode escape sequence <code>\\u000A</code> occurs within a string literal in a Java program, it is likewise interpreted as a line terminator, which is not allowed within a string literal&#8212;one must write <code>\\n</code> instead of <code>\\u000A</code> to cause a LINE FEED (LF) to be part of the String value of a string literal. In an ECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and therefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring within a string literal in an ECMAScript program always contributes to the literal and is never interpreted as a line terminator or as a code point that might terminate the string literal.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-utf16encoding\"><h1><span class=\"secnum\">10.1.1</span>#sec-utf16encoding Static Semantics: UTF16Encoding ( cp )</h1>...</div><div id=\"excluded-sec-utf16encode\"><h1><span class=\"secnum\">10.1.2</span>#sec-utf16encode Static Semantics: UTF16Encode ( text )</h1>...</div><div id=\"excluded-sec-utf16decodesurrogatepair\"><h1><span class=\"secnum\">10.1.3</span>#sec-utf16decodesurrogatepair Static Semantics: UTF16DecodeSurrogatePair ( lead, trail )</h1>...</div><div id=\"excluded-sec-codepointat\"><h1><span class=\"secnum\">10.1.4</span>#sec-codepointat Static Semantics: CodePointAt ( string, position )</h1>...</div><div id=\"excluded-sec-utf16decodestring\"><h1><span class=\"secnum\">10.1.5</span>#sec-utf16decodestring Static Semantics: UTF16DecodeString ( string )</h1>...</div></emu-clause>\n\n  "}, "sec-delete-operator-runtime-semantics-evaluation": {"num": "12.5.3.2", "title": "#sec-delete-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-delete-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"IsSuperReference\"><a href=\"#sec-issuperreference\">IsSuperReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>baseObj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>)).</li><li>Let <var>deleteStatus</var> be ? <var>baseObj</var>.[[Delete]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).</li><li>If <var>deleteStatus</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>deleteStatus</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ref</var> is a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> to an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding.</li><li>Let <var>bindings</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Return ? <var>bindings</var>.DeleteBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> exception is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name. In addition, if a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> }, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions": {"num": "14.2", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7a8157ec\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When the production\n      \n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <br>\n      is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.2.2</span>#sec-arrow-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.2.3</span>#sec-arrow-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.2.4</span>#sec-arrow-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.2.5</span>#sec-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.2.6</span>#sec-arrow-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.2.7</span>#sec-arrow-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.2.8</span>#sec-arrow-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">14.2.9</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.2.10</span>#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.2.11</span>#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.2.12</span>#sec-arrow-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.2.13</span>#sec-arrow-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.2.14</span>#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.2.15</span>#sec-arrow-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.2.16</span>#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.17</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-function-definitions": {"num": "14.1", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\" id=\"prod-UniqueFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameters\" params=\"Yield, Await\" id=\"prod-FormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameterList\" params=\"Yield, Await\" id=\"prod-FormalParameterList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\" id=\"prod-FunctionRestParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameter\" params=\"Yield, Await\" id=\"prod-FormalParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">14.1.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.1.2</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.1.3</span>#sec-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.1.4</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.1.5</span>#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.1.6</span>#sec-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.1.7</span>#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.1.8</span>#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.1.9</span>#sec-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.1.10</span>#sec-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasinitializer\"><h1><span class=\"secnum\">14.1.11</span>#sec-function-definitions-static-semantics-hasinitializer Static Semantics: HasInitializer</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.1.12</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">14.1.13</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.1.14</span>#sec-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.1.15</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.1.16</span>#sec-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.1.17</span>#sec-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.1.18</span>#sec-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.1.19</span>#sec-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.1.20</span>#sec-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.1.21</span>#sec-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.1.22</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.1.23</span>#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.1.24</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.25</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in  <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> as described in  <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    \n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    \n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    \n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    \n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    \n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    \n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    \n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>,  <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    \n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    \n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;HostHasSourceTextAvailable(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.\n        </li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            sequence of Unicode code points\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            \n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            \n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            \n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration occurs within the function code of <var>g</var>\n            \n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses 9, 13, and 14 of this specification.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause  <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause  <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause  <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The  <em>syntactic grammar</em> for ECMAScript is given in clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a  <em>parse tree</em>, a rooted tree structure in which each node is a  <dfn>Parse Node</dfn>. Each Parse Node is an  <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more  <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered  <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive  <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not  <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is  <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues and the Use Strict Directive</h1>\n      <p>A  <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A  <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain more than one <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s which are not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which occur in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-error-objects": {"num": "19.5", "title": "#sec-error-objects Error Objects", "html": "<emu-clause id=\"sec-error-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-objects\">#sec-error-objects</span> Error Objects</h1>\n    <p>Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.</p>\n\n    <div id=\"excluded-sec-error-constructor\"><h1><span class=\"secnum\">19.5.1</span>#sec-error-constructor The Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-constructor\"><h1><span class=\"secnum\">19.5.2</span>#sec-properties-of-the-error-constructor Properties of the Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-prototype-object\"><h1><span class=\"secnum\">19.5.3</span>#sec-properties-of-the-error-prototype-object Properties of the Error Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-error-instances\"><h1><span class=\"secnum\">19.5.4</span>#sec-properties-of-error-instances Properties of Error Instances</h1>...</div><div id=\"excluded-sec-native-error-types-used-in-this-standard\"><h1><span class=\"secnum\">19.5.5</span>#sec-native-error-types-used-in-this-standard Native Error Types Used in This Standard</h1>...</div><div id=\"excluded-sec-nativeerror-object-structure\"><h1><span class=\"secnum\">19.5.6</span>#sec-nativeerror-object-structure NativeError Object Structure</h1>...</div></emu-clause>\n"}, "sec-time-values-and-time-range": {"num": "20.4.1.1", "title": "#sec-time-values-and-time-range Time Values and Time Range", "html": "<emu-clause id=\"sec-time-values-and-time-range\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</span> Time Values and Time Range</h1>\n        <p>Time measurement in ECMAScript is analogous to time measurement in POSIX, in particular sharing definition in terms of the proleptic Gregorian calendar, an epoch of midnight at the beginning of 01 January, 1970 UTC, and an accounting of every day as comprising exactly 86,400 seconds (each of which is 1000 milliseconds long).</p>\n        <p>An ECMAScript  <dfn>time value</dfn> is a Number, either a finite <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing an instant in time to millisecond precision or <emu-val>NaN</emu-val> representing no specific instant. A time value that is a multiple of  <emu-eqn class=\"inline\">24 &#215; 60 &#215; 60 &#215; 1000 = 86,400,000</emu-eqn> (i.e., is equal to 86,400,000 &#215; <var>d</var> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>d</var>) represents the instant at the start of the UTC day that follows the epoch by <var>d</var> whole UTC days (preceding the epoch for negative <var>d</var>). Every other finite time value <var>t</var> is defined relative to the greatest preceding time value <var>s</var> that is such a multiple, and represents the instant that occurs within the same UTC day as <var>s</var> but follows it by <var>t</var> &#8722; <var>s</var> milliseconds.</p>\n        <p>Time values do not account for UTC leap seconds&#8212;there are no time values representing instants within positive leap seconds, and there are time values representing instants removed from the UTC timeline by negative leap seconds. However, the definition of time values nonetheless yields piecewise alignment with UTC, with discontinuities only at leap second boundaries and zero difference outside of leap seconds.</p>\n        <p>A Number can exactly represent all integers from -9,007,199,254,740,992 to 9,007,199,254,740,992 (<emu-xref href=\"#sec-number.min_safe_integer\"><a href=\"#sec-number.min_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.min_safe_integer\">#sec-number.min_safe_integer</a></emu-xref> and  <emu-xref href=\"#sec-number.max_safe_integer\"><a href=\"#sec-number.max_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.max_safe_integer\">#sec-number.max_safe_integer</a></emu-xref>). A time value supports a slightly smaller range of -8,640,000,000,000,000 to 8,640,000,000,000,000 milliseconds. This yields a supported time value range of exactly -100,000,000 days to 100,000,000 days relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n        <p>The exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the time value <emu-val>+0</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The 400 year cycle of the proleptic Gregorian calendar contains 97 leap years. This yields an average of 365.2425 days per year, which is 31,556,952,000 milliseconds. Therefore, the maximum range a Number could represent exactly with millisecond precision is approximately -285,426 to 285,426 years relative to 1970. The smaller range supported by a time value as specified in this section is approximately -273,790 to 273,790 years relative to 1970.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-2": "Table 3", "table-27": "Table 27"}}, "to": {"secList": ["sec-ordinaryfunctioncreate", "sec-assignment-operators-runtime-semantics-evaluation", "sec-performeval", "sec-source-text", "sec-delete-operator-runtime-semantics-evaluation", "sec-arrow-function-definitions", "sec-function-definitions", "sec-strict-mode-of-ecmascript", "sec-function.prototype.tostring", "sec-ecmascript-function-objects", "sec-block-level-function-declarations-web-legacy-compatibility-semantics", "sec-syntactic-grammar", "sec-directive-prologues-and-the-use-strict-directive", "sec-error-objects", "sec-time-values-and-time-range"], "secData": {"sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[PresentInStackTraces]] to PresentInStackTraces of <var>Body</var>.</li><li>Set <var>F</var>.[[HasSourceTextAvailable]] to HasSourceTextAvailable of <var>Body</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>F</var>.[[PresentInStackTraces]] is <emu-val>false</emu-val>, <var>F</var>.[[HasSourceTextAvailable]] is <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "12.15.4", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When an assignment <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step 1.e of the first algorithm or step 8 of the second algorithm is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"UTF16DecodeString\"><a href=\"#sec-utf16decodestring\">UTF16DecodeString</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <var>ctx</var>'s Function.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-source-text": {"num": "10.1", "title": "#sec-source-text Source Text", "html": "<emu-clause id=\"sec-source-text\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text\">#sec-source-text</span> Source Text</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SourceCharacter\" type=\"lexical\" id=\"prod-SourceCharacter\">\n    <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c64b38bd\"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>\n</emu-production></emu-grammar>\n    <p>ECMAScript code is expressed using Unicode. ECMAScript source text is a sequence of code points. All Unicode code point values from U+0000 to U+10FFFF, including surrogate code points, may occur in source text where permitted by the ECMAScript grammars. The actual encodings used to store and interchange ECMAScript source text is not relevant to this specification. Regardless of the external source text encoding, a conforming ECMAScript implementation processes the source text as if it was an equivalent sequence of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values, each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> being a Unicode code point. Conforming ECMAScript implementations are not required to perform any normalization of source text, or behave as though they were performing normalization of source text.</p>\n    <p>The components of a combining character sequence are treated as individual Unicode code points even though a user might think of the whole sequence as a single character.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>In string literals, regular expression literals, template literals and identifiers, any Unicode code point may also be expressed using Unicode escape sequences that explicitly express a code point's numeric value. Within a comment, such an escape sequence is effectively ignored as part of the comment.</p>\n      <p>ECMAScript differs from the Java programming language in the behaviour of Unicode escape sequences. In a Java program, if the Unicode escape sequence <code>\\u000A</code>, for example, <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> a single-line comment, it is interpreted as a line terminator (Unicode code point U+000A is LINE FEED (LF)) and therefore the next code point is not part of the comment. Similarly, if the Unicode escape sequence <code>\\u000A</code> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> a string literal in a Java program, it is likewise interpreted as a line terminator, which is not allowed within a string literal&#8212;one must write <code>\\n</code> instead of <code>\\u000A</code> to cause a LINE FEED (LF) to be part of the String value of a string literal. In an ECMAScript program, a Unicode escape sequence occurring within a comment is never interpreted and therefore cannot contribute to termination of the comment. Similarly, a Unicode escape sequence occurring within a string literal in an ECMAScript program always contributes to the literal and is never interpreted as a line terminator or as a code point that might terminate the string literal.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-utf16encoding\"><h1><span class=\"secnum\">10.1.1</span>#sec-utf16encoding Static Semantics: UTF16Encoding ( cp )</h1>...</div><div id=\"excluded-sec-utf16encode\"><h1><span class=\"secnum\">10.1.2</span>#sec-utf16encode Static Semantics: UTF16Encode ( text )</h1>...</div><div id=\"excluded-sec-utf16decodesurrogatepair\"><h1><span class=\"secnum\">10.1.3</span>#sec-utf16decodesurrogatepair Static Semantics: UTF16DecodeSurrogatePair ( lead, trail )</h1>...</div><div id=\"excluded-sec-codepointat\"><h1><span class=\"secnum\">10.1.4</span>#sec-codepointat Static Semantics: CodePointAt ( string, position )</h1>...</div><div id=\"excluded-sec-utf16decodestring\"><h1><span class=\"secnum\">10.1.5</span>#sec-utf16decodestring Static Semantics: UTF16DecodeString ( string )</h1>...</div></emu-clause>\n\n  "}, "sec-delete-operator-runtime-semantics-evaluation": {"num": "12.5.3.2", "title": "#sec-delete-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-delete-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UnaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"IsUnresolvableReference\"><a href=\"#sec-isunresolvablereference\">IsUnresolvableReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"IsSuperReference\"><a href=\"#sec-issuperreference\">IsSuperReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>baseObj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>)).</li><li>Let <var>deleteStatus</var> be ? <var>baseObj</var>.[[Delete]](<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).</li><li>If <var>deleteStatus</var> is <emu-val>false</emu-val> and <emu-xref aoid=\"IsStrictReference\"><a href=\"#sec-isstrictreference\">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>deleteStatus</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ref</var> is a <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> to an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> binding.</li><li>Let <var>bindings</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Return ? <var>bindings</var>.DeleteBinding(<emu-xref aoid=\"GetReferencedName\"><a href=\"#sec-getreferencedname\">GetReferencedName</a></emu-xref>(<var>ref</var>)).\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>When a <code>delete</code> operator <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> exception is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name. In addition, if a <code>delete</code> operator <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> }, a <emu-val>TypeError</emu-val> exception is thrown.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-arrow-function-definitions": {"num": "14.2", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7a8157ec\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When the production\n      \n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <br>\n      is recognized the following grammar is used to refine the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.2.2</span>#sec-arrow-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.2.3</span>#sec-arrow-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.2.4</span>#sec-arrow-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.2.5</span>#sec-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-presentinstacktraces\"><h1><span class=\"secnum\">14.2.6</span>#sec-arrow-function-definitions-static-semantics-presentinstacktraces Static Semantics: PresentInStackTraces</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hassourcetextavailable\"><h1><span class=\"secnum\">14.2.7</span>#sec-arrow-function-definitions-static-semantics-hassourcetextavailable Static Semantics: HasSourceTextAvailable</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.2.8</span>#sec-arrow-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.2.9</span>#sec-arrow-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.2.10</span>#sec-arrow-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">14.2.11</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.2.12</span>#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.2.13</span>#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.2.14</span>#sec-arrow-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.2.15</span>#sec-arrow-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.2.16</span>#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.2.17</span>#sec-arrow-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.2.18</span>#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.19</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-function-definitions": {"num": "14.1", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\" id=\"prod-UniqueFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameters\" params=\"Yield, Await\" id=\"prod-FormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameterList\" params=\"Yield, Await\" id=\"prod-FormalParameterList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\" id=\"prod-FunctionRestParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameter\" params=\"Yield, Await\" id=\"prod-FormalParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">14.1.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.1.2</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.1.3</span>#sec-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.1.4</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.1.5</span>#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.1.6</span>#sec-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.1.7</span>#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.1.8</span>#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.1.9</span>#sec-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-presentinstacktraces\"><h1><span class=\"secnum\">14.1.10</span>#sec-function-definitions-static-semantics-presentinstacktraces Static Semantics: PresentInStackTraces</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hassourcetextavailable\"><h1><span class=\"secnum\">14.1.11</span>#sec-function-definitions-static-semantics-hassourcetextavailable Static Semantics: HasSourceTextAvailable</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.1.12</span>#sec-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasinitializer\"><h1><span class=\"secnum\">14.1.13</span>#sec-function-definitions-static-semantics-hasinitializer Static Semantics: HasInitializer</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.1.14</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">14.1.15</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.1.16</span>#sec-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.1.17</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.1.18</span>#sec-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.1.19</span>#sec-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.1.20</span>#sec-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.1.21</span>#sec-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.1.22</span>#sec-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.1.23</span>#sec-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.1.24</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.1.25</span>#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.1.26</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.27</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-strict-mode-of-ecmascript": {"num": "C", "title": "#sec-strict-mode-of-ecmascript The Strict Mode of EMAScript", "html": "<emu-annex id=\"sec-strict-mode-of-ecmascript\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-strict-mode-of-ecmascript\">#sec-strict-mode-of-ecmascript</span> The Strict Mode of ECMAScript</h1>\n  <p><b>The strict mode restriction and exceptions</b></p>\n  <ul>\n    <li>\n      <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code> are reserved words within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. (<emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\" class=\"excluded-xref\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</a></emu-xref>).\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, must not extend, as described in  <emu-xref href=\"#sec-additional-syntax-numeric-literals\"><a href=\"#sec-additional-syntax-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-numeric-literals\">#sec-additional-syntax-numeric-literals</a></emu-xref>, the syntax of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral\">LegacyOctalIntegerLiteral</a></emu-nt>, nor extend the syntax of <emu-nt><a href=\"#prod-DecimalIntegerLiteral\">DecimalIntegerLiteral</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral\">NonOctalDecimalIntegerLiteral</a></emu-nt>.\n    \n    </li>\n    <li>\n      A conforming implementation, when processing <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, may not extend the syntax of <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> to include <emu-nt><a href=\"https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> as described in  <emu-xref href=\"#sec-additional-syntax-string-literals\"><a href=\"#sec-additional-syntax-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</a></emu-xref>.\n    \n    </li>\n    <li>\n      Assignment to an undeclared identifier or otherwise unresolvable reference does not create a property in the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. When a simple assignment <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, its <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> must not evaluate to an unresolvable <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>. If it does a <emu-val>ReferenceError</emu-val> exception is thrown (<emu-xref href=\"#sec-putvalue\"><a href=\"#sec-putvalue\" class=\"excluded-xref\" excluded-id=\"sec-putvalue\">#sec-putvalue</a></emu-xref>). The <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> also may not be a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, nor to a non-existent property of an object whose [[Extensible]] internal slot has the value <emu-val>false</emu-val>. In these cases a <code>TypeError</code> exception is thrown (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>).\n    \n    </li>\n    <li>\n      An <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> with the StringValue <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> may not appear as the <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> of an Assignment operator (<emu-xref href=\"#sec-assignment-operators\"><a href=\"#sec-assignment-operators\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators\">#sec-assignment-operators</a></emu-xref>) or of an <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt> (<emu-xref href=\"#sec-update-expressions\"><a href=\"#sec-update-expressions\" class=\"excluded-xref\" excluded-id=\"sec-update-expressions\">#sec-update-expressions</a></emu-xref>) or as the <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> operated upon by a Prefix Increment (<emu-xref href=\"#sec-prefix-increment-operator\"><a href=\"#sec-prefix-increment-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-increment-operator\">#sec-prefix-increment-operator</a></emu-xref>) or a Prefix Decrement (<emu-xref href=\"#sec-prefix-decrement-operator\"><a href=\"#sec-prefix-decrement-operator\" class=\"excluded-xref\" excluded-id=\"sec-prefix-decrement-operator\">#sec-prefix-decrement-operator</a></emu-xref>) operator.\n    \n    </li>\n    <li>\n      Arguments objects for strict functions define a non-configurable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> <emu-val>\"callee\"</emu-val> which throws a <emu-val>TypeError</emu-val> exception on access (<emu-xref href=\"#sec-createunmappedargumentsobject\"><a href=\"#sec-createunmappedargumentsobject\" class=\"excluded-xref\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</a></emu-xref>).\n    \n    </li>\n    <li>\n      Arguments objects for strict functions do not dynamically share their  <emu-xref href=\"#array-index\"><a href=\"#array-index\">array-indexed</a></emu-xref> property values with the corresponding formal parameter bindings of their functions. (<emu-xref href=\"#sec-arguments-exotic-objects\"><a href=\"#sec-arguments-exotic-objects\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects\">#sec-arguments-exotic-objects</a></emu-xref>).\n    \n    </li>\n    <li>\n      For strict functions, if an arguments object is created the binding of the local identifier <code>arguments</code> to the arguments object is immutable and hence may not be the target of an assignment expression. (<emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the StringValue of a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val> within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      Strict mode eval code cannot instantiate variables or functions in the variable environment of the caller to eval. Instead, a new variable environment is created and that environment is used for declaration binding instantiation for the eval code (<emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref>).\n    \n    </li>\n    <li>\n      If <emu-val>this</emu-val> is evaluated within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, then the <emu-val>this</emu-val> value is not coerced to an object. A <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is not converted to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> and primitive values are not converted to wrapper objects. The <emu-val>this</emu-val> value passed via a function call (including calls made using <code>Function.prototype.apply</code> and <code>Function.prototype.call</code>) do not coerce the passed <emu-val>this</emu-val> value to an object (<emu-xref href=\"#sec-ordinarycallbindthis\"><a href=\"#sec-ordinarycallbindthis\" class=\"excluded-xref\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.apply\"><a href=\"#sec-function.prototype.apply\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.apply\">#sec-function.prototype.apply</a></emu-xref>,  <emu-xref href=\"#sec-function.prototype.call\"><a href=\"#sec-function.prototype.call\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.call\">#sec-function.prototype.call</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> is thrown if its <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name (<emu-xref href=\"#sec-delete-operator-static-semantics-early-errors\"><a href=\"#sec-delete-operator-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-static-semantics-early-errors\">#sec-delete-operator-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      When a <code>delete</code> operator <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, a <emu-val>TypeError</emu-val> is thrown if the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> } (<emu-xref href=\"#sec-delete-operator-runtime-semantics-evaluation\"><a href=\"#sec-delete-operator-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-delete-operator-runtime-semantics-evaluation\">#sec-delete-operator-runtime-semantics-evaluation</a></emu-xref>).\n    \n    </li>\n    <li>\n      <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">Strict mode code</a></emu-xref> may not include a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt>. The occurrence of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> in such a context is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-with-statement-static-semantics-early-errors\"><a href=\"#sec-with-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-static-semantics-early-errors\">#sec-with-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if a <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and BoundNames of <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> contains either <code>eval</code> or <code>arguments</code> (<emu-xref href=\"#sec-try-statement-static-semantics-early-errors\"><a href=\"#sec-try-statement-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-static-semantics-early-errors\">#sec-try-statement-static-semantics-early-errors</a></emu-xref>).\n    \n    </li>\n    <li>\n      It is a <emu-val>SyntaxError</emu-val> if the same <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> appears more than once in the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>. An attempt to create such a function using a Function, Generator, or AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a <emu-val>SyntaxError</emu-val> (<emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>,  <emu-xref href=\"#sec-createdynamicfunction\"><a href=\"#sec-createdynamicfunction\" class=\"excluded-xref\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</a></emu-xref>).\n    \n    </li>\n    <li>\n      An implementation may not extend, beyond that defined in this specification, the meanings within strict functions of properties named <emu-val>\"caller\"</emu-val> or <emu-val>\"arguments\"</emu-val> of function instances.\n    \n    </li>\n  </ul>\n</emu-annex>\n\n"}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref> or has a [[HasSourceTextAvailable]] slot with the value <emu-val>false</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;HostHasSourceTextAvailable(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.\n        </li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PresentInStackTraces]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            When <emu-val>false</emu-val>, this function must not have a corresponding entry in stack traces.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HasSourceTextAvailable]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            When <emu-val>false</emu-val>, this function will be rendered as a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt> by <code>Function.prototype.toString</code> (<emu-xref href=\"#sec-function.prototype.tostring\"><a href=\"#sec-function.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</a></emu-xref>) and corresponding stack trace entries will have no attribution or position information.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            sequence of Unicode code points\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-block-level-function-declarations-web-legacy-compatibility-semantics": {"num": "B.3.3", "title": "#sec-block-level-function-declarations-web-legacy-compatibility-semantics Block-Level Function Declarations Web Legacy Compatibility Semantics", "html": "<emu-annex id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</h1>\n      <p>Prior to ECMAScript 2015, the ECMAScript specification did not define the occurrence of a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> as an element of a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> statement's <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>. However, support for that form of <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> was an allowable extension and most browser-hosted ECMAScript implementations permitted them. Unfortunately, the semantics of such declarations differ among those implementations. Because of these semantic differences, existing web ECMAScript code that uses <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations is only portable among browser implementation if the usage only depends upon the semantic intersection of all of the browser implementations for such declarations. The following are the use cases that fall within that intersection semantics:</p>\n      <ol>\n        <li>\n          <p>A function is declared and only referenced within a single block</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> the function code of <var>g</var>\n            \n            </li>\n            <li>\n              All occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> are within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> but also referenced by an inner function definition that is not contained within that same <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> the function code of <var>g</var>\n            \n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within another function <var>h</var> that is nested within <var>g</var> and no other declaration of <var>f</var> shadows the references to <var>f</var> from within <var>h</var>.\n            \n            </li>\n            <li>\n              All invocations of <var>h</var> occur after the declaration of <var>f</var> has been evaluated.\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          <p>A function is declared and possibly used within a single block but also referenced within subsequent blocks.</p>\n          <ul>\n            <li>\n              One or more <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> whose <emu-nt><a href=\"#prod-annexB-BindingIdentifier\">BindingIdentifier</a></emu-nt> is the name <var>f</var> occur within the function code of an enclosing function <var>g</var> and that declaration is nested within a <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt>.\n            \n            </li>\n            <li>\n              No other declaration of <var>f</var> that is not a <code>var</code> declaration <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> the function code of <var>g</var>\n            \n            </li>\n            <li>\n              There may be occurrences of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> of the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n            <li>\n              There is at least one occurrence of <var>f</var> as an <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> within the function code of <var>g</var> that lexically follows the <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> containing the declaration of <var>f</var>.\n            \n            </li>\n          </ul>\n        </li>\n      </ol>\n      <p>The first use case is interoperable with the semantics of <emu-nt><a href=\"#prod-annexB-Block\">Block</a></emu-nt> level function declarations provided by ECMAScript 2015. Any pre-existing ECMAScript code that employs that use case will operate using the Block level function declarations semantics defined by clauses 9, 13, and 14 of this specification.</p>\n      <p>ECMAScript 2015 interoperability for the second and third use cases requires the following extensions to the clause  <emu-xref href=\"#sec-ordinary-and-exotic-objects-behaviours\"><a href=\"#sec-ordinary-and-exotic-objects-behaviours\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-and-exotic-objects-behaviours\">#sec-ordinary-and-exotic-objects-behaviours</a></emu-xref>, clause  <emu-xref href=\"#sec-ecmascript-language-functions-and-classes\"><a href=\"#sec-ecmascript-language-functions-and-classes\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-functions-and-classes\">#sec-ecmascript-language-functions-and-classes</a></emu-xref>, clause  <emu-xref href=\"#sec-eval-x\"><a href=\"#sec-eval-x\" class=\"excluded-xref\" excluded-id=\"sec-eval-x\">#sec-eval-x</a></emu-xref> and clause  <emu-xref href=\"#sec-globaldeclarationinstantiation\"><a href=\"#sec-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</a></emu-xref> semantics.</p>\n      <p>If an ECMAScript implementation has a mechanism for reporting diagnostic warning messages, a warning should be produced when code contains a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> for which these compatibility semantics are applied and introduce observable differences from non-compatibility semantics. For example, if a var binding is not introduced because its introduction would create an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>, a warning message should not be produced.</p>\n      <div id=\"excluded-sec-web-compat-functiondeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.1</span>#sec-web-compat-functiondeclarationinstantiation Changes to FunctionDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-globaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.2</span>#sec-web-compat-globaldeclarationinstantiation Changes to GlobalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-web-compat-evaldeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.3</span>#sec-web-compat-evaldeclarationinstantiation Changes to EvalDeclarationInstantiation</h1>...</div><div id=\"excluded-sec-block-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.4</span>#sec-block-duplicates-allowed-static-semantics Changes to Block Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-duplicates-allowed-static-semantics\"><h1><span class=\"secnum\">B.3.3.5</span>#sec-switch-duplicates-allowed-static-semantics Changes to switch Statement Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-web-compat-blockdeclarationinstantiation\"><h1><span class=\"secnum\">B.3.3.6</span>#sec-web-compat-blockdeclarationinstantiation Changes to BlockDeclarationInstantiation</h1>...</div></emu-annex>\n\n    "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The  <em>syntactic grammar</em> for ECMAScript is given in clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a  <em>parse tree</em>, a rooted tree structure in which each node is a  <dfn>Parse Node</dfn>. Each Parse Node is an  <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more  <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol. A Parse Node <var>A</var>  <dfn>occurs within</dfn> another Parse Node <var>B</var> if <var>A</var> is the child of <var>B</var> or if <var>A</var> is the child of some Parse Node <var>C</var> where <var>C</var> occurs within <var>B</var>.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered  <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive  <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not  <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is  <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues</h1>\n      <p>A  <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A  <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A  <dfn id=\"sensitive-directive\">Sensitive Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"sensitive\"</code> or <code>'sensitive'</code>. A <emu-xref href=\"#sensitive-directive\"><a href=\"#sensitive-directive\">Sensitive Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A  <dfn id=\"hidden-implementation-directive\">Hidden Implementation Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"hide implementation\"</code> or <code>'hide implementation'</code>. A <emu-xref href=\"#hidden-implementation-directive\"><a href=\"#hidden-implementation-directive\">Hidden Implementation Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A  <dfn id=\"built-in-directive\">Built-in Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> that is either a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>, a <emu-xref href=\"#sensitive-directive\"><a href=\"#sensitive-directive\">Sensitive Directive</a></emu-xref>, or a <emu-xref href=\"#hidden-implementation-directive\"><a href=\"#hidden-implementation-directive\">Hidden Implementation Directive</a></emu-xref>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain duplicate Built-in Directives. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation-specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> which are not a <emu-xref href=\"#built-in-directive\"><a href=\"#built-in-directive\">Built-in Directive</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#built-in-directive\"><a href=\"#built-in-directive\">Built-in Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-error-objects": {"num": "19.5", "title": "#sec-error-objects Error Objects", "html": "<emu-clause id=\"sec-error-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-objects\">#sec-error-objects</span> Error Objects</h1>\n    <p>Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.</p>\n    <p>Stack trace information exposed to the running program through implementation-defined accessors such as the de facto <code>Error.prototype.stack</code> must not indicate the presence of functions whose [[PresentInStackTraces]] slot has a value of <emu-val>false</emu-val>. Additionally, stack frames from these accessors which refer to functions whose [[HasSourceTextAvailable]] slot has a value of <emu-val>false</emu-val> must not include any incidental attribution or position information related to the function. Examples of incidental attribution information are filenames, module specifiers, and URIs. Examples of incidental position information are line numbers and column numbers.</p>\n\n    <div id=\"excluded-sec-error-constructor\"><h1><span class=\"secnum\">19.5.1</span>#sec-error-constructor The Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-constructor\"><h1><span class=\"secnum\">19.5.2</span>#sec-properties-of-the-error-constructor Properties of the Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-prototype-object\"><h1><span class=\"secnum\">19.5.3</span>#sec-properties-of-the-error-prototype-object Properties of the Error Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-error-instances\"><h1><span class=\"secnum\">19.5.4</span>#sec-properties-of-error-instances Properties of Error Instances</h1>...</div><div id=\"excluded-sec-native-error-types-used-in-this-standard\"><h1><span class=\"secnum\">19.5.5</span>#sec-native-error-types-used-in-this-standard Native Error Types Used in This Standard</h1>...</div><div id=\"excluded-sec-nativeerror-object-structure\"><h1><span class=\"secnum\">19.5.6</span>#sec-nativeerror-object-structure NativeError Object Structure</h1>...</div></emu-clause>\n"}, "sec-time-values-and-time-range": {"num": "20.4.1.1", "title": "#sec-time-values-and-time-range Time Values and Time Range", "html": "<emu-clause id=\"sec-time-values-and-time-range\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</span> Time Values and Time Range</h1>\n        <p>Time measurement in ECMAScript is analogous to time measurement in POSIX, in particular sharing definition in terms of the proleptic Gregorian calendar, an epoch of midnight at the beginning of 01 January, 1970 UTC, and an accounting of every day as comprising exactly 86,400 seconds (each of which is 1000 milliseconds long).</p>\n        <p>An ECMAScript  <dfn>time value</dfn> is a Number, either a finite <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing an instant in time to millisecond precision or <emu-val>NaN</emu-val> representing no specific instant. A time value that is a multiple of  <emu-eqn class=\"inline\">24 &#215; 60 &#215; 60 &#215; 1000 = 86,400,000</emu-eqn> (i.e., is equal to 86,400,000 &#215; <var>d</var> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>d</var>) represents the instant at the start of the UTC day that follows the epoch by <var>d</var> whole UTC days (preceding the epoch for negative <var>d</var>). Every other finite time value <var>t</var> is defined relative to the greatest preceding time value <var>s</var> that is such a multiple, and represents the instant that <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">occurs within</a></emu-xref> the same UTC day as <var>s</var> but follows it by <var>t</var> &#8722; <var>s</var> milliseconds.</p>\n        <p>Time values do not account for UTC leap seconds&#8212;there are no time values representing instants within positive leap seconds, and there are time values representing instants removed from the UTC timeline by negative leap seconds. However, the definition of time values nonetheless yields piecewise alignment with UTC, with discontinuities only at leap second boundaries and zero difference outside of leap seconds.</p>\n        <p>A Number can exactly represent all integers from -9,007,199,254,740,992 to 9,007,199,254,740,992 (<emu-xref href=\"#sec-number.min_safe_integer\"><a href=\"#sec-number.min_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.min_safe_integer\">#sec-number.min_safe_integer</a></emu-xref> and  <emu-xref href=\"#sec-number.max_safe_integer\"><a href=\"#sec-number.max_safe_integer\" class=\"excluded-xref\" excluded-id=\"sec-number.max_safe_integer\">#sec-number.max_safe_integer</a></emu-xref>). A time value supports a slightly smaller range of -8,640,000,000,000,000 to 8,640,000,000,000,000 milliseconds. This yields a supported time value range of exactly -100,000,000 days to 100,000,000 days relative to midnight at the beginning of 01 January, 1970 UTC.</p>\n        <p>The exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the time value <emu-val>+0</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The 400 year cycle of the proleptic Gregorian calendar contains 97 leap years. This yields an average of 365.2425 days per year, which is 31,556,952,000 milliseconds. Therefore, the maximum range a Number could represent exactly with millisecond precision is approximately -285,426 to 285,426 years relative to 1970. The smaller range supported by a time value as specified in this section is approximately -273,790 to 273,790 years relative to 1970.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {"table-2": "Table 3", "table-27": "Table 27"}}}