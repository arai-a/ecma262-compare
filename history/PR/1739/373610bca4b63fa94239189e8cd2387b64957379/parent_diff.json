{"from": {"secList": ["sec-error-objects", "sec-ordinaryfunctioncreate", "sec-directive-prologues-and-the-use-strict-directive", "sec-static-semantics", "sec-arrow-function-definitions", "sec-syntactic-grammar", "sec-function.prototype.tostring", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-function-definitions", "sec-ecmascript-function-objects"], "secData": {"sec-error-objects": {"num": "19.5", "title": "#sec-error-objects Error Objects", "html": "<emu-clause id=\"sec-error-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-objects\">#sec-error-objects</span> Error Objects</h1>\n    <p>Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.</p>\n\n    <div id=\"excluded-sec-error-constructor\"><h1><span class=\"secnum\">19.5.1</span>#sec-error-constructor The Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-constructor\"><h1><span class=\"secnum\">19.5.2</span>#sec-properties-of-the-error-constructor Properties of the Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-prototype-object\"><h1><span class=\"secnum\">19.5.3</span>#sec-properties-of-the-error-prototype-object Properties of the Error Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-error-instances\"><h1><span class=\"secnum\">19.5.4</span>#sec-properties-of-error-instances Properties of Error Instances</h1>...</div><div id=\"excluded-sec-native-error-types-used-in-this-standard\"><h1><span class=\"secnum\">19.5.5</span>#sec-native-error-types-used-in-this-standard Native Error Types Used in This Standard</h1>...</div><div id=\"excluded-sec-nativeerror-object-structure\"><h1><span class=\"secnum\">19.5.6</span>#sec-nativeerror-object-structure NativeError Object Structure</h1>...</div></emu-clause>\n"}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues and the Use Strict Directive</h1>\n      <p>A <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain more than one <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s which are not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which occur in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics": {"num": "12.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">12.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">12.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-contains\"><h1><span class=\"secnum\">12.3.1.3</span>#sec-static-semantics-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">12.3.1.4</span>#sec-static-semantics-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isdestructuring\"><h1><span class=\"secnum\">12.3.1.5</span>#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">12.3.1.6</span>#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-assignmenttargettype\"><h1><span class=\"secnum\">12.3.1.7</span>#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType</h1>...</div></emu-clause>\n\n    "}, "sec-arrow-function-definitions": {"num": "14.2", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7a8157ec\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.2.2</span>#sec-arrow-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.2.3</span>#sec-arrow-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.2.4</span>#sec-arrow-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.2.5</span>#sec-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.2.6</span>#sec-arrow-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.2.7</span>#sec-arrow-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.2.8</span>#sec-arrow-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">14.2.9</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.2.10</span>#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.2.11</span>#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.2.12</span>#sec-arrow-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.2.13</span>#sec-arrow-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.2.14</span>#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.2.15</span>#sec-arrow-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.2.16</span>#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.17</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The <em>syntactic grammar</em> for ECMAScript is given in clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a <em>parse tree</em>, a rooted tree structure in which each node is a <dfn>Parse Node</dfn>. Each Parse Node is an <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;HostHasSourceTextAvailable(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.7", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-function-definitions": {"num": "14.1", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\" id=\"prod-UniqueFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameters\" params=\"Yield, Await\" id=\"prod-FormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameterList\" params=\"Yield, Await\" id=\"prod-FormalParameterList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\" id=\"prod-FunctionRestParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameter\" params=\"Yield, Await\" id=\"prod-FormalParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">14.1.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.1.2</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.1.3</span>#sec-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.1.4</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.1.5</span>#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.1.6</span>#sec-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.1.7</span>#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.1.8</span>#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.1.9</span>#sec-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.1.10</span>#sec-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasinitializer\"><h1><span class=\"secnum\">14.1.11</span>#sec-function-definitions-static-semantics-hasinitializer Static Semantics: HasInitializer</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.1.12</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">14.1.13</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.1.14</span>#sec-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.1.15</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.1.16</span>#sec-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.1.17</span>#sec-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.1.18</span>#sec-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.1.19</span>#sec-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.1.20</span>#sec-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.1.21</span>#sec-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.1.22</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.1.23</span>#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.1.24</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.25</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-2": "Table 3", "table-27": "Table 27"}}, "to": {"secList": ["sec-error-objects", "sec-ordinaryfunctioncreate", "sec-directive-prologues-and-the-use-strict-directive", "sec-static-semantics", "sec-arrow-function-definitions", "sec-syntactic-grammar", "sec-function.prototype.tostring", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-function-definitions", "sec-ecmascript-function-objects"], "secData": {"sec-error-objects": {"num": "19.5", "title": "#sec-error-objects Error Objects", "html": "<emu-clause id=\"sec-error-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-objects\">#sec-error-objects</span> Error Objects</h1>\n    <p>Instances of Error objects are thrown as exceptions when runtime errors occur. The Error objects may also serve as base objects for user-defined exception classes.</p>\n    <p>Stack trace information exposed to the running program through implementation-defined accessors such as the de facto <code>Error.prototype.stack</code> must not indicate the presence of functions whose [[PresentInStackTraces]] slot has a value of <emu-val>false</emu-val>. Additionally, stack frames from these accessors which refer to functions whose [[HasSourceTextAvailable]] slot has a value of <emu-val>false</emu-val> must not include any incidental attribution or position information related to the function. Examples of incidental attribution information are filenames, module specifiers, and URIs. Examples of incidental position information are line numbers and column numbers.</p>\n\n    <div id=\"excluded-sec-error-constructor\"><h1><span class=\"secnum\">19.5.1</span>#sec-error-constructor The Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-constructor\"><h1><span class=\"secnum\">19.5.2</span>#sec-properties-of-the-error-constructor Properties of the Error Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-error-prototype-object\"><h1><span class=\"secnum\">19.5.3</span>#sec-properties-of-the-error-prototype-object Properties of the Error Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-error-instances\"><h1><span class=\"secnum\">19.5.4</span>#sec-properties-of-error-instances Properties of Error Instances</h1>...</div><div id=\"excluded-sec-native-error-types-used-in-this-standard\"><h1><span class=\"secnum\">19.5.5</span>#sec-native-error-types-used-in-this-standard Native Error Types Used in This Standard</h1>...</div><div id=\"excluded-sec-nativeerror-object-structure\"><h1><span class=\"secnum\">19.5.6</span>#sec-nativeerror-object-structure NativeError Object Structure</h1>...</div></emu-clause>\n"}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[PresentInStackTraces]] to PresentInStackTraces of <var>Body</var>.</li><li>Set <var>F</var>.[[HasSourceTextAvailable]] to HasSourceTextAvailable of <var>Body</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>F</var>.[[PresentInStackTraces]] is <emu-val>false</emu-val>, <var>F</var>.[[HasSourceTextAvailable]] is <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues</h1>\n      <p>A <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <dfn id=\"sensitive-directive\">Sensitive Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"sensitive\"</code> or <code>'sensitive'</code>. A <emu-xref href=\"#sensitive-directive\"><a href=\"#sensitive-directive\">Sensitive Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <dfn id=\"hidden-implementation-directive\">Hidden Implementation Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"hide source\"</code> or <code>'hide source'</code>. A <emu-xref href=\"#hidden-implementation-directive\"><a href=\"#hidden-implementation-directive\">Hidden Implementation Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <dfn id=\"built-in-directive\">Built-in Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> that is either a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>, a <emu-xref href=\"#sensitive-directive\"><a href=\"#sensitive-directive\">Sensitive Directive</a></emu-xref>, or a <emu-xref href=\"#hidden-implementation-directive\"><a href=\"#hidden-implementation-directive\">Hidden Implementation Directive</a></emu-xref>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain duplicate Built-in Directives. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation-specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> which are not a <emu-xref href=\"#built-in-directive\"><a href=\"#built-in-directive\">Built-in Directive</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#built-in-directive\"><a href=\"#built-in-directive\">Built-in Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-static-semantics": {"num": "12.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">12.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">12.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-contains\"><h1><span class=\"secnum\">12.3.1.3</span>#sec-static-semantics-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">12.3.1.4</span>#sec-static-semantics-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isdestructuring\"><h1><span class=\"secnum\">12.3.1.5</span>#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">12.3.1.6</span>#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-assignmenttargettype\"><h1><span class=\"secnum\">12.3.1.7</span>#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType</h1>...</div><div id=\"excluded-sec-callexpression-static-semantics-presentinstacktraces\"><h1><span class=\"secnum\">12.3.1.8</span>#sec-callexpression-static-semantics-presentinstacktraces Static Semantics: PresentInStackTraces</h1>...</div><div id=\"excluded-sec-callexpression-static-semantics-hassourcetextavailable\"><h1><span class=\"secnum\">12.3.1.9</span>#sec-callexpression-static-semantics-hassourcetextavailable Static Semantics: HasSourceTextAvailable</h1>...</div></emu-clause>\n\n    "}, "sec-arrow-function-definitions": {"num": "14.2", "title": "#sec-arrow-function-definitions Arrow Function Definitions", "html": "<emu-clause id=\"sec-arrow-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions\">#sec-arrow-function-definitions</span> Arrow Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowParameters\" params=\"Yield, Await\" id=\"prod-ArrowParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"parencover\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ConciseBody\" params=\"In\" id=\"prod-ConciseBody\">\n    <emu-nt params=\"In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7a8157ec\"><emu-gann>[lookahead &#8800; <emu-t>{</emu-t>]</emu-gann><emu-nt params=\"?In, ~Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[?In, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6f7b95b3\"><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ExpressionBody\" params=\"In, Await\" id=\"prod-ExpressionBody\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-ExpressionBody\">ExpressionBody</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"21c2a074\"><emu-nt params=\"?In, ~Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n    <h2>Supplemental Syntax</h2>\n    <p>When processing an instance of the production\n      <br>\n      <emu-grammar><emu-production name=\"ArrowParameters\" params=\"Yield, Await\" collapsed=\"\" class=\" inline\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"29cadaef\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <br>\n      the interpretation of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>\n    <emu-grammar type=\"definition\"><emu-production name=\"ArrowFormalParameters\" params=\"Yield, Await\" id=\"prod-ArrowFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b7561ab3\"><emu-t>(</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-arrow-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-arrow-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.2.2</span>#sec-arrow-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.2.3</span>#sec-arrow-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.2.4</span>#sec-arrow-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.2.5</span>#sec-arrow-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-presentinstacktraces\"><h1><span class=\"secnum\">14.2.6</span>#sec-arrow-function-definitions-static-semantics-presentinstacktraces Static Semantics: PresentInStackTraces</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hassourcetextavailable\"><h1><span class=\"secnum\">14.2.7</span>#sec-arrow-function-definitions-static-semantics-hassourcetextavailable Static Semantics: HasSourceTextAvailable</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.2.8</span>#sec-arrow-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.2.9</span>#sec-arrow-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.2.10</span>#sec-arrow-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-static-semantics-coveredformalslist\"><h1><span class=\"secnum\">14.2.11</span>#sec-static-semantics-coveredformalslist Static Semantics: CoveredFormalsList</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.2.12</span>#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.2.13</span>#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.2.14</span>#sec-arrow-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.2.15</span>#sec-arrow-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.2.16</span>#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.2.17</span>#sec-arrow-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.2.18</span>#sec-arrow-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-arrow-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.19</span>#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-syntactic-grammar": {"num": "5.1.4", "title": "#sec-syntactic-grammar The Syntactic Grammar", "html": "<emu-clause id=\"sec-syntactic-grammar\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntactic-grammar\">#sec-syntactic-grammar</span> The Syntactic Grammar</h1>\n      <p>The <em>syntactic grammar</em> for ECMAScript is given in clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens defined by the lexical grammar as its terminal symbols (<emu-xref href=\"#sec-lexical-and-regexp-grammars\"><a href=\"#sec-lexical-and-regexp-grammars\" class=\"excluded-xref\" excluded-id=\"sec-lexical-and-regexp-grammars\">#sec-lexical-and-regexp-grammars</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>\n      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, it is first converted to a stream of input elements by repeated application of the lexical grammar; this stream of input elements is then parsed by a single application of the syntactic grammar. The input stream is syntactically in error if the tokens in the stream of input elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>), with no tokens left over.</p>\n      <p>When a parse is successful, it constructs a <em>parse tree</em>, a rooted tree structure in which each node is a <dfn>Parse Node</dfn>. Each Parse Node is an <em>instance</em> of a symbol in the grammar; it represents a span of the source text that can be derived from that symbol. The root node of the parse tree, representing the whole of the source text, is an instance of the parse's <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. When a Parse Node is an instance of a nonterminal, it is also an instance of some production that has that nonterminal as its left-hand side. Moreover, it has zero or more <em>children</em>, one for each symbol on the production's right-hand side: each child is a Parse Node that is an instance of the corresponding symbol. A Parse Node <var>A</var> occurs within another Parse Node <var>B</var> if <var>A</var> is the child of <var>B</var> or if <var>A</var> is the child of some Parse Node <var>C</var> where <var>C</var> occurs within <var>B</var>.</p>\n      <p>New Parse Nodes are instantiated for each invocation of the parser and never reused between parses even of identical source text. Parse Nodes are considered <dfn>the same Parse Node</dfn> if and only if they represent the same span of source text, are instances of the same grammar symbol, and resulted from the same parser invocation.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Parsing the same String multiple times will lead to different Parse Nodes. For example, consider:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">\"1 + 1;\"</span>;\n<span class=\"hljs-built_in\">eval</span>(str);\n<span class=\"hljs-built_in\">eval</span>(str);</code></pre>\n        <p>Each call to <code>eval</code> converts the value of <code>str</code> into an ECMAScript source text and performs an independent parse that creates its own separate tree of Parse Nodes. The trees are distinct even though each parse operates upon a source text that was derived from the same String value.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Parse Nodes are specification artefacts, and implementations are not required to use an analogous data structure.</div></emu-note>\n      <p>Productions of the syntactic grammar are distinguished by having just one colon &#8220;<b>:</b>&#8221; as punctuation.</p>\n      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a complete account of which token sequences are accepted as a correct ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Certain additional token sequences are also accepted, namely, those that would be described by the grammar if only semicolons were added to the sequence in certain places (such as before line terminator characters). Furthermore, certain token sequences that are described by the grammar are not considered acceptable if a line terminator character appears in certain &#8220;awkward&#8221; places.</p>\n      <p>In certain cases, in order to avoid ambiguities, the syntactic grammar uses generalized productions that permit token sequences that do not form a valid ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive <em>supplemental grammar</em> is provided that further restricts the acceptable token sequences. Typically, an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule will then define an error condition if \"<var>P</var> is not <dfn>covering</dfn> an <var>N</var>\", where <var>P</var> is a Parse Node (an instance of the generalized production) and <var>N</var> is a nonterminal from the supplemental grammar. Here, the sequence of tokens originally matched by <var>P</var> is parsed again using <var>N</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. (If <var>N</var> takes grammatical parameters, then they are set to the same values used when <var>P</var> was originally parsed.) An error occurs if the sequence of tokens cannot be parsed as a single instance of <var>N</var>, with no tokens left over. Subsequently, algorithms access the result of the parse using a phrase of the form \"the <var>N</var> that is <dfn>covered</dfn> by <var>P</var>\". This will always be a Parse Node (an instance of <var>N</var>, unique for a given <var>P</var>), since any parsing failure would have been detected by an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rule.</p>\n    </emu-clause>\n\n    "}, "sec-function.prototype.tostring": {"num": "19.2.3.5", "title": "#sec-function.prototype.tostring Function.prototype.toString ( )", "html": "<emu-clause id=\"sec-function.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</span> Function.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>func</var> be the <emu-val>this</emu-val> value.</li><li>If <var>func</var> is a <emu-xref href=\"#sec-bound-function-exotic-objects\"><a href=\"#sec-bound-function-exotic-objects\">bound function exotic object</a></emu-xref> or a <emu-xref href=\"#sec-built-in-function-objects\"><a href=\"#sec-built-in-function-objects\">built-in function object</a></emu-xref> or has a [[HasSourceTextAvailable]] slot with the value <emu-val>false</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>. Additionally, if <var>func</var> is a <emu-xref href=\"#sec-well-known-intrinsic-objects\"><a href=\"#sec-well-known-intrinsic-objects\">Well-known Intrinsic Object</a></emu-xref> and is not identified as an anonymous function, the portion of the returned String that would be matched by <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt> must be the initial value of the <emu-val>\"name\"</emu-val> property of <var>func</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <var>func</var> has a [[SourceText]] internal slot and <var>func</var>.[[SourceText]] is a sequence of Unicode code points and !&#160;HostHasSourceTextAvailable(<var>func</var>) is <emu-val>true</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"UTF16Encode\"><a href=\"#sec-utf16encode\">UTF16Encode</a></emu-xref>(<var>func</var>.[[SourceText]]).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>true</emu-val>, then return an implementation-dependent String source code representation of <var>func</var>. The representation must have the syntax of a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n        <emu-grammar type=\"definition\"><emu-production name=\"NativeFunction\" id=\"prod-NativeFunction\">\n    <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1fcbc9e6\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-t>[</emu-t><emu-t>native</emu-t><emu-t>code</emu-t><emu-t>]</emu-t><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      </emu-clause>\n\n      "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.7", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-definitions": {"num": "14.1", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7c02f6b3\"><emu-t>function</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1faafdcc\"><emu-t>function</emu-t><emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"UniqueFormalParameters\" params=\"Yield, Await\" id=\"prod-UniqueFormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"900b794a\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameters\" params=\"Yield, Await\" id=\"prod-FormalParameters\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n    <emu-rhs a=\"c52f7805\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5fdd15f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"58349494\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"607f4086\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameterList\" params=\"Yield, Await\" id=\"prod-FormalParameterList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"dd0854fb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"30b35c7e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameterList\">FormalParameterList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionRestParameter\" params=\"Yield, Await\" id=\"prod-FunctionRestParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionRestParameter\">FunctionRestParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"216da14c\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingRestElement\">BindingRestElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FormalParameter\" params=\"Yield, Await\" id=\"prod-FormalParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c6930e11\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingElement\">BindingElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-directive-prologues-and-the-use-strict-directive\"><h1><span class=\"secnum\">14.1.1</span>#sec-directive-prologues-and-the-use-strict-directive Directive Prologues</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.1.2</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.1.3</span>#sec-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.1.4</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.1.5</span>#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsexpression\"><h1><span class=\"secnum\">14.1.6</span>#sec-function-definitions-static-semantics-containsexpression Static Semantics: ContainsExpression</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.1.7</span>#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.1.8</span>#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsusestrict\"><h1><span class=\"secnum\">14.1.9</span>#sec-function-definitions-static-semantics-containsusestrict Static Semantics: ContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-presentinstacktraces\"><h1><span class=\"secnum\">14.1.10</span>#sec-function-definitions-static-semantics-presentinstacktraces Static Semantics: PresentInStackTraces</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hassourcetextavailable\"><h1><span class=\"secnum\">14.1.11</span>#sec-function-definitions-static-semantics-hassourcetextavailable Static Semantics: HasSourceTextAvailable</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.1.12</span>#sec-function-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasinitializer\"><h1><span class=\"secnum\">14.1.13</span>#sec-function-definitions-static-semantics-hasinitializer Static Semantics: HasInitializer</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.1.14</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">14.1.15</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.1.16</span>#sec-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.1.17</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-issimpleparameterlist\"><h1><span class=\"secnum\">14.1.18</span>#sec-function-definitions-static-semantics-issimpleparameterlist Static Semantics: IsSimpleParameterList</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">14.1.19</span>#sec-function-definitions-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">14.1.20</span>#sec-function-definitions-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">14.1.21</span>#sec-function-definitions-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">14.1.22</span>#sec-function-definitions-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.1.23</span>#sec-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">14.1.24</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.1.25</span>#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.1.26</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.27</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>In addition to [[Extensible]] and [[Prototype]], ECMAScript function objects also have the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          </th>\n          <th>\n            Type\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          </td>\n          <td>\n            The script or module in which the function was created.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> or <emu-val>null</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and any other <emu-val>this</emu-val> value is first passed to <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[PresentInStackTraces]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            When <emu-val>false</emu-val>, this function must not have a corresponding entry in stack traces.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HasSourceTextAvailable]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            When <emu-val>false</emu-val>, this function will be rendered as a <emu-nt><a href=\"#prod-NativeFunction\">NativeFunction</a></emu-nt> by <code>Function.prototype.toString</code> (<emu-xref href=\"#sec-function.prototype.tostring\"><a href=\"#sec-function.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.tostring\">#sec-function.prototype.tostring</a></emu-xref>) and corresponding stack trace entries will have no incidental attribution or position information, as defined in <emu-xref href=\"#sec-error-objects\"><a href=\"#sec-error-objects\" class=\"excluded-xref\" excluded-id=\"sec-error-objects\">#sec-error-objects</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          </td>\n          <td>\n            Object\n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          </td>\n          <td>\n            sequence of Unicode code points\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          </td>\n          <td>\n            Boolean\n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}}, "figData": {"table-2": "Table 3", "table-27": "Table 27"}}}