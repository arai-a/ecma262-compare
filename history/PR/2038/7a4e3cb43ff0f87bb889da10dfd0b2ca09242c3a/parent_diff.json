{"from": {"secList": ["sec-weakset-objects", "sec-weakmap.prototype.set", "sec-weakmap.prototype.get", "sec-weakmap.prototype.delete", "sec-weakset.prototype.delete", "sec-weakset.prototype.has", "sec-weakmap.prototype.has", "sec-weakmap-objects", "sec-weakset.prototype.add"], "secData": {"sec-weakset-objects": {"num": "23.4", "title": "#sec-weakset-objects WeakSet Objects", "html": "<emu-clause id=\"sec-weakset-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset-objects\">#sec-weakset-objects</span> WeakSet Objects</h1>\n    <p>WeakSet objects are collections of objects. A distinct object may only occur once as an element of a WeakSet's collection. A WeakSet may be queried to see if it contains a specific object, but no mechanism is provided for enumerating the objects it holds. If an object that is contained by a WeakSet is only reachable by following a chain of references that start within that WeakSet, then that object is inaccessible and is automatically removed from the WeakSet. WeakSet implementations must detect and remove such objects and any associated resources.</p>\n    <p>An implementation may impose an arbitrarily determined latency between the time an object contained in a WeakSet becomes inaccessible and the time when the object is removed from the WeakSet. If this latency was observable to ECMAScript program, it would be a source of indeterminacy that could impact program execution. For that reason, an ECMAScript implementation must not provide any means to determine if a WeakSet contains a particular object that does not require the observer to present the observed object.</p>\n    <p>WeakSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structure used in this WeakSet objects specification is only intended to describe the required observable semantics of WeakSet objects. It is not intended to be a viable implementation model.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>See the NOTE in <emu-xref href=\"#sec-weakmap-objects\"><a href=\"#sec-weakmap-objects\" class=\"excluded-xref\" excluded-id=\"sec-weakmap-objects\">#sec-weakmap-objects</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-weakset-constructor\"><h1><span class=\"secnum\">23.4.1</span>#sec-weakset-constructor The WeakSet Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakset-constructor\"><h1><span class=\"secnum\">23.4.2</span>#sec-properties-of-the-weakset-constructor Properties of the WeakSet Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakset-prototype-object\"><h1><span class=\"secnum\">23.4.3</span>#sec-properties-of-the-weakset-prototype-object Properties of the WeakSet Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-weakset-instances\"><h1><span class=\"secnum\">23.4.4</span>#sec-properties-of-weakset-instances Properties of WeakSet Instances</h1>...</div></emu-clause>\n"}, "sec-weakmap.prototype.set": {"num": "23.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "23.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "23.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "23.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "23.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "23.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap-objects": {"num": "23.3", "title": "#sec-weakmap-objects WeakMap Objects", "html": "<emu-clause id=\"sec-weakmap-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap-objects\">#sec-weakmap-objects</span> WeakMap Objects</h1>\n    <p>WeakMap objects are collections of key/value pairs where the keys are objects and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects it holds as keys. If an object that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n    <p>An implementation may impose an arbitrarily determined latency between the time a key/value pair of a WeakMap becomes inaccessible and the time when the key/value pair is removed from the WeakMap. If this latency was observable to ECMAScript program, it would be a source of indeterminacy that could impact program execution. For that reason, an ECMAScript implementation must not provide any means to observe a key of a WeakMap that does not require the observer to present the observed key.</p>\n    <p>WeakMap objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of key/value pairs in the collection. The data structure used in this WeakMap objects specification are only intended to describe the required observable semantics of WeakMap objects. It is not intended to be a viable implementation model.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>WeakMap and WeakSets are intended to provide mechanisms for dynamically associating state with an object in a manner that does not &#8220;leak&#8221; memory resources if, in the absence of the WeakMap or WeakSet, the object otherwise became inaccessible and subject to resource reclamation by the implementation's garbage collection mechanisms. This characteristic can be achieved by using an inverted per-object mapping of weak map instances to keys. Alternatively each weak map may internally store its key to value mappings but this approach requires coordination between the WeakMap or WeakSet implementation and the garbage collector. The following references describe mechanism that may be useful to implementations of WeakMap and WeakSets:</p>\n      <p>Barry Hayes. 1997. Ephemerons: a new finalization mechanism. In <i>Proceedings of the 12th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (OOPSLA '97)</i>, A. Michael Berman (Ed.). ACM, New York, NY, USA, 176-183, <a href=\"http://doi.acm.org/10.1145/263698.263733\">http://doi.acm.org/10.1145/263698.263733</a>.</p>\n      <p>Alexandra Barros, Roberto Ierusalimschy, Eliminating Cycles in Weak Tables. Journal of Universal Computer Science - J.UCS, vol. 14, no. 21, pp. 3481-3497, 2008, <a href=\"http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak\">http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak</a></p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-weakmap-constructor\"><h1><span class=\"secnum\">23.3.1</span>#sec-weakmap-constructor The WeakMap Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakmap-constructor\"><h1><span class=\"secnum\">23.3.2</span>#sec-properties-of-the-weakmap-constructor Properties of the WeakMap Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakmap-prototype-object\"><h1><span class=\"secnum\">23.3.3</span>#sec-properties-of-the-weakmap-prototype-object Properties of the WeakMap Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-weakmap-instances\"><h1><span class=\"secnum\">23.3.4</span>#sec-properties-of-weakmap-instances Properties of WeakMap Instances</h1>...</div></emu-clause>\n\n  "}, "sec-weakset.prototype.add": {"num": "23.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-weakset-objects", "sec-weakmap.prototype.set", "sec-weakmap.prototype.get", "sec-weakmap.prototype.delete", "sec-weakset.prototype.delete", "sec-weakset.prototype.has", "sec-weakmap.prototype.has", "sec-weakmap-objects", "sec-weakset.prototype.add"], "secData": {"sec-weakset-objects": {"num": "23.4", "title": "#sec-weakset-objects WeakSet Objects", "html": "<emu-clause id=\"sec-weakset-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset-objects\">#sec-weakset-objects</span> WeakSet Objects</h1>\n    <p>WeakSet objects are collections of objects and/or symbols. A distinct object or symbol may only occur once as an element of a WeakSet's collection. A WeakSet may be queried to see if it contains a specific object or symbol, but no mechanism is provided for enumerating the objects and symbols it holds. If an object or symbol that is contained by a WeakSet is only reachable by following a chain of references that start within that WeakSet, then that value is inaccessible and is automatically removed from the WeakSet. WeakSet implementations must detect and remove such values and any associated resources.</p>\n    <p>An implementation may impose an arbitrarily determined latency between the time a value contained in a WeakSet becomes inaccessible and the time when the value is removed from the WeakSet. If this latency was observable to ECMAScript program, it would be a source of indeterminacy that could impact program execution. For that reason, an ECMAScript implementation must not provide any means to determine if a WeakSet contains a particular value that does not require the observer to present the observed value.</p>\n    <p>WeakSet objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of elements in the collection. The data structure used in this WeakSet objects specification is only intended to describe the required observable semantics of WeakSet objects. It is not intended to be a viable implementation model.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>See the NOTE in <emu-xref href=\"#sec-weakmap-objects\"><a href=\"#sec-weakmap-objects\" class=\"excluded-xref\" excluded-id=\"sec-weakmap-objects\">#sec-weakmap-objects</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-weakset-constructor\"><h1><span class=\"secnum\">23.4.1</span>#sec-weakset-constructor The WeakSet Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakset-constructor\"><h1><span class=\"secnum\">23.4.2</span>#sec-properties-of-the-weakset-constructor Properties of the WeakSet Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakset-prototype-object\"><h1><span class=\"secnum\">23.4.3</span>#sec-properties-of-the-weakset-prototype-object Properties of the WeakSet Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-weakset-instances\"><h1><span class=\"secnum\">23.4.4</span>#sec-properties-of-weakset-instances Properties of WeakSet Instances</h1>...</div></emu-clause>\n"}, "sec-weakmap.prototype.set": {"num": "23.3.3.5", "title": "#sec-weakmap.prototype.set WeakMap.prototype.set ( key, value )", "html": "<emu-clause id=\"sec-weakmap.prototype.set\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.set\">#sec-weakmap.prototype.set</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object or Symbol, throw a <emu-val>TypeError</emu-val> exception.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Value]] to <var>value</var>.</li><li>Return <var>M</var>.</li></ol></li></ol></li><li>Let <var>p</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>key</var>, [[Value]]: <var>value</var> }.</li><li>Append <var>p</var> as the last element of <var>entries</var>.</li><li>Return <var>M</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.get": {"num": "23.3.3.3", "title": "#sec-weakmap.prototype.get WeakMap.prototype.get ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.get\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.get\">#sec-weakmap.prototype.get</span> WeakMap.prototype.get ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object or Symbol, return <emu-val>undefined</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <var>p</var>.[[Value]].</li></ol></li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.delete": {"num": "23.3.3.2", "title": "#sec-weakmap.prototype.delete WeakMap.prototype.delete ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.delete\">#sec-weakmap.prototype.delete</span> WeakMap.prototype.delete ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object or Symbol, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>p</var>.[[Key]] to <emu-const>empty</emu-const>.</li><li>Set <var>p</var>.[[Value]] to <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.delete": {"num": "23.4.3.3", "title": "#sec-weakset.prototype.delete WeakSet.prototype.delete ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.delete\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.delete\">#sec-weakset.prototype.delete</span> WeakSet.prototype.delete ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object or Symbol, return <emu-val>false</emu-val>.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Replace the element of <var>entries</var> whose value is <var>e</var> with an element whose value is <emu-const>empty</emu-const>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The value <emu-const>empty</emu-const> is used as a specification device to indicate that an entry has been deleted. Actual implementations may take other actions such as physically removing the entry from internal data structures.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-weakset.prototype.has": {"num": "23.4.3.4", "title": "#sec-weakset.prototype.has WeakSet.prototype.has ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.has\">#sec-weakset.prototype.has</span> WeakSet.prototype.has ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object or Symbol, return <emu-val>false</emu-val>.</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap.prototype.has": {"num": "23.3.3.4", "title": "#sec-weakmap.prototype.has WeakMap.prototype.has ( key )", "html": "<emu-clause id=\"sec-weakmap.prototype.has\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype.has\">#sec-weakmap.prototype.has</span> WeakMap.prototype.has ( <var>key</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>M</var>, [[WeakMapData]]).</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>M</var>.[[WeakMapData]].</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is not Object or Symbol, return <emu-val>false</emu-val>.</li><li>For each <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } <var>p</var> that is an element of <var>entries</var>, do<ol><li>If <var>p</var>.[[Key]] is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>p</var>.[[Key]], <var>key</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-weakmap-objects": {"num": "23.3", "title": "#sec-weakmap-objects WeakMap Objects", "html": "<emu-clause id=\"sec-weakmap-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap-objects\">#sec-weakmap-objects</span> WeakMap Objects</h1>\n    <p>WeakMap objects are collections of key/value pairs where the keys are objects and/or symbols and values may be arbitrary ECMAScript language values. A WeakMap may be queried to see if it contains a key/value pair with a specific key, but no mechanism is provided for enumerating the objects and/or symbols it holds as keys. If an object or symbol that is being used as the key of a WeakMap key/value pair is only reachable by following a chain of references that start within that WeakMap, then that key/value pair is inaccessible and is automatically removed from the WeakMap. WeakMap implementations must detect and remove such key/value pairs and any associated resources.</p>\n    <p>An implementation may impose an arbitrarily determined latency between the time a key/value pair of a WeakMap becomes inaccessible and the time when the key/value pair is removed from the WeakMap. If this latency was observable to ECMAScript program, it would be a source of indeterminacy that could impact program execution. For that reason, an ECMAScript implementation must not provide any means to observe a key of a WeakMap that does not require the observer to present the observed key.</p>\n    <p>WeakMap objects must be implemented using either hash tables or other mechanisms that, on average, provide access times that are sublinear on the number of key/value pairs in the collection. The data structure used in this WeakMap objects specification are only intended to describe the required observable semantics of WeakMap objects. It is not intended to be a viable implementation model.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>WeakMap and WeakSets are intended to provide mechanisms for dynamically associating state with an object or symbol in a manner that does not &#8220;leak&#8221; memory resources if, in the absence of the WeakMap or WeakSet, the object or symbol otherwise became inaccessible and subject to resource reclamation by the implementation's garbage collection mechanisms. This characteristic can be achieved by using an inverted per-object/symbol mapping of weak map instances to keys. Alternatively, each WeakMap may internally store its key to value mappings, but this approach requires coordination between the WeakMap or WeakSet implementation and the garbage collector. The following references describe mechanism that may be useful to implementations of WeakMap and WeakSet:</p>\n      <p>Barry Hayes. 1997. Ephemerons: a new finalization mechanism. In <i>Proceedings of the 12th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (OOPSLA '97)</i>, A. Michael Berman (Ed.). ACM, New York, NY, USA, 176-183, <a href=\"http://doi.acm.org/10.1145/263698.263733\">http://doi.acm.org/10.1145/263698.263733</a>.</p>\n      <p>Alexandra Barros, Roberto Ierusalimschy, Eliminating Cycles in Weak Tables. Journal of Universal Computer Science - J.UCS, vol. 14, no. 21, pp. 3481-3497, 2008, <a href=\"http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak\">http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak</a></p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-weakmap-constructor\"><h1><span class=\"secnum\">23.3.1</span>#sec-weakmap-constructor The WeakMap Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakmap-constructor\"><h1><span class=\"secnum\">23.3.2</span>#sec-properties-of-the-weakmap-constructor Properties of the WeakMap Constructor</h1>...</div><div id=\"excluded-sec-properties-of-the-weakmap-prototype-object\"><h1><span class=\"secnum\">23.3.3</span>#sec-properties-of-the-weakmap-prototype-object Properties of the WeakMap Prototype Object</h1>...</div><div id=\"excluded-sec-properties-of-weakmap-instances\"><h1><span class=\"secnum\">23.3.4</span>#sec-properties-of-weakmap-instances Properties of WeakMap Instances</h1>...</div></emu-clause>\n\n  "}, "sec-weakset.prototype.add": {"num": "23.4.3.1", "title": "#sec-weakset.prototype.add WeakSet.prototype.add ( value )", "html": "<emu-clause id=\"sec-weakset.prototype.add\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype.add\">#sec-weakset.prototype.add</span> WeakSet.prototype.add ( <var>value</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>S</var>, [[WeakSetData]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is not Object or Symbol, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>S</var>.[[WeakSetData]].</li><li>For each <var>e</var> that is an element of <var>entries</var>, do<ol><li>If <var>e</var> is not <emu-const>empty</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>e</var>, <var>value</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>S</var>.</li></ol></li></ol></li><li>Append <var>value</var> as the last element of <var>entries</var>.</li><li>Return <var>S</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}