{"from": {"secList": ["sec-iteration-statements-semantics", "sec-initializers-in-forin-statement-heads", "sec-runtime-semantics-labelledevaluation", "sec-loopcontinues"], "secData": {"sec-iteration-statements-semantics": {"num": "13.7.1", "title": "#sec-iteration-statements-semantics Semantics", "html": "<emu-clause id=\"sec-iteration-statements-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteration-statements-semantics\">#sec-iteration-statements-semantics</span> Semantics</h1>\n\n      <div id=\"excluded-sec-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.1.1</span>#sec-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-loopcontinues\"><h1><span class=\"secnum\">13.7.1.2</span>#sec-loopcontinues LoopContinues ( completion, labelSet )</h1>...</div></emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-labelledevaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-labelledevaluation\">#sec-runtime-semantics-labelledevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-runtime-semantics-labelledevaluation": {"num": "13.13.15", "title": "#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-labelledevaluation\" oldids=\"sec-statement-semantics-runtime-semantics-labelledevaluation,sec-do-while-statement-runtime-semantics-labelledevaluation,sec-while-statement-runtime-semantics-labelledevaluation,sec-for-statement-runtime-semantics-labelledevaluation,sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation,sec-labelled-statements-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"LabelledEvaluation\"><span id=\"sec-labelled-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-for-statement-runtime-semantics-labelledevaluation\"></span><span id=\"sec-while-statement-runtime-semantics-labelledevaluation\"></span><span id=\"sec-do-while-statement-runtime-semantics-labelledevaluation\"></span><span id=\"sec-statement-semantics-runtime-semantics-labelledevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-labelledevaluation\">#sec-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"28c5e5e3\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ee88ef9\"><emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>A <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> is one that can be exited via an unlabelled <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat,<ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>stmtResult</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>stmtResult</var>, <var>V</var>)).</li><li>If <var>stmtResult</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>stmtResult</var>.[[Value]].</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat,<ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>stmtResult</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>stmtResult</var>, <var>V</var>)).</li><li>If <var>stmtResult</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>stmtResult</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>isConst</var> be IsConstantDeclaration of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the BoundNames of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Append <var>label</var> as an element of <var>labelSet</var>.</li><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>stmtResult</var>.[[Target]], <var>label</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is either a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></li><li>Else,<ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-loopcontinues": {"num": "13.7.1.2", "title": "#sec-loopcontinues LoopContinues ( completion, labelSet )", "html": "<emu-clause id=\"sec-loopcontinues\" aoid=\"LoopContinues\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-loopcontinues\">#sec-loopcontinues</span> LoopContinues ( <var>completion</var>, <var>labelSet</var> )</h1>\n        <p>The abstract operation LoopContinues takes arguments <var>completion</var> and <var>labelSet</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var>.[[Type]] is <emu-const>normal</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Type]] is not <emu-const>continue</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>completion</var>.[[Target]] is <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Target]] is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Within the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> a <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> may be used to begin a new iteration.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-iteration-statements-semantics", "sec-initializers-in-forin-statement-heads", "sec-runtime-semantics-labelledevaluation", "sec-loopcontinues", "sec-runtime-semantics-loopevaluation"], "secData": {"sec-iteration-statements-semantics": {"num": "13.7.1", "title": "#sec-iteration-statements-semantics Semantics", "html": "<emu-clause id=\"sec-iteration-statements-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-iteration-statements-semantics\">#sec-iteration-statements-semantics</span> Semantics</h1>\n\n      <div id=\"excluded-sec-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.1.1</span>#sec-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-loopcontinues\"><h1><span class=\"secnum\">13.7.1.2</span>#sec-loopcontinues LoopContinues ( completion, labelSet )</h1>...</div><div id=\"excluded-sec-runtime-semantics-loopevaluation\"><h1><span class=\"secnum\">13.7.1.3</span>#sec-runtime-semantics-loopevaluation Runtime Semantics: LoopEvaluation</h1>...</div></emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarDeclaredNames in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\">#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of VarScopedDeclarations in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\">#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-runtime-semantics-labelledevaluation": {"num": "13.13.15", "title": "#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-labelledevaluation\" oldids=\"sec-statement-semantics-runtime-semantics-labelledevaluation,sec-labelled-statements-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"LabelledEvaluation\"><span id=\"sec-labelled-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-statement-semantics-runtime-semantics-labelledevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-labelledevaluation\">#sec-runtime-semantics-labelledevaluation</span> Runtime Semantics: LabelledEvaluation</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"28c5e5e3\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9ee88ef9\"><emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>A <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> is one that can be exited via an unlabelled <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Append <var>label</var> as an element of <var>labelSet</var>.</li><li>Let <var>stmtResult</var> be <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const> and <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>stmtResult</var>.[[Target]], <var>label</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>stmtResult</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>stmtResult</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a72ca256\"><emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> is either a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> or a <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt>, then<ol><li>Return <emu-xref aoid=\"LabelledEvaluation\"><a href=\"#sec-runtime-semantics-labelledevaluation\">LabelledEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></li><li>Else,<ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li></ol></li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-loopcontinues": {"num": "13.7.1.2", "title": "#sec-loopcontinues LoopContinues ( completion, labelSet )", "html": "<emu-clause id=\"sec-loopcontinues\" aoid=\"LoopContinues\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-loopcontinues\">#sec-loopcontinues</span> LoopContinues ( <var>completion</var>, <var>labelSet</var> )</h1>\n        <p>The abstract operation LoopContinues takes arguments <var>completion</var> and <var>labelSet</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>completion</var>.[[Type]] is <emu-const>normal</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Type]] is not <emu-const>continue</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>completion</var>.[[Target]] is <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Target]] is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Within the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> a <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> may be used to begin a new iteration.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-loopevaluation": {"num": "13.7.1.3", "title": "#sec-runtime-semantics-loopevaluation Runtime Semantics: LoopEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-loopevaluation\" oldids=\"sec-do-while-statement-runtime-semantics-labelledevaluation,sec-while-statement-runtime-semantics-labelledevaluation,sec-for-statement-runtime-semantics-labelledevaluation,sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\" type=\"sdo\" aoid=\"LoopEvaluation\"><span id=\"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"></span><span id=\"sec-for-statement-runtime-semantics-labelledevaluation\"></span><span id=\"sec-while-statement-runtime-semantics-labelledevaluation\"></span><span id=\"sec-do-while-statement-runtime-semantics-labelledevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</span> Runtime Semantics: LoopEvaluation</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat,<ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>stmtResult</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>stmtResult</var>, <var>V</var>)).</li><li>If <var>stmtResult</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>stmtResult</var>.[[Value]].</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat,<ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>stmtResult</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>stmtResult</var>, <var>V</var>)).</li><li>If <var>stmtResult</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>stmtResult</var>.[[Value]].</li></ol></li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li><li>Perform ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the third <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, &#171; &#187;, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>isConst</var> be IsConstantDeclaration of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the BoundNames of <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var>, do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnv</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnv</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be &#171; &#187;.</li><li>Let <var>bodyResult</var> be <emu-xref aoid=\"ForBodyEvaluation\"><a href=\"#sec-forbodyevaluation\">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, the second <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>bodyResult</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>assignment</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>, <emu-const>async-iterate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>iterate</emu-const>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>, <emu-const>async</emu-const>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}}