{"from": {"secList": ["sec-%asyncfromsynciteratorprototype%.return", "sec-%asyncfromsynciteratorprototype%.throw", "sec-%asyncfromsynciteratorprototype%.next", "sec-%asyncfromsynciteratorprototype%-object"], "secData": {"sec-%asyncfromsynciteratorprototype%.return": {"num": "25.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"return\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "25.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "25.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( <var>value</var> )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "25.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">25.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">25.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">25.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )</h1>...</div><div id=\"excluded-sec-async-from-sync-iterator-value-unwrap-functions\"><h1><span class=\"secnum\">25.1.4.2.4</span>#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-%asyncfromsynciteratorprototype%.return", "sec-%asyncfromsynciteratorprototype%.throw", "sec-%asyncfromsynciteratorprototype%.next", "sec-%asyncfromsynciteratorprototype%-object"], "secData": {"sec-%asyncfromsynciteratorprototype%.return": {"num": "25.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"return\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "25.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( [ <var>value</var> ] )</h1>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In this specification, <var>value</var> is always provided, but is left optional for consistency with <emu-xref title=\"\" href=\"#sec-%asyncfromsynciteratorprototype%.return\"><a href=\"#sec-%asyncfromsynciteratorprototype%.return\">%AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</a></emu-xref>.</div></emu-note>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "25.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( [ <var>value</var> ] )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "25.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">25.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">25.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">25.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )</h1>...</div><div id=\"excluded-sec-async-from-sync-iterator-value-unwrap-functions\"><h1><span class=\"secnum\">25.1.4.2.4</span>#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}}