{"from": {"secList": ["sec-mathematical-operations", "sec-normative-references", "sec-bibliography", "sec-notation", "sec-overview", "sec-getwaiterlist"], "secData": {"sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values--a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as +0 for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-normative-references": {"num": "3", "title": "#sec-normative-references Normative References", "html": "<emu-clause id=\"sec-normative-references\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-normative-references\">#sec-normative-references</span> Normative References</h1>\n  <p>The following referenced documents are indispensable for the application of this document. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies.</p>\n  <p>ISO/IEC 10646  <i>Information Technology &#8211; Universal Multiple-Octet Coded Character Set (UCS) plus Amendment 1:2005, Amendment 2:2006, Amendment 3:2008, and Amendment 4:2008</i>, plus additional amendments and corrigenda, or successor</p>\n  <p>ECMA-402,  <i>ECMAScript 2015 Internationalization API Specification</i>.\n    \n    <br>\n    <a href=\"https://ecma-international.org/publications/standards/Ecma-402.htm\">https://ecma-international.org/publications/standards/Ecma-402.htm</a></p>\n  <p>ECMA-404,  <i>The JSON Data Interchange Format</i>.\n    \n    <br>\n    <a href=\"https://ecma-international.org/publications/standards/Ecma-404.htm\">https://ecma-international.org/publications/standards/Ecma-404.htm</a></p>\n</emu-clause>\n\n"}, "sec-bibliography": {"num": "G", "title": "#sec-bibliography Bibliography", "html": "<emu-annex id=\"sec-bibliography\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bibliography\">#sec-bibliography</span> Bibliography</h1>\n  <ol>\n    <li>\n      IEEE Std 754-2008:  <i>IEEE Standard for Floating-Point Arithmetic</i>. Institute of Electrical and Electronic Engineers, New York (2008)\n    \n    </li>\n    <li>\n      <i>The Unicode Standard</i>, available at &lt;<a href=\"https://unicode.org/versions/latest\">https://unicode.org/versions/latest</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Note #5: Canonical Equivalence in Applications</i>, available at &lt;<a href=\"https://unicode.org/notes/tn5/\">https://unicode.org/notes/tn5/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #10: Unicode Collation Algorithm</i>, available at &lt;<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #15, Unicode Normalization Forms</i>, available at &lt;<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #18: Unicode Regular Expressions</i>, available at &lt;<a href=\"https://unicode.org/reports/tr18/\">https://unicode.org/reports/tr18/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #24: Unicode <code>Script</code> Property</i>, available at &lt;<a href=\"https://unicode.org/reports/tr24/\">https://unicode.org/reports/tr24/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #31, Unicode Identifiers and Pattern Syntax</i>, available at &lt;<a href=\"https://unicode.org/reports/tr31/\">https://unicode.org/reports/tr31/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #44: Unicode Character Database</i>, available at &lt;<a href=\"https://unicode.org/reports/tr44/\">https://unicode.org/reports/tr44/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #51: Unicode Emoji</i>, available at &lt;<a href=\"https://unicode.org/reports/tr51/\">https://unicode.org/reports/tr51/</a>&gt;\n    \n    </li>\n    <li>\n      <i>IANA Time Zone Database</i>, available at &lt;<a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a>&gt;\n    \n    </li>\n    <li>\n      ISO 8601:2004(E)  <i>Data elements and interchange formats &#8211; Information interchange</i> &#8212;  <i>Representation of dates and times</i>\n    </li>\n    <li>\n      <i>RFC 1738 &#8220;Uniform Resource Locators (URL)&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc1738\">https://tools.ietf.org/html/rfc1738</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 2396 &#8220;Uniform Resource Identifiers (URI): Generic Syntax&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc2396\">https://tools.ietf.org/html/rfc2396</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 3629 &#8220;UTF-8, a transformation format of ISO 10646&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc3629\">https://tools.ietf.org/html/rfc3629</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 7231 &#8220;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>&gt;\n    \n    </li>\n  </ol>\n</emu-annex>"}, "sec-notation": {"num": "21.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following variables:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the characters, in order, of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          \n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          \n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> production.\n          \n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"s\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"i\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"m\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"u\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A  <em>CharSet</em> is a mathematical set of characters, either code units or code points depending up the state of the <var>Unicode</var> flag. &#8220;All characters&#8221; means either all code unit values or all code point values also depending upon the state of <var>Unicode</var>.\n          \n          </li>\n          <li>\n            A  <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          \n          </li>\n          <li>\n            A  <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          \n          </li>\n          <li>\n            A  <em>Continuation</em> procedure is an internal closure (i.e. an internal procedure with some arguments already bound to values) that takes one State argument and returns a MatchResult result. If an internal closure references variables which are bound in the function that creates the closure, the closure uses the values that these variables had at the time the closure was created. The Continuation attempts to match the remaining portion (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          \n          </li>\n          <li>\n            A  <em>Matcher</em> procedure is an internal closure that takes two arguments &#8212; a State and a Continuation &#8212; and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          \n          </li>\n          <li>\n            An  <em>AssertionTester</em> procedure is an internal closure that takes a State argument and returns a Boolean result. The assertion tester tests a specific condition (specified by the closure's already-bound arguments) against the current place in <var>Input</var> and returns <emu-val>true</emu-val> if the condition matched or <emu-val>false</emu-val> if not.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-overview": {"num": "4", "title": "#sec-overview Overview", "html": "<emu-clause id=\"sec-overview\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview\">#sec-overview</span> Overview</h1>\n  <p>This section contains a non-normative overview of the ECMAScript language.</p>\n  <p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment. ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results. Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.</p>\n  <p>ECMAScript was originally designed to be used as a scripting language, but has become widely used as a general-purpose programming language. A  <em>scripting language</em> is a programming language that is used to manipulate, customize, and automate the facilities of an existing system. In such systems, useful functionality is already available through a user interface, and the scripting language is a mechanism for exposing that functionality to program control. In this way, the existing system is said to provide a host environment of objects and facilities, which completes the capabilities of the scripting language. A scripting language is intended for use by both professional and non-professional programmers.</p>\n  <p>ECMAScript was originally designed to be a  <em>Web scripting language</em>, providing a mechanism to enliven Web pages in browsers and to perform server computation as part of a Web-based client-server architecture. ECMAScript is now used to provide core scripting capabilities for a variety of host environments. Therefore the core language is specified in this document apart from any particular host environment.</p>\n  <p>ECMAScript usage has moved beyond simple scripting and it is now used for the full spectrum of programming tasks in many different environments and scales. As the usage of ECMAScript has expanded, so have the features and facilities it provides. ECMAScript is now a fully featured general-purpose programming language.</p>\n  <p>Some of the facilities of ECMAScript are similar to those used in other programming languages; in particular C, Java&#8482;, Self, and Scheme as described in:</p>\n  <p>ISO/IEC 9899:1996,  <i>Programming Languages &#8211; C</i>.</p>\n  <p>Gosling, James, Bill Joy and Guy Steele.  <i>The Java<sup>&#8482;</sup> Language Specification</i>. Addison Wesley Publishing Co., 1996.</p>\n  <p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity.  <i>OOPSLA '87 Conference Proceedings</i>, pp. 227-241, Orlando, FL, October 1987.</p>\n  <p><i>IEEE Standard for the Scheme Programming Language</i>. IEEE Std 1178-1990.</p>\n\n  <div id=\"excluded-sec-web-scripting\"><h1><span class=\"secnum\">4.1</span>#sec-web-scripting Web Scripting</h1>...</div><div id=\"excluded-sec-ecmascript-overview\"><h1><span class=\"secnum\">4.2</span>#sec-ecmascript-overview ECMAScript Overview</h1>...</div><div id=\"excluded-sec-terms-and-definitions\"><h1><span class=\"secnum\">4.3</span>#sec-terms-and-definitions Terms and Definitions</h1>...</div><div id=\"excluded-sec-organization-of-this-specification\"><h1><span class=\"secnum\">4.4</span>#sec-organization-of-this-specification Organization of This Specification</h1>...</div></emu-clause>\n\n"}, "sec-getwaiterlist": {"num": "24.4.1.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>A  <dfn>WaiterList</dfn> is a semantic object that contains an ordered list of those agents that are waiting on a location (<var>block</var>, <var>i</var>) in shared memory; <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and <var>i</var> a byte offset into the memory of <var>block</var>.</p>\n        <p>The <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> has a store of WaiterList objects; the store is indexed by (<var>block</var>, <var>i</var>). WaiterLists are <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>-independent: a lookup in the store of WaiterLists by (<var>block</var>, <var>i</var>) will result in the same WaiterList object in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</p>\n        <p>Operations on a WaiterList -- adding and removing waiting agents, traversing the list of agents, suspending and notifying agents on the list -- may only be performed by agents that have entered the WaiterList's critical section.</p>\n        <p>The abstract operation GetWaiterList takes two arguments, a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> <var>block</var> and a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> is divisible by 4.</li><li>Return the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-mathematical-operations", "sec-normative-references", "sec-bibliography", "sec-notation", "sec-overview", "sec-getwaiterlist"], "secData": {"sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-normative-references": {"num": "3", "title": "#sec-normative-references Normative References", "html": "<emu-clause id=\"sec-normative-references\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-normative-references\">#sec-normative-references</span> Normative References</h1>\n  <p>The following referenced documents are indispensable for the application of this document. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies.</p>\n  <p>ISO/IEC 10646  <i>Information Technology &#8212; Universal Multiple-Octet Coded Character Set (UCS) plus Amendment 1:2005, Amendment 2:2006, Amendment 3:2008, and Amendment 4:2008</i>, plus additional amendments and corrigenda, or successor</p>\n  <p>ECMA-402,  <i>ECMAScript 2015 Internationalization API Specification</i>.\n    \n    <br>\n    <a href=\"https://ecma-international.org/publications/standards/Ecma-402.htm\">https://ecma-international.org/publications/standards/Ecma-402.htm</a></p>\n  <p>ECMA-404,  <i>The JSON Data Interchange Format</i>.\n    \n    <br>\n    <a href=\"https://ecma-international.org/publications/standards/Ecma-404.htm\">https://ecma-international.org/publications/standards/Ecma-404.htm</a></p>\n</emu-clause>\n\n"}, "sec-bibliography": {"num": "G", "title": "#sec-bibliography Bibliography", "html": "<emu-annex id=\"sec-bibliography\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bibliography\">#sec-bibliography</span> Bibliography</h1>\n  <ol>\n    <li>\n      IEEE Std 754-2008:  <i>IEEE Standard for Floating-Point Arithmetic</i>. Institute of Electrical and Electronic Engineers, New York (2008)\n    \n    </li>\n    <li>\n      <i>The Unicode Standard</i>, available at &lt;<a href=\"https://unicode.org/versions/latest\">https://unicode.org/versions/latest</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Note #5: Canonical Equivalence in Applications</i>, available at &lt;<a href=\"https://unicode.org/notes/tn5/\">https://unicode.org/notes/tn5/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #10: Unicode Collation Algorithm</i>, available at &lt;<a href=\"https://unicode.org/reports/tr10/\">https://unicode.org/reports/tr10/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #15, Unicode Normalization Forms</i>, available at &lt;<a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #18: Unicode Regular Expressions</i>, available at &lt;<a href=\"https://unicode.org/reports/tr18/\">https://unicode.org/reports/tr18/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #24: Unicode <code>Script</code> Property</i>, available at &lt;<a href=\"https://unicode.org/reports/tr24/\">https://unicode.org/reports/tr24/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #31, Unicode Identifiers and Pattern Syntax</i>, available at &lt;<a href=\"https://unicode.org/reports/tr31/\">https://unicode.org/reports/tr31/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Standard Annex #44: Unicode Character Database</i>, available at &lt;<a href=\"https://unicode.org/reports/tr44/\">https://unicode.org/reports/tr44/</a>&gt;\n    \n    </li>\n    <li>\n      <i>Unicode Technical Standard #51: Unicode Emoji</i>, available at &lt;<a href=\"https://unicode.org/reports/tr51/\">https://unicode.org/reports/tr51/</a>&gt;\n    \n    </li>\n    <li>\n      <i>IANA Time Zone Database</i>, available at &lt;<a href=\"https://www.iana.org/time-zones\">https://www.iana.org/time-zones</a>&gt;\n    \n    </li>\n    <li>\n      ISO 8601:2004(E)  <i>Data elements and interchange formats &#8212; Information interchange &#8212; Representation of dates and times</i>\n    </li>\n    <li>\n      <i>RFC 1738 &#8220;Uniform Resource Locators (URL)&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc1738\">https://tools.ietf.org/html/rfc1738</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 2396 &#8220;Uniform Resource Identifiers (URI): Generic Syntax&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc2396\">https://tools.ietf.org/html/rfc2396</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 3629 &#8220;UTF-8, a transformation format of ISO 10646&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc3629\">https://tools.ietf.org/html/rfc3629</a>&gt;\n    \n    </li>\n    <li>\n      <i>RFC 7231 &#8220;Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content&#8221;</i>, available at &lt;<a href=\"https://tools.ietf.org/html/rfc7231\">https://tools.ietf.org/html/rfc7231</a>&gt;\n    \n    </li>\n  </ol>\n</emu-annex>"}, "sec-notation": {"num": "21.2.2.1", "title": "#sec-notation Notation", "html": "<emu-clause id=\"sec-notation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-notation\">#sec-notation</span> Notation</h1>\n        <p>The descriptions below use the following variables:</p>\n        <ul>\n          <li>\n            <var>Input</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of all of the characters, in order, of the String being matched by the regular expression pattern. Each character is either a code unit or a code point, depending upon the kind of pattern involved. The notation <var>Input</var>[<var>n</var>] means the <var>n</var><sup>th</sup> character of <var>Input</var>, where <var>n</var> can range between 0 (inclusive) and <var>InputLength</var> (exclusive).\n          \n          </li>\n          <li>\n            <var>InputLength</var> is the number of characters in <var>Input</var>.\n          \n          </li>\n          <li>\n            <var>NcapturingParens</var> is the total number of left-capturing parentheses (i.e. the total number of  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> Parse Nodes) in the pattern. A left-capturing parenthesis is any <code>(</code> pattern character that is matched by the <code>(</code> terminal of the  <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"59aa089b\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt><emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar> production.\n          \n          </li>\n          <li>\n            <var>DotAll</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"s\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>IgnoreCase</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"i\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Multiline</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"m\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n          <li>\n            <var>Unicode</var> is <emu-val>true</emu-val> if the RegExp object's [[OriginalFlags]] internal slot contains <code>\"u\"</code> and otherwise is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n        <p>Furthermore, the descriptions below use the following internal data structures:</p>\n        <ul>\n          <li>\n            A  <em>CharSet</em> is a mathematical set of characters, either code units or code points depending up the state of the <var>Unicode</var> flag. &#8220;All characters&#8221; means either all code unit values or all code point values also depending upon the state of <var>Unicode</var>.\n          \n          </li>\n          <li>\n            A  <em>State</em> is an ordered pair (<var>endIndex</var>, <var>captures</var>) where <var>endIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> and <var>captures</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>NcapturingParens</var> values. States are used to represent partial match states in the regular expression matching algorithms. The <var>endIndex</var> is one plus the index of the last input character matched so far by the pattern, while <var>captures</var> holds the results of capturing parentheses. The <var>n</var><sup>th</sup> element of <var>captures</var> is either a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that represents the value obtained by the <var>n</var><sup>th</sup> set of capturing parentheses or <emu-val>undefined</emu-val> if the <var>n</var><sup>th</sup> set of capturing parentheses hasn't been reached yet. Due to backtracking, many States may be in use at any time during the matching process.\n          \n          </li>\n          <li>\n            A  <em>MatchResult</em> is either a State or the special token <emu-const>failure</emu-const> that indicates that the match failed.\n          \n          </li>\n          <li>\n            A  <em>Continuation</em> procedure is an internal closure (i.e. an internal procedure with some arguments already bound to values) that takes one State argument and returns a MatchResult result. If an internal closure references variables which are bound in the function that creates the closure, the closure uses the values that these variables had at the time the closure was created. The Continuation attempts to match the remaining portion (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. If the match succeeds, the Continuation returns the final State that it reached; if the match fails, the Continuation returns <emu-const>failure</emu-const>.\n          \n          </li>\n          <li>\n            A  <em>Matcher</em> procedure is an internal closure that takes two arguments&#8212;a State and a Continuation&#8212;and returns a MatchResult result. A Matcher attempts to match a middle subpattern (specified by the closure's already-bound arguments) of the pattern against <var>Input</var>, starting at the intermediate state given by its State argument. The Continuation argument should be a closure that matches the rest of the pattern. After matching the subpattern of a pattern to obtain a new State, the Matcher then calls Continuation on that new State to test if the rest of the pattern can match as well. If it can, the Matcher returns the State returned by Continuation; if not, the Matcher may try different choices at its choice points, repeatedly calling Continuation until it either succeeds or all possibilities have been exhausted.\n          \n          </li>\n          <li>\n            An  <em>AssertionTester</em> procedure is an internal closure that takes a State argument and returns a Boolean result. The assertion tester tests a specific condition (specified by the closure's already-bound arguments) against the current place in <var>Input</var> and returns <emu-val>true</emu-val> if the condition matched or <emu-val>false</emu-val> if not.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-overview": {"num": "4", "title": "#sec-overview Overview", "html": "<emu-clause id=\"sec-overview\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-overview\">#sec-overview</span> Overview</h1>\n  <p>This section contains a non-normative overview of the ECMAScript language.</p>\n  <p>ECMAScript is an object-oriented programming language for performing computations and manipulating computational objects within a host environment. ECMAScript as defined here is not intended to be computationally self-sufficient; indeed, there are no provisions in this specification for input of external data or output of computed results. Instead, it is expected that the computational environment of an ECMAScript program will provide not only the objects and other facilities described in this specification but also certain environment-specific objects, whose description and behaviour are beyond the scope of this specification except to indicate that they may provide certain properties that can be accessed and certain functions that can be called from an ECMAScript program.</p>\n  <p>ECMAScript was originally designed to be used as a scripting language, but has become widely used as a general-purpose programming language. A  <em>scripting language</em> is a programming language that is used to manipulate, customize, and automate the facilities of an existing system. In such systems, useful functionality is already available through a user interface, and the scripting language is a mechanism for exposing that functionality to program control. In this way, the existing system is said to provide a host environment of objects and facilities, which completes the capabilities of the scripting language. A scripting language is intended for use by both professional and non-professional programmers.</p>\n  <p>ECMAScript was originally designed to be a  <em>Web scripting language</em>, providing a mechanism to enliven Web pages in browsers and to perform server computation as part of a Web-based client-server architecture. ECMAScript is now used to provide core scripting capabilities for a variety of host environments. Therefore the core language is specified in this document apart from any particular host environment.</p>\n  <p>ECMAScript usage has moved beyond simple scripting and it is now used for the full spectrum of programming tasks in many different environments and scales. As the usage of ECMAScript has expanded, so have the features and facilities it provides. ECMAScript is now a fully featured general-purpose programming language.</p>\n  <p>Some of the facilities of ECMAScript are similar to those used in other programming languages; in particular C, Java&#8482;, Self, and Scheme as described in:</p>\n  <p>ISO/IEC 9899:1996,  <i>Programming Languages &#8212; C</i>.</p>\n  <p>Gosling, James, Bill Joy and Guy Steele.  <i>The Java<sup>&#8482;</sup> Language Specification</i>. Addison Wesley Publishing Co., 1996.</p>\n  <p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity.  <i>OOPSLA '87 Conference Proceedings</i>, pp. 227-241, Orlando, FL, October 1987.</p>\n  <p><i>IEEE Standard for the Scheme Programming Language</i>. IEEE Std 1178-1990.</p>\n\n  <div id=\"excluded-sec-web-scripting\"><h1><span class=\"secnum\">4.1</span>#sec-web-scripting Web Scripting</h1>...</div><div id=\"excluded-sec-ecmascript-overview\"><h1><span class=\"secnum\">4.2</span>#sec-ecmascript-overview ECMAScript Overview</h1>...</div><div id=\"excluded-sec-terms-and-definitions\"><h1><span class=\"secnum\">4.3</span>#sec-terms-and-definitions Terms and Definitions</h1>...</div><div id=\"excluded-sec-organization-of-this-specification\"><h1><span class=\"secnum\">4.4</span>#sec-organization-of-this-specification Organization of This Specification</h1>...</div></emu-clause>\n\n"}, "sec-getwaiterlist": {"num": "24.4.1.3", "title": "#sec-getwaiterlist GetWaiterList ( block, i )", "html": "<emu-clause id=\"sec-getwaiterlist\" aoid=\"GetWaiterList\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getwaiterlist\">#sec-getwaiterlist</span> GetWaiterList ( <var>block</var>, <var>i</var> )</h1>\n        <p>A  <dfn>WaiterList</dfn> is a semantic object that contains an ordered list of those agents that are waiting on a location (<var>block</var>, <var>i</var>) in shared memory; <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and <var>i</var> a byte offset into the memory of <var>block</var>.</p>\n        <p>The <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> has a store of WaiterList objects; the store is indexed by (<var>block</var>, <var>i</var>). WaiterLists are <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>-independent: a lookup in the store of WaiterLists by (<var>block</var>, <var>i</var>) will result in the same WaiterList object in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</p>\n        <p>Operations on a WaiterList&#8212;adding and removing waiting agents, traversing the list of agents, suspending and notifying agents on the list&#8212;may only be performed by agents that have entered the WaiterList's critical section.</p>\n        <p>The abstract operation GetWaiterList takes two arguments, a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> <var>block</var> and a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>i</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>block</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> and <var>i</var> + 3 are valid byte offsets within the memory of <var>block</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>i</var> is divisible by 4.</li><li>Return the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> that is referenced by the pair (<var>block</var>, <var>i</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}