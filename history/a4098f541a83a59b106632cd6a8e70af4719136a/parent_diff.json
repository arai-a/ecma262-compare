{"from": {"secList": ["sec-races", "sec-valid-chosen-reads", "sec-data-races", "sec-coherent-reads", "sec-tear-free-aligned-reads"], "secData": {"sec-races": {"num": "29.8", "title": "#sec-races Races", "html": "<emu-clause id=\"sec-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-races\">#sec-races</span> Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a race if the following abstract operation returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> is not <var>D</var>, then<ol><li>If the pairs (<var>E</var>, <var>D</var>) and (<var>D</var>, <var>E</var>) are not in <var>execution</var>.[[HappensBefore]], then<ol><li>If <var>E</var> and <var>D</var> are both <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events and <var>E</var> and <var>D</var> do not have disjoint ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If either (<var>E</var>, <var>D</var>) or (<var>D</var>, <var>E</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-valid-chosen-reads": {"num": "29.7.1", "title": "#sec-valid-chosen-reads Valid Chosen Reads", "html": "<emu-clause id=\"sec-valid-chosen-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-chosen-reads\">#sec-valid-chosen-reads</span> Valid Chosen Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has valid chosen reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>chosenValueRecord</var> be the element of <var>execution</var>.[[ChosenValues]] whose [[Event]] field is <var>R</var>.</li><li>Let <var>chosenValue</var> be <var>chosenValueRecord</var>.[[ChosenValue]].</li><li>Let <var>readValue</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>R</var>).</li><li>Let <var>chosenLen</var> be the number of elements of <var>chosenValue</var>.</li><li>Let <var>readLen</var> be the number of elements of <var>readValue</var>.</li><li>If <var>chosenLen</var> &#8800; <var>readLen</var>, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If <var>chosenValue</var>[<var>i</var>] &#8800; <var>readValue</var>[<var>i</var>] for any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value <var>i</var> in the range 0 through <var>chosenLen</var>, exclusive, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-data-races": {"num": "29.9", "title": "#sec-data-races Data Races", "html": "<emu-clause id=\"sec-data-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-races\">#sec-data-races</span> Data Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a data race if the following abstract operation returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> and <var>D</var> are in a race in <var>execution</var>, then<ol><li>If <var>E</var>.[[Order]] is not <emu-const>SeqCst</emu-const> or <var>D</var>.[[Order]] is not <emu-const>SeqCst</emu-const>, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <var>E</var> and <var>D</var> have overlapping ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-coherent-reads": {"num": "29.7.2", "title": "#sec-coherent-reads Coherent Reads", "html": "<emu-clause id=\"sec-coherent-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-coherent-reads\">#sec-coherent-reads</span> Coherent Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has coherent reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li>Let <var>byteLocation</var> be <var>R</var>.[[ByteIndex]].</li><li>For each element <var>W</var> of <var>Ws</var>, do<ol><li>If (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If there is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> that has <var>byteLocation</var> in its range such that the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tear-free-aligned-reads": {"num": "29.7.3", "title": "#sec-tear-free-aligned-reads Tear Free Reads", "html": "<emu-clause id=\"sec-tear-free-aligned-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tear-free-aligned-reads\">#sec-tear-free-aligned-reads</span> Tear Free Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has tear free reads if the following abstract operation returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>R</var>.[[NoTear]] is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The remainder of dividing <var>R</var>.[[ByteIndex]] by <var>R</var>.[[ElementSize]] is 0.</li><li>For each event <var>W</var> such that (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[ReadsFrom]] and <var>W</var>.[[NoTear]] is <emu-val>true</emu-val>, do<ol><li>If <var>R</var> and <var>W</var> have equal ranges, and there is an event <var>V</var> such that <var>V</var> and <var>W</var> have equal ranges, <var>V</var>.[[NoTear]] is <emu-val>true</emu-val>, <var>W</var> is not <var>V</var>, and (<var>R</var>, <var>V</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An event's [[NoTear]] field is <emu-val>true</emu-val> when that event was introduced via accessing an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, and <emu-val>false</emu-val> when introduced via accessing a floating point TypedArray or DataView.</p>\n        <p>Intuitively, this requirement says when a memory range is accessed in an aligned fashion via an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, a single write event on that range must \"win\" when in a data race with other write events with equal ranges. More precisely, this requirement says an aligned read event cannot read a value composed of bytes from multiple, different write events all with equal ranges. It is possible, however, for an aligned read event to read from multiple write events with overlapping ranges.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-races", "sec-valid-chosen-reads", "sec-data-races", "sec-coherent-reads", "sec-tear-free-aligned-reads"], "secData": {"sec-races": {"num": "29.8", "title": "#sec-races Races", "html": "<emu-clause id=\"sec-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-races\">#sec-races</span> Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a race if the following algorithm returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> is not <var>D</var>, then<ol><li>If the pairs (<var>E</var>, <var>D</var>) and (<var>D</var>, <var>E</var>) are not in <var>execution</var>.[[HappensBefore]], then<ol><li>If <var>E</var> and <var>D</var> are both <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events and <var>E</var> and <var>D</var> do not have disjoint ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If either (<var>E</var>, <var>D</var>) or (<var>D</var>, <var>E</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-valid-chosen-reads": {"num": "29.7.1", "title": "#sec-valid-chosen-reads Valid Chosen Reads", "html": "<emu-clause id=\"sec-valid-chosen-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-valid-chosen-reads\">#sec-valid-chosen-reads</span> Valid Chosen Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has valid chosen reads if the following algorithm returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>chosenValueRecord</var> be the element of <var>execution</var>.[[ChosenValues]] whose [[Event]] field is <var>R</var>.</li><li>Let <var>chosenValue</var> be <var>chosenValueRecord</var>.[[ChosenValue]].</li><li>Let <var>readValue</var> be <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref>(<var>execution</var>, <var>R</var>).</li><li>Let <var>chosenLen</var> be the number of elements of <var>chosenValue</var>.</li><li>Let <var>readLen</var> be the number of elements of <var>readValue</var>.</li><li>If <var>chosenLen</var> &#8800; <var>readLen</var>, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If <var>chosenValue</var>[<var>i</var>] &#8800; <var>readValue</var>[<var>i</var>] for any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value <var>i</var> in the range 0 through <var>chosenLen</var>, exclusive, then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-data-races": {"num": "29.9", "title": "#sec-data-races Data Races", "html": "<emu-clause id=\"sec-data-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-races\">#sec-data-races</span> Data Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a data race if the following algorithm returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> and <var>D</var> are in a race in <var>execution</var>, then<ol><li>If <var>E</var>.[[Order]] is not <emu-const>SeqCst</emu-const> or <var>D</var>.[[Order]] is not <emu-const>SeqCst</emu-const>, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <var>E</var> and <var>D</var> have overlapping ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-coherent-reads": {"num": "29.7.2", "title": "#sec-coherent-reads Coherent Reads", "html": "<emu-clause id=\"sec-coherent-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-coherent-reads\">#sec-coherent-reads</span> Coherent Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has coherent reads if the following algorithm returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>Let <var>Ws</var> be <var>execution</var>.[[ReadsBytesFrom]](<var>R</var>).</li><li>Let <var>byteLocation</var> be <var>R</var>.[[ByteIndex]].</li><li>For each element <var>W</var> of <var>Ws</var>, do<ol><li>If (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>If there is a <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> that has <var>byteLocation</var> in its range such that the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Set <var>byteLocation</var> to <var>byteLocation</var> + 1.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-tear-free-aligned-reads": {"num": "29.7.3", "title": "#sec-tear-free-aligned-reads Tear Free Reads", "html": "<emu-clause id=\"sec-tear-free-aligned-reads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tear-free-aligned-reads\">#sec-tear-free-aligned-reads</span> Tear Free Reads</h1>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var> has tear free reads if the following algorithm returns <emu-val>true</emu-val>.</p>\n      <emu-alg><ol><li>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>R</var> of <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), do<ol><li>If <var>R</var>.[[NoTear]] is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The remainder of dividing <var>R</var>.[[ByteIndex]] by <var>R</var>.[[ElementSize]] is 0.</li><li>For each event <var>W</var> such that (<var>R</var>, <var>W</var>) is in <var>execution</var>.[[ReadsFrom]] and <var>W</var>.[[NoTear]] is <emu-val>true</emu-val>, do<ol><li>If <var>R</var> and <var>W</var> have equal ranges, and there is an event <var>V</var> such that <var>V</var> and <var>W</var> have equal ranges, <var>V</var>.[[NoTear]] is <emu-val>true</emu-val>, <var>W</var> is not <var>V</var>, and (<var>R</var>, <var>V</var>) is in <var>execution</var>.[[ReadsFrom]], then<ol><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An event's [[NoTear]] field is <emu-val>true</emu-val> when that event was introduced via accessing an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, and <emu-val>false</emu-val> when introduced via accessing a floating point TypedArray or DataView.</p>\n        <p>Intuitively, this requirement says when a memory range is accessed in an aligned fashion via an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> TypedArray, a single write event on that range must \"win\" when in a data race with other write events with equal ranges. More precisely, this requirement says an aligned read event cannot read a value composed of bytes from multiple, different write events all with equal ranges. It is possible, however, for an aligned read event to read from multiple write events with overlapping ranges.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}}