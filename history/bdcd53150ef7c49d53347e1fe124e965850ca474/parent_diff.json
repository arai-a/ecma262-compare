{"from": {"secList": ["sec-runtime-semantics-arrayaccumulation", "sec-static-semantics-elisionwidth", "sec-array-initializer", "sec-array-initializer-runtime-semantics-evaluation"], "secData": {"sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.2", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>nextIndex</var> + <var>padding</var>)), <var>initValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>created</var> is <emu-val>true</emu-val>.</li><li>Return <var>nextIndex</var> + <var>padding</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + <var>padding</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>postIndex</var> be ? ArrayAccumulation of <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>postIndex</var> + <var>padding</var>)), <var>initValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>created</var> is <emu-val>true</emu-val>.</li><li>Return <var>postIndex</var> + <var>padding</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>postIndex</var> be ? ArrayAccumulation of <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>postIndex</var> + <var>padding</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>nextIndex</var>)), <var>nextValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>status</var> is <emu-val>true</emu-val>.</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-elisionwidth": {"num": "12.2.5.1", "title": "#sec-static-semantics-elisionwidth Static Semantics: ElisionWidth", "html": "<emu-clause id=\"sec-static-semantics-elisionwidth\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-elisionwidth\">#sec-static-semantics-elisionwidth</span> Static Semantics: ElisionWidth</h1>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the numeric value 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>preceding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>.</li><li>Return <var>preceding</var> + 1.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array-initializer": {"num": "12.2.5", "title": "#sec-array-initializer Array Initializer", "html": "<emu-clause id=\"sec-array-initializer\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-initializer\">#sec-array-initializer</span> Array Initializer</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> is an expression describing the initialization of an Array object, using a list, of zero or more expressions each of which represents an array element, enclosed in square brackets. The elements need not be literals; they are evaluated each time the array initializer is evaluated.</p>\n      </div></emu-note>\n      <p>Array elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the element list is not preceded by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> (i.e., a comma at the beginning or after another comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements. Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to the length of the Array.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ArrayLiteral\" params=\"Yield, Await\" id=\"prod-ArrayLiteral\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"5d65623a\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"14bb78d1\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ElementList\" params=\"Yield, Await\" id=\"prod-ElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"306f3a14\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"05939ab1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e9492888\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9cd00eda\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Elision\" id=\"prod-Elision\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"SpreadElement\" params=\"Yield, Await\" id=\"prod-SpreadElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-static-semantics-elisionwidth\"><h1><span class=\"secnum\">12.2.5.1</span>#sec-static-semantics-elisionwidth Static Semantics: ElisionWidth</h1>...</div><div id=\"excluded-sec-runtime-semantics-arrayaccumulation\"><h1><span class=\"secnum\">12.2.5.2</span>#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation</h1>...</div><div id=\"excluded-sec-array-initializer-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.2.5.3</span>#sec-array-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-array-initializer-runtime-semantics-evaluation": {"num": "12.2.5.3", "title": "#sec-array-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-array-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-initializer-runtime-semantics-evaluation\">#sec-array-initializer-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>pad</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Perform <emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>pad</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0aa8c9b8\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>len</var> be ? ArrayAccumulation of <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li>Perform <emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>len</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c8973de1\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>len</var> be ? ArrayAccumulation of <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt>; if <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Perform <emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>padding</var> + <var>len</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-arrayaccumulation", "sec-array-initializer", "sec-array-initializer-runtime-semantics-evaluation"], "secData": {"sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <var>len</var>, <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var>+1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-array-initializer": {"num": "12.2.5", "title": "#sec-array-initializer Array Initializer", "html": "<emu-clause id=\"sec-array-initializer\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-initializer\">#sec-array-initializer</span> Array Initializer</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> is an expression describing the initialization of an Array object, using a list, of zero or more expressions each of which represents an array element, enclosed in square brackets. The elements need not be literals; they are evaluated each time the array initializer is evaluated.</p>\n      </div></emu-note>\n      <p>Array elements may be elided at the beginning, middle or end of the element list. Whenever a comma in the element list is not preceded by an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> (i.e., a comma at the beginning or after another comma), the missing array element contributes to the length of the Array and increases the index of subsequent elements. Elided array elements are not defined. If an element is elided at the end of an array, that element does not contribute to the length of the Array.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ArrayLiteral\" params=\"Yield, Await\" id=\"prod-ArrayLiteral\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"5d65623a\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"14bb78d1\"><emu-t>[</emu-t><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ElementList\" params=\"Yield, Await\" id=\"prod-ElementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"306f3a14\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"05939ab1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e9492888\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9cd00eda\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ElementList\">ElementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Elision\" id=\"prod-Elision\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n    <emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"SpreadElement\" params=\"Yield, Await\" id=\"prod-SpreadElement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-SpreadElement\">SpreadElement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b623b4c8\"><emu-t>...</emu-t><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n      <div id=\"excluded-sec-runtime-semantics-arrayaccumulation\"><h1><span class=\"secnum\">12.2.5.1</span>#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation</h1>...</div><div id=\"excluded-sec-array-initializer-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.2.5.2</span>#sec-array-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-array-initializer-runtime-semantics-evaluation": {"num": "12.2.5.2", "title": "#sec-array-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-array-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array-initializer-runtime-semantics-evaluation\">#sec-array-initializer-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"906e476b\"><emu-t>[</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>len</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and 0.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>len</var>).</li></ol></li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0aa8c9b8\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>len</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>len</var>).</li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ArrayLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c8973de1\"><emu-t>[</emu-t><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>array</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>len</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>len</var>).</li></ol></li><li>Return <var>array</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}