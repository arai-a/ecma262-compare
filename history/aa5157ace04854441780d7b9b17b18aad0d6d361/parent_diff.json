{"from": {"secList": ["sec-tobigint", "sec-islooselyequal", "sec-stringtobigint", "sec-islessthan"], "secData": {"sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" type=\"abstract operation\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              </td>\n              <td>\n                Return <var>prim</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-islooselyequal": {"num": "7.2.14", "title": "#sec-islooselyequal IsLooselyEqual ( x, y )", "html": "<emu-clause id=\"sec-islooselyequal\" type=\"abstract operation\" oldids=\"sec-abstract-equality-comparison\" aoid=\"IsLooselyEqual\"><span id=\"sec-abstract-equality-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islooselyequal\">#sec-islooselyequal</span> IsLooselyEqual ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation IsLooselyEqual takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> == <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li id=\"step-abstract-equality-comparison-web-compat-insertion-point\">NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"><a href=\"#sec-IsHTMLDDA-internal-slot-aec\" class=\"excluded-xref\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, <var>n</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>y</var>, <var>x</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(? <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-stringtobigint": {"num": "7.1.14", "title": "#sec-stringtobigint StringToBigInt ( str )", "html": "<emu-clause id=\"sec-stringtobigint\" type=\"abstract operation\" aoid=\"StringToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringtobigint\">#sec-stringtobigint</span> StringToBigInt ( <var>str</var> )</h1>\n      <p>The abstract operation StringToBigInt takes argument <var>str</var> (a String). It returns a BigInt or <emu-val>NaN</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>text</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>).</li><li>Let <var>literal</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>text</var>, <emu-nt><a href=\"#prod-StringIntegerLiteral\">StringIntegerLiteral</a></emu-nt>).</li><li>If <var>literal</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <emu-val>NaN</emu-val>.</li><li>Let <var>mv</var> be the MV of <var>literal</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>mv</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li>Return <emu-xref href=\"#%E2%84%A4\"><a href=\"#%E2%84%A4\">&#8484;</a></emu-xref>(<var>mv</var>).</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-stringintegerliteral-grammar\"><h1><span class=\"secnum\">7.1.14.1</span>#sec-stringintegerliteral-grammar StringIntegerLiteral Grammar</h1>...</div><div id=\"excluded-sec-runtime-semantics-mv-for-stringintegerliteral\"><h1><span class=\"secnum\">7.1.14.2</span>#sec-runtime-semantics-mv-for-stringintegerliteral Runtime Semantics: MV</h1>...</div></emu-clause>\n\n    "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y, LeftFirst )", "html": "<emu-clause id=\"sec-islessthan\" type=\"abstract operation\" oldids=\"sec-abstract-relational-comparison\" aoid=\"IsLessThan\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. If <var>LeftFirst</var> is <emu-val>true</emu-val>, the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number, then<ol><li>Return <emu-xref aoid=\"Number::lessThan\"><a href=\"#sec-numeric-types-number-lessThan\">Number::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"table-tobigint": "Table 16"}}, "to": {"secList": ["sec-tobigint", "sec-islooselyequal", "sec-stringtobigint", "sec-islessthan"], "secData": {"sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" type=\"abstract operation\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              </td>\n              <td>\n                Return <var>prim</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>undefined</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-islooselyequal": {"num": "7.2.14", "title": "#sec-islooselyequal IsLooselyEqual ( x, y )", "html": "<emu-clause id=\"sec-islooselyequal\" type=\"abstract operation\" oldids=\"sec-abstract-equality-comparison\" aoid=\"IsLooselyEqual\"><span id=\"sec-abstract-equality-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islooselyequal\">#sec-islooselyequal</span> IsLooselyEqual ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation IsLooselyEqual takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It provides the semantics for the comparison <var>x</var> == <var>y</var>, returning <emu-val>true</emu-val> or <emu-val>false</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return <emu-xref aoid=\"IsStrictlyEqual\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual</a></emu-xref>(<var>x</var>, <var>y</var>).</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li id=\"step-abstract-equality-comparison-web-compat-insertion-point\">NOTE: This step is replaced in section <emu-xref href=\"#sec-IsHTMLDDA-internal-slot-aec\"><a href=\"#sec-IsHTMLDDA-internal-slot-aec\" class=\"excluded-xref\" excluded-id=\"sec-IsHTMLDDA-internal-slot-aec\">#sec-IsHTMLDDA-internal-slot-aec</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is String, then<ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>y</var>).</li><li>If <var>n</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, <var>n</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>y</var>, <var>x</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(! <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Boolean, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is either String, Number, BigInt, or Symbol and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Object, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(<var>x</var>, ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>)).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is either String, Number, BigInt, or Symbol, return <emu-xref aoid=\"IsLooselyEqual\"><a href=\"#sec-islooselyequal\">IsLooselyEqual</a></emu-xref>(? <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>), <var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is Number, or if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) is BigInt, then<ol><li>If <var>x</var> or <var>y</var> are any of <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-stringtobigint": {"num": "7.1.14", "title": "#sec-stringtobigint StringToBigInt ( str )", "html": "<emu-clause id=\"sec-stringtobigint\" type=\"abstract operation\" aoid=\"StringToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringtobigint\">#sec-stringtobigint</span> StringToBigInt ( <var>str</var> )</h1>\n      <p>The abstract operation StringToBigInt takes argument <var>str</var> (a String). It returns a BigInt or <emu-val>undefined</emu-val>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>text</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>).</li><li>Let <var>literal</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>text</var>, <emu-nt><a href=\"#prod-StringIntegerLiteral\">StringIntegerLiteral</a></emu-nt>).</li><li>If <var>literal</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <emu-val>undefined</emu-val>.</li><li>Let <var>mv</var> be the MV of <var>literal</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>mv</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>.</li><li>Return <emu-xref href=\"#%E2%84%A4\"><a href=\"#%E2%84%A4\">&#8484;</a></emu-xref>(<var>mv</var>).</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-stringintegerliteral-grammar\"><h1><span class=\"secnum\">7.1.14.1</span>#sec-stringintegerliteral-grammar StringIntegerLiteral Grammar</h1>...</div><div id=\"excluded-sec-runtime-semantics-mv-for-stringintegerliteral\"><h1><span class=\"secnum\">7.1.14.2</span>#sec-runtime-semantics-mv-for-stringintegerliteral Runtime Semantics: MV</h1>...</div></emu-clause>\n\n    "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y, LeftFirst )", "html": "<emu-clause id=\"sec-islessthan\" type=\"abstract operation\" oldids=\"sec-abstract-relational-comparison\" aoid=\"IsLessThan\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. If <var>LeftFirst</var> is <emu-val>true</emu-val>, the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number, then<ol><li>Return <emu-xref aoid=\"Number::lessThan\"><a href=\"#sec-numeric-types-number-lessThan\">Number::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt.</li><li>Return <emu-xref aoid=\"BigInt::lessThan\"><a href=\"#sec-numeric-types-bigint-lessThan\">BigInt::lessThan</a></emu-xref>(<var>nx</var>, <var>ny</var>).</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"table-tobigint": "Table 16"}}}