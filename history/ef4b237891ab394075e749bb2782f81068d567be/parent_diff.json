{"from": {"secList": ["sec-enumerate-object-properties", "sec-regexp.prototype-@@split", "sec-conformance.normative-optional", "sec-json.stringify", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-ecmascript-language-lexical-grammar", "sec-function-p1-p2-pn-body", "sec-weak-ref.prototype.constructor", "sec-disjunction", "sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-runtime-semantics-canonicalize-ch", "sec-weak-ref.prototype.deref", "sec-additional-syntax-string-literals", "sec-date.parse", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-examples-of-automatic-semicolon-insertion", "sec-%iteratorprototype%-object"], "secData": {"sec-enumerate-object-properties": {"num": "14.7.5.9", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>ECMAScript implementations are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">EnumerateObjectProperties</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Reflect</span>.ownKeys(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.add(key);\n      <span class=\"hljs-keyword\">if</span> (desc.enumerable) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-built_in\">Reflect</span>.getPrototypeOf(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> EnumerateObjectProperties(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.has(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array object into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;</span>and<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-conformance.normative-optional": {"num": "2.1", "title": "#sec-conformance.normative-optional Example Clause Heading", "html": "<emu-clause id=\"sec-conformance.normative-optional\" example=\"\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance.normative-optional\">#sec-conformance.normative-optional</span> Example Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-json.stringify": {"num": "25.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, <var>prop</var>).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Let <var>spaceMV</var> be !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>space</var>).</li><li>Set <var>spaceMV</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, <var>spaceMV</var>).</li><li>If <var>spaceMV</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>spaceMV</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>space</var> from 0 to 10.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Let <var>state</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[ReplacerFunction]]: <var>ReplacerFunction</var>, [[Stack]]: <var>stack</var>, [[Indent]]: <var>indent</var>, [[Gap]]: <var>gap</var>, [[PropertyList]]: <var>PropertyList</var> }.</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, the empty String, <var>wrapper</var>).</li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is <emu-val>3</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-built_in\">JSON</span>.stringify(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">25.5.2.1</span>#sec-serializejsonproperty SerializeJSONProperty ( state, key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">25.5.2.2</span>#sec-quotejsonstring QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">25.5.2.3</span>#sec-unicodeescape UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">25.5.2.4</span>#sec-serializejsonobject SerializeJSONObject ( state, value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">25.5.2.5</span>#sec-serializejsonarray SerializeJSONArray ( state, value )</h1>...</div></emu-clause>\n\n    "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "9.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The SetMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>S</var> (a Boolean). It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li id=\"step-setmutablebinding-missing-binding\">If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step <emu-xref href=\"#step-setmutablebinding-missing-binding\"><a href=\"#step-setmutablebinding-missing-binding\" class=\"excluded-xref\" excluded-id=\"step-setmutablebinding-missing-binding\">#step-setmutablebinding-missing-binding</a></emu-xref> is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ecmascript-language-lexical-grammar": {"num": "12", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.exec(c).map(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.exec(c).map(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">12.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">12.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">12.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">12.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">12.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">12.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">12.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">12.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div></emu-clause>\n\n"}, "sec-function-p1-p2-pn-body": {"num": "20.2.1.1", "title": "#sec-function-p1-p2-pn-body Function ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-function-p1-p2-pn-body\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</span> Function ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>Function</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220; <var>p</var> &#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>normal</emu-const>, <var>args</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is permissible but not necessary to have one argument for each formal parameter to be specified. For example, all three of the following expressions produce the same result:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a, b, c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a,b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)</code></pre>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-createdynamicfunction\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )</h1>...</div></emu-clause>\n    "}, "sec-weak-ref.prototype.constructor": {"num": "26.1.3.1", "title": "#sec-weak-ref.prototype.constructor WeakRef.prototype.constructor", "html": "<emu-clause id=\"sec-weak-ref.prototype.constructor\" normative-optional=\"\"><div class=\"normative-optional-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.constructor\">#sec-weak-ref.prototype.constructor</span> WeakRef.prototype.constructor</h1>\n\n        <p>The initial value of <code>WeakRef.prototype.constructor</code> is <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">%WeakRef%</a></emu-xref>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-disjunction": {"num": "22.2.2.3", "title": "#sec-disjunction Disjunction", "html": "<emu-clause id=\"sec-disjunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-disjunction\">#sec-disjunction</span> Disjunction</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Disjunction\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"o3tpbkic\"><emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Return <var>m</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Disjunction\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"jt2lba_1\">\n        <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>\n        <emu-t>|</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m1</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m2</var>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>m1</var> and <var>m2</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>r</var> be <var>m1</var>(<var>x</var>, <var>c</var>).</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <var>r</var>.</li><li>Return <var>m2</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>|</code> regular expression operator separates two alternatives. The pattern first tries to match the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> (followed by the sequel of the regular expression); if it fails, it tries to match the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> (followed by the sequel of the regular expression). If the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>, the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>, and the sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>. If choices in the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> are exhausted, the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> is tried instead of the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>. Any capturing parentheses inside a portion of the pattern skipped by <code>|</code> produce <emu-val>undefined</emu-val> values instead of Strings. Thus, for example,</p>\n          <pre><code class=\"javascript hljs\">/a|ab/.exec(<span class=\"hljs-string\">\"abc\"</span>)</code></pre>\n          <p>returns the result <emu-val>\"a\"</emu-val> and not <emu-val>\"ab\"</emu-val>. Moreover,</p>\n          <pre><code class=\"javascript hljs\">/((a)|(ab))((c)|(bc))/.exec(<span class=\"hljs-string\">\"abc\"</span>)</code></pre>\n          <p>returns the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"bc\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"bc\"</span>]</code></pre>\n          <p>and not</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"ab\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"ab\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-literal\">undefined</span>]</code></pre>\n          <p>The order in which the two alternatives are tried is independent of the value of <var>direction</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "22.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes arguments <var>m</var> (a Matcher), <var>min</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>max</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>greedy</var> (a Boolean), <var>x</var> (a State), <var>c</var> (a Continuation), <var>parenIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>parenCount</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>max</var> = 0, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li id=\"step-repeatmatcher-done\">If <var>min</var> = 0 and <var>y</var>'s <var>endIndex</var> = <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> = 0, let <var>min2</var> be 0; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is +&#8734;, let <var>max2</var> be +&#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li id=\"step-repeatmatcher-clear-captures\">For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> &#8800; 0, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>z</var> be <var>c</var>(<var>x</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>m</var>(<var>xr</var>, <var>d</var>).</li></ol></li><li>Let <var>z</var> be <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>c</var>(<var>x</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?/.exec(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*/.exec(<span class=\"hljs-string\">\"aabaac\"</span>)</code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.replace(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-clear-captures\"><a href=\"#step-repeatmatcher-clear-captures\" class=\"excluded-xref\" excluded-id=\"step-repeatmatcher-clear-captures\">#step-repeatmatcher-clear-captures</a></emu-xref> of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*/.exec(<span class=\"hljs-string\">\"zaacbbbcac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-done\"><a href=\"#step-repeatmatcher-done\">2.b</a></emu-xref> of the RepeatMatcher states that once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*/.exec(<span class=\"hljs-string\">\"b\"</span>)</code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+/.exec(<span class=\"hljs-string\">\"baaaac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-canonicalize-ch": {"num": "22.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes argument <var>ch</var> (a character). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>Unicode</var> is <emu-val>true</emu-val> and <var>IgnoreCase</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>cp</var> be the code point whose numeric value is that of <var>ch</var>.</li><li>Let <var>u</var> be the result of toUppercase(&#171; <var>cp</var> &#187;), according to the Unicode Default Case Conversion algorithm.</li><li>Let <var>uStr</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>u</var>).</li><li>If <var>uStr</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>uStr</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a non-zero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)a(?!(a+)b\\2c)\\<span class=\"hljs-number\">2</span>(.*)/.exec(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>Unicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>&#223;</code> (U+00DF) to <code>SS</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>&#383;</code> (U+017F) to <code>s</code>. Such characters are not mapped if <var>Unicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-weak-ref.prototype.deref": {"num": "26.1.3.2", "title": "#sec-weak-ref.prototype.deref WeakRef.prototype.deref ( )", "html": "<emu-clause id=\"sec-weak-ref.prototype.deref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.deref\">#sec-weak-ref.prototype.deref</span> WeakRef.prototype.deref ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>weakRef</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>weakRef</var>, [[WeakRefTarget]]).</li><li>Return !&#160;<emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref>(<var>weakRef</var>).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> returns a <var>target</var> Object that is not <emu-val>undefined</emu-val>, then this <var>target</var> object should not be garbage collected until the current execution of ECMAScript code has completed. The <emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref> operation makes sure read consistency is maintained.</p>\n\n          <pre><code class=\"javascript hljs\">target = { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{} };\n<span class=\"hljs-keyword\">let</span> weakRef = <span class=\"hljs-keyword\">new</span> WeakRef(target);\n\n... later ...\n\n<span class=\"hljs-keyword\">if</span> (weakRef.deref()) {\n  weakRef.deref().foo();\n}</code></pre>\n\n          <p>In the above example, if the first deref does not evaluate to <emu-val>undefined</emu-val> then the second deref cannot either.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-additional-syntax-string-literals": {"num": "B.1.2", "title": "#sec-additional-syntax-string-literals String Literals", "html": "<emu-annex id=\"sec-additional-syntax-string-literals\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</span> String Literals</h1>\n      <p>The syntax and semantics of <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref> is extended as follows except that this extension is not allowed for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>:</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"EscapeSequence\" type=\"lexical\" id=\"prod-annexB-EscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6ehvb3kw\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qacbhaps\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"rl1vvdtr\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LegacyOctalEscapeSequence\" type=\"lexical\" id=\"prod-annexB-LegacyOctalEscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"uhga5j5i\">\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n    <emu-rhs a=\"kwwjpyex\">\n        <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n    <emu-rhs a=\"ci1_zc16\">\n        <emu-nt><a href=\"#prod-annexB-FourToSeven\">FourToSeven</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4u5dk78q\">\n        <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ZeroToThree\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-ZeroToThree\">\n    <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FourToSeven\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-FourToSeven\">\n    <emu-nt><a href=\"#prod-annexB-FourToSeven\">FourToSeven</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"NonOctalDecimalEscapeSequence\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-NonOctalDecimalEscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This definition of <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> is not used in strict mode or when parsing <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to not use this extended definition of <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> with such literals. For example, attempting to parse the following source text must fail:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">invalid</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-additional-syntax-string-literals-static-semantics\"><h1><span class=\"secnum\">B.1.2.1</span>#sec-additional-syntax-string-literals-static-semantics Static Semantics</h1>...</div></emu-annex>\n\n    "}, "sec-date.parse": {"num": "21.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.valueOf()\n<span class=\"hljs-built_in\">Date</span>.parse(x.toString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toUTCString())\n<span class=\"hljs-built_in\">Date</span>.parse(x.toISOString())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Date</span>.parse(x.toLocaleString())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.b\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.b\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-examples-of-automatic-semicolon-insertion": {"num": "12.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).print()</code></pre>\n      <p>is <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + c(d + e).print()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n    "}, "sec-%iteratorprototype%-object": {"num": "27.1.2", "title": "#sec-%iteratorprototype%-object The %IteratorPrototype% Object", "html": "<emu-clause id=\"sec-%iteratorprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%iteratorprototype%-object\">#sec-%iteratorprototype%-object</span> The %IteratorPrototype% Object</h1>\n      <p>The <dfn>%IteratorPrototype%</dfn> object:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>All objects defined in this specification that implement the Iterator interface also inherit from %IteratorPrototype%. ECMAScript code may also define objects that inherit from %IteratorPrototype%. The %IteratorPrototype% object provides a place where additional methods that are applicable to all iterator objects may be added.</p>\n        <p>The following expression is one way that ECMAScript code can access the %IteratorPrototype% object:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-built_in\">Object</span>.getPrototypeOf(<span class=\"hljs-built_in\">Object</span>.getPrototypeOf([][<span class=\"hljs-built_in\">Symbol</span>.iterator]()))</code></pre>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-%iteratorprototype%-@@iterator\"><h1><span class=\"secnum\">27.1.2.1</span>#sec-%iteratorprototype%-@@iterator %IteratorPrototype% [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-enumerate-object-properties", "sec-regexp.prototype-@@split", "sec-conformance.normative-optional", "sec-json.stringify", "sec-declarative-environment-records-setmutablebinding-n-v-s", "sec-ecmascript-language-lexical-grammar", "sec-function-p1-p2-pn-body", "sec-weak-ref.prototype.constructor", "sec-disjunction", "sec-runtime-semantics-repeatmatcher-abstract-operation", "sec-runtime-semantics-canonicalize-ch", "sec-weak-ref.prototype.deref", "sec-additional-syntax-string-literals", "sec-date.parse", "sec-left-hand-side-expressions-static-semantics-early-errors", "sec-examples-of-automatic-semicolon-insertion", "sec-%iteratorprototype%-object"], "secData": {"sec-enumerate-object-properties": {"num": "14.7.5.9", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>The abstract operation EnumerateObjectProperties takes argument <var>O</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.</li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, <emu-xref href=\"#module-namespace-exotic-object\"><a href=\"#module-namespace-exotic-object\">module namespace exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>ECMAScript implementations are not required to implement the algorithm in <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(obj) {\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getOwnPropertyDescriptor</span>(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.<span class=\"hljs-title function_\">add</span>(key);\n      <span class=\"hljs-keyword\">if</span> (desc.<span class=\"hljs-property\">enumerable</span>) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">EnumerateObjectProperties</span>(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype-@@split": {"num": "22.2.5.13", "title": "#sec-regexp.prototype-@@split RegExp.prototype [ @@split ] ( string, limit )", "html": "<emu-clause id=\"sec-regexp.prototype-@@split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@split\">#sec-regexp.prototype-@@split</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Returns an Array object into which substrings of the result of converting <var>string</var> to a String have been stored. The substrings are determined by searching from left to right for matches of the <emu-val>this</emu-val> value regular expression; these occurrences are not part of any String in the returned array, but serve to divide up the String value.</p>\n          <p>The <emu-val>this</emu-val> value may be an empty regular expression or a regular expression that can match an empty String. In this case, the regular expression does not match the empty <emu-not-ref>substring</emu-not-ref> at the beginning or end of the input String, nor does it match the empty <emu-not-ref>substring</emu-not-ref> at the end of the previous separator match. (For example, if the regular expression matches the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each <emu-not-ref>substring</emu-not-ref> contains one code unit.) Only the first match at a given index of the String is considered, even if backtracking could yield a non-empty <emu-not-ref>substring</emu-not-ref> match at that index. (For example, <code>/a*?/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"a\", \"b\"]</code>, while <code>/a*/[Symbol.split](\"ab\")</code> evaluates to the array <code>[\"\",\"b\"]</code>.)</p>\n          <p>If <var>string</var> is (or converts to) the empty String, the result depends on whether the regular expression can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If the regular expression contains capturing parentheses, then each time <var>separator</var> is matched the results (including any <emu-val>undefined</emu-val> results) of the capturing parentheses are spliced into the output array. For example,</p>\n          <pre><code class=\"javascript hljs\">/&lt;(\\/)?([^<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>]+)&gt;/[Symbol.split](\"A<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span>&gt;</span>bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">B</span>&gt;</span>and<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CODE</span>&gt;</span>coded<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CODE</span>&gt;</span>\")</span></code></pre>\n          <p>evaluates to the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"bold\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-string\">\"and\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"coded\"</span>, <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-string\">\"CODE\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          <p>If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <p>When the <code>@@split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"flags\"</emu-val>)).</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>unicodeMatching</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>unicodeMatching</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"y\"</emu-val>, let <var>newFlags</var> be <var>flags</var>.</li><li>Else, let <var>newFlags</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>flags</var> and <emu-val>\"y\"</emu-val>.</li><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>rx</var>, <var>newFlags</var> &#187;).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>)).</li><li>If <var>lim</var> is 0, return <var>A</var>.</li><li>Let <var>size</var> be the length of <var>S</var>.</li><li>If <var>size</var> is 0, then<ol><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is not <emu-val>null</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &lt; <var>size</var>,<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>, <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>q</var>), <emu-val>true</emu-val>).</li><li>Let <var>z</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>splitter</var>, <var>S</var>).</li><li>If <var>z</var> is <emu-val>null</emu-val>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>e</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(? <emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>splitter</var>, <emu-val>\"lastIndex\"</emu-val>))).</li><li>Set <var>e</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>size</var>).</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>q</var>, <var>unicodeMatching</var>).</li><li>Else,<ol><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>q</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Let <var>numberOfCaptures</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>z</var>).</li><li>Set <var>numberOfCaptures</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>numberOfCaptures</var> - 1, 0).</li><li>Let <var>i</var> be 1.</li><li>Repeat, while <var>i</var> &#8804; <var>numberOfCaptures</var>,<ol><li>Let <var>nextCapture</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>z</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>i</var>))).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>nextCapture</var>).</li><li>Set <var>i</var> to <var>i</var> + 1.</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li></ol></li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>S</var> from <var>p</var> to <var>size</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>lengthA</var>)), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.split]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>@@split</code> method ignores the value of the <emu-val>\"global\"</emu-val> and <emu-val>\"sticky\"</emu-val> properties of this RegExp object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-conformance.normative-optional": {"num": "2.1", "title": "#sec-conformance.normative-optional Example Clause Heading", "html": "<emu-clause id=\"sec-conformance.normative-optional\" example=\"\" normative-optional=\"\"><div class=\"clause-attributes-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conformance.normative-optional\">#sec-conformance.normative-optional</span> Example Clause Heading</h1>\n    <p>Example clause contents.</p>\n  </emu-clause>\n"}, "sec-json.stringify": {"num": "25.5.2", "title": "#sec-json.stringify JSON.stringify ( value [ , replacer [ , space ] ] )", "html": "<emu-clause id=\"sec-json.stringify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.stringify\">#sec-json.stringify</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</h1>\n      <p>The <code>stringify</code> function returns a String in UTF-16 encoded JSON format representing an ECMAScript value, or <emu-val>undefined</emu-val>. It can take three parameters. The <var>value</var> parameter is an ECMAScript value, which is usually an object or array, although it can also be a String, Boolean, Number or <emu-val>null</emu-val>. The optional <var>replacer</var> parameter is either a function that alters the way objects and arrays are stringified, or an array of Strings and Numbers that acts as an inclusion list for selecting the object properties that will be stringified. The optional <var>space</var> parameter is a String or Number that allows the result to have white space injected into it to improve human readability.</p>\n      <p>These are the steps in stringifying an object:</p>\n      <emu-alg><ol><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>indent</var> be the empty String.</li><li>Let <var>PropertyList</var> and <var>ReplacerFunction</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>replacer</var>) is Object, then<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replacer</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>ReplacerFunction</var> to <var>replacer</var>.</li></ol></li><li>Else,<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>replacer</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>PropertyList</var> to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>replacer</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>k</var>)).</li><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>replacer</var>, <var>prop</var>).</li><li>Let <var>item</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is String, set <var>item</var> to <var>v</var>.</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Number, set <var>item</var> to !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>v</var>) is Object, then<ol><li>If <var>v</var> has a [[StringData]] or [[NumberData]] internal slot, set <var>item</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>item</var> is not <emu-val>undefined</emu-val> and <var>item</var> is not currently an element of <var>PropertyList</var>, then<ol><li>Append <var>item</var> to the end of <var>PropertyList</var>.</li></ol></li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Object, then<ol><li>If <var>space</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>space</var>).</li></ol></li><li>Else if <var>space</var> has a [[StringData]] internal slot, then<ol><li>Set <var>space</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>space</var>).</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is Number, then<ol><li>Let <var>spaceMV</var> be !&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>space</var>).</li><li>Set <var>spaceMV</var> to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(10, <var>spaceMV</var>).</li><li>If <var>spaceMV</var> &lt; 1, let <var>gap</var> be the empty String; otherwise let <var>gap</var> be the String value containing <var>spaceMV</var> occurrences of the code unit 0x0020 (SPACE).</li></ol></li><li>Else if <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>space</var>) is String, then<ol><li>If the length of <var>space</var> is 10 or less, let <var>gap</var> be <var>space</var>; otherwise let <var>gap</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>space</var> from 0 to 10.</li></ol></li><li>Else,<ol><li>Let <var>gap</var> be the empty String.</li></ol></li><li>Let <var>wrapper</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>wrapper</var>, the empty String, <var>value</var>).</li><li>Let <var>state</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[ReplacerFunction]]: <var>ReplacerFunction</var>, [[Stack]]: <var>stack</var>, [[Indent]]: <var>indent</var>, [[Gap]]: <var>gap</var>, [[PropertyList]]: <var>PropertyList</var> }.</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, the empty String, <var>wrapper</var>).</li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>stringify</code> function is <emu-val>3</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>JSON structures are allowed to be nested to any depth, but they must be acyclic. If <var>value</var> is or contains a cyclic structure, then the stringify function must throw a <emu-val>TypeError</emu-val> exception. This is an example of a value that cannot be stringified:</p>\n        <pre><code class=\"javascript hljs\">a = [];\na[<span class=\"hljs-number\">0</span>] = a;\nmy_text = <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(a); <span class=\"hljs-comment\">// This must throw a TypeError.</span></code></pre>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Symbolic primitive values are rendered as follows:</p>\n        <ul>\n          <li>\n            The <emu-val>null</emu-val> value is rendered in JSON text as the String <emu-val>\"null\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>undefined</emu-val> value is not rendered.\n          </li>\n          <li>\n            The <emu-val>true</emu-val> value is rendered in JSON text as the String <emu-val>\"true\"</emu-val>.\n          </li>\n          <li>\n            The <emu-val>false</emu-val> value is rendered in JSON text as the String <emu-val>\"false\"</emu-val>.\n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>String values are wrapped in QUOTATION MARK (<code>\"</code>) code units. The code units <code>\"</code> and <code>\\</code> are escaped with <code>\\</code> prefixes. Control characters code units are replaced with escape sequences <code>\\u</code>HHHH, or with the shorter forms, <code>\\b</code> (BACKSPACE), <code>\\f</code> (FORM FEED), <code>\\n</code> (LINE FEED), <code>\\r</code> (CARRIAGE RETURN), <code>\\t</code> (CHARACTER TABULATION).</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Finite numbers are stringified as if by calling <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>number</var>). <emu-val>NaN</emu-val> and <emu-val>Infinity</emu-val> regardless of sign are represented as the String <emu-val>\"null\"</emu-val>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Values that do not have a JSON representation (such as <emu-val>undefined</emu-val> and functions) do not produce a String. Instead they produce the <emu-val>undefined</emu-val> value. In arrays these values are represented as the String <emu-val>\"null\"</emu-val>. In objects an unrepresentable value causes the property to be excluded from stringification.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        <p>An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or more properties, separated with a U+002C (COMMA), closed with a U+007D (RIGHT CURLY BRACKET). A property is a quoted String representing the key or <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>, a U+003A (COLON), and then the stringified property value. An array is rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or more values, separated with a U+002C (COMMA), closed with a U+005D (RIGHT SQUARE BRACKET).</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-serializejsonproperty\"><h1><span class=\"secnum\">25.5.2.1</span>#sec-serializejsonproperty SerializeJSONProperty ( state, key, holder )</h1>...</div><div id=\"excluded-sec-quotejsonstring\"><h1><span class=\"secnum\">25.5.2.2</span>#sec-quotejsonstring QuoteJSONString ( value )</h1>...</div><div id=\"excluded-sec-unicodeescape\"><h1><span class=\"secnum\">25.5.2.3</span>#sec-unicodeescape UnicodeEscape ( C )</h1>...</div><div id=\"excluded-sec-serializejsonobject\"><h1><span class=\"secnum\">25.5.2.4</span>#sec-serializejsonobject SerializeJSONObject ( state, value )</h1>...</div><div id=\"excluded-sec-serializejsonarray\"><h1><span class=\"secnum\">25.5.2.5</span>#sec-serializejsonarray SerializeJSONArray ( state, value )</h1>...</div></emu-clause>\n\n    "}, "sec-declarative-environment-records-setmutablebinding-n-v-s": {"num": "9.1.1.1.5", "title": "#sec-declarative-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )", "html": "<emu-clause id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-declarative-environment-records-setmutablebinding-n-v-s\">#sec-declarative-environment-records-setmutablebinding-n-v-s</span> SetMutableBinding ( <var>N</var>, <var>V</var>, <var>S</var> )</h1>\n          <p>The SetMutableBinding concrete method of a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> <var>envRec</var> takes arguments <var>N</var> (a String), <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>S</var> (a Boolean). It attempts to change the bound value of the current binding of the identifier whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. It performs the following steps when called:</p>\n          <emu-alg><ol><li id=\"step-setmutablebinding-missing-binding\">If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, set <var>S</var> to <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An example of ECMAScript code that results in a missing binding at step <emu-xref href=\"#step-setmutablebinding-missing-binding\"><a href=\"#step-setmutablebinding-missing-binding\" class=\"excluded-xref\" excluded-id=\"step-setmutablebinding-missing-binding\">#step-setmutablebinding-missing-binding</a></emu-xref> is:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"var x; x = (delete x, 0);\"</span>); }</code></pre>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-ecmascript-language-lexical-grammar": {"num": "12", "title": "#sec-ecmascript-language-lexical-grammar ECMAScript Language: Lexical Grammar", "html": "<emu-clause id=\"sec-ecmascript-language-lexical-grammar\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</span> ECMAScript Language: Lexical Grammar</h1>\n  <p>The source text of an ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is first converted into a sequence of input elements, which are tokens, line terminators, comments, or white space. The source text is scanned from left to right, repeatedly taking the longest possible sequence of code points as the next input element.</p>\n  <p>There are several situations where the identification of lexical input elements is sensitive to the syntactic grammar context that is consuming the input elements. This requires multiple goal symbols for the lexical grammar. The <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> or a <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.</p>\n  <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n    <p>The use of multiple lexical goals ensures that there are no lexical ambiguities that would affect automatic semicolon insertion. For example, there are no syntactic grammar contexts where both a leading division or division-assignment, and a leading <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see <emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>); in examples such as the following:</p>\n    <pre><code class=\"javascript hljs\">a = b\n/hi/g.<span class=\"hljs-title function_\">exec</span>(c).<span class=\"hljs-title function_\">map</span>(d);</code></pre>\n    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>\n    <pre><code class=\"javascript hljs\">a = b / hi / g.<span class=\"hljs-title function_\">exec</span>(c).<span class=\"hljs-title function_\">map</span>(d);</code></pre>\n  </div></emu-note>\n  <h2>Syntax</h2>\n  <emu-grammar type=\"definition\"><emu-production name=\"InputElementDiv\" type=\"lexical\" id=\"prod-InputElementDiv\">\n    <emu-nt><a href=\"#prod-InputElementDiv\">InputElementDiv</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExp\" type=\"lexical\" id=\"prod-InputElementRegExp\">\n    <emu-nt><a href=\"#prod-InputElementRegExp\">InputElementRegExp</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ehmup46z\"><emu-nt><a href=\"#prod-RightBracePunctuator\">RightBracePunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementRegExpOrTemplateTail\" type=\"lexical\" id=\"prod-InputElementRegExpOrTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"mbzy6lvr\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"InputElementTemplateTail\" type=\"lexical\" id=\"prod-InputElementTemplateTail\">\n    <emu-nt><a href=\"#prod-InputElementTemplateTail\">InputElementTemplateTail</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ft16wloj\"><emu-nt><a href=\"#prod-Comment\">Comment</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"gxwilro0\"><emu-nt><a href=\"#prod-CommonToken\">CommonToken</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kanqhgik\"><emu-nt><a href=\"#prod-DivPunctuator\">DivPunctuator</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"yq5uuf55\"><emu-nt><a href=\"#prod-TemplateSubstitutionTail\">TemplateSubstitutionTail</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n  <div id=\"excluded-sec-unicode-format-control-characters\"><h1><span class=\"secnum\">12.1</span>#sec-unicode-format-control-characters Unicode Format-Control Characters</h1>...</div><div id=\"excluded-sec-white-space\"><h1><span class=\"secnum\">12.2</span>#sec-white-space White Space</h1>...</div><div id=\"excluded-sec-line-terminators\"><h1><span class=\"secnum\">12.3</span>#sec-line-terminators Line Terminators</h1>...</div><div id=\"excluded-sec-comments\"><h1><span class=\"secnum\">12.4</span>#sec-comments Comments</h1>...</div><div id=\"excluded-sec-tokens\"><h1><span class=\"secnum\">12.5</span>#sec-tokens Tokens</h1>...</div><div id=\"excluded-sec-names-and-keywords\"><h1><span class=\"secnum\">12.6</span>#sec-names-and-keywords Names and Keywords</h1>...</div><div id=\"excluded-sec-punctuators\"><h1><span class=\"secnum\">12.7</span>#sec-punctuators Punctuators</h1>...</div><div id=\"excluded-sec-ecmascript-language-lexical-grammar-literals\"><h1><span class=\"secnum\">12.8</span>#sec-ecmascript-language-lexical-grammar-literals Literals</h1>...</div><div id=\"excluded-sec-automatic-semicolon-insertion\"><h1><span class=\"secnum\">12.9</span>#sec-automatic-semicolon-insertion Automatic Semicolon Insertion</h1>...</div></emu-clause>\n\n"}, "sec-function-p1-p2-pn-body": {"num": "20.2.1.1", "title": "#sec-function-p1-p2-pn-body Function ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-function-p1-p2-pn-body\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</span> Function ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>Function</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220; <var>p</var> &#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>normal</emu-const>, <var>args</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is permissible but not necessary to have one argument for each formal parameter to be specified. For example, all three of the following expressions produce the same result:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">\"a, b, c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>(<span class=\"hljs-string\">\"a,b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)</code></pre>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-createdynamicfunction\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-createdynamicfunction CreateDynamicFunction ( constructor, newTarget, kind, args )</h1>...</div></emu-clause>\n    "}, "sec-weak-ref.prototype.constructor": {"num": "26.1.3.1", "title": "#sec-weak-ref.prototype.constructor WeakRef.prototype.constructor", "html": "<emu-clause id=\"sec-weak-ref.prototype.constructor\" normative-optional=\"\"><div class=\"clause-attributes-tag\"><emu-xref href=\"#sec-conformance\"><a href=\"#sec-conformance\">Normative Optional</a></emu-xref></div>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.constructor\">#sec-weak-ref.prototype.constructor</span> WeakRef.prototype.constructor</h1>\n\n        <p>The initial value of <code>WeakRef.prototype.constructor</code> is <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">%WeakRef%</a></emu-xref>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-disjunction": {"num": "22.2.2.3", "title": "#sec-disjunction Disjunction", "html": "<emu-clause id=\"sec-disjunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-disjunction\">#sec-disjunction</span> Disjunction</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Disjunction\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"o3tpbkic\"><emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Return <var>m</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Disjunction\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"jt2lba_1\">\n        <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>\n        <emu-t>|</emu-t>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m1</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m2</var>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>m1</var> and <var>m2</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>r</var> be <var>m1</var>(<var>x</var>, <var>c</var>).</li><li>If <var>r</var> is not <emu-const>failure</emu-const>, return <var>r</var>.</li><li>Return <var>m2</var>(<var>x</var>, <var>c</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>|</code> regular expression operator separates two alternatives. The pattern first tries to match the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> (followed by the sequel of the regular expression); if it fails, it tries to match the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> (followed by the sequel of the regular expression). If the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>, the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>, and the sequel all have choice points, all choices in the sequel are tried before moving on to the next choice in the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>. If choices in the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt> are exhausted, the right <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> is tried instead of the left <emu-nt><a href=\"#prod-Alternative\">Alternative</a></emu-nt>. Any capturing parentheses inside a portion of the pattern skipped by <code>|</code> produce <emu-val>undefined</emu-val> values instead of Strings. Thus, for example,</p>\n          <pre><code class=\"javascript hljs\">/a|ab/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"abc\"</span>)</code></pre>\n          <p>returns the result <emu-val>\"a\"</emu-val> and not <emu-val>\"ab\"</emu-val>. Moreover,</p>\n          <pre><code class=\"javascript hljs\">/((a)|(ab))((c)|(bc))/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"abc\"</span>)</code></pre>\n          <p>returns the array</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"bc\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"bc\"</span>]</code></pre>\n          <p>and not</p>\n          <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"ab\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"ab\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-literal\">undefined</span>]</code></pre>\n          <p>The order in which the two alternatives are tried is independent of the value of <var>direction</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-repeatmatcher-abstract-operation": {"num": "22.2.2.5.1", "title": "#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )", "html": "<emu-clause id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\" aoid=\"RepeatMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-repeatmatcher-abstract-operation\">#sec-runtime-semantics-repeatmatcher-abstract-operation</span> RepeatMatcher ( <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var> )</h1>\n          <p>The abstract operation RepeatMatcher takes arguments <var>m</var> (a Matcher), <var>min</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), <var>max</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>greedy</var> (a Boolean), <var>x</var> (a State), <var>c</var> (a Continuation), <var>parenIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>), and <var>parenCount</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>max</var> = 0, return <var>c</var>(<var>x</var>).</li><li>Let <var>d</var> be a new Continuation with parameters (<var>y</var>) that captures <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>y</var> is a State.</li><li id=\"step-repeatmatcher-done\">If <var>min</var> = 0 and <var>y</var>'s <var>endIndex</var> = <var>x</var>'s <var>endIndex</var>, return <emu-const>failure</emu-const>.</li><li>If <var>min</var> = 0, let <var>min2</var> be 0; otherwise let <var>min2</var> be <var>min</var> - 1.</li><li>If <var>max</var> is +&#8734;, let <var>max2</var> be +&#8734;; otherwise let <var>max2</var> be <var>max</var> - 1.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min2</var>, <var>max2</var>, <var>greedy</var>, <var>y</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li><li>Let <var>cap</var> be a copy of <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li id=\"step-repeatmatcher-clear-captures\">For each <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>parenIndex</var> &lt; <var>k</var> and <var>k</var> &#8804; <var>parenIndex</var> + <var>parenCount</var>, set <var>cap</var>[<var>k</var>] to <emu-val>undefined</emu-val>.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>xr</var> be the State (<var>e</var>, <var>cap</var>).</li><li>If <var>min</var> &#8800; 0, return <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>greedy</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>z</var> be <var>c</var>(<var>x</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>m</var>(<var>xr</var>, <var>d</var>).</li></ol></li><li>Let <var>z</var> be <var>m</var>(<var>xr</var>, <var>d</var>).</li><li>If <var>z</var> is not <emu-const>failure</emu-const>, return <var>z</var>.</li><li>Return <var>c</var>(<var>x</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>An <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> followed by a <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> is repeated the number of times specified by the <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>. A <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> can be non-greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as few times as possible while still matching the sequel, or it can be greedy, in which case the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated as many times as possible while still matching the sequel. The <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> pattern is repeated rather than the input character sequence that it matches, so different repetitions of the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> can match different input substrings.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>If the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and the sequel of the regular expression all have choice points, the <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is first matched as many (or as few, if non-greedy) times as possible. All choices in the sequel are tried before moving on to the next choice in the last repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. All choices in the last (n<sup>th</sup>) repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are tried before moving on to the next choice in the next-to-last (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>; at which point it may turn out that more or fewer repetitions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> are now possible; these are exhausted (again, starting with either as few or as many as possible) before moving on to the next choice in the (n - 1)<sup>st</sup> repetition of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> and so on.</p>\n            <p>Compare</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abcde\"</emu-val> with</p>\n            <pre><code class=\"javascript hljs\">/a[a-z]{<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>}?/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"abcdefghi\"</span>)</code></pre>\n            <p>which returns <emu-val>\"abc\"</emu-val>.</p>\n            <p>Consider also</p>\n            <pre><code class=\"javascript hljs\">/(aa|aabaac|ba|b|c)*/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"aabaac\"</span>)</code></pre>\n            <p>which, by the choice point ordering above, returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaba\"</span>, <span class=\"hljs-string\">\"ba\"</span>]</code></pre>\n            <p>and not any of:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"aabaac\"</span>]\n[<span class=\"hljs-string\">\"aabaac\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>The above ordering of choice points can be used to write a regular expression that calculates the greatest common divisor of two numbers (represented in unary notation). The following example calculates the gcd of 10 and 15:</p>\n            <pre><code class=\"javascript hljs\"><span class=\"hljs-string\">\"aaaaaaaaaa,aaaaaaaaaaaaaaa\"</span>.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^(a+)\\1*,\\1+$/</span>, <span class=\"hljs-string\">\"$1\"</span>)</code></pre>\n            <p>which returns the gcd in unary notation <emu-val>\"aaaaa\"</emu-val>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-clear-captures\"><a href=\"#step-repeatmatcher-clear-captures\" class=\"excluded-xref\" excluded-id=\"step-repeatmatcher-clear-captures\">#step-repeatmatcher-clear-captures</a></emu-xref> of the RepeatMatcher clears <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>'s captures each time <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> is repeated. We can see its behaviour in the regular expression</p>\n            <pre><code class=\"javascript hljs\">/(z)((a+)?(b+)?(c))*/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"zaacbbbcac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>and not</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"zaacbbbcac\"</span>, <span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"ac\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"bbb\"</span>, <span class=\"hljs-string\">\"c\"</span>]</code></pre>\n            <p>because each iteration of the outermost <code>*</code> clears all captured Strings contained in the quantified <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>, which in this case includes capture Strings numbered 2, 3, 4, and 5.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>Step <emu-xref href=\"#step-repeatmatcher-done\"><a href=\"#step-repeatmatcher-done\">2.b</a></emu-xref> of the RepeatMatcher states that once the minimum number of repetitions has been satisfied, any more expansions of <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> that match the empty character sequence are not considered for further repetitions. This prevents the regular expression engine from falling into an infinite loop on patterns such as:</p>\n            <pre><code class=\"javascript hljs\">/(a*)*/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"b\"</span>)</code></pre>\n            <p>or the slightly more complicated:</p>\n            <pre><code class=\"javascript hljs\">/(a*)b\\<span class=\"hljs-number\">1</span>+/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaaac\"</span>)</code></pre>\n            <p>which returns the array</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"\"</span>]</code></pre>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-canonicalize-ch": {"num": "22.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes argument <var>ch</var> (a character). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>Unicode</var> is <emu-val>true</emu-val> and <var>IgnoreCase</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>cp</var> be the code point whose numeric value is that of <var>ch</var>.</li><li>Let <var>u</var> be the result of toUppercase(&#171; <var>cp</var> &#187;), according to the Unicode Default Case Conversion algorithm.</li><li>Let <var>uStr</var> be !&#160;<emu-xref aoid=\"CodePointsToString\"><a href=\"#sec-codepointstostring\">CodePointsToString</a></emu-xref>(<var>u</var>).</li><li>If <var>uStr</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>uStr</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a non-zero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)<span class=\"hljs-title function_\">a</span>(?!(a+)b\\2c)\\<span class=\"hljs-number\">2</span>(.*)/.<span class=\"hljs-title function_\">exec</span>(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>Unicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>&#223;</code> (U+00DF) to <code>SS</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>&#383;</code> (U+017F) to <code>s</code>. Such characters are not mapped if <var>Unicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-weak-ref.prototype.deref": {"num": "26.1.3.2", "title": "#sec-weak-ref.prototype.deref WeakRef.prototype.deref ( )", "html": "<emu-clause id=\"sec-weak-ref.prototype.deref\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype.deref\">#sec-weak-ref.prototype.deref</span> WeakRef.prototype.deref ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>weakRef</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>weakRef</var>, [[WeakRefTarget]]).</li><li>Return !&#160;<emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref>(<var>weakRef</var>).</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> returns a <var>target</var> Object that is not <emu-val>undefined</emu-val>, then this <var>target</var> object should not be garbage collected until the current execution of ECMAScript code has completed. The <emu-xref aoid=\"AddToKeptObjects\"><a href=\"#sec-addtokeptobjects\">AddToKeptObjects</a></emu-xref> operation makes sure read consistency is maintained.</p>\n\n          <pre><code class=\"javascript hljs\">target = { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {} };\n<span class=\"hljs-keyword\">let</span> weakRef = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WeakRef</span>(target);\n\n... later ...\n\n<span class=\"hljs-keyword\">if</span> (weakRef.<span class=\"hljs-title function_\">deref</span>()) {\n  weakRef.<span class=\"hljs-title function_\">deref</span>().<span class=\"hljs-title function_\">foo</span>();\n}</code></pre>\n\n          <p>In the above example, if the first deref does not evaluate to <emu-val>undefined</emu-val> then the second deref cannot either.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-additional-syntax-string-literals": {"num": "B.1.2", "title": "#sec-additional-syntax-string-literals String Literals", "html": "<emu-annex id=\"sec-additional-syntax-string-literals\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additional-syntax-string-literals\">#sec-additional-syntax-string-literals</span> String Literals</h1>\n      <p>The syntax and semantics of <emu-xref href=\"#sec-literals-string-literals\"><a href=\"#sec-literals-string-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-string-literals\">#sec-literals-string-literals</a></emu-xref> is extended as follows except that this extension is not allowed for <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>:</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"EscapeSequence\" type=\"lexical\" id=\"prod-annexB-EscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"6ehvb3kw\"><emu-nt><a href=\"#prod-CharacterEscapeSequence\">CharacterEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6mwrfc1u\"><emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"nv0ui3q7\"><emu-nt><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"qacbhaps\"><emu-nt><a href=\"#prod-HexEscapeSequence\">HexEscapeSequence</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"rl1vvdtr\"><emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LegacyOctalEscapeSequence\" type=\"lexical\" id=\"prod-annexB-LegacyOctalEscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-LegacyOctalEscapeSequence\">LegacyOctalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"uhga5j5i\">\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n    <emu-rhs a=\"kwwjpyex\">\n        <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-gann>[lookahead &#8713; <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>]</emu-gann>\n    </emu-rhs>\n    <emu-rhs a=\"ci1_zc16\">\n        <emu-nt><a href=\"#prod-annexB-FourToSeven\">FourToSeven</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"4u5dk78q\">\n        <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n        <emu-nt><a href=\"#prod-OctalDigit\">OctalDigit</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ZeroToThree\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-ZeroToThree\">\n    <emu-nt><a href=\"#prod-annexB-ZeroToThree\">ZeroToThree</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>0</emu-t> <emu-t>1</emu-t> <emu-t>2</emu-t> <emu-t>3</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"FourToSeven\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-FourToSeven\">\n    <emu-nt><a href=\"#prod-annexB-FourToSeven\">FourToSeven</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>4</emu-t> <emu-t>5</emu-t> <emu-t>6</emu-t> <emu-t>7</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"NonOctalDecimalEscapeSequence\" type=\"lexical\" oneof=\"\" id=\"prod-annexB-NonOctalDecimalEscapeSequence\">\n    <emu-nt><a href=\"#prod-annexB-NonOctalDecimalEscapeSequence\">NonOctalDecimalEscapeSequence</a></emu-nt> <emu-geq>::</emu-geq> <emu-oneof>one of</emu-oneof> <emu-rhs><emu-t>8</emu-t> <emu-t>9</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This definition of <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> is not used in strict mode or when parsing <emu-nt><a href=\"#prod-TemplateCharacter\">TemplateCharacter</a></emu-nt>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>It is possible for string literals to precede a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> that places the enclosing code in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode</a></emu-xref>, and implementations must take care to not use this extended definition of <emu-nt><a href=\"#prod-annexB-EscapeSequence\">EscapeSequence</a></emu-nt> with such literals. For example, attempting to parse the following source text must fail:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">invalid</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-string\">\"\\7\"</span>; <span class=\"hljs-string\">\"use strict\"</span>; }</code></pre>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-additional-syntax-string-literals-static-semantics\"><h1><span class=\"secnum\">B.1.2.1</span>#sec-additional-syntax-string-literals-static-semantics Static Semantics</h1>...</div></emu-annex>\n\n    "}, "sec-date.parse": {"num": "21.4.3.2", "title": "#sec-date.parse Date.parse ( string )", "html": "<emu-clause id=\"sec-date.parse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.parse\">#sec-date.parse</span> Date.parse ( <var>string</var> )</h1>\n        <p>The <code>parse</code> function applies the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> operator to its argument. If <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> results in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> the <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> is immediately returned. Otherwise, <code>parse</code> interprets the resulting String as a date and time; it returns a Number, the UTC <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> corresponding to the date and time. The String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending on the contents of the String. The function first attempts to parse the String according to the format described in Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>), including expanded years. If the String does not conform to that format the function may fall back to any implementation-specific heuristics or implementation-specific date formats. Strings that are unrecognizable or contain out-of-bounds format element values shall cause <code>Date.parse</code> to return <emu-val>NaN</emu-val>.</p>\n        <p>If the String conforms to the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref>, substitute values take the place of absent format elements. When the <code>MM</code> or <code>DD</code> elements are absent, <emu-val>\"01\"</emu-val> is used. When the <code>HH</code>, <code>mm</code>, or <code>ss</code> elements are absent, <emu-val>\"00\"</emu-val> is used. When the <code>sss</code> element is absent, <emu-val>\"000\"</emu-val> is used. When the UTC offset representation is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time.</p>\n        <p>If <code>x</code> is any Date object whose milliseconds amount is zero within a particular implementation of ECMAScript, then all of the following expressions should produce the same numeric value in that implementation, if all the properties referenced have their initial values:</p>\n        <pre><code class=\"javascript hljs\">x.<span class=\"hljs-title function_\">valueOf</span>()\n<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">parse</span>(x.<span class=\"hljs-title function_\">toString</span>())\n<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">parse</span>(x.<span class=\"hljs-title function_\">toUTCString</span>())\n<span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">parse</span>(x.<span class=\"hljs-title function_\">toISOString</span>())</code></pre>\n        <p>However, the expression</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">parse</span>(x.<span class=\"hljs-title function_\">toLocaleString</span>())</code></pre>\n        <p>is not required to produce the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as the preceding three expressions and, in general, the value produced by <code>Date.parse</code> is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> when given any String value that does not conform to the Date Time String Format (<emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>) and that could not be produced in that implementation by the <code>toString</code> or <code>toUTCString</code> method.</p>\n      </emu-clause>\n\n      "}, "sec-left-hand-side-expressions-static-semantics-early-errors": {"num": "13.3.1.1", "title": "#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-left-hand-side-expressions-static-semantics-early-errors\">#sec-left-hand-side-expressions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"OptionalChain\">\n    <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"tfcmykyj\">\n        <emu-t>?.</emu-t>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ocv4xe0-\">\n        <emu-nt><a href=\"#prod-OptionalChain\">OptionalChain</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if any code matches this production.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This production exists in order to prevent automatic semicolon insertion rules (<emu-xref href=\"#sec-automatic-semicolon-insertion\"><a href=\"#sec-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-automatic-semicolon-insertion\">#sec-automatic-semicolon-insertion</a></emu-xref>) from being applied to the following code:</p>\n          <pre><code class=\"javascript hljs\">a?.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>so that it would be interpreted as two valid statements. The purpose is to maintain consistency with similar code without optional chaining:</p>\n          <pre><code class=\"javascript hljs\">a.<span class=\"hljs-property\">b</span>\n<span class=\"hljs-string\">`c`</span></code></pre>\n          <p>which is a valid statement and where automatic semicolon insertion does not apply.</p>\n        </div></emu-note>\n\n        <emu-grammar><emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8myn6frq\">\n        <emu-t>import</emu-t>\n        <emu-t>.</emu-t>\n        <emu-t>meta</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> is not <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n    "}, "sec-examples-of-automatic-semicolon-insertion": {"num": "12.9.2", "title": "#sec-examples-of-automatic-semicolon-insertion Examples of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-examples-of-automatic-semicolon-insertion\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-examples-of-automatic-semicolon-insertion\">#sec-examples-of-automatic-semicolon-insertion</span> Examples of Automatic Semicolon Insertion</h1>\n      <em>This section is non-normative.</em>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span> } <span class=\"hljs-number\">3</span></code></pre>\n      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">{ <span class=\"hljs-number\">1</span>\n;<span class=\"hljs-number\">2</span> ;} <span class=\"hljs-number\">3</span>;</code></pre>\n      <p>which is a valid ECMAScript sentence.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">for</span> (a; b\n)</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion because the semicolon is needed for the header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>\na + b</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">return</span>;\na + b;</code></pre>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b\n++c</code></pre>\n      <p>is transformed by automatic semicolon insertion into the following:</p>\n      <pre><code class=\"javascript hljs\">a = b;\n++c;</code></pre>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>\n      </div></emu-note>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">if</span> (a &gt; b)\n<span class=\"hljs-keyword\">else</span> c = d</code></pre>\n      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code> token, even though no production of the grammar applies at that point, because an automatically inserted semicolon would then be parsed as an empty statement.</p>\n      <p>The source</p>\n      <pre><code class=\"javascript hljs\">a = b + c\n(d + e).<span class=\"hljs-title function_\">print</span>()</code></pre>\n      <p>is <em>not</em> transformed by automatic semicolon insertion, because the parenthesized expression that begins the second line can be interpreted as an argument list for a function call:</p>\n      <pre><code class=\"javascript hljs\">a = b + <span class=\"hljs-title function_\">c</span>(d + e).<span class=\"hljs-title function_\">print</span>()</code></pre>\n      <p>In the circumstance that an assignment statement must begin with a left parenthesis, it is a good idea for the programmer to provide an explicit semicolon at the end of the preceding statement rather than to rely on automatic semicolon insertion.</p>\n    </emu-clause>\n    "}, "sec-%iteratorprototype%-object": {"num": "27.1.2", "title": "#sec-%iteratorprototype%-object The %IteratorPrototype% Object", "html": "<emu-clause id=\"sec-%iteratorprototype%-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%iteratorprototype%-object\">#sec-%iteratorprototype%-object</span> The %IteratorPrototype% Object</h1>\n      <p>The <dfn>%IteratorPrototype%</dfn> object:</p>\n      <ul>\n        <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>All objects defined in this specification that implement the Iterator interface also inherit from %IteratorPrototype%. ECMAScript code may also define objects that inherit from %IteratorPrototype%. The %IteratorPrototype% object provides a place where additional methods that are applicable to all iterator objects may be added.</p>\n        <p>The following expression is one way that ECMAScript code can access the %IteratorPrototype% object:</p>\n        <pre><code class=\"javascript hljs\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>([][<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]()))</code></pre>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-%iteratorprototype%-@@iterator\"><h1><span class=\"secnum\">27.1.2.1</span>#sec-%iteratorprototype%-@@iterator %IteratorPrototype% [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}}, "figData": {}}}