{"from": {"secList": ["sec-equality-operators-runtime-semantics-evaluation"], "secData": {"sec-equality-operators-runtime-semantics-evaluation": {"num": "12.11.3", "title": "#sec-equality-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-equality-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-runtime-semantics-evaluation\">#sec-equality-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a normal completion.</li><li>If <var>r</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Given the above definition of equality:</p>\n        <ul>\n          <li>\n            String comparison can be forced by: <code>\"\" + a == \"\" + b</code>.\n          \n          </li>\n          <li>\n            Numeric comparison can be forced by: <code>+a == +b</code>.\n          \n          </li>\n          <li>\n            Boolean comparison can be forced by: <code>!a == !b</code>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The equality operators maintain the following invariants:</p>\n        <ul>\n          <li>\n            <code>A != B</code> is equivalent to <code>!(A == B)</code>.\n          \n          </li>\n          <li>\n            <code>A == B</code> is equivalent to <code>B == A</code>, except in the order of evaluation of <code>A</code> and <code>B</code>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The equality operator is not always transitive. For example, there might be two distinct String objects, each representing the same String value; each String object would be considered equal to the String value by the <code>==</code> operator, but the two String objects would not be equal to each other. For example:</p>\n        <ul>\n          <li>\n            <code>new String(\"a\") == \"a\"</code> and <code>\"a\" == new String(\"a\")</code> are both <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            <code>new String(\"a\") == new String(\"a\")</code> is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-equality-operators-runtime-semantics-evaluation"], "secData": {"sec-equality-operators-runtime-semantics-evaluation": {"num": "12.11.3", "title": "#sec-equality-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-equality-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-runtime-semantics-evaluation\">#sec-equality-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Abstract Equality Comparison\"><a href=\"#sec-abstract-equality-comparison\">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"EqualityExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>r</var> is a normal completion.</li><li>If <var>r</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Given the above definition of equality:</p>\n        <ul>\n          <li>\n            String comparison can be forced by: <code>`${a}` == `${b}`</code>.\n          \n          </li>\n          <li>\n            Numeric comparison can be forced by: <code>+a == +b</code>.\n          \n          </li>\n          <li>\n            Boolean comparison can be forced by: <code>!a == !b</code>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The equality operators maintain the following invariants:</p>\n        <ul>\n          <li>\n            <code>A != B</code> is equivalent to <code>!(A == B)</code>.\n          \n          </li>\n          <li>\n            <code>A == B</code> is equivalent to <code>B == A</code>, except in the order of evaluation of <code>A</code> and <code>B</code>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The equality operator is not always transitive. For example, there might be two distinct String objects, each representing the same String value; each String object would be considered equal to the String value by the <code>==</code> operator, but the two String objects would not be equal to each other. For example:</p>\n        <ul>\n          <li>\n            <code>new String(\"a\") == \"a\"</code> and <code>\"a\" == new String(\"a\")</code> are both <emu-val>true</emu-val>.\n          \n          </li>\n          <li>\n            <code>new String(\"a\") == new String(\"a\")</code> is <emu-val>false</emu-val>.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>Comparison of Strings uses a simple equality test on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore Strings values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}}, "figData": {}}}