{"from": {"secList": ["sec-serializejsonproperty"], "secData": {"sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>key</var>, and <var>holder</var> has access to <var>ReplacerFunction</var> from the invocation of the <code>stringify</code> method. Its algorithm is as follows:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>ReplacerFunction</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>ReplacerFunction</var>, <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-serializejsonproperty"], "secData": {"sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>key</var>, and <var>holder</var> has access to <var>ReplacerFunction</var> from the invocation of the <code>stringify</code> method. Its algorithm is as follows:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object or BigInt, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>ReplacerFunction</var> is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>ReplacerFunction</var>, <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}