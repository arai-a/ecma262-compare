{"from": {"secList": ["sec-promise-jobs", "sec-agents", "sec-jobs-and-job-queues", "sec-promisereactionjob", "sec-scripts", "sec-triggerpromisereactions", "sec-runjobs", "sec-globaldeclarationinstantiation", "sec-enqueuejob", "sec-promisereaction-records", "sec-error-handling-and-language-extensions", "sec-promise-resolve-functions", "sec-promiseresolvethenablejob", "sec-module-semantics", "sec-performpromisethen", "sec-host-report-errors", "sec-toplevelmoduleevaluationjob", "sec-scriptevaluationjob", "sec-executable-code-and-execution-contexts"], "secData": {"sec-promise-jobs": {"num": "25.6.2", "title": "#sec-promise-jobs Promise Jobs", "html": "<emu-clause id=\"sec-promise-jobs\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-jobs\">#sec-promise-jobs</span> Promise Jobs</h1>\n\n      <div id=\"excluded-sec-promisereactionjob\"><h1><span class=\"secnum\">25.6.2.1</span>#sec-promisereactionjob PromiseReactionJob ( reaction, argument )</h1>...</div><div id=\"excluded-sec-promiseresolvethenablejob\"><h1><span class=\"secnum\">25.6.2.2</span>#sec-promiseresolvethenablejob PromiseResolveThenableJob ( promiseToResolve, thenable, then )</h1>...</div></emu-clause>\n\n    "}, "sec-agents": {"num": "8.7", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An  <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, a set of named job queues, an  <dfn id=\"agent-record\">Agent Record</dfn>, and an  <dfn id=\"executing-thread\">executing thread</dfn>.  Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes the jobs in the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s job queues on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes the jobs in the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s job queues, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the  <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs.  The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, the named job queues, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the  <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is implementation-dependent and should be the alternative that is most efficient for the implementation.  Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free.  Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size  <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size  <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses.  See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.7.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.7.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-jobs-and-job-queues": {"num": "8.4", "title": "#sec-jobs-and-job-queues Jobs and Job Queues", "html": "<emu-clause id=\"sec-jobs-and-job-queues\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs-and-job-queues\">#sec-jobs-and-job-queues</span> Jobs and Job Queues</h1>\n    <p>A  <dfn id=\"job\">Job</dfn> is an abstract operation that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress. A <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation may be defined to accept an arbitrary set of job parameters.</p>\n    <p>Execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> can be initiated only when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty. A PendingJob is a request for the future execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>. A PendingJob is an internal <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are specified in  <emu-xref href=\"#table-25\"><a href=\"#table-25\" class=\"excluded-xref\" excluded-id=\"table-25\">#table-25</a></emu-xref>. Once execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is initiated, the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> always executes to completion. No other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be initiated until the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> completes. However, the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> or external events may cause the enqueuing of additional PendingJobs that may be initiated sometime after completion of the currently running <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</p>\n    <emu-table id=\"table-25\" caption=\"PendingJob Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-25\">#table-25</span>: PendingJob <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Field Name\n          \n          </th>\n          <th>\n            Value\n          \n          </th>\n          <th>\n            Meaning\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Job]]\n          \n          </td>\n          <td>\n            The name of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation\n          \n          </td>\n          <td>\n            This is the abstract operation that is performed when execution of this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Arguments]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of argument values that are to be passed to [[Job]] when it is activated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            A <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module for the initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> when this PendingJob is initiated.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HostDefined]]\n          \n          </td>\n          <td>\n            Any, default value is <emu-val>undefined</emu-val>.\n          \n          </td>\n          <td>\n            Field reserved for use by host environments that need to associate additional information with a pending <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A  <dfn id=\"job-queue\">Job Queue</dfn> is a FIFO queue of PendingJob records. Each <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> has a name and the full set of available <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are defined by an ECMAScript implementation. Every ECMAScript implementation has at least the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues defined in  <emu-xref href=\"#table-26\"><a href=\"#table-26\" class=\"excluded-xref\" excluded-id=\"table-26\">#table-26</a></emu-xref>.</p>\n    <p>Each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> has its own set of named <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues.  All references to a named job queue in this specification denote the named job queue of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <emu-table id=\"table-26\" caption=\"Required Job Queues\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-26\">#table-26</span>: Required <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Name\n          \n          </th>\n          <th>\n            Purpose\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            ScriptJobs\n          \n          </td>\n          <td>\n            Jobs that validate and evaluate ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> and <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> source text. See clauses 10 and 15.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            PromiseJobs\n          \n          </td>\n          <td>\n            Jobs that are responses to the settlement of a Promise (see  <emu-xref href=\"#sec-promise-objects\"><a href=\"#sec-promise-objects\" class=\"excluded-xref\" excluded-id=\"sec-promise-objects\">#sec-promise-objects</a></emu-xref>).\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>A request for the future execution of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is made by enqueueing, on a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref>, a PendingJob record that includes a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation name and any necessary argument values. When there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the ECMAScript implementation removes the first PendingJob from a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> and uses the information contained in it to create an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and starts execution of the associated <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> abstract operation.</p>\n    <p>The PendingJob records from a single <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> are always initiated in FIFO order. This specification does not define the order in which multiple <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are serviced. An ECMAScript implementation may interweave the FIFO evaluation of the PendingJob records of a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> with the evaluation of the PendingJob records of one or more other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues. An implementation must define what occurs when there are no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>Typically an ECMAScript implementation will have its <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues pre-initialized with at least one PendingJob and one of those Jobs will be the first to be executed. An implementation might choose to free all resources and terminate if the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> completes and all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty. Alternatively, it might choose to wait for a some implementation specific <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> or mechanism to enqueue new PendingJob requests.</p>\n    </div></emu-note>\n    <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used to create and manage Jobs and <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues:</p>\n\n    <div id=\"excluded-sec-enqueuejob\"><h1><span class=\"secnum\">8.4.1</span>#sec-enqueuejob EnqueueJob ( queueName, job, arguments )</h1>...</div></emu-clause>\n\n  "}, "sec-promisereactionjob": {"num": "25.6.2.1", "title": "#sec-promisereactionjob PromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-promisereactionjob\" aoid=\"PromiseReactionJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereactionjob\">#sec-promisereactionjob</span> PromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The job PromiseReactionJob with parameters <var>reaction</var> and <var>argument</var> applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler.</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-scripts": {"num": "15.1", "title": "#sec-scripts Scripts", "html": "<emu-clause id=\"sec-scripts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts\">#sec-scripts</span> Scripts</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"Script\" id=\"prod-Script\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08c8df8e\"><emu-nt optional=\"\"><a href=\"#prod-ScriptBody\">ScriptBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ScriptBody\" id=\"prod-ScriptBody\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"98de0f78\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-scripts-static-semantics-early-errors\"><h1><span class=\"secnum\">15.1.1</span>#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-isstrict\"><h1><span class=\"secnum\">15.1.2</span>#sec-static-semantics-isstrict Static Semantics: IsStrict</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">15.1.3</span>#sec-scripts-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">15.1.4</span>#sec-scripts-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">15.1.5</span>#sec-scripts-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">15.1.6</span>#sec-scripts-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-script-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.1.7</span>#sec-script-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-script-records\"><h1><span class=\"secnum\">15.1.8</span>#sec-script-records Script Records</h1>...</div><div id=\"excluded-sec-parse-script\"><h1><span class=\"secnum\">15.1.9</span>#sec-parse-script ParseScript ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-runtime-semantics-scriptevaluation\"><h1><span class=\"secnum\">15.1.10</span>#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )</h1>...</div><div id=\"excluded-sec-globaldeclarationinstantiation\"><h1><span class=\"secnum\">15.1.11</span>#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )</h1>...</div><div id=\"excluded-sec-scriptevaluationjob\"><h1><span class=\"secnum\">15.1.12</span>#sec-scriptevaluationjob Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )</h1>...</div></emu-clause>\n\n  "}, "sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is <emu-val>undefined</emu-val>, the behaviour is determined by the [[Type]].</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"PromiseJobs\"</emu-val>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>reaction</var>, <var>argument</var> &#187;).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runjobs": {"num": "8.6", "title": "#sec-runjobs RunJobs ( )", "html": "<emu-clause id=\"sec-runjobs\" aoid=\"RunJobs\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runjobs\">#sec-runjobs</span> RunJobs ( )</h1>\n    <p>The abstract operation RunJobs performs the following steps:</p>\n    <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>().</li><li>In an implementation-dependent manner, obtain the ECMAScript source texts (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such <var>sourceText</var> and <var>hostDefined</var>, do<ol><li>If <var>sourceText</var> is the source code of a script, then<ol><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"ScriptJobs\"</emu-val>, <emu-xref aoid=\"ScriptEvaluationJob\"><a href=\"#sec-scriptevaluationjob\">ScriptEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is the source code of a module.</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"ScriptJobs\"</emu-val>, <emu-xref aoid=\"TopLevelModuleEvaluationJob\"><a href=\"#sec-toplevelmoduleevaluationjob\">TopLevelModuleEvaluationJob</a></emu-xref>, &#171; <var>sourceText</var>, <var>hostDefined</var> &#187;).</li></ol></li></ol></li><li>Repeat,<ol><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is now empty.</li><li>Let <var>nextQueue</var> be a non-empty <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> chosen in an implementation-defined manner. If all <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> Queues are empty, the result is implementation-defined.</li><li>Let <var>nextPending</var> be the PendingJob record at the front of <var>nextQueue</var>. Remove that record from <var>nextQueue</var>.</li><li>Let <var>newContext</var> be a new <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>newContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>newContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>nextPending</var>.[[Realm]].</li><li>Set <var>newContext</var>'s ScriptOrModule to <var>nextPending</var>.[[ScriptOrModule]].</li><li>Push <var>newContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform any implementation or host environment defined job initialization using <var>nextPending</var>.</li><li>Let <var>result</var> be the result of performing the abstract operation named by <var>nextPending</var>.[[Job]] using the elements of <var>nextPending</var>.[[Arguments]] as its arguments.</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, perform <emu-xref aoid=\"HostReportErrors\"><a href=\"#sec-host-report-errors\">HostReportErrors</a></emu-xref>(&#171; <var>result</var>.[[Value]] &#187;).\n    </li></ol></li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>GlobalDeclarationInstantiation is performed as follows using arguments <var>script</var> and <var>env</var>. <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global lexical environment in which bindings are to be created.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>envRec</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>envRec</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>envRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>envRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-enqueuejob": {"num": "8.4.1", "title": "#sec-enqueuejob EnqueueJob ( queueName, job, arguments )", "html": "<emu-clause id=\"sec-enqueuejob\" aoid=\"EnqueueJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enqueuejob\">#sec-enqueuejob</span> EnqueueJob ( <var>queueName</var>, <var>job</var>, <var>arguments</var> )</h1>\n      <p>The EnqueueJob abstract operation requires three arguments: <var>queueName</var>, <var>job</var>, and <var>arguments</var>. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>queueName</var>) is String and its value is the name of a <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> recognized by this implementation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>job</var> is the name of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>arguments</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that has the same number of elements as the number of parameters required by <var>job</var>.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>callerScriptOrModule</var> be <var>callerContext</var>'s ScriptOrModule.</li><li>Let <var>pending</var> be PendingJob { [[Job]]: <var>job</var>, [[Arguments]]: <var>arguments</var>, [[Realm]]: <var>callerRealm</var>, [[ScriptOrModule]]: <var>callerScriptOrModule</var>, [[HostDefined]]: <emu-val>undefined</emu-val> }.</li><li>Perform any implementation or host environment defined processing of <var>pending</var>. This may include modifying the [[HostDefined]] field or any other field of <var>pending</var>.</li><li>Add <var>pending</var> at the back of the <emu-xref href=\"#job-queue\"><a href=\"#job-queue\">Job Queue</a></emu-xref> named by <var>queueName</var>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by a <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in  <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              \n              </td>\n              <td>\n                A PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              \n              </td>\n              <td>\n                <emu-const>Fulfill</emu-const> | <emu-const>Reject</emu-const>\n              \n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-val>undefined</emu-val> to allow for behaviour specific to the settlement type.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-val>undefined</emu-val>, a function that depends on the value of [[Type]] will be used instead.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-error-handling-and-language-extensions": {"num": "16", "title": "#sec-error-handling-and-language-extensions Error Handling and Language Extensions", "html": "<emu-clause id=\"sec-error-handling-and-language-extensions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</span> Error Handling and Language Extensions</h1>\n  <p>An implementation must report most errors at the time the relevant ECMAScript language construct is evaluated. An  <dfn id=\"early-error\">early error</dfn> is an error that can be detected and reported prior to the evaluation of any construct in the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> containing the error. The presence of an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> prevents the evaluation of the construct. An implementation must report early errors in a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as part of parsing that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> in <emu-xref aoid=\"ParseScript\"><a href=\"#sec-parse-script\">ParseScript</a></emu-xref>. Early errors in a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> are reported at the point when the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> would be evaluated and the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is never initialized. Early errors in  <b>eval</b> code are reported at the time <code>eval</code> is called and prevent evaluation of the  <b>eval</b> code. All errors that are not early errors are runtime errors.</p>\n  <p>An implementation must report as an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> any occurrence of a condition that is listed in a &#8220;Static Semantics: Early Errors&#8221; subclause of this specification.</p>\n  <p>An implementation shall not treat other kinds of errors as early errors even if the compiler can prove that a construct cannot execute without error under any circumstances. An implementation may issue an early warning in such a case, but it should not report the error until the relevant construct is actually executed.</p>\n  <p>An implementation shall report all errors as specified, except for the following:</p>\n  <ul>\n    <li>\n      Except as restricted in  <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may extend <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> syntax, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> syntax, and regular expression pattern or flag syntax. To permit this, all operations (such as calling <code>eval</code>, using a regular expression literal, or using the <code>Function</code> or <code>RegExp</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) that are allowed to throw <emu-val>SyntaxError</emu-val> are permitted to exhibit implementation-defined behaviour instead of throwing <emu-val>SyntaxError</emu-val> when they encounter an implementation-defined extension to the script syntax or regular expression pattern or flag syntax.\n    \n    </li>\n    <li>\n      Except as restricted in  <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may provide additional types, values, objects, properties, and functions beyond those described in this specification. This may cause constructs (such as looking up a variable in the global scope) to have implementation-defined behaviour instead of throwing an error (such as <emu-val>ReferenceError</emu-val>).\n    \n    </li>\n  </ul>\n\n  <div id=\"excluded-sec-host-report-errors\"><h1><span class=\"secnum\">16.1</span>#sec-host-report-errors HostReportErrors ( errorList )</h1>...</div><div id=\"excluded-sec-forbidden-extensions\"><h1><span class=\"secnum\">16.2</span>#sec-forbidden-extensions Forbidden Extensions</h1>...</div></emu-clause>\n\n"}, "sec-promise-resolve-functions": {"num": "25.6.1.3.2", "title": "#sec-promise-resolve-functions Promise Resolve Functions", "html": "<emu-clause id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve-functions\">#sec-promise-resolve-functions</span> Promise Resolve Functions</h1>\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.</p>\n          <p>When a promise resolve function is called with argument <var>resolution</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> has a [[Promise]] internal slot whose value is an Object.</li><li>Let <var>promise</var> be <var>F</var>.[[Promise]].</li><li>Let <var>alreadyResolved</var> be <var>F</var>.[[AlreadyResolved]].</li><li>If <var>alreadyResolved</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyResolved</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>, <var>promise</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>selfResolutionError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>selfResolutionError</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>resolution</var>) is not Object, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>then</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>resolution</var>, <emu-val>\"then\"</emu-val>).</li><li>If <var>then</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>then</var>.[[Value]]).</li></ol></li><li>Let <var>thenAction</var> be <var>then</var>.[[Value]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>thenAction</var>) is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"PromiseJobs\"</emu-val>, <emu-xref aoid=\"PromiseResolveThenableJob\"><a href=\"#sec-promiseresolvethenablejob\">PromiseResolveThenableJob</a></emu-xref>, &#171; <var>promise</var>, <var>resolution</var>, <var>thenAction</var> &#187;).</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a promise resolve function is 1.</p>\n        </emu-clause>\n      "}, "sec-promiseresolvethenablejob": {"num": "25.6.2.2", "title": "#sec-promiseresolvethenablejob PromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-promiseresolvethenablejob\" aoid=\"PromiseResolveThenableJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promiseresolvethenablejob\">#sec-promiseresolvethenablejob</span> PromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The job PromiseResolveThenableJob with parameters <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-module-semantics": {"num": "15.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">15.2.1.2</span>#sec-module-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">15.2.1.3</span>#sec-module-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">15.2.1.4</span>#sec-module-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportedbindings\"><h1><span class=\"secnum\">15.2.1.5</span>#sec-module-semantics-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportednames\"><h1><span class=\"secnum\">15.2.1.6</span>#sec-module-semantics-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportentries\"><h1><span class=\"secnum\">15.2.1.7</span>#sec-module-semantics-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-importentries\"><h1><span class=\"secnum\">15.2.1.8</span>#sec-module-semantics-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">15.2.1.9</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-modulerequests\"><h1><span class=\"secnum\">15.2.1.10</span>#sec-module-semantics-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">15.2.1.11</span>#sec-module-semantics-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">15.2.1.12</span>#sec-module-semantics-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">15.2.1.13</span>#sec-module-semantics-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">15.2.1.14</span>#sec-module-semantics-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">15.2.1.15</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">15.2.1.16</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">15.2.1.17</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">15.2.1.18</span>#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">15.2.1.19</span>#sec-hostimportmoduledynamically Runtime Semantics: HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">15.2.1.20</span>#sec-finishdynamicimport Runtime Semantics: FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">15.2.1.21</span>#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )</h1>...</div><div id=\"excluded-sec-toplevelmoduleevaluationjob\"><h1><span class=\"secnum\">15.2.1.22</span>#sec-toplevelmoduleevaluationjob Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )</h1>...</div><div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.1.23</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. (If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter.)</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is present, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resultCapability</var> is a PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onFulfilled</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onRejected</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Fulfill</emu-const>, [[Handler]]: <var>onFulfilled</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Reject</emu-const>, [[Handler]]: <var>onRejected</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <emu-const>fulfilled</emu-const>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"PromiseJobs\"</emu-val>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>fulfillReaction</var>, <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <emu-val>\"handle\"</emu-val>).</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<emu-val>\"PromiseJobs\"</emu-val>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>rejectReaction</var>, <var>reason</var> &#187;).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-host-report-errors": {"num": "16.1", "title": "#sec-host-report-errors HostReportErrors ( errorList )", "html": "<emu-clause id=\"sec-host-report-errors\" aoid=\"HostReportErrors\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-host-report-errors\">#sec-host-report-errors</span> HostReportErrors ( <var>errorList</var> )</h1>\n\n    <p>HostReportErrors is an implementation-defined abstract operation that allows host environments to report parsing errors, early errors, and runtime errors.</p>\n\n    <p>An implementation of HostReportErrors must complete normally in all cases. The default implementation of HostReportErrors is to unconditionally return an empty normal completion.</p>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p><var>errorList</var> will be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. If the errors are parsing errors or early errors, these will always be <emu-val>SyntaxError</emu-val> objects. Runtime errors, however, can be any ECMAScript value.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-toplevelmoduleevaluationjob": {"num": "15.2.1.22", "title": "#sec-toplevelmoduleevaluationjob Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )", "html": "<emu-clause id=\"sec-toplevelmoduleevaluationjob\" aoid=\"TopLevelModuleEvaluationJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toplevelmoduleevaluationjob\">#sec-toplevelmoduleevaluationjob</span> Runtime Semantics: TopLevelModuleEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )</h1>\n        <p>A TopLevelModuleEvaluationJob with parameters <var>sourceText</var> and <var>hostDefined</var> is a job that parses, validates, and evaluates <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>.</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>m</var> be <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>(<var>sourceText</var>, <var>realm</var>, <var>hostDefined</var>).</li><li>If <var>m</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, then<ol><li>Perform <emu-xref aoid=\"HostReportErrors\"><a href=\"#sec-host-report-errors\">HostReportErrors</a></emu-xref>(<var>m</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Perform ? <var>m</var>.Link().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: All dependencies of <var>m</var> have been transitively resolved and <var>m</var> is ready for evaluation.</li><li>Return ? <var>m</var>.Evaluate().\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An implementation may parse a <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, analyse it for Early Error conditions, and link it prior to the execution of the TopLevelModuleEvaluationJob for that <var>sourceText</var>. An implementation may also resolve, pre-parse and pre-analyse, and pre-link module dependencies of <var>sourceText</var>. However, the reporting of any errors detected by these actions must be deferred until the TopLevelModuleEvaluationJob is actually executed.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-scriptevaluationjob": {"num": "15.1.12", "title": "#sec-scriptevaluationjob Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )", "html": "<emu-clause id=\"sec-scriptevaluationjob\" aoid=\"ScriptEvaluationJob\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scriptevaluationjob\">#sec-scriptevaluationjob</span> Runtime Semantics: ScriptEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )</h1>\n      <p>The job ScriptEvaluationJob with parameters <var>sourceText</var> and <var>hostDefined</var> parses, validates, and evaluates <var>sourceText</var> as a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>s</var> be <emu-xref aoid=\"ParseScript\"><a href=\"#sec-parse-script\">ParseScript</a></emu-xref>(<var>sourceText</var>, <var>realm</var>, <var>hostDefined</var>).</li><li>If <var>s</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, then<ol><li>Perform <emu-xref aoid=\"HostReportErrors\"><a href=\"#sec-host-report-errors\">HostReportErrors</a></emu-xref>(<var>s</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"ScriptEvaluation\"><a href=\"#sec-runtime-semantics-scriptevaluation\">ScriptEvaluation</a></emu-xref>(<var>s</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-lexical-environments\"><h1><span class=\"secnum\">8.1</span>#sec-lexical-environments Lexical Environments</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs-and-job-queues\"><h1><span class=\"secnum\">8.4</span>#sec-jobs-and-job-queues Jobs and Job Queues</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-runjobs\"><h1><span class=\"secnum\">8.6</span>#sec-runjobs RunJobs ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.7</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.8</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.9</span>#sec-forward-progress Forward Progress</h1>...</div></emu-clause>\n\n"}}, "figData": {"table-2": "Table 3", "table-5": "Table 6", "table-25": "Table 26", "table-26": "Table 27", "table-agent-record": "Table 28", "table-58": "Table 79"}}, "to": {"secList": ["sec-promise-jobs", "sec-agents", "sec-scripts", "sec-triggerpromisereactions", "sec-globaldeclarationinstantiation", "sec-promisereaction-records", "sec-error-handling-and-language-extensions", "sec-promise-resolve-functions", "sec-module-semantics", "sec-performpromisethen", "sec-executable-code-and-execution-contexts"], "secData": {"sec-promise-jobs": {"num": "25.6.2", "title": "#sec-promise-jobs Promise Jobs", "html": "<emu-clause id=\"sec-promise-jobs\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-jobs\">#sec-promise-jobs</span> Promise Jobs</h1>\n\n      <div id=\"excluded-sec-newpromisereactionjob\"><h1><span class=\"secnum\">25.6.2.1</span>#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )</h1>...</div><div id=\"excluded-sec-newpromiseresolvethenablejob\"><h1><span class=\"secnum\">25.6.2.2</span>#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )</h1>...</div></emu-clause>\n\n    "}, "sec-agents": {"num": "8.6", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An  <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an  <dfn id=\"agent-record\">Agent Record</dfn>, and an  <dfn id=\"executing-thread\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the  <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the  <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is implementation-dependent and should be the alternative that is most efficient for the implementation.  Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free.  Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size  <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size  <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses.  See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.6.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.6.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-scripts": {"num": "15.1", "title": "#sec-scripts Scripts", "html": "<emu-clause id=\"sec-scripts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts\">#sec-scripts</span> Scripts</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"Script\" id=\"prod-Script\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"08c8df8e\"><emu-nt optional=\"\"><a href=\"#prod-ScriptBody\">ScriptBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ScriptBody\" id=\"prod-ScriptBody\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"98de0f78\"><emu-nt params=\"~Yield, ~Await, ~Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[~Yield, ~Await, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n\n    <div id=\"excluded-sec-scripts-static-semantics-early-errors\"><h1><span class=\"secnum\">15.1.1</span>#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-isstrict\"><h1><span class=\"secnum\">15.1.2</span>#sec-static-semantics-isstrict Static Semantics: IsStrict</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">15.1.3</span>#sec-scripts-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">15.1.4</span>#sec-scripts-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">15.1.5</span>#sec-scripts-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-scripts-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">15.1.6</span>#sec-scripts-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-script-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.1.7</span>#sec-script-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-script-records\"><h1><span class=\"secnum\">15.1.8</span>#sec-script-records Script Records</h1>...</div><div id=\"excluded-sec-parse-script\"><h1><span class=\"secnum\">15.1.9</span>#sec-parse-script ParseScript ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-runtime-semantics-scriptevaluation\"><h1><span class=\"secnum\">15.1.10</span>#sec-runtime-semantics-scriptevaluation ScriptEvaluation ( scriptRecord )</h1>...</div><div id=\"excluded-sec-globaldeclarationinstantiation\"><h1><span class=\"secnum\">15.1.11</span>#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )</h1>...</div></emu-clause>\n\n  "}, "sec-triggerpromisereactions": {"num": "25.6.1.8", "title": "#sec-triggerpromisereactions TriggerPromiseReactions ( reactions, argument )", "html": "<emu-clause id=\"sec-triggerpromisereactions\" aoid=\"TriggerPromiseReactions\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-triggerpromisereactions\">#sec-triggerpromisereactions</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</h1>\n        <p>The abstract operation TriggerPromiseReactions takes a collection of PromiseReactionRecords and enqueues a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> for each record. Each such <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> processes the [[Type]] and [[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a function, calls it passing the given argument. If the [[Handler]] is <emu-val>undefined</emu-val>, the behaviour is determined by the [[Type]].</p>\n        <emu-alg><ol><li>For each <var>reaction</var> in <var>reactions</var>, in original insertion order, do<ol><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>reaction</var>, <var>argument</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-globaldeclarationinstantiation": {"num": "15.1.11", "title": "#sec-globaldeclarationinstantiation Runtime Semantics: GlobalDeclarationInstantiation ( script, env )", "html": "<emu-clause id=\"sec-globaldeclarationinstantiation\" aoid=\"GlobalDeclarationInstantiation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-globaldeclarationinstantiation\">#sec-globaldeclarationinstantiation</span> Runtime Semantics: GlobalDeclarationInstantiation ( <var>script</var>, <var>env</var> )</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>When an <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href=\"#global-environment\"><a href=\"#global-environment\">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>\n      </div></emu-note>\n      <p>GlobalDeclarationInstantiation is performed as follows using arguments <var>script</var> and <var>env</var>. <var>script</var> is the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> for which the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is being established. <var>env</var> is the global lexical environment in which bindings are to be created.</p>\n      <!--\n        WARNING: If you add, remove, rename, or repurpose any variable names\n                 within this algorithm, you may need to update\n                 #sec-web-compat-globaldeclarationinstantiation accordingly.\n      -->\n      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>envRec</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>envRec</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order, do<ol><li>If <var>d</var> is neither a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> nor a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> nor a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>d</var> is either a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>NOTE: If there are multiple function declarations for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>, or a <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is a <emu-xref href=\"#proxy-exotic-object\"><a href=\"#proxy-exotic-object\">Proxy exotic object</a></emu-xref> it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href=\"#sec-web-compat-globaldeclarationinstantiation\"><a href=\"#sec-web-compat-globaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-web-compat-globaldeclarationinstantiation\">#sec-web-compat-globaldeclarationinstantiation</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var>, do<ol><li>NOTE: Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var>, do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be InstantiateFunctionObject of <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>envRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order, do<ol><li>Perform ? <var>envRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Early errors specified in  <emu-xref href=\"#sec-scripts-static-semantics-early-errors\"><a href=\"#sec-scripts-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</a></emu-xref> prevent name conflicts between function/var declarations and let/const/class declarations as well as redeclaration of let/const/class bindings for declaration contained within a single <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> are detected as runtime errors during GlobalDeclarationInstantiation. If any such errors are detected, no bindings are instantiated for the script. However, if the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is not evaluated.</p>\n        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by the <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">abstract closure</a></emu-xref> returned by <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in  <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              \n              </td>\n              <td>\n                A PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              \n              </td>\n              <td>\n                <emu-const>Fulfill</emu-const> | <emu-const>Reject</emu-const>\n              \n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-val>undefined</emu-val> to allow for behaviour specific to the settlement type.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-val>undefined</emu-val>, a function that depends on the value of [[Type]] will be used instead.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-error-handling-and-language-extensions": {"num": "16", "title": "#sec-error-handling-and-language-extensions Error Handling and Language Extensions", "html": "<emu-clause id=\"sec-error-handling-and-language-extensions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</span> Error Handling and Language Extensions</h1>\n  <p>An implementation must report most errors at the time the relevant ECMAScript language construct is evaluated. An  <dfn id=\"early-error\">early error</dfn> is an error that can be detected and reported prior to the evaluation of any construct in the <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> containing the error. The presence of an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> prevents the evaluation of the construct. An implementation must report early errors in a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> as part of parsing that <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> in <emu-xref aoid=\"ParseScript\"><a href=\"#sec-parse-script\">ParseScript</a></emu-xref>. Early errors in a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> are reported at the point when the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> would be evaluated and the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is never initialized. Early errors in  <b>eval</b> code are reported at the time <code>eval</code> is called and prevent evaluation of the  <b>eval</b> code. All errors that are not early errors are runtime errors.</p>\n  <p>An implementation must report as an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> any occurrence of a condition that is listed in a &#8220;Static Semantics: Early Errors&#8221; subclause of this specification.</p>\n  <p>An implementation shall not treat other kinds of errors as early errors even if the compiler can prove that a construct cannot execute without error under any circumstances. An implementation may issue an early warning in such a case, but it should not report the error until the relevant construct is actually executed.</p>\n  <p>An implementation shall report all errors as specified, except for the following:</p>\n  <ul>\n    <li>\n      Except as restricted in  <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may extend <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> syntax, <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> syntax, and regular expression pattern or flag syntax. To permit this, all operations (such as calling <code>eval</code>, using a regular expression literal, or using the <code>Function</code> or <code>RegExp</code> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>) that are allowed to throw <emu-val>SyntaxError</emu-val> are permitted to exhibit implementation-defined behaviour instead of throwing <emu-val>SyntaxError</emu-val> when they encounter an implementation-defined extension to the script syntax or regular expression pattern or flag syntax.\n    \n    </li>\n    <li>\n      Except as restricted in  <emu-xref href=\"#sec-forbidden-extensions\"><a href=\"#sec-forbidden-extensions\" class=\"excluded-xref\" excluded-id=\"sec-forbidden-extensions\">#sec-forbidden-extensions</a></emu-xref>, an implementation may provide additional types, values, objects, properties, and functions beyond those described in this specification. This may cause constructs (such as looking up a variable in the global scope) to have implementation-defined behaviour instead of throwing an error (such as <emu-val>ReferenceError</emu-val>).\n    \n    </li>\n  </ul>\n\n  <!-- es6num=\"16.1\" -->\n  <div id=\"excluded-sec-forbidden-extensions\"><h1><span class=\"secnum\">16.1</span>#sec-forbidden-extensions Forbidden Extensions</h1>...</div></emu-clause>\n\n"}, "sec-promise-resolve-functions": {"num": "25.6.1.3.2", "title": "#sec-promise-resolve-functions Promise Resolve Functions", "html": "<emu-clause id=\"sec-promise-resolve-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve-functions\">#sec-promise-resolve-functions</span> Promise Resolve Functions</h1>\n          <p>A promise resolve function is an anonymous built-in function that has [[Promise]] and [[AlreadyResolved]] internal slots.</p>\n          <p>When a promise resolve function is called with argument <var>resolution</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> has a [[Promise]] internal slot whose value is an Object.</li><li>Let <var>promise</var> be <var>F</var>.[[Promise]].</li><li>Let <var>alreadyResolved</var> be <var>F</var>.[[AlreadyResolved]].</li><li>If <var>alreadyResolved</var>.[[Value]] is <emu-val>true</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>alreadyResolved</var>.[[Value]] to <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>resolution</var>, <var>promise</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>selfResolutionError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>selfResolutionError</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>resolution</var>) is not Object, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>then</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>resolution</var>, <emu-val>\"then\"</emu-val>).</li><li>If <var>then</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Return <emu-xref aoid=\"RejectPromise\"><a href=\"#sec-rejectpromise\">RejectPromise</a></emu-xref>(<var>promise</var>, <var>then</var>.[[Value]]).</li></ol></li><li>Let <var>thenAction</var> be <var>then</var>.[[Value]].</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>thenAction</var>) is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid=\"FulfillPromise\"><a href=\"#sec-fulfillpromise\">FulfillPromise</a></emu-xref>(<var>promise</var>, <var>resolution</var>).</li></ol></li><li>Let <var>job</var> be <emu-xref aoid=\"NewPromiseResolveThenableJob\"><a href=\"#sec-newpromiseresolvethenablejob\">NewPromiseResolveThenableJob</a></emu-xref>(<var>promise</var>, <var>resolution</var>, <var>thenAction</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>job</var>.[[Job]], <var>job</var>.[[Realm]]).</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a promise resolve function is 1.</p>\n        </emu-clause>\n      "}, "sec-module-semantics": {"num": "15.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">15.2.1.2</span>#sec-module-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">15.2.1.3</span>#sec-module-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">15.2.1.4</span>#sec-module-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportedbindings\"><h1><span class=\"secnum\">15.2.1.5</span>#sec-module-semantics-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportednames\"><h1><span class=\"secnum\">15.2.1.6</span>#sec-module-semantics-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportentries\"><h1><span class=\"secnum\">15.2.1.7</span>#sec-module-semantics-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-importentries\"><h1><span class=\"secnum\">15.2.1.8</span>#sec-module-semantics-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">15.2.1.9</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-modulerequests\"><h1><span class=\"secnum\">15.2.1.10</span>#sec-module-semantics-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-lexicallydeclarednames\"><h1><span class=\"secnum\">15.2.1.11</span>#sec-module-semantics-static-semantics-lexicallydeclarednames Static Semantics: LexicallyDeclaredNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-lexicallyscopeddeclarations\"><h1><span class=\"secnum\">15.2.1.12</span>#sec-module-semantics-static-semantics-lexicallyscopeddeclarations Static Semantics: LexicallyScopedDeclarations</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">15.2.1.13</span>#sec-module-semantics-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">15.2.1.14</span>#sec-module-semantics-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">15.2.1.15</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">15.2.1.16</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">15.2.1.17</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">15.2.1.18</span>#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">15.2.1.19</span>#sec-hostimportmoduledynamically Runtime Semantics: HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">15.2.1.20</span>#sec-finishdynamicimport Runtime Semantics: FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">15.2.1.21</span>#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )</h1>...</div><!-- es6num=\"15.2.1.20\" -->\n      <div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.1.22</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. (If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter.)</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is present, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resultCapability</var> is a PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onFulfilled</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onRejected</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Fulfill</emu-const>, [[Handler]]: <var>onFulfilled</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Reject</emu-const>, [[Handler]]: <var>onRejected</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <emu-const>fulfilled</emu-const>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Let <var>fulfillJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>fulfillReaction</var>, <var>value</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>fulfillJob</var>.[[Job]], <var>fulfillJob</var>.[[Realm]]).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <emu-val>\"handle\"</emu-val>).</li><li>Let <var>rejectJob</var> be <emu-xref aoid=\"NewPromiseReactionJob\"><a href=\"#sec-newpromisereactionjob\">NewPromiseReactionJob</a></emu-xref>(<var>rejectReaction</var>, <var>reason</var>).</li><li>Perform <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref>(<var>rejectJob</var>.[[Job]], <var>rejectJob</var>.[[Realm]]).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-executable-code-and-execution-contexts": {"num": "8", "title": "#sec-executable-code-and-execution-contexts Executable Code and Execution Contexts", "html": "<emu-clause id=\"sec-executable-code-and-execution-contexts\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-executable-code-and-execution-contexts\">#sec-executable-code-and-execution-contexts</span> Executable Code and Execution Contexts</h1>\n\n  <div id=\"excluded-sec-lexical-environments\"><h1><span class=\"secnum\">8.1</span>#sec-lexical-environments Lexical Environments</h1>...</div><div id=\"excluded-sec-code-realms\"><h1><span class=\"secnum\">8.2</span>#sec-code-realms Realms</h1>...</div><div id=\"excluded-sec-execution-contexts\"><h1><span class=\"secnum\">8.3</span>#sec-execution-contexts Execution Contexts</h1>...</div><div id=\"excluded-sec-jobs\"><h1><span class=\"secnum\">8.4</span>#sec-jobs Jobs and Host Operations to Enqueue Jobs</h1>...</div><div id=\"excluded-sec-initializehostdefinedrealm\"><h1><span class=\"secnum\">8.5</span>#sec-initializehostdefinedrealm InitializeHostDefinedRealm ( )</h1>...</div><div id=\"excluded-sec-agents\"><h1><span class=\"secnum\">8.6</span>#sec-agents Agents</h1>...</div><div id=\"excluded-sec-agent-clusters\"><h1><span class=\"secnum\">8.7</span>#sec-agent-clusters Agent Clusters</h1>...</div><div id=\"excluded-sec-forward-progress\"><h1><span class=\"secnum\">8.8</span>#sec-forward-progress Forward Progress</h1>...</div></emu-clause>\n\n"}}, "figData": {"table-5": "Table 6", "table-agent-record": "Table 26", "table-58": "Table 77"}}}