{"from": {"secList": ["sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "sec-for-in-and-for-of-statements", "sec-static-semantics", "sec-initializers-in-forin-statement-heads", "sec-for-in-and-for-of-statements-static-semantics-isdestructuring", "sec-static-semantics-static-semantics-isdestructuring"], "secData": {"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "14.7.5.6", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be IsDestructuring of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform BindingInstantiation for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be DestructuringAssignmentEvaluation of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"ForDeclarationBindingInitialization\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginitialization\">ForDeclarationBindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-static-semantics": {"num": "13.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-contains\"><h1><span class=\"secnum\">13.3.1.3</span>#sec-static-semantics-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isdestructuring\"><h1><span class=\"secnum\">13.3.1.4</span>#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">13.3.1.5</span>#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-for-in-and-for-of-statements-static-semantics-isdestructuring": {"num": "14.7.5.2", "title": "#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</span> Static Semantics: IsDestructuring</h1>\n        <emu-see-also-para op=\"IsDestructuring\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d32d6fbc\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return IsDestructuring of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"983adfc8\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-static-semantics-static-semantics-isdestructuring": {"num": "13.3.1.4", "title": "#sec-static-semantics-static-semantics-isdestructuring Static Semantics: IsDestructuring", "html": "<emu-clause id=\"sec-static-semantics-static-semantics-isdestructuring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-isdestructuring\">#sec-static-semantics-static-semantics-isdestructuring</span> Static Semantics: IsDestructuring</h1>\n        <emu-see-also-para op=\"IsDestructuring\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ef72f7a\"><emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> is either an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "sec-for-in-and-for-of-statements", "sec-static-semantics", "sec-initializers-in-forin-statement-heads", "sec-static-semantics-isdestructuring"], "secData": {"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "14.7.5.6", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform BindingInstantiation for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be DestructuringAssignmentEvaluation of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"BindingInitialization\"><a href=\"#sec-runtime-semantics-bindinginitialization\">BindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"ForDeclarationBindingInitialization\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginitialization\">ForDeclarationBindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-static-semantics": {"num": "13.3.1", "title": "#sec-static-semantics Static Semantics", "html": "<emu-clause id=\"sec-static-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics\">#sec-static-semantics</span> Static Semantics</h1>\n\n      <div id=\"excluded-sec-left-hand-side-expressions-static-semantics-early-errors\"><h1><span class=\"secnum\">13.3.1.1</span>#sec-left-hand-side-expressions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-left-hand-side-expressions-static-semantics-coveredcallexpression\"><h1><span class=\"secnum\">13.3.1.2</span>#sec-left-hand-side-expressions-static-semantics-coveredcallexpression Static Semantics: CoveredCallExpression</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-contains\"><h1><span class=\"secnum\">13.3.1.3</span>#sec-static-semantics-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-static-semantics-isidentifierref\"><h1><span class=\"secnum\">13.3.1.4</span>#sec-static-semantics-static-semantics-isidentifierref Static Semantics: IsIdentifierRef</h1>...</div></emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-isdestructuring\"><a href=\"#sec-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-static-semantics-isdestructuring": {"num": "14.7.5.2", "title": "#sec-static-semantics-isdestructuring Static Semantics: IsDestructuring", "html": "<emu-clause id=\"sec-static-semantics-isdestructuring\" oldids=\"sec-static-semantics-static-semantics-isdestructuring,sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" type=\"sdo\" aoid=\"IsDestructuring\"><span id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"></span><span id=\"sec-static-semantics-static-semantics-isdestructuring\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-isdestructuring\">#sec-static-semantics-isdestructuring</span> Static Semantics: IsDestructuring</h1>\n        <emu-grammar><emu-production name=\"MemberExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ef72f7a\"><emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> is either an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6bbe1777\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"149e7618\">\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"c81ee20f\"><emu-nt><a href=\"#prod-MetaProperty\">MetaProperty</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e753fad7\">\n        <emu-t>new</emu-t>\n        <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8bc7444f\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d32d6fbc\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-xref aoid=\"IsDestructuring\"><a href=\"#sec-static-semantics-isdestructuring\">IsDestructuring</a></emu-xref> of <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ForBinding\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"983adfc8\"><emu-nt><a href=\"#prod-BindingPattern\">BindingPattern</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}