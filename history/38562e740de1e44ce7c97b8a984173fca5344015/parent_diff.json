{"from": {"secList": ["sec-numeric-types-bigint-lessThan", "sec-numeric-types-bigint-bitwiseNOT", "sec-numeric-types-bigint-add", "sec-numeric-types-bigint-subtract", "sec-numeric-types-bigint-equal", "sec-numeric-types-bigint-multiply"], "secData": {"sec-numeric-types-bigint-lessThan": {"num": "6.1.6.2.12", "title": "#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-lessThan\" aoid=\"BigInt::lessThan\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-lessThan\">#sec-numeric-types-bigint-lessThan</span> BigInt::lessThan ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::lessThan takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns <emu-val>true</emu-val> if <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>) and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-bitwiseNOT": {"num": "6.1.6.2.2", "title": "#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-bitwiseNOT\" aoid=\"BigInt::bitwiseNOT\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-bitwiseNOT\">#sec-numeric-types-bigint-bitwiseNOT</span> BigInt::bitwiseNOT ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::bitwiseNOT takes argument <var>x</var> (a BigInt). It returns the one's complement of <var>x</var>; that is, -<var>x</var> - <emu-val>1</emu-val><sub>&#8484;</sub>.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-add": {"num": "6.1.6.2.7", "title": "#sec-numeric-types-bigint-add BigInt::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-add\" aoid=\"BigInt::add\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-add\">#sec-numeric-types-bigint-add</span> BigInt::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::add takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the sum of <var>x</var> and <var>y</var>.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-subtract": {"num": "6.1.6.2.8", "title": "#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-subtract\" aoid=\"BigInt::subtract\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-subtract\">#sec-numeric-types-bigint-subtract</span> BigInt::subtract ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::subtract takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the difference <var>x</var> minus <var>y</var>.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-equal": {"num": "6.1.6.2.13", "title": "#sec-numeric-types-bigint-equal BigInt::equal ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-equal\" aoid=\"BigInt::equal\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-equal\">#sec-numeric-types-bigint-equal</span> BigInt::equal ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::equal takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns <emu-val>true</emu-val> if <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>) and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-multiply": {"num": "6.1.6.2.4", "title": "#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-multiply\" aoid=\"BigInt::multiply\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-multiply\">#sec-numeric-types-bigint-multiply</span> BigInt::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::multiply takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the result of multiplying <var>x</var> and <var>y</var>.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Even if the result has a much larger bit width than the input, the exact mathematical answer is given.</div></emu-note>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-numeric-types-bigint-lessThan", "sec-numeric-types-bigint-bitwiseNOT", "sec-numeric-types-bigint-add", "sec-numeric-types-bigint-subtract", "sec-numeric-types-bigint-equal", "sec-numeric-types-bigint-multiply"], "secData": {"sec-numeric-types-bigint-lessThan": {"num": "6.1.6.2.12", "title": "#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-lessThan\" aoid=\"BigInt::lessThan\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-lessThan\">#sec-numeric-types-bigint-lessThan</span> BigInt::lessThan ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::lessThan takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-bitwiseNOT": {"num": "6.1.6.2.2", "title": "#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-bitwiseNOT\" aoid=\"BigInt::bitwiseNOT\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-bitwiseNOT\">#sec-numeric-types-bigint-bitwiseNOT</span> BigInt::bitwiseNOT ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::bitwiseNOT takes argument <var>x</var> (a BigInt). It returns the one's complement of <var>x</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return -<var>x</var> - <emu-val>1</emu-val><sub>&#8484;</sub>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-add": {"num": "6.1.6.2.7", "title": "#sec-numeric-types-bigint-add BigInt::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-add\" aoid=\"BigInt::add\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-add\">#sec-numeric-types-bigint-add</span> BigInt::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::add takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return the BigInt value that represents the sum of <var>x</var> and <var>y</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-subtract": {"num": "6.1.6.2.8", "title": "#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-subtract\" aoid=\"BigInt::subtract\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-subtract\">#sec-numeric-types-bigint-subtract</span> BigInt::subtract ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::subtract takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return the BigInt value that represents the difference <var>x</var> minus <var>y</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-equal": {"num": "6.1.6.2.13", "title": "#sec-numeric-types-bigint-equal BigInt::equal ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-equal\" aoid=\"BigInt::equal\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-equal\">#sec-numeric-types-bigint-equal</span> BigInt::equal ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::equal takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) = <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-multiply": {"num": "6.1.6.2.4", "title": "#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-multiply\" aoid=\"BigInt::multiply\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-multiply\">#sec-numeric-types-bigint-multiply</span> BigInt::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::multiply takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return the BigInt value that represents the product of <var>x</var> and <var>y</var>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Even if the result has a much larger bit width than the input, the exact mathematical answer is given.</div></emu-note>\n        </emu-clause>\n\n        "}}, "figData": {}}}