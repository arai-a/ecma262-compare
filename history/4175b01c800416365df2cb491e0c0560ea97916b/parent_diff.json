{"from": {"secList": ["sec-module-environment-records", "sec-properties-of-the-nativeerror-constructors", "sec-proxy-revocation-functions", "sec-bigint.asintn", "sec-createimportbinding", "sec-isnonnegativeinteger", "sec-nativeerror", "sec-canonicalnumericindexstring", "sec-isinteger", "sec-nativeerror.prototype", "sec-tointeger", "sec-promise-resolve"], "secData": {"sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in M's module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-properties-of-the-nativeerror-constructors": {"num": "19.5.6.2", "title": "#sec-properties-of-the-nativeerror-constructors Properties of the NativeError Constructors", "html": "<emu-clause id=\"sec-properties-of-the-nativeerror-constructors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</span> Properties of the <var>NativeError</var> Constructors</h1>\n        <p>Each <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n        <ul>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-error-constructor\"><a href=\"#sec-error-constructor\">%Error%</a></emu-xref>.</li>\n          <li>has a <emu-val>\"name\"</emu-val> property whose value is the String value <emu-val>\"NativeError\"</emu-val>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-nativeerror.prototype\"><h1><span class=\"secnum\">19.5.6.2.1</span>#sec-nativeerror.prototype NativeError.prototype</h1>...</div></emu-clause>\n\n      "}, "sec-proxy-revocation-functions": {"num": "26.2.2.1.1", "title": "#sec-proxy-revocation-functions Proxy Revocation Functions", "html": "<emu-clause id=\"sec-proxy-revocation-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-revocation-functions\">#sec-proxy-revocation-functions</span> Proxy Revocation Functions</h1>\n          <p>A Proxy revocation function is an anonymous function that has the ability to invalidate a specific Proxy object.</p>\n          <p>Each Proxy revocation function has a [[RevocableProxy]] internal slot.</p>\n          <p>When a Proxy revocation function is called, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>p</var> be <var>F</var>.[[RevocableProxy]].</li><li>If <var>p</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[RevocableProxy]] to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Proxy object.</li><li>Set <var>p</var>.[[ProxyTarget]] to <emu-val>null</emu-val>.</li><li>Set <var>p</var>.[[ProxyHandler]] to <emu-val>null</emu-val>.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a Proxy revocation function is 0.</p>\n        </emu-clause>\n      "}, "sec-bigint.asintn": {"num": "20.2.2.1", "title": "#sec-bigint.asintn BigInt.asIntN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asintn\">#sec-bigint.asintn</span> BigInt.asIntN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asIntN</code> is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Set <var>bits</var> to ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Set <var>bigint</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Let <var>mod</var> be the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.</li><li>If <var>mod</var> &#8805; 2<sup><var>bits</var> - 1</sup>, return <var>mod</var> - 2<sup><var>bits</var></sup>; otherwise, return <var>mod</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in M's module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-isnonnegativeinteger": {"num": "7.2.7", "title": "#sec-isnonnegativeinteger IsNonNegativeInteger ( argument )", "html": "<emu-clause id=\"sec-isnonnegativeinteger\" aoid=\"IsNonNegativeInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isnonnegativeinteger\">#sec-isnonnegativeinteger</span> IsNonNegativeInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation IsNonNegativeInteger determines if <var>argument</var> is non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> numeric value.</p>\n      <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>argument</var>) is <emu-val>true</emu-val> and <var>argument</var> &#8805; 0, return <emu-val>true</emu-val>.</li><li>Otherwise, return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-nativeerror": {"num": "19.5.6.1.1", "title": "#sec-nativeerror NativeError ( message )", "html": "<emu-clause id=\"sec-nativeerror\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror\">#sec-nativeerror</span> NativeError ( <var>message</var> )</h1>\n          <p>When a <var>NativeError</var> function is called with argument <var>message</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%<var>NativeError</var>.prototype%\"</code>, &#171; [[ErrorData]] &#187;).</li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>message</var>).</li><li>Let <var>msgDesc</var> be the PropertyDescriptor { [[Value]]: <var>msg</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"message\"</emu-val>, <var>msgDesc</var>).</li></ol></li><li>Return <var>O</var>.\n          </li></ol></emu-alg>\n          <p>The actual value of the string passed in step 2 is either <emu-val>\"%EvalError.prototype%\"</emu-val>, <emu-val>\"%RangeError.prototype%\"</emu-val>, <emu-val>\"%ReferenceError.prototype%\"</emu-val>, <emu-val>\"%SyntaxError.prototype%\"</emu-val>, <emu-val>\"%TypeError.prototype%\"</emu-val>, or <emu-val>\"%URIError.prototype%\"</emu-val> corresponding to which <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is being defined.</p>\n        </emu-clause>\n      "}, "sec-canonicalnumericindexstring": {"num": "7.1.21", "title": "#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )", "html": "<emu-clause id=\"sec-canonicalnumericindexstring\" aoid=\"CanonicalNumericIndexString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</span> CanonicalNumericIndexString ( <var>argument</var> )</h1>\n      <p>The abstract operation CanonicalNumericIndexString returns <var>argument</var> converted to a numeric value if it is a String representation of a Number that would be produced by <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, or the string <emu-val>\"-0\"</emu-val>. Otherwise, it returns <emu-val>undefined</emu-val>. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is String.</li><li>If <var>argument</var> is <emu-val>\"-0\"</emu-val>, return <emu-val>-0</emu-val>.</li><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>argument</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n      <p>A  <em>canonical numeric string</em> is any String value for which the CanonicalNumericIndexString abstract operation does not return <emu-val>undefined</emu-val>.</p>\n    </emu-clause>\n\n    "}, "sec-isinteger": {"num": "7.2.6", "title": "#sec-isinteger IsInteger ( argument )", "html": "<emu-clause id=\"sec-isinteger\" aoid=\"IsInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isinteger\">#sec-isinteger</span> IsInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation IsInteger determines if <var>argument</var> is a finite <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> numeric value.</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is not Number, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> is <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>argument</var>)) &#8800; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>argument</var>), return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-nativeerror.prototype": {"num": "19.5.6.2.1", "title": "#sec-nativeerror.prototype NativeError.prototype", "html": "<emu-clause id=\"sec-nativeerror.prototype\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror.prototype\">#sec-nativeerror.prototype</span> NativeError.prototype</h1>\n          <p>The initial value of  <code><var>NativeError</var>.prototype</code> is a <var>NativeError</var> prototype object (<emu-xref href=\"#sec-properties-of-the-nativeerror-prototype-objects\"><a href=\"#sec-properties-of-the-nativeerror-prototype-objects\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-prototype-objects\">#sec-properties-of-the-nativeerror-prototype-objects</a></emu-xref>). Each <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has a distinct prototype object.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-tointeger": {"num": "7.1.5", "title": "#sec-tointeger ToInteger ( argument )", "html": "<emu-clause id=\"sec-tointeger\" aoid=\"ToInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointeger\">#sec-tointeger</span> ToInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInteger converts <var>argument</var> to an integral numeric value. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>number</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <var>number</var>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>number</var>)).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-promise-resolve": {"num": "25.6.4.6.1", "title": "#sec-promise-resolve PromiseResolve ( C, x )", "html": "<emu-clause id=\"sec-promise-resolve\" aoid=\"PromiseResolve\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve\">#sec-promise-resolve</span> PromiseResolve ( <var>C</var>, <var>x</var> )</h1>\n          <p>The abstract operation PromiseResolve, given a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> and a value, returns a new promise resolved with that value.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is Object.</li><li>If <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>x</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>xConstructor</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>x</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>xConstructor</var>, <var>C</var>) is <emu-val>true</emu-val>, return <var>x</var>.</li></ol></li><li>Let <var>promiseCapability</var> be ?&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<var>C</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>x</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-15": "Table 16", "table-20": "Table 21"}}, "to": {"secList": ["sec-module-environment-records", "sec-properties-of-the-nativeerror-constructors", "sec-proxy-revocation-functions", "sec-bigint.asintn", "sec-createimportbinding", "sec-isnonnegativeinteger", "sec-nativeerror", "sec-canonicalnumericindexstring", "sec-isinteger", "sec-nativeerror.prototype", "sec-tointeger", "sec-promise-resolve"], "secData": {"sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in  <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              \n              </td>\n              <td>\n                Create an immutable indirect binding in a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-properties-of-the-nativeerror-constructors": {"num": "19.5.6.2", "title": "#sec-properties-of-the-nativeerror-constructors Properties of the NativeError Constructors", "html": "<emu-clause id=\"sec-properties-of-the-nativeerror-constructors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</span> Properties of the <var>NativeError</var> Constructors</h1>\n        <p>Each <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n        <ul>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-error-constructor\"><a href=\"#sec-error-constructor\">%Error%</a></emu-xref>.</li>\n          <li>has a <emu-val>\"name\"</emu-val> property whose value is the String value  <emu-val>\"<var>NativeError</var>\"</emu-val>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-nativeerror.prototype\"><h1><span class=\"secnum\">19.5.6.2.1</span>#sec-nativeerror.prototype NativeError.prototype</h1>...</div></emu-clause>\n\n      "}, "sec-proxy-revocation-functions": {"num": "26.2.2.1.1", "title": "#sec-proxy-revocation-functions Proxy Revocation Functions", "html": "<emu-clause id=\"sec-proxy-revocation-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-proxy-revocation-functions\">#sec-proxy-revocation-functions</span> Proxy Revocation Functions</h1>\n          <p>A Proxy revocation function is an anonymous built-in function that has the ability to invalidate a specific Proxy object.</p>\n          <p>Each Proxy revocation function has a [[RevocableProxy]] internal slot.</p>\n          <p>When a Proxy revocation function is called, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>p</var> be <var>F</var>.[[RevocableProxy]].</li><li>If <var>p</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>.[[RevocableProxy]] to <emu-val>null</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Proxy object.</li><li>Set <var>p</var>.[[ProxyTarget]] to <emu-val>null</emu-val>.</li><li>Set <var>p</var>.[[ProxyHandler]] to <emu-val>null</emu-val>.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n          <p>The <emu-val>\"length\"</emu-val> property of a Proxy revocation function is 0.</p>\n        </emu-clause>\n      "}, "sec-bigint.asintn": {"num": "20.2.2.1", "title": "#sec-bigint.asintn BigInt.asIntN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asintn\">#sec-bigint.asintn</span> BigInt.asIntN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asIntN</code> function is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Set <var>bits</var> to ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Set <var>bigint</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Let <var>mod</var> be the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.</li><li>If <var>mod</var> &#8805; 2<sup><var>bits</var> - 1</sup>, return <var>mod</var> - 2<sup><var>bits</var></sup>; otherwise, return <var>mod</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createimportbinding": {"num": "8.1.1.5.5", "title": "#sec-createimportbinding CreateImportBinding ( N, M, N2 )", "html": "<emu-clause id=\"sec-createimportbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createimportbinding\">#sec-createimportbinding</span> CreateImportBinding ( <var>N</var>, <var>M</var>, <var>N2</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in <var>M</var>'s module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-isnonnegativeinteger": {"num": "7.2.7", "title": "#sec-isnonnegativeinteger IsNonNegativeInteger ( argument )", "html": "<emu-clause id=\"sec-isnonnegativeinteger\" aoid=\"IsNonNegativeInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isnonnegativeinteger\">#sec-isnonnegativeinteger</span> IsNonNegativeInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation IsNonNegativeInteger determines if <var>argument</var> is non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</p>\n      <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>argument</var>) is <emu-val>true</emu-val> and <var>argument</var> &#8805; 0, return <emu-val>true</emu-val>.</li><li>Otherwise, return <emu-val>false</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-nativeerror": {"num": "19.5.6.1.1", "title": "#sec-nativeerror NativeError ( message )", "html": "<emu-clause id=\"sec-nativeerror\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror\">#sec-nativeerror</span> <var>NativeError</var> ( <var>message</var> )</h1>\n          <p>When a <var>NativeError</var> function is called with argument <var>message</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%<var>NativeError</var>.prototype%\"</code>, &#171; [[ErrorData]] &#187;).</li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>message</var>).</li><li>Let <var>msgDesc</var> be the PropertyDescriptor { [[Value]]: <var>msg</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <emu-val>\"message\"</emu-val>, <var>msgDesc</var>).</li></ol></li><li>Return <var>O</var>.\n          </li></ol></emu-alg>\n          <p>The actual value of the string passed in step 2 is either <emu-val>\"%EvalError.prototype%\"</emu-val>, <emu-val>\"%RangeError.prototype%\"</emu-val>, <emu-val>\"%ReferenceError.prototype%\"</emu-val>, <emu-val>\"%SyntaxError.prototype%\"</emu-val>, <emu-val>\"%TypeError.prototype%\"</emu-val>, or <emu-val>\"%URIError.prototype%\"</emu-val> corresponding to which <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is being defined.</p>\n        </emu-clause>\n      "}, "sec-canonicalnumericindexstring": {"num": "7.1.21", "title": "#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )", "html": "<emu-clause id=\"sec-canonicalnumericindexstring\" aoid=\"CanonicalNumericIndexString\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-canonicalnumericindexstring\">#sec-canonicalnumericindexstring</span> CanonicalNumericIndexString ( <var>argument</var> )</h1>\n      <p>The abstract operation CanonicalNumericIndexString returns <var>argument</var> converted to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> if it is a String representation of a Number that would be produced by <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>, or the string <emu-val>\"-0\"</emu-val>. Otherwise, it returns <emu-val>undefined</emu-val>. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is String.</li><li>If <var>argument</var> is <emu-val>\"-0\"</emu-val>, return <emu-val>-0</emu-val>.</li><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>argument</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n      <p>A  <em>canonical numeric string</em> is any String value for which the CanonicalNumericIndexString abstract operation does not return <emu-val>undefined</emu-val>.</p>\n    </emu-clause>\n\n    "}, "sec-isinteger": {"num": "7.2.6", "title": "#sec-isinteger IsInteger ( argument )", "html": "<emu-clause id=\"sec-isinteger\" aoid=\"IsInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isinteger\">#sec-isinteger</span> IsInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation IsInteger determines if <var>argument</var> is a finite <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is not Number, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> is <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>argument</var>)) &#8800; <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>argument</var>), return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-nativeerror.prototype": {"num": "19.5.6.2.1", "title": "#sec-nativeerror.prototype NativeError.prototype", "html": "<emu-clause id=\"sec-nativeerror.prototype\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror.prototype\">#sec-nativeerror.prototype</span> <var>NativeError</var>.prototype</h1>\n          <p>The initial value of  <code><var>NativeError</var>.prototype</code> is a <var>NativeError</var> prototype object (<emu-xref href=\"#sec-properties-of-the-nativeerror-prototype-objects\"><a href=\"#sec-properties-of-the-nativeerror-prototype-objects\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-prototype-objects\">#sec-properties-of-the-nativeerror-prototype-objects</a></emu-xref>). Each <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has a distinct prototype object.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-tointeger": {"num": "7.1.5", "title": "#sec-tointeger ToInteger ( argument )", "html": "<emu-clause id=\"sec-tointeger\" aoid=\"ToInteger\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointeger\">#sec-tointeger</span> ToInteger ( <var>argument</var> )</h1>\n      <p>The abstract operation ToInteger converts <var>argument</var> to an integral <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>number</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <var>number</var>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>number</var>)).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-promise-resolve": {"num": "25.6.4.6.1", "title": "#sec-promise-resolve PromiseResolve ( C, x )", "html": "<emu-clause id=\"sec-promise-resolve\" aoid=\"PromiseResolve\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-resolve\">#sec-promise-resolve</span> PromiseResolve ( <var>C</var>, <var>x</var> )</h1>\n          <p>The abstract operation PromiseResolve, given a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <var>C</var> and a value <var>x</var>, returns a new promise resolved with <var>x</var>.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is Object.</li><li>If <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>x</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>xConstructor</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>x</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>xConstructor</var>, <var>C</var>) is <emu-val>true</emu-val>, return <var>x</var>.</li></ol></li><li>Let <var>promiseCapability</var> be ?&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<var>C</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>x</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-15": "Table 16", "table-20": "Table 21"}}}