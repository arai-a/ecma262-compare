{"from": {"secList": ["sec-string.prototype.indexof", "sec-string.prototype.includes", "sec-stringindexof"], "secData": {"sec-string.prototype.indexof": {"num": "21.1.3.8", "title": "#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.indexof\">#sec-string.prototype.indexof</span> String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a <emu-not-ref>substring</emu-not-ref> of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, then the smallest such index is returned; otherwise, -1 is returned. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <p>The <code>indexOf</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>Return !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>S</var>, <var>searchStr</var>, <var>start</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.includes": {"num": "21.1.3.7", "title": "#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.includes\">#sec-string.prototype.includes</span> String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The <code>includes</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>searchLen</var> be the length of <var>searchStr</var>.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>S</var>, <var>searchStr</var>, <var>start</var>).</li><li>If <var>index</var> is not -1, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a <emu-not-ref>substring</emu-not-ref> of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, return <emu-val>true</emu-val>; otherwise, returns <emu-val>false</emu-val>. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> Runtime Semantics: StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>fromIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>fromIndex</var> &#8804; <var>k</var> &#8804; <var>len</var> - <var>searchLen</var> and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>string</var> is the same as the code unit at index <var>j</var> within <var>searchValue</var>, let <var>pos</var> be the smallest (closest to <emu-val>-&#8734;</emu-val>) such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Otherwise, let <var>pos</var> be -1.</li><li>Return <var>pos</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is empty and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. An empty <var>searchValue</var> is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-string.prototype.indexof", "sec-string.prototype.includes", "sec-stringindexof"], "secData": {"sec-string.prototype.indexof": {"num": "21.1.3.8", "title": "#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.indexof\">#sec-string.prototype.indexof</span> String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a <emu-not-ref>substring</emu-not-ref> of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, then the smallest such index is returned; otherwise, -1 is returned. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <p>The <code>indexOf</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Return !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>S</var>, <var>searchStr</var>, <var>start</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>indexOf</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.includes": {"num": "21.1.3.7", "title": "#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )", "html": "<emu-clause id=\"sec-string.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.includes\">#sec-string.prototype.includes</span> String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )</h1>\n        <p>The <code>includes</code> method takes two arguments, <var>searchString</var> and <var>position</var>, and performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>searchString</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>searchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchString</var>).</li><li>Let <var>pos</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>position</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>position</var> is <emu-val>undefined</emu-val>, then <var>pos</var> is 0.</li><li>Let <var>len</var> be the length of <var>S</var>.</li><li>Let <var>start</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>pos</var>, 0), <var>len</var>).</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"StringIndexOf\"><a href=\"#sec-stringindexof\">StringIndexOf</a></emu-xref>(<var>S</var>, <var>searchStr</var>, <var>start</var>).</li><li>If <var>index</var> is not -1, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchString</var> appears as a <emu-not-ref>substring</emu-not-ref> of the result of converting this object to a String, at one or more indices that are greater than or equal to <var>position</var>, return <emu-val>true</emu-val>; otherwise, returns <emu-val>false</emu-val>. If <var>position</var> is <emu-val>undefined</emu-val>, 0 is assumed, so as to search all of the String.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Throwing an exception if the first argument is a RegExp is specified in order to allow future editions to define extensions that allow such argument values.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>The <code>includes</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-stringindexof": {"num": "6.1.4.1", "title": "#sec-stringindexof Runtime Semantics: StringIndexOf ( string, searchValue, fromIndex )", "html": "<emu-clause id=\"sec-stringindexof\" aoid=\"StringIndexOf\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringindexof\">#sec-stringindexof</span> Runtime Semantics: StringIndexOf ( <var>string</var>, <var>searchValue</var>, <var>fromIndex</var> )</h1>\n        <p>The abstract operation StringIndexOf takes arguments <var>string</var> (a String), <var>searchValue</var> (a String), and <var>fromIndex</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>string</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>searchValue</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>fromIndex</var>) is <emu-val>true</emu-val>.</li><li>Let <var>len</var> be the length of <var>string</var>.</li><li>If <var>searchValue</var> is the empty String and <var>fromIndex</var> &#8804; <var>len</var>, return <var>fromIndex</var>.</li><li>Let <var>searchLen</var> be the length of <var>searchValue</var>.</li><li>If there exists any <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>k</var> such that <var>fromIndex</var> &#8804; <var>k</var> &#8804; <var>len</var> - <var>searchLen</var> and for all nonnegative integers <var>j</var> less than <var>searchLen</var>, the code unit at index <var>k</var> + <var>j</var> within <var>string</var> is the same as the code unit at index <var>j</var> within <var>searchValue</var>, let <var>pos</var> be the smallest (closest to <emu-val>-&#8734;</emu-val>) such <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>. Otherwise, let <var>pos</var> be -1.</li><li>Return <var>pos</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>If <var>searchValue</var> is the empty String and <var>fromIndex</var> is less than or equal to the length of <var>string</var>, this algorithm returns <var>fromIndex</var>. The empty String is effectively found at every position within a string, including after the last code unit.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>This algorithm always returns -1 if <var>fromIndex</var> &gt; the length of <var>string</var>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}}