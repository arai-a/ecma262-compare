{"from": {"secList": ["sec-enumerate-object-properties", "sec-for-in-iterator-objects", "sec-expanded-years"], "secData": {"sec-enumerate-object-properties": {"num": "13.7.5.15", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>When the abstract operation EnumerateObjectProperties is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.\n        </li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a Proxy <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, Module Namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Hosts are not required to implement the algorithm in  <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behavior will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">EnumerateObjectProperties</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Reflect</span>.ownKeys(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.add(key);\n      <span class=\"hljs-keyword\">if</span> (desc.enumerable) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-built_in\">Reflect</span>.getPrototypeOf(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> EnumerateObjectProperties(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.has(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behavior for those cases, and agreed in all others.\n        \n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-for-in-iterator-objects": {"num": "13.7.5.16", "title": "#sec-for-in-iterator-objects For-In Iterator Objects", "html": "<emu-clause id=\"sec-for-in-iterator-objects\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-iterator-objects\">#sec-for-in-iterator-objects</span> For-In Iterator Objects</h1>\n        <p>A For-In Iterator is an object that represents a specific iteration over some specific object. For-In Iterator objects are never directly accessible to ECMAScript code; they exist soley to illustrate the behavior of <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>.</p>\n\n        <div id=\"excluded-sec-createforiniterator\"><h1><span class=\"secnum\">13.7.5.16.1</span>#sec-createforiniterator CreateForInIterator ( object )</h1>...</div><div id=\"excluded-sec-%foriniteratorprototype%-object\"><h1><span class=\"secnum\">13.7.5.16.2</span>#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-for-in-iterator-instances\"><h1><span class=\"secnum\">13.7.5.16.3</span>#sec-properties-of-for-in-iterator-instances Properties of For-In Iterator Instances</h1>...</div></emu-clause>\n    "}, "sec-expanded-years": {"num": "20.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\">\n          <span id=\"sec-extended-years\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 01 January, 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by  <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behavior or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-time values with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                  <tr>\n                    <td>-271821-04-20T00:00:00Z</td>\n                    <td>271822 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>-000001-01-01T00:00:00Z</td>\n                    <td>2 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000000-01-01T00:00:00Z</td>\n                    <td>1 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000001-01-01T00:00:00Z</td>\n                    <td>1 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+001970-01-01T00:00:00Z</td>\n                    <td>1970 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+002009-12-15T00:00:00Z</td>\n                    <td>2009 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+275760-09-13T00:00:00Z</td>\n                    <td>275760 A.D.</td>\n                  </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}}, "figData": {}}, "to": {"secList": ["sec-enumerate-object-properties", "sec-for-in-iterator-objects", "sec-expanded-years"], "secData": {"sec-enumerate-object-properties": {"num": "13.7.5.15", "title": "#sec-enumerate-object-properties EnumerateObjectProperties ( O )", "html": "<emu-clause id=\"sec-enumerate-object-properties\" aoid=\"EnumerateObjectProperties\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerate-object-properties\">#sec-enumerate-object-properties</span> EnumerateObjectProperties ( <var>O</var> )</h1>\n        <p>When the abstract operation EnumerateObjectProperties is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.\n        </li></ol></emu-alg>\n        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code> method processes object properties to determine whether the property key should be returned as an iterator value. Returned property keys do not include keys that are Symbols. Properties of the target object may be deleted during enumeration. A property that is deleted before it is processed by the iterator's <code>next</code> method is ignored. If new properties are added to the target object during enumeration, the newly added properties are not guaranteed to be processed in the active enumeration. A <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>\n        <p>Enumerating the properties of the target object includes enumerating properties of its prototype, and the prototype of the prototype, and so on, recursively; but a property of a prototype is not processed if it has the same name as a property that has already been processed by the iterator's <code>next</code> method. The values of [[Enumerable]] attributes are not considered when determining if a property of a prototype object has already been processed. The enumerable property names of prototype objects must be obtained by invoking EnumerateObjectProperties passing the prototype object as the argument. EnumerateObjectProperties must obtain the own property keys of the target object by calling its [[OwnPropertyKeys]] internal method. Property attributes of the target object must be obtained by calling its [[GetOwnProperty]] internal method.</p>\n        <p>In addition, if neither <var>O</var> nor any object in its prototype chain is a Proxy <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, <emu-xref href=\"#integer-indexed-exotic-object\"><a href=\"#integer-indexed-exotic-object\">Integer-Indexed exotic object</a></emu-xref>, Module Namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, or implementation provided <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>, then the iterator must behave as would the iterator given by <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref>(<var>O</var>) until one of the following occurs:</p>\n        <ul>\n          <li>the value of the [[Prototype]] internal slot of <var>O</var> or an object in its prototype chain changes,</li>\n          <li>a property is removed from <var>O</var> or an object in its prototype chain,</li>\n          <li>a property is added to an object in <var>O</var>'s prototype chain, or</li>\n          <li>the value of the [[Enumerable]] attribute of a property of <var>O</var> or an object in its prototype chain changes.</li>\n        </ul>\n\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>Hosts are not required to implement the algorithm in  <emu-xref href=\"#sec-%foriniteratorprototype%.next\"><a href=\"#sec-%foriniteratorprototype%.next\" class=\"excluded-xref\" excluded-id=\"sec-%foriniteratorprototype%.next\">#sec-%foriniteratorprototype%.next</a></emu-xref> directly. They may choose any implementation whose behaviour will not deviate from that algorithm unless one of the constraints in the previous paragraph is violated.</p>\n          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">EnumerateObjectProperties</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Reflect</span>.ownKeys(obj)) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"symbol\"</span>) <span class=\"hljs-keyword\">continue</span>;\n    <span class=\"hljs-keyword\">const</span> desc = <span class=\"hljs-built_in\">Reflect</span>.getOwnPropertyDescriptor(obj, key);\n    <span class=\"hljs-keyword\">if</span> (desc) {\n      visited.add(key);\n      <span class=\"hljs-keyword\">if</span> (desc.enumerable) <span class=\"hljs-keyword\">yield</span> key;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-built_in\">Reflect</span>.getPrototypeOf(obj);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> protoKey <span class=\"hljs-keyword\">of</span> EnumerateObjectProperties(proto)) {\n    <span class=\"hljs-keyword\">if</span> (!visited.has(protoKey)) <span class=\"hljs-keyword\">yield</span> protoKey;\n  }\n}</code></pre>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          The list of exotic objects for which implementations are not required to match <emu-xref aoid=\"CreateForInIterator\"><a href=\"#sec-createforiniterator\">CreateForInIterator</a></emu-xref> was chosen because implementations historically differed in behaviour for those cases, and agreed in all others.\n        \n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-for-in-iterator-objects": {"num": "13.7.5.16", "title": "#sec-for-in-iterator-objects For-In Iterator Objects", "html": "<emu-clause id=\"sec-for-in-iterator-objects\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-iterator-objects\">#sec-for-in-iterator-objects</span> For-In Iterator Objects</h1>\n        <p>A For-In Iterator is an object that represents a specific iteration over some specific object. For-In Iterator objects are never directly accessible to ECMAScript code; they exist solely to illustrate the behaviour of <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>.</p>\n\n        <div id=\"excluded-sec-createforiniterator\"><h1><span class=\"secnum\">13.7.5.16.1</span>#sec-createforiniterator CreateForInIterator ( object )</h1>...</div><div id=\"excluded-sec-%foriniteratorprototype%-object\"><h1><span class=\"secnum\">13.7.5.16.2</span>#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-for-in-iterator-instances\"><h1><span class=\"secnum\">13.7.5.16.3</span>#sec-properties-of-for-in-iterator-instances Properties of For-In Iterator Instances</h1>...</div></emu-clause>\n    "}, "sec-expanded-years": {"num": "20.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\">\n          <span id=\"sec-extended-years\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 01 January, 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by  <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behaviour or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-time values with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                  <tr>\n                    <td>-271821-04-20T00:00:00Z</td>\n                    <td>271822 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>-000001-01-01T00:00:00Z</td>\n                    <td>2 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000000-01-01T00:00:00Z</td>\n                    <td>1 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000001-01-01T00:00:00Z</td>\n                    <td>1 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+001970-01-01T00:00:00Z</td>\n                    <td>1970 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+002009-12-15T00:00:00Z</td>\n                    <td>2009 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+275760-09-13T00:00:00Z</td>\n                    <td>275760 A.D.</td>\n                  </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}}, "figData": {}}}