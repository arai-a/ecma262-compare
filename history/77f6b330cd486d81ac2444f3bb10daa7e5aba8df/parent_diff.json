{"from": {"secList": ["sec-number.issafeinteger", "sec-string.fromcodepoint", "sec-number.isinteger", "sec-setfunctionlength"], "secData": {"sec-number.issafeinteger": {"num": "20.1.2.5", "title": "#sec-number.issafeinteger Number.isSafeInteger ( number )", "html": "<emu-clause id=\"sec-number.issafeinteger\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.issafeinteger\">#sec-number.issafeinteger</span> Number.isSafeInteger ( <var>number</var> )</h1>\n        <p>When <code>Number.isSafeInteger</code> is called with one argument <var>number</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>number</var>) is not Number, return <emu-val>false</emu-val>.</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>integer</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>number</var>).</li><li>If <var>integer</var> is not equal to <var>number</var>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>integer</var>) &#8804; 2<sup>53</sup> - 1, return <emu-val>true</emu-val>.</li><li>Otherwise, return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codePoints</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>nextCP</var>, !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>nextCP</var>)) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of <var>nextCP</var> to the end of <var>elements</var>.</li><li>Increase <var>nextIndex</var> by 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <code>\"length\"</code> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-number.isinteger": {"num": "20.1.2.3", "title": "#sec-number.isinteger Number.isInteger ( number )", "html": "<emu-clause id=\"sec-number.isinteger\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.isinteger\">#sec-number.isinteger</span> Number.isInteger ( <var>number</var> )</h1>\n        <p>When <code>Number.isInteger</code> is called with one argument <var>number</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>number</var>) is not Number, return <emu-val>false</emu-val>.</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+&#8734;</emu-val>, or <emu-val>-&#8734;</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>integer</var> be !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>number</var>).</li><li>If <var>integer</var> is not equal to <var>number</var>, return <emu-val>false</emu-val>.</li><li>Otherwise, return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setfunctionlength": {"num": "9.2.14", "title": "#sec-setfunctionlength SetFunctionLength ( F, length )", "html": "<emu-clause id=\"sec-setfunctionlength\" aoid=\"SetFunctionLength\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setfunctionlength\">#sec-setfunctionlength</span> SetFunctionLength ( <var>F</var>, <var>length</var> )</h1>\n      <p>The abstract operation SetFunctionLength requires a Function argument <var>F</var> and a Number argument <var>length</var>. This operation adds a <code>\"length\"</code> property to <var>F</var> by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <code>\"length\"</code> own property.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>length</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>length</var> &#8805; 0 and !&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>length</var>) is equal to <var>length</var>.</li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"length\"</code>, PropertyDescriptor { [[Value]]: <var>length</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-number.issafeinteger", "sec-string.fromcodepoint", "sec-number.isinteger", "sec-setfunctionlength"], "secData": {"sec-number.issafeinteger": {"num": "20.1.2.5", "title": "#sec-number.issafeinteger Number.isSafeInteger ( number )", "html": "<emu-clause id=\"sec-number.issafeinteger\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.issafeinteger\">#sec-number.issafeinteger</span> Number.isSafeInteger ( <var>number</var> )</h1>\n        <p>When <code>Number.isSafeInteger</code> is called with one argument <var>number</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>number</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>number</var>) &#8804; 2<sup>53</sup> - 1, return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.fromcodepoint": {"num": "21.1.2.2", "title": "#sec-string.fromcodepoint String.fromCodePoint ( ...codePoints )", "html": "<emu-clause id=\"sec-string.fromcodepoint\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.fromcodepoint\">#sec-string.fromcodepoint</span> String.fromCodePoint ( ...<var>codePoints</var> )</h1>\n        <p>The <code>String.fromCodePoint</code> function may be called with any number of arguments which form the rest parameter <var>codePoints</var>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>codePoints</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the arguments passed to this function.</li><li>Let <var>length</var> be the number of elements in <var>codePoints</var>.</li><li>Let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>nextIndex</var> be 0.</li><li>Repeat, while <var>nextIndex</var> &lt; <var>length</var><ol><li>Let <var>next</var> be <var>codePoints</var>[<var>nextIndex</var>].</li><li>Let <var>nextCP</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>next</var>).</li><li>If !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>nextCP</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>nextCP</var> &lt; 0 or <var>nextCP</var> &gt; 0x10FFFF, throw a <emu-val>RangeError</emu-val> exception.</li><li>Append the elements of the <emu-xref aoid=\"UTF16Encoding\"><a href=\"#sec-utf16encoding\">UTF16Encoding</a></emu-xref> of <var>nextCP</var> to the end of <var>elements</var>.</li><li>Increase <var>nextIndex</var> by 1.</li></ol></li><li>Return the String value whose code units are, in order, the elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>elements</var>. If <var>length</var> is 0, the empty string is returned.\n        </li></ol></emu-alg>\n        <p>The <code>\"length\"</code> property of the <code>fromCodePoint</code> function is 1.</p>\n      </emu-clause>\n\n      "}, "sec-number.isinteger": {"num": "20.1.2.3", "title": "#sec-number.isinteger Number.isInteger ( number )", "html": "<emu-clause id=\"sec-number.isinteger\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.isinteger\">#sec-number.isinteger</span> Number.isInteger ( <var>number</var> )</h1>\n        <p>When <code>Number.isInteger</code> is called with one argument <var>number</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Return !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>number</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setfunctionlength": {"num": "9.2.14", "title": "#sec-setfunctionlength SetFunctionLength ( F, length )", "html": "<emu-clause id=\"sec-setfunctionlength\" aoid=\"SetFunctionLength\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setfunctionlength\">#sec-setfunctionlength</span> SetFunctionLength ( <var>F</var>, <var>length</var> )</h1>\n      <p>The abstract operation SetFunctionLength requires a Function argument <var>F</var> and a Number argument <var>length</var>. This operation adds a <code>\"length\"</code> property to <var>F</var> by performing the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an extensible object that does not have a <code>\"length\"</code> own property.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>length</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>length</var> &#8805; 0 and !&#160;<emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>length</var>).</li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"length\"</code>, PropertyDescriptor { [[Value]]: <var>length</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}