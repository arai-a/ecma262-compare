{"from": {"secList": ["sec-runtime-semantics-arrayaccumulation"], "secData": {"sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <var>len</var>, <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var>+1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Let <var>nextIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-arrayaccumulation"], "secData": {"sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <code>\"length\"</code>, <var>len</var>, <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.\n        </li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.\n        </li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}