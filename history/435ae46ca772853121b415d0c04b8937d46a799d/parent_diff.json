{"from": {"secList": ["sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization"], "secData": {"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization": {"num": "14.2.14", "title": "#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-see-also-para op=\"IteratorBindingInitialization\"></emu-see-also-para>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return IteratorBindingInitialization of <var>formals</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization"], "secData": {"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization": {"num": "14.2.14", "title": "#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization\">#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization</span> Runtime Semantics: IteratorBindingInitialization</h1>\n      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>\n      <emu-see-also-para op=\"IteratorBindingInitialization\"></emu-see-also-para>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"50e97238\"><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ArrowParameters\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>formals</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return IteratorBindingInitialization of <var>formals</var> with arguments <var>iteratorRecord</var> and <var>environment</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}