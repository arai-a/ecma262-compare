{"from": {"secList": ["sec-setdefaultglobalbindings", "sec-invariants-of-the-essential-internal-methods"], "secData": {"sec-setdefaultglobalbindings": {"num": "8.2.4", "title": "#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )", "html": "<emu-clause id=\"sec-setdefaultglobalbindings\" aoid=\"SetDefaultGlobalBindings\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setdefaultglobalbindings\">#sec-setdefaultglobalbindings</span> SetDefaultGlobalBindings ( <var>realmRec</var> )</h1>\n      <p>The abstract operation SetDefaultGlobalBindings takes argument <var>realmRec</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>global</var> be <var>realmRec</var>.[[GlobalObject]].</li><li>For each property of the Global Object specified in clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>, do<ol><li>Let <var>name</var> be the String value of the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>.</li><li>Let <var>desc</var> be the fully populated <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> descriptor for the property, containing the specified attributes for the property. For properties listed in <emu-xref href=\"#sec-function-properties-of-the-global-object\"><a href=\"#sec-function-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-function-properties-of-the-global-object\">#sec-function-properties-of-the-global-object</a></emu-xref>, <emu-xref href=\"#sec-constructor-properties-of-the-global-object\"><a href=\"#sec-constructor-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-constructor-properties-of-the-global-object\">#sec-constructor-properties-of-the-global-object</a></emu-xref>, or <emu-xref href=\"#sec-other-properties-of-the-global-object\"><a href=\"#sec-other-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-other-properties-of-the-global-object\">#sec-other-properties-of-the-global-object</a></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from <var>realmRec</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>global</var>, <var>name</var>, <var>desc</var>).</li></ol></li><li>Return <var>global</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The <em>target</em> of an internal method is the object upon which the internal method is called.\n          </li>\n          <li>\n            A target is <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          </li>\n          <li>\n            A <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          </li>\n          <li>\n            All references to <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> with either:</p>\n        <ul>\n          <li>[[Type]] = <emu-const>normal</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = <emu-const>throw</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An internal method must not return a completion with [[Type]] = <emu-const>continue</emu-const>, <emu-const>break</emu-const>, or <emu-const>return</emu-const>.</p>\n        </div></emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a <emu-xref href=\"#sec-completepropertydescriptor\"><a href=\"#sec-completepropertydescriptor\">complete property descriptor</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other essential internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          </li>\n          <li>\n            If the object is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the object that are observable using [[GetOwnProperty]].\n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-setdefaultglobalbindings", "sec-invariants-of-the-essential-internal-methods"], "secData": {"sec-setdefaultglobalbindings": {"num": "8.2.4", "title": "#sec-setdefaultglobalbindings SetDefaultGlobalBindings ( realmRec )", "html": "<emu-clause id=\"sec-setdefaultglobalbindings\" aoid=\"SetDefaultGlobalBindings\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setdefaultglobalbindings\">#sec-setdefaultglobalbindings</span> SetDefaultGlobalBindings ( <var>realmRec</var> )</h1>\n      <p>The abstract operation SetDefaultGlobalBindings takes argument <var>realmRec</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>global</var> be <var>realmRec</var>.[[GlobalObject]].</li><li>For each property of the Global Object specified in clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>, do<ol><li>Let <var>name</var> be the String value of the <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>.</li><li>Let <var>desc</var> be the fully populated data <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> for the property, containing the specified attributes for the property. For properties listed in <emu-xref href=\"#sec-function-properties-of-the-global-object\"><a href=\"#sec-function-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-function-properties-of-the-global-object\">#sec-function-properties-of-the-global-object</a></emu-xref>, <emu-xref href=\"#sec-constructor-properties-of-the-global-object\"><a href=\"#sec-constructor-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-constructor-properties-of-the-global-object\">#sec-constructor-properties-of-the-global-object</a></emu-xref>, or <emu-xref href=\"#sec-other-properties-of-the-global-object\"><a href=\"#sec-other-properties-of-the-global-object\" class=\"excluded-xref\" excluded-id=\"sec-other-properties-of-the-global-object\">#sec-other-properties-of-the-global-object</a></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from <var>realmRec</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>global</var>, <var>name</var>, <var>desc</var>).</li></ol></li><li>Return <var>global</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-invariants-of-the-essential-internal-methods": {"num": "6.1.7.3", "title": "#sec-invariants-of-the-essential-internal-methods Invariants of the Essential Internal Methods", "html": "<emu-clause id=\"sec-invariants-of-the-essential-internal-methods\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-invariants-of-the-essential-internal-methods\">#sec-invariants-of-the-essential-internal-methods</span> Invariants of the Essential Internal Methods</h1>\n        <p>The Internal Methods of Objects of an ECMAScript engine must conform to the list of invariants specified below. Ordinary ECMAScript Objects as well as all standard exotic objects in this specification maintain these invariants. ECMAScript Proxy objects maintain these invariants by means of runtime checks on the result of traps invoked on the [[ProxyHandler]] object.</p>\n        <p>Any implementation provided exotic objects must also maintain these invariants for those objects. Violation of these invariants may cause ECMAScript code to have unpredictable behaviour and create security issues. However, violation of these invariants must never compromise the memory safety of an implementation.</p>\n        <p>An implementation must not allow these invariants to be circumvented in any manner such as by providing alternative interfaces that implement the functionality of the essential internal methods without enforcing their invariants.</p>\n        <h2>Definitions:</h2>\n        <ul>\n          <li>\n            The <em>target</em> of an internal method is the object upon which the internal method is called.\n          </li>\n          <li>\n            A target is <em>non-extensible</em> if it has been observed to return <emu-val>false</emu-val> from its [[IsExtensible]] internal method, or <emu-val>true</emu-val> from its [[PreventExtensions]] internal method.\n          </li>\n          <li>\n            A <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.\n          </li>\n          <li>\n            All references to <em><emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> algorithm.\n          </li>\n        </ul>\n        <h2>Return value:</h2>\n        <p>The value returned by any internal method must be a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref> with either:</p>\n        <ul>\n          <li>[[Type]] = <emu-const>normal</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = a value of the \"normal return type\" shown below for that internal method, or</li>\n          <li>[[Type]] = <emu-const>throw</emu-const>, [[Target]] = <emu-const>empty</emu-const>, and [[Value]] = any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li>\n        </ul>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>An internal method must not return a completion with [[Type]] = <emu-const>continue</emu-const>, <emu-const>break</emu-const>, or <emu-const>return</emu-const>.</p>\n        </div></emu-note>\n        <h2>[[GetPrototypeOf]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is either Object or Null.\n          </li>\n          <li>\n            If target is non-extensible, and [[GetPrototypeOf]] returns a value <var>V</var>, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>An object's prototype chain should have finite length (that is, starting from any object, recursively applying the [[GetPrototypeOf]] internal method to its result should eventually lead to the value <emu-val>null</emu-val>). However, this requirement is not enforceable as an object level invariant if the prototype chain includes any exotic objects that do not use the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> definition of [[GetPrototypeOf]]. Such a circular prototype chain may result in infinite loops when accessing object properties.</p>\n        </div></emu-note>\n        <h2>[[SetPrototypeOf]] ( <var>V</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If target is non-extensible, [[SetPrototypeOf]] must return <emu-val>false</emu-val>, unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.\n          </li>\n        </ul>\n        <h2>[[IsExtensible]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[IsExtensible]] returns <emu-val>false</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[PreventExtensions]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If [[PreventExtensions]] returns <emu-val>true</emu-val>, all future calls to [[IsExtensible]] on the target must return <emu-val>false</emu-val> and the target is now considered non-extensible.\n          </li>\n        </ul>\n        <h2>[[GetOwnProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is either <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> or Undefined.\n          </li>\n          <li>\n            If the Type of the return value is <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>, the return value must be a fully populated <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> is described as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, all future calls to [[GetOwnProperty]] ( <var>P</var> ) must return <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> whose [[Value]] is <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var>'s attributes other than [[Writable]] may change over time or if the property might be deleted, then <var>P</var>'s [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the [[Writable]] attribute may change from <emu-val>false</emu-val> to <emu-val>true</emu-val>, then the [[Configurable]] attribute must be <emu-val>true</emu-val>.\n          </li>\n          <li>\n            If the target is non-extensible and <var>P</var> is non-existent, then all future calls to [[GetOwnProperty]] (<var>P</var>) on the target must describe <var>P</var> as non-existent (i.e. [[GetOwnProperty]] (<var>P</var>) must return <emu-val>undefined</emu-val>).\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>As a consequence of the third invariant, if a property is described as a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> and it may return different values over time, then either or both of the [[Writable]] and [[Configurable]] attributes must be <emu-val>true</emu-val> even if no mechanism to change the value is exposed via the other essential internal methods.</p>\n        </div></emu-note>\n        <h2>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            [[DefineOwnProperty]] must return <emu-val>false</emu-val> if <var>P</var> has previously been observed as a non-configurable own property of the target, unless either:\n            <ol>\n              <li>\n                <var>P</var> is a writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>. A non-configurable writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> can be changed into a non-configurable non-writable <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>.\n              </li>\n              <li>\n                All attributes of <var>Desc</var> are the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s attributes.\n              </li>\n            </ol>\n          </li>\n          <li>\n            [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>) must return <emu-val>false</emu-val> if target is non-extensible and <var>P</var> is a non-existent own property. That is, a non-extensible target object cannot be extended with new properties.\n          </li>\n        </ul>\n        <h2>[[HasProperty]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[HasProperty]] must return <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Get]] ( <var>P</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target with value <var>V</var>, then [[Get]] must return the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>V</var>.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Get]] attribute is <emu-val>undefined</emu-val>, the [[Get]] operation must return <emu-val>undefined</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable, non-writable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> of the target, then [[Set]] must return <emu-val>false</emu-val> unless <var>V</var> is the <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref> as <var>P</var>'s [[Value]] attribute.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target whose [[Set]] attribute is <emu-val>undefined</emu-val>, the [[Set]] operation must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[Delete]] ( <var>P</var> )</h2>\n        <ul>\n          <li>\n            The normal return type is Boolean.\n          </li>\n          <li>\n            If <var>P</var> was previously observed as a non-configurable own data or <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> of the target, [[Delete]] must return <emu-val>false</emu-val>.\n          </li>\n        </ul>\n        <h2>[[OwnPropertyKeys]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must not contain any duplicate entries.\n          </li>\n          <li>\n            The Type of each element of the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is either String or Symbol.\n          </li>\n          <li>\n            The returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.\n          </li>\n          <li>\n            If the object is non-extensible, the returned <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> must contain only the keys of all own properties of the object that are observable using [[GetOwnProperty]].\n          </li>\n        </ul>\n        <h2>[[Call]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.\n          </li>\n        </ul>\n        <h2>[[Construct]] ( )</h2>\n        <ul>\n          <li>\n            The normal return type is Object.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}}, "figData": {}}}