{"from": {"secList": ["sec-quantifier", "sec-term"], "secData": {"sec-quantifier": {"num": "22.2.2.7", "title": "#sec-quantifier Quantifier", "html": "<emu-clause id=\"sec-quantifier\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-quantifier\">#sec-quantifier</span> Quantifier</h1>\n        <p>The production <emu-grammar><emu-production name=\"Quantifier\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dlini2nj\"><emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> to obtain the two results: an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or +&#8734;) <var>max</var>.</li><li>Return the three results <var>min</var>, <var>max</var>, and <emu-val>true</emu-val>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Quantifier\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cwtuervy\">\n        <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt>\n        <emu-t>?</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> to obtain the two results: an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or +&#8734;) <var>max</var>.</li><li>Return the three results <var>min</var>, <var>max</var>, and <emu-val>false</emu-val>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sb5ztei-\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 0 and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4dclbrwl\"><emu-t>+</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 1 and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"iy1xym7h\"><emu-t>?</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 0 and 1.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"akk3tt2f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> (see <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>).</li><li>Return the two results <var>i</var> and <var>i</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gulzkvpx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the two results <var>i</var> and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9hgpwdk0\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>j</var> be the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the two results <var>i</var> and <var>j</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-term": {"num": "22.2.2.5", "title": "#sec-term Term", "html": "<emu-clause id=\"sec-term\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-term\">#sec-term</span> Term</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4d3cub6p\"><emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The resulting Matcher is independent of <var>direction</var>.</p>\n        </div></emu-note>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qd3tqxbs\"><emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rk7qpcwj\">\n        <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> to obtain the three results: a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var>, a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or +&#8734;) <var>max</var>, and Boolean <var>greedy</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>min</var> &#8804; <var>max</var>.</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref> prior to or enclosing this <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt>.</li><li>Let <var>parenCount</var> be the number of left-capturing parentheses in <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref> enclosed by <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>min</var>, <var>max</var>, <var>greedy</var>, <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-repeatmatcher-abstract-operation\"><h1><span class=\"secnum\">22.2.2.5.1</span>#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-quantifier", "sec-term"], "secData": {"sec-quantifier": {"num": "22.2.2.7", "title": "#sec-quantifier Quantifier", "html": "<emu-clause id=\"sec-quantifier\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-quantifier\">#sec-quantifier</span> Quantifier</h1>\n        <p>The production <emu-grammar><emu-production name=\"Quantifier\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"dlini2nj\"><emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> to obtain the two results: an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or +&#8734;) <var>max</var>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Min]]: <var>min</var>, [[Max]]: <var>max</var>, [[Greedy]]: <emu-val>true</emu-val> }.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Quantifier\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"cwtuervy\">\n        <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt>\n        <emu-t>?</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> to obtain the two results: an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>min</var> and an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (or +&#8734;) <var>max</var>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Min]]: <var>min</var>, [[Max]]: <var>max</var>, [[Greedy]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"sb5ztei-\"><emu-t>*</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 0 and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4dclbrwl\"><emu-t>+</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 1 and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"iy1xym7h\"><emu-t>?</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the two results 0 and 1.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"akk3tt2f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> (see <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>).</li><li>Return the two results <var>i</var> and <var>i</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"gulzkvpx\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the two results <var>i</var> and +&#8734;.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"QuantifierPrefix\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-QuantifierPrefix\">QuantifierPrefix</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"9hgpwdk0\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>i</var> be the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>j</var> be the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return the two results <var>i</var> and <var>j</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-term": {"num": "22.2.2.5", "title": "#sec-term Term", "html": "<emu-clause id=\"sec-term\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-term\">#sec-term</span> Term</h1>\n        <p>With parameter <var>direction</var>.</p>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"4d3cub6p\"><emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Assertion\">Assertion</a></emu-nt>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The resulting Matcher is independent of <var>direction</var>.</p>\n        </div></emu-note>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"qd3tqxbs\"><emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the Matcher that is the result of evaluating <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> with argument <var>direction</var>.</li></ol></emu-alg>\n        <p>The production <emu-grammar><emu-production name=\"Term\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"rk7qpcwj\">\n        <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>\n        <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Evaluate <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> with argument <var>direction</var> to obtain a Matcher <var>m</var>.</li><li>Evaluate <emu-nt><a href=\"#prod-Quantifier\">Quantifier</a></emu-nt> to obtain a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> <var>q</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>q</var>.[[Min]] &#8804; <var>q</var>.[[Max]].</li><li>Let <var>parenIndex</var> be the number of left-capturing parentheses in the entire regular expression that occur to the left of this <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref> prior to or enclosing this <emu-nt><a href=\"#prod-Term\">Term</a></emu-nt>.</li><li>Let <var>parenCount</var> be the number of left-capturing parentheses in <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>. This is the total number of <emu-grammar><emu-production name=\"Atom\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt> <emu-geq>::</emu-geq> <emu-rhs a=\"waoim9ah\">\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-GroupSpecifier\">GroupSpecifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt>\n        <emu-t>)</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar> <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Nodes</a></emu-xref> enclosed by <emu-nt><a href=\"#prod-Atom\">Atom</a></emu-nt>.</li><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>m</var>, <var>q</var>, <var>parenIndex</var>, and <var>parenCount</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Return !&#160;<emu-xref aoid=\"RepeatMatcher\"><a href=\"#sec-runtime-semantics-repeatmatcher-abstract-operation\">RepeatMatcher</a></emu-xref>(<var>m</var>, <var>q</var>.[[Min]], <var>q</var>.[[Max]], <var>q</var>.[[Greedy]], <var>x</var>, <var>c</var>, <var>parenIndex</var>, <var>parenCount</var>).</li></ol></li></ol></emu-alg>\n\n        <div id=\"excluded-sec-runtime-semantics-repeatmatcher-abstract-operation\"><h1><span class=\"secnum\">22.2.2.5.1</span>#sec-runtime-semantics-repeatmatcher-abstract-operation RepeatMatcher ( m, min, max, greedy, x, c, parenIndex, parenCount )</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}}