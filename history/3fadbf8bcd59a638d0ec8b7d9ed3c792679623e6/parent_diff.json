{"from": {"secList": ["sec-regexp-prototype-matchall", "sec-createregexpstringiterator", "sec-regexp-string-iterator-objects", "sec-%regexpstringiteratorprototype%-object"], "secData": {"sec-regexp-prototype-matchall": {"num": "21.2.5.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"flags\"</emu-val>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <emu-val>\"lastIndex\"</emu-val>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.matchAll]\"</emu-val>.</p>\n\n        <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.5.8.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div></emu-clause>\n\n      "}, "sec-createregexpstringiterator": {"num": "21.2.5.8.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>, &#171; [[IteratingRegExp]], [[IteratedString]], [[Global]], [[Unicode]], [[Done]] &#187;).</li><li>Set <var>iterator</var>.[[IteratingRegExp]] to <var>R</var>.</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>S</var>.</li><li>Set <var>iterator</var>.[[Global]] to <var>global</var>.</li><li>Set <var>iterator</var>.[[Unicode]] to <var>fullUnicode</var>.</li><li>Set <var>iterator</var>.[[Done]] to <emu-val>false</emu-val>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.1", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.1.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.1.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-regexp-prototype-matchall", "sec-createregexpstringiterator", "sec-regexp-string-iterator-objects", "sec-%regexpstringiteratorprototype%-object"], "secData": {"sec-regexp-prototype-matchall": {"num": "21.2.5.8", "title": "#sec-regexp-prototype-matchall RegExp.prototype [ @@matchAll ] ( string )", "html": "<emu-clause id=\"sec-regexp-prototype-matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-prototype-matchall\">#sec-regexp-prototype-matchall</span> RegExp.prototype [ @@matchAll ] ( <var>string</var> )</h1>\n        <p>When the <code>@@matchAll</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>R</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>R</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>R</var>, <emu-xref href=\"#sec-regexp-constructor\"><a href=\"#sec-regexp-constructor\">%RegExp%</a></emu-xref>).</li><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"flags\"</emu-val>)).</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>R</var>, <var>flags</var> &#187;).</li><li>Let <var>lastIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>R</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>matcher</var>, <emu-val>\"lastIndex\"</emu-val>, <var>lastIndex</var>, <emu-val>true</emu-val>).</li><li>If <var>flags</var> contains <emu-val>\"g\"</emu-val>, let <var>global</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>global</var> be <emu-val>false</emu-val>.</li><li>If <var>flags</var> contains <emu-val>\"u\"</emu-val>, let <var>fullUnicode</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>fullUnicode</var> be <emu-val>false</emu-val>.</li><li>Return !&#160;<emu-xref aoid=\"CreateRegExpStringIterator\"><a href=\"#sec-createregexpstringiterator\">CreateRegExpStringIterator</a></emu-xref>(<var>matcher</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var>).</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.matchAll]\"</emu-val>.</p>\n      </emu-clause>\n\n      "}, "sec-createregexpstringiterator": {"num": "21.2.7.1", "title": "#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )", "html": "<emu-clause id=\"sec-createregexpstringiterator\" aoid=\"CreateRegExpStringIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createregexpstringiterator\">#sec-createregexpstringiterator</span> CreateRegExpStringIterator ( <var>R</var>, <var>S</var>, <var>global</var>, <var>fullUnicode</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>S</var>) is String.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>global</var>) is Boolean.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>fullUnicode</var>) is Boolean.</li><li>Let <var>iterator</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%regexpstringiteratorprototype%-object\"><a href=\"#sec-%regexpstringiteratorprototype%-object\">%RegExpStringIteratorPrototype%</a></emu-xref>, &#171; [[IteratingRegExp]], [[IteratedString]], [[Global]], [[Unicode]], [[Done]] &#187;).</li><li>Set <var>iterator</var>.[[IteratingRegExp]] to <var>R</var>.</li><li>Set <var>iterator</var>.[[IteratedString]] to <var>S</var>.</li><li>Set <var>iterator</var>.[[Global]] to <var>global</var>.</li><li>Set <var>iterator</var>.[[Unicode]] to <var>fullUnicode</var>.</li><li>Set <var>iterator</var>.[[Done]] to <emu-val>false</emu-val>.</li><li>Return <var>iterator</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-regexp-string-iterator-objects": {"num": "21.2.7", "title": "#sec-regexp-string-iterator-objects RegExp String Iterator Objects", "html": "<emu-clause id=\"sec-regexp-string-iterator-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp-string-iterator-objects\">#sec-regexp-string-iterator-objects</span> RegExp String Iterator Objects</h1>\n      <p>A RegExp String Iterator is an object, that represents a specific iteration over some specific String instance object, matching against some specific RegExp instance object. There is not a named <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for RegExp String Iterator objects. Instead, RegExp String Iterator objects are created by calling certain methods of RegExp instance objects.</p>\n\n      <div id=\"excluded-sec-createregexpstringiterator\"><h1><span class=\"secnum\">21.2.7.1</span>#sec-createregexpstringiterator CreateRegExpStringIterator ( R, S, global, fullUnicode )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-object\"><h1><span class=\"secnum\">21.2.7.2</span>#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-regexp-string-iterator-instances\"><h1><span class=\"secnum\">21.2.7.3</span>#sec-properties-of-regexp-string-iterator-instances Properties of RegExp String Iterator Instances</h1>...</div></emu-clause>\n  "}, "sec-%regexpstringiteratorprototype%-object": {"num": "21.2.7.2", "title": "#sec-%regexpstringiteratorprototype%-object The %RegExpStringIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-object\">#sec-%regexpstringiteratorprototype%-object</span> The %RegExpStringIteratorPrototype% Object</h1>\n        <p>The <dfn>%RegExpStringIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all RegExp String Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%regexpstringiteratorprototype%.next\"><h1><span class=\"secnum\">21.2.7.2.1</span>#sec-%regexpstringiteratorprototype%.next %RegExpStringIteratorPrototype%.next ( )</h1>...</div><div id=\"excluded-sec-%regexpstringiteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">21.2.7.2.2</span>#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}}