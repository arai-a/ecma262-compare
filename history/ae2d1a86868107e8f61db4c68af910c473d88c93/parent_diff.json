{"from": {"secList": ["sec-abstract-module-records", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-hostresolveimportedmodule"], "secData": {"sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>This operation must be idempotent if it completes normally. Each time it is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "9.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>When the [[Get]] internal method of a module namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> <var>O</var> is called with property key <var>P</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetEnvRec</var> be <var>targetEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetEnvRec</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is idempotent and side-effect free. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each module namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostresolveimportedmodule": {"num": "15.2.1.18", "title": "#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> Runtime Semantics: HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>HostResolveImportedModule is an implementation-defined abstract operation that provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if the resolution is being performed in the context of an  <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression, and there is no active script or module at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser host. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no active script or module at the time the  <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the host pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          \n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          \n          </li>\n          <li>\n            This operation must be idempotent if it completes normally. Each time it is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance.\n          \n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is implementation-defined but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}}, "figData": {"table-3": "Table 4", "table-36": "Table 39", "table-37": "Table 40"}}, "to": {"secList": ["sec-abstract-module-records", "sec-module-namespace-exotic-objects-get-p-receiver", "sec-hostresolveimportedmodule"], "secData": {"sec-abstract-module-records": {"num": "15.2.1.15", "title": "#sec-abstract-module-records Abstract Module Records", "html": "<emu-clause id=\"sec-abstract-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-module-records\">#sec-abstract-module-records</span> Abstract Module Records</h1>\n        <p>A  <dfn>Module Record</dfn> encapsulates structural information about the imports and exports of a single module. This information is used to link the imports and exports of sets of connected modules. A Module Record includes four fields that are only used when evaluating a module.</p>\n        <p>For specification purposes Module Record values are values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> specification type and can be thought of as existing in a simple object-oriented hierarchy where Module Record is an abstract class with both abstract and concrete subclasses. This specification defines the abstract subclass named <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> and its concrete subclass named <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref>. Other specifications and implementations may define additional Module Record subclasses corresponding to alternative module definition facilities that they defined.</p>\n        <p>Module Record defines the fields listed in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>\n        <emu-table id=\"table-36\" caption=\"Module Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-36\">#table-36</span>: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value Type\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[Realm]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Environment]]\n              \n              </td>\n              <td>\n                <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> containing the top level bindings for this module. This field is set when the module is linked.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Namespace]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The Module Namespace Object (<emu-xref href=\"#sec-module-namespace-objects\"><a href=\"#sec-module-namespace-objects\" class=\"excluded-xref\" excluded-id=\"sec-module-namespace-objects\">#sec-module-namespace-objects</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              \n              </td>\n              <td>\n                Any, default value is <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                Field reserved for use by host environments that need to associate additional information with a module.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-37\" caption=\"Abstract Methods of Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-37\">#table-37</span>: Abstract Methods of Module Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetExportedNames([<var>exportStarSet</var>])\n              \n              </td>\n              <td>\n                Return a list of all names that are either directly or indirectly exported from this module.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                ResolveExport(<var>exportName</var> [, <var>resolveSet</var>])\n              \n              </td>\n              <td>\n                <p>Return the binding of a name exported by this module. Bindings are represented by a  <dfn id=\"resolvedbinding-record\">ResolvedBinding Record</dfn>, of the form { [[Module]]: <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to <emu-val>\"*namespace*\"</emu-val>. Return <emu-val>null</emu-val> if the name cannot be resolved, or <emu-val>\"ambiguous\"</emu-val> if multiple bindings were found.</p>\n                <p>Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result if it completes normally.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Link()\n              \n              </td>\n              <td>\n                <p>Prepare the module for evaluation by transitively resolving all module dependencies and creating a module <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Evaluate()\n              \n              </td>\n              <td>\n                <p>If this module has already been evaluated successfully, return <emu-val>undefined</emu-val>; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.</p>\n                <p>Link must have completed successfully prior to invoking this method.</p>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-module-namespace-exotic-objects-get-p-receiver": {"num": "9.4.6.7", "title": "#sec-module-namespace-exotic-objects-get-p-receiver [[Get]] ( P, Receiver )", "html": "<emu-clause id=\"sec-module-namespace-exotic-objects-get-p-receiver\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-namespace-exotic-objects-get-p-receiver\">#sec-module-namespace-exotic-objects-get-p-receiver</span> [[Get]] ( <var>P</var>, <var>Receiver</var> )</h1>\n        <p>When the [[Get]] internal method of a module namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> <var>O</var> is called with property key <var>P</var> and <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPropertyKey\"><a href=\"#sec-ispropertykey\">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ?&#160;<emu-xref aoid=\"OrdinaryGet\"><a href=\"#sec-ordinaryget\">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>binding</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>If <var>binding</var>.[[BindingName]] is <emu-val>\"*namespace*\"</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"GetModuleNamespace\"><a href=\"#sec-getmodulenamespace\">GetModuleNamespace</a></emu-xref>(<var>targetModule</var>).</li></ol></li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetEnvRec</var> be <var>targetEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetEnvRec</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ResolveExport is side-effect free. Each time this operation is called with a specific <var>exportName</var>, <var>resolveSet</var> pair as arguments it must return the same result. An implementation might choose to pre-compute or cache the ResolveExport results for the [[Exports]] of each module namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-hostresolveimportedmodule": {"num": "15.2.1.18", "title": "#sec-hostresolveimportedmodule Runtime Semantics: HostResolveImportedModule ( referencingScriptOrModule, specifier )", "html": "<emu-clause id=\"sec-hostresolveimportedmodule\" aoid=\"HostResolveImportedModule\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hostresolveimportedmodule\">#sec-hostresolveimportedmodule</span> Runtime Semantics: HostResolveImportedModule ( <var>referencingScriptOrModule</var>, <var>specifier</var> )</h1>\n        <p>HostResolveImportedModule is an implementation-defined abstract operation that provides the concrete <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> subclass instance that corresponds to the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> String, <var>specifier</var>, occurring within the context of the script or module represented by the <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> <var>referencingScriptOrModule</var>. <var>referencingScriptOrModule</var> may also be <emu-val>null</emu-val>, if the resolution is being performed in the context of an  <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression, and there is no active script or module at that time.</p>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An example of when <var>referencingScriptOrModule</var> can be <emu-val>null</emu-val> is in a web browser host. There, if a user clicks on a control given by</p>\n\n          <pre><code class=\"html hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"import('./foo.mjs')\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n\n          <p>there will be no active script or module at the time the  <emu-xref href=\"#sec-import-calls\"><a href=\"#sec-import-calls\"><code>import()</code></a></emu-xref> expression runs. More generally, this can happen in any situation where the host pushes execution contexts with <emu-val>null</emu-val> ScriptOrModule components onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</p>\n        </div></emu-note>\n\n        <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>\n        <ul>\n          <li>\n            The normal return value must be an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.\n          \n          </li>\n          <li>\n            If a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> corresponding to the pair <var>referencingScriptOrModule</var>, <var>specifier</var> does not exist or cannot be created, an exception must be thrown.\n          \n          </li>\n          <li>\n            Each time this operation is called with a specific <var>referencingScriptOrModule</var>, <var>specifier</var> pair as arguments it must return the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance if it completes normally.\n          \n          </li>\n        </ul>\n        <p>Multiple different <var>referencingScriptOrModule</var>, <var>specifier</var> pairs may map to the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> instance. The actual mapping semantic is implementation-defined but typically a normalization process is applied to <var>specifier</var> as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>\n      </emu-clause>\n\n      "}}, "figData": {"table-3": "Table 4", "table-36": "Table 39", "table-37": "Table 40"}}}