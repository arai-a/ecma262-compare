{"from": {"secList": ["sec-number-constructor-number-value"], "secData": {"sec-number-constructor-number-value": {"num": "20.1.1.1", "title": "#sec-number-constructor-number-value Number ( value )", "html": "<emu-clause id=\"sec-number-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number-constructor-number-value\">#sec-number-constructor-number-value</span> Number ( <var>value</var> )</h1>\n        <p>When <code>Number</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <var>value</var> is present, then<ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is BigInt, let <var>n</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>prim</var>.</li><li>Otherwise, let <var>n</var> be <var>prim</var>.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be <emu-val>+0</emu-val>.</li></ol></li><li>If NewTarget is <emu-val>undefined</emu-val>, return <var>n</var>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Number.prototype%\"</emu-val>, &#171; [[NumberData]] &#187;).</li><li>Set <var>O</var>.[[NumberData]] to <var>n</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-number-constructor-number-value"], "secData": {"sec-number-constructor-number-value": {"num": "20.1.1.1", "title": "#sec-number-constructor-number-value Number ( value )", "html": "<emu-clause id=\"sec-number-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number-constructor-number-value\">#sec-number-constructor-number-value</span> Number ( <var>value</var> )</h1>\n        <p>When <code>Number</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <var>value</var> is present, then<ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is BigInt, let <var>n</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>prim</var>.</li><li>Otherwise, let <var>n</var> be <var>prim</var>.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be <emu-val>+0</emu-val>.</li></ol></li><li>If NewTarget is <emu-val>undefined</emu-val>, return <var>n</var>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Number.prototype%\"</emu-val>, &#171; [[NumberData]] &#187;).</li><li>Set <var>O</var>.[[NumberData]] to <var>n</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}}, "figData": {}}}