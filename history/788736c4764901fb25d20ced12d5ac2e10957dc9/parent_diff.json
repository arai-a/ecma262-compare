{"from": {"secList": ["sec-ecmascript-language-types", "sec-reference-specification-type", "sec-createlistfromarraylike"], "secData": {"sec-ecmascript-language-types": {"num": "6.1", "title": "#sec-ecmascript-language-types ECMAScript Language Types", "html": "<emu-clause id=\"sec-ecmascript-language-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types\">#sec-ecmascript-language-types</span> ECMAScript Language Types</h1>\n    <p>An  <dfn>ECMAScript language type</dfn> corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, String, Symbol, Number, and Object. An  <dfn>ECMAScript language value</dfn> is a value that is characterized by an ECMAScript language type.</p>\n\n    <div id=\"excluded-sec-ecmascript-language-types-undefined-type\"><h1><span class=\"secnum\">6.1.1</span>#sec-ecmascript-language-types-undefined-type The Undefined Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-null-type\"><h1><span class=\"secnum\">6.1.2</span>#sec-ecmascript-language-types-null-type The Null Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-boolean-type\"><h1><span class=\"secnum\">6.1.3</span>#sec-ecmascript-language-types-boolean-type The Boolean Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-string-type\"><h1><span class=\"secnum\">6.1.4</span>#sec-ecmascript-language-types-string-type The String Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-symbol-type\"><h1><span class=\"secnum\">6.1.5</span>#sec-ecmascript-language-types-symbol-type The Symbol Type</h1>...</div><div id=\"excluded-sec-numeric-types\"><h1><span class=\"secnum\">6.1.6</span>#sec-numeric-types Numeric Types</h1>...</div><div id=\"excluded-sec-object-type\"><h1><span class=\"secnum\">6.1.7</span>#sec-object-type The Object Type</h1>...</div></emu-clause>\n\n  "}, "sec-reference-specification-type": {"num": "6.2.4", "title": "#sec-reference-specification-type The Reference Specification Type", "html": "<emu-clause id=\"sec-reference-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</span> The Reference Specification Type</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Reference type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and other language features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>\n      </div></emu-note>\n      <p>A  <dfn>Reference</dfn> is a resolved name or property binding. A Reference consists of three components, the base value component, the referenced name component, and the Boolean-valued strict reference flag. The base value component is either <emu-val>undefined</emu-val>, an Object, a Boolean, a String, a Symbol, a Number, or an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. A base value component of <emu-val>undefined</emu-val> indicates that the Reference could not be resolved to a binding. The referenced name component is a String or Symbol value.</p>\n      <p>A  <dfn id=\"super-reference\">Super Reference</dfn> is a Reference that is used to represent a name binding that was expressed using the super <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. A <emu-xref href=\"#super-reference\"><a href=\"#super-reference\">Super Reference</a></emu-xref> has an additional thisValue component, and its base value component will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate on references:</p>\n\n      <div id=\"excluded-sec-getbase\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-getbase GetBase ( V )</h1>...</div><div id=\"excluded-sec-getreferencedname\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-getreferencedname GetReferencedName ( V )</h1>...</div><div id=\"excluded-sec-isstrictreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-isstrictreference IsStrictReference ( V )</h1>...</div><div id=\"excluded-sec-hasprimitivebase\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-hasprimitivebase HasPrimitiveBase ( V )</h1>...</div><div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.10</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.11</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div></emu-clause>\n\n    "}, "sec-createlistfromarraylike": {"num": "7.3.18", "title": "#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )", "html": "<emu-clause id=\"sec-createlistfromarraylike\" aoid=\"CreateListFromArrayLike\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistfromarraylike\">#sec-createlistfromarraylike</span> CreateListFromArrayLike ( <var>obj</var> [ , <var>elementTypes</var> ] )</h1>\n      <p>The abstract operation CreateListFromArrayLike is used to create a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> value whose elements are provided by the indexed properties of an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>, <var>obj</var>. The optional argument <var>elementTypes</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the names of ECMAScript Language Types that are allowed for element values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is created. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li>If <var>elementTypes</var> is not present, set <var>elementTypes</var> to &#171; Undefined, Null, Boolean, String, Symbol, Number, Object &#187;.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var><ol><li>Let <var>indexName</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>indexName</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>next</var>) is not an element of <var>elementTypes</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>next</var> as the last element of <var>list</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Return <var>list</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-ecmascript-language-types", "sec-reference-specification-type", "sec-createlistfromarraylike"], "secData": {"sec-ecmascript-language-types": {"num": "6.1", "title": "#sec-ecmascript-language-types ECMAScript Language Types", "html": "<emu-clause id=\"sec-ecmascript-language-types\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-language-types\">#sec-ecmascript-language-types</span> ECMAScript Language Types</h1>\n    <p>An  <dfn>ECMAScript language type</dfn> corresponds to values that are directly manipulated by an ECMAScript programmer using the ECMAScript language. The ECMAScript language types are Undefined, Null, Boolean, String, Symbol, Number, BigInt, and Object. An  <dfn>ECMAScript language value</dfn> is a value that is characterized by an ECMAScript language type.</p>\n\n    <div id=\"excluded-sec-ecmascript-language-types-undefined-type\"><h1><span class=\"secnum\">6.1.1</span>#sec-ecmascript-language-types-undefined-type The Undefined Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-null-type\"><h1><span class=\"secnum\">6.1.2</span>#sec-ecmascript-language-types-null-type The Null Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-boolean-type\"><h1><span class=\"secnum\">6.1.3</span>#sec-ecmascript-language-types-boolean-type The Boolean Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-string-type\"><h1><span class=\"secnum\">6.1.4</span>#sec-ecmascript-language-types-string-type The String Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-symbol-type\"><h1><span class=\"secnum\">6.1.5</span>#sec-ecmascript-language-types-symbol-type The Symbol Type</h1>...</div><div id=\"excluded-sec-numeric-types\"><h1><span class=\"secnum\">6.1.6</span>#sec-numeric-types Numeric Types</h1>...</div><div id=\"excluded-sec-object-type\"><h1><span class=\"secnum\">6.1.7</span>#sec-object-type The Object Type</h1>...</div></emu-clause>\n\n  "}, "sec-reference-specification-type": {"num": "6.2.4", "title": "#sec-reference-specification-type The Reference Specification Type", "html": "<emu-clause id=\"sec-reference-specification-type\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-specification-type\">#sec-reference-specification-type</span> The Reference Specification Type</h1>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The Reference type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and other language features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>\n      </div></emu-note>\n      <p>A  <dfn>Reference</dfn> is a resolved name or property binding. A Reference consists of three components, the base value component, the referenced name component, and the Boolean-valued strict reference flag. The base value component is either <emu-val>undefined</emu-val>, an Object, a Boolean, a String, a Symbol, a Number, a BigInt, or an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. A base value component of <emu-val>undefined</emu-val> indicates that the Reference could not be resolved to a binding. The referenced name component is a String or Symbol value.</p>\n      <p>A  <dfn id=\"super-reference\">Super Reference</dfn> is a Reference that is used to represent a name binding that was expressed using the super <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. A <emu-xref href=\"#super-reference\"><a href=\"#super-reference\">Super Reference</a></emu-xref> has an additional thisValue component, and its base value component will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate on references:</p>\n\n      <div id=\"excluded-sec-getbase\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-getbase GetBase ( V )</h1>...</div><div id=\"excluded-sec-getreferencedname\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-getreferencedname GetReferencedName ( V )</h1>...</div><div id=\"excluded-sec-isstrictreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-isstrictreference IsStrictReference ( V )</h1>...</div><div id=\"excluded-sec-hasprimitivebase\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-hasprimitivebase HasPrimitiveBase ( V )</h1>...</div><div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.10</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.11</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div></emu-clause>\n\n    "}, "sec-createlistfromarraylike": {"num": "7.3.18", "title": "#sec-createlistfromarraylike CreateListFromArrayLike ( obj [ , elementTypes ] )", "html": "<emu-clause id=\"sec-createlistfromarraylike\" aoid=\"CreateListFromArrayLike\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistfromarraylike\">#sec-createlistfromarraylike</span> CreateListFromArrayLike ( <var>obj</var> [ , <var>elementTypes</var> ] )</h1>\n      <p>The abstract operation CreateListFromArrayLike is used to create a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> value whose elements are provided by the indexed properties of an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>, <var>obj</var>. The optional argument <var>elementTypes</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the names of ECMAScript Language Types that are allowed for element values of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is created. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li>If <var>elementTypes</var> is not present, set <var>elementTypes</var> to &#171; Undefined, Null, Boolean, String, Symbol, Number, BigInt, Object &#187;.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>obj</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>obj</var>).</li><li>Let <var>list</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var><ol><li>Let <var>indexName</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>obj</var>, <var>indexName</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>next</var>) is not an element of <var>elementTypes</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>next</var> as the last element of <var>list</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Return <var>list</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}