{"from": {"secList": ["sec-getmodifysetvalueinbuffer", "sec-string-to-bigint", "sec-bigint-constructor-number-value", "sec-to-bigint", "sec-to-big-uint64", "sec-number-to-bigint", "sec-to-big-int64", "sec-type-conversion", "sec-setvalueinbuffer"], "secData": {"sec-getmodifysetvalueinbuffer": {"num": "24.1.1.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number <var>value</var>, a semantic function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <code>\"SeqCst\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-string-to-bigint": {"num": "7.1.14", "title": "#sec-string-to-bigint StringToBigInt ( argument )", "html": "<emu-clause id=\"sec-string-to-bigint\" aoid=\"StringToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string-to-bigint\">#sec-string-to-bigint</span> StringToBigInt ( <var>argument</var> )</h1>\n      <p>Apply the algorithm in  <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref> with the following changes:</p>\n      <ul>\n        <li>Replace the <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> production with <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> to not allow <emu-val>Infinity</emu-val>, decimal points, or exponents.</li>\n        <li>If the MV is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>, otherwise return the BigInt which exactly corresponds to the MV, rather than rounding to a Number.</li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-bigint-constructor-number-value": {"num": "20.2.1.1", "title": "#sec-bigint-constructor-number-value BigInt ( value )", "html": "<emu-clause id=\"sec-bigint-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint-constructor-number-value\">#sec-bigint-constructor-number-value</span> BigInt ( <var>value</var> )</h1>\n        <p>When <code>BigInt</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, hint Number).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is Number, return ?&#160;<emu-xref aoid=\"NumberToBigInt\"><a href=\"#sec-number-to-bigint\">NumberToBigInt</a></emu-xref>(<var>prim</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-number-to-bigint\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-number-to-bigint Runtime Semantics: NumberToBigInt ( number )</h1>...</div></emu-clause>\n    "}, "sec-to-bigint": {"num": "7.1.13", "title": "#sec-to-bigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-to-bigint\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-to-bigint\">#sec-to-bigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt converts its argument <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required.</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, hint Number).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-to-bigint\"><a href=\"#table-to-bigint\" class=\"excluded-xref\" excluded-id=\"table-to-bigint\">#table-to-bigint</a></emu-xref>.\n      </li></ol></emu-alg>\n      <emu-table id=\"table-to-bigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-to-bigint\">#table-to-bigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              \n              </th>\n              <th>\n                Result\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              \n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              \n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              \n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              \n              </td>\n              <td>\n                Return <var>prim</var>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              \n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              \n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-string-to-bigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>NaN</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.\n                </li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              \n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              \n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-to-big-uint64": {"num": "7.1.16", "title": "#sec-to-big-uint64 ToBigUint64 ( argument )", "html": "<emu-clause id=\"sec-to-big-uint64\" aoid=\"ToBigUint64\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-to-big-uint64\">#sec-to-big-uint64</span> ToBigUint64 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigUint64 converts <var>argument</var> to one of 2<sup>64</sup> <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values in the range 0 through 2<sup>64</sup>-1, inclusive. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>argument</var>).</li><li>Let <var>int64bit</var> be <var>n</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>64</sup>.</li><li>Return <var>int64bit</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-number-to-bigint": {"num": "20.2.1.1.1", "title": "#sec-number-to-bigint Runtime Semantics: NumberToBigInt ( number )", "html": "<emu-clause id=\"sec-number-to-bigint\" aoid=\"NumberToBigInt\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number-to-bigint\">#sec-number-to-bigint</span> Runtime Semantics: NumberToBigInt ( <var>number</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>number</var>) is Number.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>number</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Return the BigInt value that represents the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <var>number</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-to-big-int64": {"num": "7.1.15", "title": "#sec-to-big-int64 ToBigInt64 ( argument )", "html": "<emu-clause id=\"sec-to-big-int64\" aoid=\"ToBigInt64\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-to-big-int64\">#sec-to-big-int64</span> ToBigInt64 ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt64 converts <var>argument</var> to one of 2<sup>64</sup> <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values in the range -2<sup>63</sup> through 2<sup>63</sup>-1, inclusive. This abstract operation functions as follows:</p>\n      <emu-alg><ol><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>argument</var>).</li><li>Let <var>int64bit</var> be <var>n</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup>64</sup>.</li><li>If <var>int64bit</var> &#8805; 2<sup>63</sup>, return <var>int64bit</var> - 2<sup>64</sup>; otherwise return <var>int64bit</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-type-conversion": {"num": "7.1", "title": "#sec-type-conversion Type Conversion", "html": "<emu-clause id=\"sec-type-conversion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</span> Type Conversion</h1>\n    <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>. The conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are polymorphic; they can accept a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. But no other specification types are used with these operations.</p>\n    <p>The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.</p>\n\n    <div id=\"excluded-sec-toprimitive\"><h1><span class=\"secnum\">7.1.1</span>#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )</h1>...</div><div id=\"excluded-sec-toboolean\"><h1><span class=\"secnum\">7.1.2</span>#sec-toboolean ToBoolean ( argument )</h1>...</div><div id=\"excluded-sec-tonumeric\"><h1><span class=\"secnum\">7.1.3</span>#sec-tonumeric ToNumeric ( value )</h1>...</div><div id=\"excluded-sec-tonumber\"><h1><span class=\"secnum\">7.1.4</span>#sec-tonumber ToNumber ( argument )</h1>...</div><div id=\"excluded-sec-tointeger\"><h1><span class=\"secnum\">7.1.5</span>#sec-tointeger ToInteger ( argument )</h1>...</div><div id=\"excluded-sec-toint32\"><h1><span class=\"secnum\">7.1.6</span>#sec-toint32 ToInt32 ( argument )</h1>...</div><div id=\"excluded-sec-touint32\"><h1><span class=\"secnum\">7.1.7</span>#sec-touint32 ToUint32 ( argument )</h1>...</div><div id=\"excluded-sec-toint16\"><h1><span class=\"secnum\">7.1.8</span>#sec-toint16 ToInt16 ( argument )</h1>...</div><div id=\"excluded-sec-touint16\"><h1><span class=\"secnum\">7.1.9</span>#sec-touint16 ToUint16 ( argument )</h1>...</div><div id=\"excluded-sec-toint8\"><h1><span class=\"secnum\">7.1.10</span>#sec-toint8 ToInt8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8\"><h1><span class=\"secnum\">7.1.11</span>#sec-touint8 ToUint8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8clamp\"><h1><span class=\"secnum\">7.1.12</span>#sec-touint8clamp ToUint8Clamp ( argument )</h1>...</div><div id=\"excluded-sec-to-bigint\"><h1><span class=\"secnum\">7.1.13</span>#sec-to-bigint ToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-string-to-bigint\"><h1><span class=\"secnum\">7.1.14</span>#sec-string-to-bigint StringToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-to-big-int64\"><h1><span class=\"secnum\">7.1.15</span>#sec-to-big-int64 ToBigInt64 ( argument )</h1>...</div><div id=\"excluded-sec-to-big-uint64\"><h1><span class=\"secnum\">7.1.16</span>#sec-to-big-uint64 ToBigUint64 ( argument )</h1>...</div><div id=\"excluded-sec-tostring\"><h1><span class=\"secnum\">7.1.17</span>#sec-tostring ToString ( argument )</h1>...</div><div id=\"excluded-sec-toobject\"><h1><span class=\"secnum\">7.1.18</span>#sec-toobject ToObject ( argument )</h1>...</div><div id=\"excluded-sec-topropertykey\"><h1><span class=\"secnum\">7.1.19</span>#sec-topropertykey ToPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-tolength\"><h1><span class=\"secnum\">7.1.20</span>#sec-tolength ToLength ( argument )</h1>...</div><div id=\"excluded-sec-canonicalnumericindexstring\"><h1><span class=\"secnum\">7.1.21</span>#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )</h1>...</div><div id=\"excluded-sec-toindex\"><h1><span class=\"secnum\">7.1.22</span>#sec-toindex ToIndex ( value )</h1>...</div></emu-clause>\n\n  "}, "sec-setvalueinbuffer": {"num": "24.1.1.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes seven parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number <var>value</var>, a Boolean <var>isTypedArray</var>, a String <var>order</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, in order, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-to-bigint": "Table 12", "table-49": "Table 62"}}, "to": {"secList": ["sec-getmodifysetvalueinbuffer", "sec-bigint-constructor-number-value", "sec-type-conversion", "sec-setvalueinbuffer"], "secData": {"sec-getmodifysetvalueinbuffer": {"num": "24.1.1.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number or BigInt <var>value</var>, a semantic function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <code>\"SeqCst\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-bigint-constructor-number-value": {"num": "20.2.1.1", "title": "#sec-bigint-constructor-number-value BigInt ( value )", "html": "<emu-clause id=\"sec-bigint-constructor-number-value\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint-constructor-number-value\">#sec-bigint-constructor-number-value</span> BigInt ( <var>value</var> )</h1>\n        <p>When <code>BigInt</code> is called with argument <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>value</var>, hint Number).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>prim</var>) is Number, return ?&#160;<emu-xref aoid=\"NumberToBigInt\"><a href=\"#sec-numbertobigint\">NumberToBigInt</a></emu-xref>(<var>prim</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-numbertobigint\"><h1><span class=\"secnum\">20.2.1.1.1</span>#sec-numbertobigint Runtime Semantics: NumberToBigInt ( number )</h1>...</div></emu-clause>\n    "}, "sec-type-conversion": {"num": "7.1", "title": "#sec-type-conversion Type Conversion", "html": "<emu-clause id=\"sec-type-conversion\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-type-conversion\">#sec-type-conversion</span> Type Conversion</h1>\n    <p>The ECMAScript language implicitly performs automatic type conversion as needed. To clarify the semantics of certain constructs it is useful to define a set of conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>. The conversion <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are polymorphic; they can accept a value of any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>. But no other specification types are used with these operations.</p>\n    <p>The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types.</p>\n\n    <div id=\"excluded-sec-toprimitive\"><h1><span class=\"secnum\">7.1.1</span>#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )</h1>...</div><div id=\"excluded-sec-toboolean\"><h1><span class=\"secnum\">7.1.2</span>#sec-toboolean ToBoolean ( argument )</h1>...</div><div id=\"excluded-sec-tonumeric\"><h1><span class=\"secnum\">7.1.3</span>#sec-tonumeric ToNumeric ( value )</h1>...</div><div id=\"excluded-sec-tonumber\"><h1><span class=\"secnum\">7.1.4</span>#sec-tonumber ToNumber ( argument )</h1>...</div><div id=\"excluded-sec-tointeger\"><h1><span class=\"secnum\">7.1.5</span>#sec-tointeger ToInteger ( argument )</h1>...</div><div id=\"excluded-sec-toint32\"><h1><span class=\"secnum\">7.1.6</span>#sec-toint32 ToInt32 ( argument )</h1>...</div><div id=\"excluded-sec-touint32\"><h1><span class=\"secnum\">7.1.7</span>#sec-touint32 ToUint32 ( argument )</h1>...</div><div id=\"excluded-sec-toint16\"><h1><span class=\"secnum\">7.1.8</span>#sec-toint16 ToInt16 ( argument )</h1>...</div><div id=\"excluded-sec-touint16\"><h1><span class=\"secnum\">7.1.9</span>#sec-touint16 ToUint16 ( argument )</h1>...</div><div id=\"excluded-sec-toint8\"><h1><span class=\"secnum\">7.1.10</span>#sec-toint8 ToInt8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8\"><h1><span class=\"secnum\">7.1.11</span>#sec-touint8 ToUint8 ( argument )</h1>...</div><div id=\"excluded-sec-touint8clamp\"><h1><span class=\"secnum\">7.1.12</span>#sec-touint8clamp ToUint8Clamp ( argument )</h1>...</div><div id=\"excluded-sec-tobigint\"><h1><span class=\"secnum\">7.1.13</span>#sec-tobigint ToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-stringtobigint\"><h1><span class=\"secnum\">7.1.14</span>#sec-stringtobigint StringToBigInt ( argument )</h1>...</div><div id=\"excluded-sec-tobigint64\"><h1><span class=\"secnum\">7.1.15</span>#sec-tobigint64 ToBigInt64 ( argument )</h1>...</div><div id=\"excluded-sec-tobiguint64\"><h1><span class=\"secnum\">7.1.16</span>#sec-tobiguint64 ToBigUint64 ( argument )</h1>...</div><div id=\"excluded-sec-tostring\"><h1><span class=\"secnum\">7.1.17</span>#sec-tostring ToString ( argument )</h1>...</div><div id=\"excluded-sec-toobject\"><h1><span class=\"secnum\">7.1.18</span>#sec-toobject ToObject ( argument )</h1>...</div><div id=\"excluded-sec-topropertykey\"><h1><span class=\"secnum\">7.1.19</span>#sec-topropertykey ToPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-tolength\"><h1><span class=\"secnum\">7.1.20</span>#sec-tolength ToLength ( argument )</h1>...</div><div id=\"excluded-sec-canonicalnumericindexstring\"><h1><span class=\"secnum\">7.1.21</span>#sec-canonicalnumericindexstring CanonicalNumericIndexString ( argument )</h1>...</div><div id=\"excluded-sec-toindex\"><h1><span class=\"secnum\">7.1.22</span>#sec-toindex ToIndex ( value )</h1>...</div></emu-clause>\n\n  "}, "sec-setvalueinbuffer": {"num": "24.1.1.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes seven parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number or BigInt <var>value</var>, a Boolean <var>isTypedArray</var>, a String <var>order</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, in order, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-49": "Table 62"}}}