{"from": {"secList": ["sec-async-from-sync-iterator-value-unwrap-functions", "sec-asyncfromsynciteratorcontinuation", "sec-%asyncfromsynciteratorprototype%.throw", "sec-%asyncfromsynciteratorprototype%-object"], "secData": {"sec-async-from-sync-iterator-value-unwrap-functions": {"num": "27.1.4.2.4", "title": "#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions", "html": "<emu-clause id=\"sec-async-from-sync-iterator-value-unwrap-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-from-sync-iterator-value-unwrap-functions\">#sec-async-from-sync-iterator-value-unwrap-functions</span> Async-from-Sync Iterator Value Unwrap Functions</h1>\n          <p>An async-from-sync iterator value unwrap function is an anonymous built-in function that is used by <emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref> when processing the <emu-val>\"value\"</emu-val> property of an <i>IteratorResult</i> object, in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\" <i>IteratorResult</i> object. Each async-from-sync iterator value unwrap function has a [[Done]] internal slot.</p>\n          <p>When an async-from-sync iterator value unwrap function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>F</var>.[[Done]]).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-asyncfromsynciteratorcontinuation": {"num": "27.1.4.4", "title": "#sec-asyncfromsynciteratorcontinuation AsyncFromSyncIteratorContinuation ( result, promiseCapability )", "html": "<emu-clause id=\"sec-asyncfromsynciteratorcontinuation\" aoid=\"AsyncFromSyncIteratorContinuation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</span> AsyncFromSyncIteratorContinuation ( <var>result</var>, <var>promiseCapability</var> )</h1>\n        <p>The abstract operation AsyncFromSyncIteratorContinuation takes arguments <var>result</var> and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>done</var> be <emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>result</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>done</var>, <var>promiseCapability</var>).</li><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>result</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>value</var>, <var>promiseCapability</var>).</li><li>Let <var>valueWrapper</var> be <emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>valueWrapper</var>, <var>promiseCapability</var>).</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-async-from-sync-iterator-value-unwrap-functions\" title=\"\"><a href=\"#sec-async-from-sync-iterator-value-unwrap-functions\">Async-from-Sync Iterator Value Unwrap Functions</a></emu-xref>.</li><li>Let <var>length</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-async-from-sync-iterator-value-unwrap-functions\" title=\"\"><a href=\"#sec-async-from-sync-iterator-value-unwrap-functions\">Async-from-Sync Iterator Value Unwrap Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, <var>length</var>, <emu-val>\"\"</emu-val>, &#171; [[Done]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Done]] to <var>done</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>valueWrapper</var>, <var>onFulfilled</var>, <emu-val>undefined</emu-val>, <var>promiseCapability</var>).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "27.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( [ <var>value</var> ] )</h1>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In this specification, <var>value</var> is always provided, but is left optional for consistency with <emu-xref title=\"\" href=\"#sec-%asyncfromsynciteratorprototype%.return\"><a href=\"#sec-%asyncfromsynciteratorprototype%.return\">%AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</a></emu-xref>.</div></emu-note>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "27.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">27.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">27.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">27.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )</h1>...</div><div id=\"excluded-sec-async-from-sync-iterator-value-unwrap-functions\"><h1><span class=\"secnum\">27.1.4.2.4</span>#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-asyncfromsynciteratorcontinuation", "sec-%asyncfromsynciteratorprototype%.throw", "sec-%asyncfromsynciteratorprototype%-object"], "secData": {"sec-asyncfromsynciteratorcontinuation": {"num": "27.1.4.4", "title": "#sec-asyncfromsynciteratorcontinuation AsyncFromSyncIteratorContinuation ( result, promiseCapability )", "html": "<emu-clause id=\"sec-asyncfromsynciteratorcontinuation\" oldids=\"sec-async-from-sync-iterator-value-unwrap-functions\" aoid=\"AsyncFromSyncIteratorContinuation\"><span id=\"sec-async-from-sync-iterator-value-unwrap-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</span> AsyncFromSyncIteratorContinuation ( <var>result</var>, <var>promiseCapability</var> )</h1>\n        <p>The abstract operation AsyncFromSyncIteratorContinuation takes arguments <var>result</var> and <var>promiseCapability</var> (a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>). It performs the following steps when called:</p>\n\n        <emu-alg><ol><li>Let <var>done</var> be <emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>result</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>done</var>, <var>promiseCapability</var>).</li><li>Let <var>value</var> be <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>result</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>value</var>, <var>promiseCapability</var>).</li><li>Let <var>valueWrapper</var> be <emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>value</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>valueWrapper</var>, <var>promiseCapability</var>).</li><li>Let <var>unwrap</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>value</var>) that captures <var>done</var> and performs the following steps when called:<ol><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>done</var>).</li></ol></li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>unwrap</var>, 1, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>NOTE: <var>onFulfilled</var> is used when processing the <emu-val>\"value\"</emu-val> property of an IteratorResult object in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\" IteratorResult object.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>valueWrapper</var>, <var>onFulfilled</var>, <emu-val>undefined</emu-val>, <var>promiseCapability</var>).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "27.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( [ <var>value</var> ] )</h1>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">In this specification, <var>value</var> is always provided, but is left optional for consistency with <emu-xref title=\"\" href=\"#sec-%asyncfromsynciteratorprototype%.return\"><a href=\"#sec-%asyncfromsynciteratorprototype%.return\">%AsyncFromSyncIteratorPrototype%.return ( [ <var>value</var> ] )</a></emu-xref>.</div></emu-note>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <emu-val>\"throw\"</emu-val>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>If <var>value</var> is present, then<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>).</li></ol></li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "27.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n          <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">27.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">27.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( [ value ] )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">27.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( [ value ] )</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}}