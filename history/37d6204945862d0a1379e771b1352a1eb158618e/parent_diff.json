{"from": {"secList": ["sec-tonumber", "sec-tonumber-applied-to-the-string-type", "sec-runtime-semantics-stringnumericvalue"], "secData": {"sec-tonumber": {"num": "7.1.4", "title": "#sec-tonumber ToNumber ( argument )", "html": "<emu-clause id=\"sec-tonumber\" aoid=\"ToNumber\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber\">#sec-tonumber</span> ToNumber ( <var>argument</var> )</h1>\n      <p>The abstract operation ToNumber takes argument <var>argument</var>. It converts <var>argument</var> to a value of type Number according to <emu-xref href=\"#table-tonumber-conversions\"><a href=\"#table-tonumber-conversions\" class=\"excluded-xref\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tonumber-conversions\" caption=\"ToNumber Conversions\" oldids=\"table-11\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</span>: <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> Conversions</figcaption><span id=\"table-11\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>NaN</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>. If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return <var>argument</var> (no conversion).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              See grammar and conversion algorithm below.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-tonumber-applied-to-the-string-type\"><h1><span class=\"secnum\">7.1.4.1</span>#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type</h1>...</div></emu-clause>\n\n    "}, "sec-tonumber-applied-to-the-string-type": {"num": "7.1.4.1", "title": "#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type", "html": "<emu-clause id=\"sec-tonumber-applied-to-the-string-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</span> ToNumber Applied to the String Type</h1>\n        <p><emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to Strings applies the following grammar to the input String interpreted as a sequence of UTF-16 encoded code points (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). If the grammar cannot interpret the String as an expansion of <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt>, then the result of <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is <emu-val>NaN</emu-val>.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\"><emu-production name=\"StringNumericLiteral\" type=\"regexp\" id=\"prod-StringNumericLiteral\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"mkvpahdu\" id=\"prod-1aA0wnf8\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"_ljdljxm\" id=\"prod-m-6uXikA\">\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrWhiteSpace\" type=\"regexp\" id=\"prod-StrWhiteSpace\">\n    <emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"kw6izkq9\">\n        <emu-nt><a href=\"#prod-StrWhiteSpaceChar\">StrWhiteSpaceChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrWhiteSpaceChar\" type=\"regexp\" id=\"prod-StrWhiteSpaceChar\">\n    <emu-nt><a href=\"#prod-StrWhiteSpaceChar\">StrWhiteSpaceChar</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StrNumericLiteral\" type=\"regexp\" id=\"prod-StrNumericLiteral\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"2zae4kd4\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kidoa90l\" id=\"prod-8_TyHvtP\"><emu-nt params=\"~Sep\"><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StrDecimalLiteral\" type=\"regexp\" id=\"prod-StrDecimalLiteral\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"r3_niz0j\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"o_y5qzvk\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1g8bpsll\" id=\"prod-glMHXxnX\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" id=\"prod-StrUnsignedDecimalLiteral\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"sv6n-gkb\" id=\"prod-E5z8Bfrk\"><emu-t>Infinity</emu-t></emu-rhs>\n    <emu-rhs a=\"bw_ix5cg\" id=\"prod-0clqUBRw\">\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"m3hgvw0t\" id=\"prod-h9Y6iP78\">\n        <emu-t>.</emu-t>\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eg9cc2yh\" id=\"prod-14bLNUM8\">\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric literals (<emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>)</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Some differences should be noted between the syntax of a <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> and a <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>:</p>\n          <ul>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> may include leading and/or trailing white space and/or line terminators.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is decimal may have any number of leading <code>0</code> digits.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is decimal may include a <code>+</code> or <code>-</code> to indicate its sign.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is empty or contains only white space is converted to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </li>\n            <li>\n              <code>Infinity</code> and <code>-Infinity</code> are recognized as a <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> but not as a <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> cannot include a <emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt>.\n            </li>\n          </ul>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-runtime-semantics-stringnumericvalue\"><h1><span class=\"secnum\">7.1.4.1.1</span>#sec-runtime-semantics-stringnumericvalue Runtime Semantics: StringNumericValue</h1>...</div><div id=\"excluded-sec-roundmvresult\"><h1><span class=\"secnum\">7.1.4.1.2</span>#sec-roundmvresult RoundMVResult ( n )</h1>...</div></emu-clause>\n    "}, "sec-runtime-semantics-stringnumericvalue": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-stringnumericvalue Runtime Semantics: StringNumericValue", "html": "<emu-clause id=\"sec-runtime-semantics-stringnumericvalue\" type=\"sdo\" aoid=\"StringNumericValue\" oldids=\"sec-runtime-semantics-mv-s\"><span id=\"sec-runtime-semantics-mv-s\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-stringnumericvalue\">#sec-runtime-semantics-stringnumericvalue</span> Runtime Semantics: StringNumericValue</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of the Number type is given here.</p>\n          <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"mkvpahdu\" id=\"prod-_R4wE0aJ\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"_ljdljxm\" id=\"prod-meFGI9GM\">\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"StringNumericValue\"><a href=\"#sec-runtime-semantics-stringnumericvalue\">StringNumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"6ge3c7dq\" id=\"prod-chPZzOnl\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"1g8bpsll\" id=\"prod-gjHq7g3y\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be <emu-xref aoid=\"StringNumericValue\"><a href=\"#sec-runtime-semantics-stringnumericvalue\">StringNumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.</li><li>If <var>a</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>Return -<var>a</var>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"sv6n-gkb\" id=\"prod-rF3lJM39\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"iokglhcc\" id=\"prod-rFHlF9yu\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> is present, then<ol><li>Let <var>b</var> be MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>n</var> be the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>b</var> be 0.</li><li>Let <var>n</var> be 0.</li></ol></li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>((<var>a</var> + (<var>b</var> &#215; 10<sup>-<var>n</var></sup>)) &#215; 10<sup><var>e</var></sup>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"xpoqnclz\" id=\"prod-KhQPr5RG\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>b</var> be MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Let <var>n</var> be the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>(<var>b</var> &#215; 10<sup><var>e</var> - <var>n</var></sup>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"joj696lw\" id=\"prod-0Vf62eUX\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>(<var>a</var> &#215; 10<sup><var>e</var></sup>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-tonumber-conversions": "Table 14"}}, "to": {"secList": ["sec-tonumber", "sec-tonumber-applied-to-the-string-type", "sec-runtime-semantics-stringnumericvalue", "sec-stringtonumber"], "secData": {"sec-tonumber": {"num": "7.1.4", "title": "#sec-tonumber ToNumber ( argument )", "html": "<emu-clause id=\"sec-tonumber\" aoid=\"ToNumber\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber\">#sec-tonumber</span> ToNumber ( <var>argument</var> )</h1>\n      <p>The abstract operation ToNumber takes argument <var>argument</var>. It converts <var>argument</var> to a value of type Number according to <emu-xref href=\"#table-tonumber-conversions\"><a href=\"#table-tonumber-conversions\" class=\"excluded-xref\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</a></emu-xref>:</p>\n      <emu-table id=\"table-tonumber-conversions\" caption=\"ToNumber Conversions\" oldids=\"table-11\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tonumber-conversions\">#table-tonumber-conversions</span>: <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> Conversions</figcaption><span id=\"table-11\"></span>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Return <emu-val>NaN</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Return <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              If <var>argument</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>. If <var>argument</var> is <emu-val>false</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Return <var>argument</var> (no conversion).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              Return ! <emu-xref aoid=\"StringToNumber\"><a href=\"#sec-stringtonumber\">StringToNumber</a></emu-xref>(<var>argument</var>).\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Object\n            </td>\n            <td>\n              <p>Apply the following steps:</p>\n              <emu-alg><ol><li>Let <var>primValue</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>primValue</var>).</li></ol></emu-alg>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <div id=\"excluded-sec-tonumber-applied-to-the-string-type\"><h1><span class=\"secnum\">7.1.4.1</span>#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type</h1>...</div></emu-clause>\n\n    "}, "sec-tonumber-applied-to-the-string-type": {"num": "7.1.4.1", "title": "#sec-tonumber-applied-to-the-string-type ToNumber Applied to the String Type", "html": "<emu-clause id=\"sec-tonumber-applied-to-the-string-type\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</span> ToNumber Applied to the String Type</h1>\n        <p>The abstract operation <emu-xref aoid=\"StringToNumber\"><a href=\"#sec-stringtonumber\">StringToNumber</a></emu-xref> specifies how to convert a String value to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>, using the following grammar.</p>\n        <h2>Syntax</h2>\n        <emu-grammar type=\"definition\"><emu-production name=\"StringNumericLiteral\" type=\"regexp\" id=\"prod-StringNumericLiteral\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"mkvpahdu\" id=\"prod-1aA0wnf8\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"_ljdljxm\" id=\"prod-m-6uXikA\">\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrWhiteSpace\" type=\"regexp\" id=\"prod-StrWhiteSpace\">\n    <emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"kw6izkq9\">\n        <emu-nt><a href=\"#prod-StrWhiteSpaceChar\">StrWhiteSpaceChar</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrWhiteSpaceChar\" type=\"regexp\" id=\"prod-StrWhiteSpaceChar\">\n    <emu-nt><a href=\"#prod-StrWhiteSpaceChar\">StrWhiteSpaceChar</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"fctcswat\"><emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ozmczrck\"><emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StrNumericLiteral\" type=\"regexp\" id=\"prod-StrNumericLiteral\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"2zae4kd4\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"kidoa90l\" id=\"prod-8_TyHvtP\"><emu-nt params=\"~Sep\"><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"StrDecimalLiteral\" type=\"regexp\" id=\"prod-StrDecimalLiteral\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"r3_niz0j\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"o_y5qzvk\">\n        <emu-t>+</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"1g8bpsll\" id=\"prod-glMHXxnX\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" id=\"prod-StrUnsignedDecimalLiteral\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"sv6n-gkb\" id=\"prod-E5z8Bfrk\"><emu-t>Infinity</emu-t></emu-rhs>\n    <emu-rhs a=\"bw_ix5cg\" id=\"prod-0clqUBRw\">\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"m3hgvw0t\" id=\"prod-h9Y6iP78\">\n        <emu-t>.</emu-t>\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"eg9cc2yh\" id=\"prod-14bLNUM8\">\n        <emu-nt params=\"~Sep\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-params>[~Sep]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~Sep\" optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-params>[~Sep]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric literals (<emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>)</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Some differences should be noted between the syntax of a <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> and a <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>:</p>\n          <ul>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> may include leading and/or trailing white space and/or line terminators.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is decimal may have any number of leading <code>0</code> digits.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is decimal may include a <code>+</code> or <code>-</code> to indicate its sign.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> that is empty or contains only white space is converted to <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </li>\n            <li>\n              <code>Infinity</code> and <code>-Infinity</code> are recognized as a <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> but not as a <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.\n            </li>\n            <li>\n              A <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> cannot include a <emu-nt><a href=\"#prod-BigIntLiteralSuffix\">BigIntLiteralSuffix</a></emu-nt>.\n            </li>\n          </ul>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-stringtonumber\"><h1><span class=\"secnum\">7.1.4.1.1</span>#sec-stringtonumber StringToNumber ( str )</h1>...</div><div id=\"excluded-sec-runtime-semantics-stringnumericvalue\"><h1><span class=\"secnum\">7.1.4.1.2</span>#sec-runtime-semantics-stringnumericvalue Runtime Semantics: StringNumericValue</h1>...</div><div id=\"excluded-sec-roundmvresult\"><h1><span class=\"secnum\">7.1.4.1.3</span>#sec-roundmvresult RoundMVResult ( n )</h1>...</div></emu-clause>\n    "}, "sec-runtime-semantics-stringnumericvalue": {"num": "7.1.4.1.2", "title": "#sec-runtime-semantics-stringnumericvalue Runtime Semantics: StringNumericValue", "html": "<emu-clause id=\"sec-runtime-semantics-stringnumericvalue\" type=\"sdo\" aoid=\"StringNumericValue\" oldids=\"sec-runtime-semantics-mv-s\"><span id=\"sec-runtime-semantics-mv-s\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-stringnumericvalue\">#sec-runtime-semantics-stringnumericvalue</span> Runtime Semantics: StringNumericValue</h1>\n          <p>The conversion of a <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref aoid=\"NumericValue\"><a href=\"#sec-numericvalue\">NumericValue</a></emu-xref> of a <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt> (see <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different.</p>\n          <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"mkvpahdu\" id=\"prod-_R4wE0aJ\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"_ljdljxm\" id=\"prod-meFGI9GM\">\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-xref aoid=\"StringNumericValue\"><a href=\"#sec-runtime-semantics-stringnumericvalue\">StringNumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"6ge3c7dq\" id=\"prod-chPZzOnl\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"1g8bpsll\" id=\"prod-gjHq7g3y\">\n        <emu-t>-</emu-t>\n        <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be <emu-xref aoid=\"StringNumericValue\"><a href=\"#sec-runtime-semantics-stringnumericvalue\">StringNumericValue</a></emu-xref> of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.</li><li>If <var>a</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>Return -<var>a</var>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"sv6n-gkb\" id=\"prod-rF3lJM39\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"iokglhcc\" id=\"prod-rFHlF9yu\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-t>.</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-DecimalDigits\">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> is present, then<ol><li>Let <var>b</var> be MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Let <var>n</var> be the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>b</var> be 0.</li><li>Let <var>n</var> be 0.</li></ol></li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>((<var>a</var> + (<var>b</var> &#215; 10<sup>-<var>n</var></sup>)) &#215; 10<sup><var>e</var></sup>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"xpoqnclz\" id=\"prod-KhQPr5RG\">\n        <emu-t>.</emu-t>\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>b</var> be MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Let <var>n</var> be the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>(<var>b</var> &#215; 10<sup><var>e</var> - <var>n</var></sup>).</li></ol></emu-alg>\n          <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> <emu-geq>:::</emu-geq> <emu-rhs a=\"joj696lw\" id=\"prod-0Vf62eUX\">\n        <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-ExponentPart\">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n          <emu-alg><ol><li>Let <var>a</var> be MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.</li><li>If <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> is present, let <var>e</var> be MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>. Otherwise, let <var>e</var> be 0.</li><li>Return <emu-xref aoid=\"RoundMVResult\"><a href=\"#sec-roundmvresult\">RoundMVResult</a></emu-xref>(<var>a</var> &#215; 10<sup><var>e</var></sup>).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-stringtonumber": {"num": "7.1.4.1.1", "title": "#sec-stringtonumber StringToNumber ( str )", "html": "<emu-clause id=\"sec-stringtonumber\" aoid=\"StringToNumber\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringtonumber\">#sec-stringtonumber</span> StringToNumber ( <var>str</var> )</h1>\n          <p>The abstract operation StringToNumber takes argument <var>str</var> (a String). It returns a Number. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>text</var> be !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>str</var>).</li><li>Let <var>literal</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>text</var>, <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt>).</li><li>If <var>literal</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <emu-val>NaN</emu-val>.</li><li>Return <emu-xref aoid=\"StringNumericValue\"><a href=\"#sec-runtime-semantics-stringnumericvalue\">StringNumericValue</a></emu-xref> of <var>literal</var>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-tonumber-conversions": "Table 14"}}}