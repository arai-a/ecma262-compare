{"from": {"secList": ["sec-runtime-semantics-charactersetmatcher-abstract-operation"], "secData": {"sec-runtime-semantics-charactersetmatcher-abstract-operation": {"num": "21.2.2.8.1", "title": "#sec-runtime-semantics-charactersetmatcher-abstract-operation Runtime Semantics: CharacterSetMatcher ( A, invert, direction )", "html": "<emu-clause id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\" aoid=\"CharacterSetMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\">#sec-runtime-semantics-charactersetmatcher-abstract-operation</span> Runtime Semantics: CharacterSetMatcher ( <var>A</var>, <var>invert</var>, <var>direction</var> )</h1>\n          <p>The abstract operation CharacterSetMatcher takes arguments <var>A</var> (a CharSet), <var>invert</var> (a Boolean), and <var>direction</var> (an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>A</var>, <var>invert</var>, and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>index</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>Let <var>ch</var> be the character <var>Input</var>[<var>index</var>].</li><li>Let <var>cc</var> be <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>ch</var>).</li><li>If <var>invert</var> is <emu-val>false</emu-val>, then<ol><li>If there does not exist a member <var>a</var> of <var>A</var> such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>a</var>) is <var>cc</var>, return <emu-const>failure</emu-const>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>invert</var> is <emu-val>true</emu-val>.</li><li>If there exists a member <var>a</var> of <var>A</var> such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>a</var>) is <var>cc</var>, return <emu-const>failure</emu-const>.</li></ol></li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>y</var>) and return its result.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-charactersetmatcher-abstract-operation"], "secData": {"sec-runtime-semantics-charactersetmatcher-abstract-operation": {"num": "21.2.2.8.1", "title": "#sec-runtime-semantics-charactersetmatcher-abstract-operation Runtime Semantics: CharacterSetMatcher ( A, invert, direction )", "html": "<emu-clause id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\" aoid=\"CharacterSetMatcher\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-charactersetmatcher-abstract-operation\">#sec-runtime-semantics-charactersetmatcher-abstract-operation</span> Runtime Semantics: CharacterSetMatcher ( <var>A</var>, <var>invert</var>, <var>direction</var> )</h1>\n          <p>The abstract operation CharacterSetMatcher takes arguments <var>A</var> (a CharSet), <var>invert</var> (a Boolean), and <var>direction</var> (an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return a new Matcher with parameters (<var>x</var>, <var>c</var>) that captures <var>A</var>, <var>invert</var>, and <var>direction</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> is a State.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>c</var> is a Continuation.</li><li>Let <var>e</var> be <var>x</var>'s <var>endIndex</var>.</li><li>Let <var>f</var> be <var>e</var> + <var>direction</var>.</li><li>If <var>f</var> &lt; 0 or <var>f</var> &gt; <var>InputLength</var>, return <emu-const>failure</emu-const>.</li><li>Let <var>index</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>e</var>, <var>f</var>).</li><li>Let <var>ch</var> be the character <var>Input</var>[<var>index</var>].</li><li>Let <var>cc</var> be <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>ch</var>).</li><li>If there exists a member <var>a</var> of <var>A</var> such that <emu-xref aoid=\"Canonicalize\"><a href=\"#sec-runtime-semantics-canonicalize-ch\">Canonicalize</a></emu-xref>(<var>a</var>) is <var>cc</var>, let <var>found</var> be <emu-val>true</emu-val>. Otherwise, let <var>found</var> be <emu-val>false</emu-val>.</li><li>If <var>invert</var> is <emu-val>false</emu-val> and <var>found</var> is <emu-val>false</emu-val>, return <emu-const>failure</emu-const>.</li><li>If <var>invert</var> is <emu-val>true</emu-val> and <var>found</var> is <emu-val>true</emu-val>, return <emu-const>failure</emu-const>.</li><li>Let <var>cap</var> be <var>x</var>'s <var>captures</var> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>y</var> be the State (<var>f</var>, <var>cap</var>).</li><li>Call <var>c</var>(<var>y</var>) and return its result.</li></ol></li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}