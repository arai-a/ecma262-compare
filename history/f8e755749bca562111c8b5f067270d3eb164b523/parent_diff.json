{"from": {"secList": ["sec-gettemplateobject"], "secData": {"sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject takes argument <var>templateLiteral</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>template</var>, <var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>rawObj</var>, <var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <emu-const>frozen</emu-const>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>template</var>, <emu-val>\"raw\"</emu-val>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <emu-const>frozen</emu-const>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-gettemplateobject"], "secData": {"sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject takes argument <var>templateLiteral</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var>,<ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be <var>cookedStrings</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>template</var>, <var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>rawObj</var>, <var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <emu-const>frozen</emu-const>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>template</var>, <emu-val>\"raw\"</emu-val>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <emu-const>frozen</emu-const>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}