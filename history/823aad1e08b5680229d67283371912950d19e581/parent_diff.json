{"from": {"secList": ["sec-asyncgenerator-definitions-evaluation", "sec-async-function-definitions-runtime-semantics-evaluation"], "secData": {"sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-asyncgenerator-definitions-evaluation", "sec-async-function-definitions-runtime-semantics-evaluation"], "secData": {"sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the <emu-xref href=\"#sec-algorithm-conventions-syntax-directed-operations\"><a href=\"#sec-algorithm-conventions-syntax-directed-operations\">source text matched by</a></emu-xref> <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.</li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}}