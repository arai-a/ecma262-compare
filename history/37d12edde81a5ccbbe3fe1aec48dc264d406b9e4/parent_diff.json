{"from": {"secList": ["sec-internalizejsonproperty", "sec-atomics.notify", "sec-removewaiters"], "secData": {"sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>val</var>, <code>\"length\"</code>)).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Add 1 to <var>I</var>.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <code>\"key\"</code>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; 4) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Add 1 to <var>n</var>.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-removewaiters": {"num": "24.4.1.8", "title": "#sec-removewaiters RemoveWaiters ( WL, c )", "html": "<emu-clause id=\"sec-removewaiters\" aoid=\"RemoveWaiters\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-removewaiters\">#sec-removewaiters</span> RemoveWaiters ( <var>WL</var>, <var>c</var> )</h1>\n        <p>The abstract operation RemoveWaiters takes two arguments, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var> and nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>c</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the critical section for <var>WL</var>.</li><li>Let <var>L</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>S</var> be a reference to the list of waiters in <var>WL</var>.</li><li>Repeat, while <var>c</var> &gt; 0 and <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first waiter in <var>S</var>.</li><li>Add <var>W</var> to the end of <var>L</var>.</li><li>Remove <var>W</var> from <var>S</var>.</li><li>Subtract 1 from <var>c</var>.</li></ol></li><li>Return <var>L</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-internalizejsonproperty", "sec-atomics.notify", "sec-removewaiters"], "secData": {"sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>val</var>, <code>\"length\"</code>)).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <code>\"key\"</code>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; 4) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-removewaiters": {"num": "24.4.1.8", "title": "#sec-removewaiters RemoveWaiters ( WL, c )", "html": "<emu-clause id=\"sec-removewaiters\" aoid=\"RemoveWaiters\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-removewaiters\">#sec-removewaiters</span> RemoveWaiters ( <var>WL</var>, <var>c</var> )</h1>\n        <p>The abstract operation RemoveWaiters takes two arguments, a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref> <var>WL</var> and nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>c</var>. It performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the critical section for <var>WL</var>.</li><li>Let <var>L</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>S</var> be a reference to the list of waiters in <var>WL</var>.</li><li>Repeat, while <var>c</var> &gt; 0 and <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first waiter in <var>S</var>.</li><li>Add <var>W</var> to the end of <var>L</var>.</li><li>Remove <var>W</var> from <var>S</var>.</li><li>Set <var>c</var> to <var>c</var> - 1.</li></ol></li><li>Return <var>L</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}