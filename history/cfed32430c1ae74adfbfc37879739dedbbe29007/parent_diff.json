{"from": {"secList": ["sec-finalization-registry.prototype.register", "sec-objects", "sec-forward-progress", "sec-shared-memory-guidelines", "sec-agents", "sec-weakref-invariants", "sec-data-blocks", "sec-example-cyclic-module-record-graphs", "sec-atomics-object", "sec-execution-contexts", "sec-agent-clusters", "sec-number.epsilon", "sec-no-lineterminator-here-automatic-semicolon-insertion-list", "sec-expression-statement", "sec-weak-ref.prototype", "sec-suspend", "sec-decode", "sec-cyclic-module-records", "sec-liveness", "sec-atomics.notify"], "secData": {"sec-finalization-registry.prototype.register": {"num": "25.2.3.2", "title": "#sec-finalization-registry.prototype.register FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.register\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.register\">#sec-finalization-registry.prototype.register</span> FinalizationRegistry.prototype.register ( <var>target</var>, <var>heldValue</var> [ , <var>unregisterToken</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>target</var>, <var>heldValue</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, then<ol><li>If <var>unregisterToken</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>unregisterToken</var> to <emu-const>empty</emu-const>.</li></ol></li><li>Let <var>cell</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]]: <var>target</var>, [[HeldValue]]: <var>heldValue</var>, [[UnregisterToken]]: <var>unregisterToken</var> }.</li><li>Append <var>cell</var> to <var>finalizationRegistry</var>.[[Cells]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Based on the algorithms and definitions in this specification, <var>cell</var>.[[HeldValue]] is <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> when <var>cell</var> is in <var>finalizationRegistry</var>.[[Cells]]; however, this does not necessarily mean that <var>cell</var>.[[UnregisterToken]] or <var>cell</var>.[[Target]] are <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>.  For example, registering an object with itself as its unregister token would not keep the object alive forever.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-objects": {"num": "4.3.1", "title": "#sec-objects Objects", "html": "<emu-clause id=\"sec-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objects\">#sec-objects</span> Objects</h1>\n      <p>Even though ECMAScript includes syntax for class definitions, ECMAScript objects are not fundamentally class-based such as those in C++, Smalltalk, or Java. Instead objects may be created in various ways including via a literal notation or via <em>constructors</em> which create objects and then execute code that initializes all or part of them by assigning initial values to their properties. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a function that has a property named <emu-val>\"prototype\"</emu-val> that is used to implement <em>prototype-based inheritance</em> and <em>shared properties</em>. Objects are created by using constructors in <b>new</b> expressions; for example, <code>new Date(2009, 11)</code> creates a new Date object. Invoking a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> without using <b>new</b> has consequences that depend on the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. For example, <code>Date()</code> produces a string representation of the current date and time rather than an object.</p>\n      <p>Every object created by a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has an implicit reference (called the object's <em>prototype</em>) to the value of its <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the <em>prototype chain</em>. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>\n      <emu-figure id=\"figure-1\" caption=\"Object/Prototype Relationships\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-1\">#figure-1</span>: Object/Prototype Relationships</figcaption>\n        <object data=\"img/figure-1.svg\" height=\"354\" type=\"image/svg+xml\" width=\"719\"> <img alt=\"An image of lots of boxes and arrows.\" height=\"354\" src=\"img/figure-1.png\" width=\"719\"> </object>\n      </figure></emu-figure>\n      <p>In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried by objects, while structure, behaviour, and state are all inherited.</p>\n      <p>All objects that do not directly contain a particular property that their prototype contains share that property and its value. Figure 1 illustrates this:</p>\n      <p><b>CF</b> is a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (and also an object). Five objects have been created by using <code>new</code> expressions: <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b>. Each of these objects contains properties named <emu-val>\"q1\"</emu-val> and <emu-val>\"q2\"</emu-val>. The dashed lines represent the implicit prototype relationship; so, for example, <b>cf<sub>3</sub></b>'s prototype is <b>CF<sub>p</sub></b>. The <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, <b>CF</b>, has two properties itself, named <emu-val>\"P1\"</emu-val> and <emu-val>\"P2\"</emu-val>, which are not visible to <b>CF<sub>p</sub></b>, <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, or <b>cf<sub>5</sub></b>. The property named <emu-val>\"CFP1\"</emu-val> in <b>CF<sub>p</sub></b> is shared by <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> (but not by <b>CF</b>), as are any properties found in <b>CF<sub>p</sub></b>'s implicit prototype chain that are not named <emu-val>\"q1\"</emu-val>, <emu-val>\"q2\"</emu-val>, or <emu-val>\"CFP1\"</emu-val>. Notice that there is no implicit prototype link between <b>CF</b> and <b>CF<sub>p</sub></b>.</p>\n      <p>Unlike most class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object's properties. In the above diagram, one could add a new shared property for <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> by assigning a new value to the property in <b>CF<sub>p</sub></b>.</p>\n      <p>Although ECMAScript objects are not inherently class-based, it is often convenient to define class-like abstractions based upon a common pattern of <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions, prototype objects, and methods. The ECMAScript built-in objects themselves follow such a class-like pattern. Beginning with ECMAScript 2015, the ECMAScript language includes syntactic class definitions that permit programmers to concisely define objects that conform to the same class-like abstraction pattern used by the built-in objects.</p>\n    </emu-clause>\n\n    "}, "sec-forward-progress": {"num": "8.8", "title": "#sec-forward-progress Forward Progress", "html": "<emu-clause id=\"sec-forward-progress\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forward-progress\">#sec-forward-progress</span> Forward Progress</h1>\n    <p>For an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to <em>make forward progress</em> is for it to perform an evaluation step according to this specification.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> becomes <em>blocked</em> when its <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> waits synchronously and indefinitely for an external event. Only agents whose <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CanBlock]] property is <emu-val>true</emu-val> can become blocked in this sense.  An <em>unblocked</em> <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is one that is not blocked.</p>\n\n    <p>Implementations must ensure that:</p>\n    <ul>\n      <li>every unblocked <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> with a dedicated <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> eventually makes forward progress</li>\n      <li>in a set of agents that share an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> eventually makes forward progress</li>\n      <li>an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> does not cause another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to become blocked except via explicit APIs that provide blocking.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>This, along with the liveness guarantee in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, ensures that all <emu-const>SeqCst</emu-const> writes eventually become observable to all agents.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-shared-memory-guidelines": {"num": "28.11", "title": "#sec-shared-memory-guidelines Shared Memory Guidelines", "html": "<emu-clause id=\"sec-shared-memory-guidelines\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-shared-memory-guidelines\">#sec-shared-memory-guidelines</span> Shared Memory Guidelines</h1>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript programmers working with shared memory.</p>\n      <p>We recommend programs be kept data race free, i.e., make it so that it is impossible for there to be concurrent non-atomic operations on the same memory location. Data race free programs have interleaving semantics where each step in the evaluation semantics of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> are interleaved with each other. For data race free programs, it is not necessary to understand the details of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The details are unlikely to build intuition that will help one to better write ECMAScript.</p>\n      <p>More generally, even if a program is not data race free it may have predictable behaviour, so long as atomic operations are not involved in any data races and the operations that race all have the same access size. The simplest way to arrange for atomics not to be involved in races is to ensure that different memory cells are used by atomic and non-atomic operations and that atomic accesses of different sizes are not used to access the same cells at the same time. Effectively, the program should treat shared memory as strongly typed as much as possible. One still cannot depend on the ordering and timing of non-atomic accesses that race, but if memory is treated as strongly typed the racing accesses will not \"tear\" (bits of their values will not be mixed).</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers writing compiler transformations for programs using shared memory.</p>\n      <p>It is desirable to allow most program transformations that are valid in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting, to ensure that the performance of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program is as good as it would be in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting. Frequently these transformations are hard to judge. We outline some rules about program transformations that are intended to be taken as normative (in that they are implied by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> or stronger than what the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> implies) but which are likely not exhaustive. These rules are intended to apply to program transformations that precede the introductions of the events that make up the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n      <p>Let an <dfn>agent-order slice</dfn> be the subset of the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> pertaining to a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n      <p>Let <dfn>possible read values</dfn> of a read event be the set of all values of <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref> for that event across all valid executions.</p>\n      <p>Any transformation of an agent-order slice that is valid in the absence of shared memory is valid in the presence of shared memory, with the following exceptions.</p>\n      <ul>\n        <li>\n          <p><em>Atomics are carved in stone</em>: Program transformations must not cause the <emu-const>SeqCst</emu-const> events in an agent-order slice to be reordered with its <emu-const>Unordered</emu-const> operations, nor its <emu-const>SeqCst</emu-const> operations to be reordered with each other, nor may a program transformation remove a <emu-const>SeqCst</emu-const> operation from the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n          <p>(In practice, the prohibition on reorderings forces a compiler to assume that every <emu-const>SeqCst</emu-const> operation is a synchronization and included in the final <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref>, which it would usually have to assume anyway in the absence of inter-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program analysis. It also forces the compiler to assume that every call where the callee's effects on the <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref> are unknown may contain <emu-const>SeqCst</emu-const> operations.)</p>\n        </li>\n        <li>\n          <p><em>Reads must be stable</em>: Any given shared memory read must only observe a single value in an execution.</p>\n          <p>(For example, if what is semantically a single read in the program is executed multiple times then the program is subsequently allowed to observe only one of the values read. A transformation known as rematerialization can violate this rule.)</p>\n        </li>\n        <li>\n          <p><em>Writes must be stable</em>: All observable writes to shared memory must follow from program semantics in an execution.</p>\n          <p>(For example, a transformation may not introduce certain observable writes, such as by using read-modify-write operations on a larger location to write a smaller datum, writing a value to memory that the program could not have written, or writing a just-read value back to the location it was read from, if that location could have been overwritten by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> after the read.)</p>\n        </li>\n        <li>\n          <p><em>Possible read values must be nonempty</em>: Program transformations cannot cause the possible read values of a shared memory read to become empty.</p>\n          <p>(Counterintuitively, this rule in effect restricts transformations on writes, because writes have force in <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> insofar as to be read by read events. For example, writes may be moved and coalesced and sometimes reordered between two <emu-const>SeqCst</emu-const> operations, but the transformation may not remove every write that updates a location; some write must be preserved.)</p>\n        </li>\n      </ul>\n      <p>Examples of transformations that remain valid are: merging multiple non-atomic reads from the same location, reordering non-atomic reads, introducing speculative non-atomic reads, merging multiple non-atomic writes to the same location, reordering non-atomic writes to different locations, and hoisting non-atomic reads out of loops even if that affects termination. Note in general that aliased TypedArrays make it hard to prove that locations are different.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers generating machine code for shared memory accesses.</p>\n      <p>For architectures with memory models no weaker than those of ARM or Power, non-atomic stores and loads may be compiled to bare stores and loads on the target architecture. Atomic stores and loads may be compiled down to instructions that guarantee sequential consistency. If no such instructions exist, memory barriers are to be employed, such as placing barriers on both sides of a bare store or load. Read-modify-write operations may be compiled to read-modify-write instructions on the target architecture, such as <code>LOCK</code>-prefixed instructions on x86, load-exclusive/store-exclusive instructions on ARM, and load-link/store-conditional instructions on Power.</p>\n      <p>Specifically, the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> is intended to allow code generation as follows.</p>\n      <ul>\n        <li>Every atomic operation in the program is assumed to be necessary.</li>\n        <li>Atomic operations are never rearranged with each other or with non-atomic operations.</li>\n        <li>Functions are always assumed to perform atomic operations.</li>\n        <li>Atomic operations are never implemented as read-modify-write operations on larger data, but as non-lock-free atomics if the platform does not have atomic operations of the appropriate size. (We already assume that every platform has normal memory access operations of every interesting size.)</li>\n      </ul>\n      <p>Naive code generation uses these patterns:</p>\n      <ul>\n        <li>Regular loads and stores compile to single load and store instructions.</li>\n        <li>Lock-free atomic loads and stores compile to a full (sequentially consistent) fence, a regular load or store, and a full fence.</li>\n        <li>Lock-free atomic read-modify-write accesses compile to a full fence, an atomic read-modify-write instruction sequence, and a full fence.</li>\n        <li>Non-lock-free atomics compile to a spinlock acquire, a full fence, a series of non-atomic load and store instructions, a full fence, and a spinlock release.</li>\n      </ul>\n      <p>That mapping is correct so long as an atomic operation on an address range does not race with a non-atomic write or with an atomic operation of different size. However, that is all we need: the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> effectively demotes the atomic operations involved in a race to non-atomic status. On the other hand, the naive mapping is quite strong: it allows atomic operations to be used as sequentially consistent fences, which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> does not actually guarantee.</p>\n      <p>A number of local improvements to those basic patterns are also intended to be legal:</p>\n      <ul>\n        <li>There are obvious platform-dependent improvements that remove redundant fences.  For example, on x86 the fences around lock-free atomic loads and stores can always be omitted except for the fence following a store, and no fence is needed for lock-free read-modify-write instructions, as these all use LOCK-prefixed instructions. On many platforms there are fences of several strengths, and weaker fences can be used in certain contexts without destroying sequential consistency.</li>\n        <li>Most modern platforms support lock-free atomics for all the data sizes required by ECMAScript atomics. Should non-lock-free atomics be needed, the fences surrounding the body of the atomic operation can usually be folded into the lock and unlock steps. The simplest solution for non-lock-free atomics is to have a single lock word per SharedArrayBuffer.</li>\n        <li>There are also more complicated platform-dependent local improvements, requiring some code analysis. For example, two back-to-back fences often have the same effect as a single fence, so if code is generated for two atomic operations in sequence, only a single fence need separate them.  On x86, even a single fence separating atomic stores can be omitted, as the fence following a store is only needed to separate the store from a subsequent load.</li>\n      </ul>\n    </div></emu-note>\n  </emu-clause>\n"}, "sec-agents": {"num": "8.6", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\">Agent Record</dfn>, and an <dfn id=\"executing-thread\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> and should be the alternative that is most efficient for the implementation.  Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[KeptAlive]]</td>\n            <td><emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of objects</td>\n            <td>Initially a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, representing the list of objects to be kept alive until the end of the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref></td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free.  Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses.  See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.6.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.6.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-weakref-invariants": {"num": "8.9.1", "title": "#sec-weakref-invariants Objectives", "html": "<emu-clause id=\"sec-weakref-invariants\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-invariants\">#sec-weakref-invariants</span> Objectives</h1>\n\n      <p> This specification does not make any guarantees that any object will be garbage collected. Objects which are not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> may be released after long periods of time, or never at all. For this reason, this specification uses the term \"may\" when describing behaviour triggered by garbage collection.</p>\n\n      <p>The semantics of <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> and <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> objects is based on two operations which happen at particular points in time: </p>\n\n      <ul>\n        <li>\n          When <code>WeakRef.prototype.deref</code> is called, the referent (if <emu-val>undefined</emu-val> is not returned) is kept alive so that subsequent, synchronous accesses also return the object. This list is reset when synchronous work is done using the <emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> abstract operation.\n        </li>\n\n        <li>\n          When an object which is registered with a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> becomes unreachable, a call of the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>'s cleanup callback may eventually be made, after synchronous ECMAScript execution completes.  The <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> cleanup is performed with the <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> abstract operation.\n        </li>\n      </ul>\n\n      <p>Neither of these actions (<emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> or <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>) may interrupt synchronous ECMAScript execution. Because hosts may assemble longer, synchronous ECMAScript execution runs, this specification defers the scheduling of <emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> and <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>.</p>\n\n      <p>Some ECMAScript implementations include garbage collector implementations which run in the background, including when ECMAScript is idle. Letting the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> schedule <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> allows it to resume ECMAScript execution in order to run finalizer work, which may free up held values, reducing overall memory usage.</p>\n    </emu-clause>\n\n    "}, "sec-data-blocks": {"num": "6.2.8", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A <dfn>byte value</dfn> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the range 0 through 255, inclusive. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty.  Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.8.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.8.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.8.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these  methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-atomics-object": {"num": "24.4", "title": "#sec-atomics-object The Atomics Object", "html": "<emu-clause id=\"sec-atomics-object\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics-object\">#sec-atomics-object</span> The Atomics Object</h1>\n    <p>The Atomics object:</p>\n    <ul>\n      <li>is <dfn>%Atomics%</dfn>.</li>\n      <li>is the initial value of the <emu-val>\"Atomics\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n      <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n      <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      <li>does not have a [[Construct]] internal method; it cannot be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> with the <code>new</code> operator.</li>\n      <li>does not have a [[Call]] internal method; it cannot be invoked as a function.</li>\n    </ul>\n    <p>The Atomics object provides functions that operate indivisibly (atomically) on shared memory array cells as well as functions that let agents wait for and dispatch primitive events.  When used with discipline, the Atomics functions allow multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> programs that communicate through shared memory to execute in a well-understood order even on parallel CPUs. The rules that govern shared-memory communication are provided by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, defined below.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>For informative guidelines for programming and implementing shared memory in ECMAScript, please see the notes at the end of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> section.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-abstract-operations-for-atomics\"><h1><span class=\"secnum\">24.4.1</span>#sec-abstract-operations-for-atomics Abstract Operations for Atomics</h1>...</div><div id=\"excluded-sec-atomics.add\"><h1><span class=\"secnum\">24.4.2</span>#sec-atomics.add Atomics.add ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.and\"><h1><span class=\"secnum\">24.4.3</span>#sec-atomics.and Atomics.and ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.compareexchange\"><h1><span class=\"secnum\">24.4.4</span>#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )</h1>...</div><div id=\"excluded-sec-atomics.exchange\"><h1><span class=\"secnum\">24.4.5</span>#sec-atomics.exchange Atomics.exchange ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.islockfree\"><h1><span class=\"secnum\">24.4.6</span>#sec-atomics.islockfree Atomics.isLockFree ( size )</h1>...</div><div id=\"excluded-sec-atomics.load\"><h1><span class=\"secnum\">24.4.7</span>#sec-atomics.load Atomics.load ( typedArray, index )</h1>...</div><div id=\"excluded-sec-atomics.or\"><h1><span class=\"secnum\">24.4.8</span>#sec-atomics.or Atomics.or ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.store\"><h1><span class=\"secnum\">24.4.9</span>#sec-atomics.store Atomics.store ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.sub\"><h1><span class=\"secnum\">24.4.10</span>#sec-atomics.sub Atomics.sub ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.wait\"><h1><span class=\"secnum\">24.4.11</span>#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )</h1>...</div><div id=\"excluded-sec-atomics.notify\"><h1><span class=\"secnum\">24.4.12</span>#sec-atomics.notify Atomics.notify ( typedArray, index, count )</h1>...</div><div id=\"excluded-sec-atomics.xor\"><h1><span class=\"secnum\">24.4.13</span>#sec-atomics.xor Atomics.xor ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics-@@tostringtag\"><h1><span class=\"secnum\">24.4.14</span>#sec-atomics-@@tostringtag Atomics [ @@toStringTag ]</h1>...</div></emu-clause>\n\n  "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <dfn id=\"running-execution-context\">running execution context</dfn>.  All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Environment Records.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          </td>\n          <td>\n            The generator object that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-agent-clusters": {"num": "8.7", "title": "#sec-agent-clusters Agent Clusters", "html": "<emu-clause id=\"sec-agent-clusters\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agent-clusters\">#sec-agent-clusters</span> Agent Clusters</h1>\n\n    <p>An <dfn>agent cluster</dfn> is a maximal set of agents that can communicate by operating on shared memory.</p>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Programs within different agents may share memory by unspecified means.  At a minimum, the backing memory for SharedArrayBuffer objects can be shared among the agents in the cluster.</p>\n\n      <p>There may be agents that can communicate by message passing that cannot share memory; they are never in the same agent cluster.</p>\n    </div></emu-note>\n\n    <p>Every <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belongs to exactly one agent cluster.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The agents in a cluster need not all be alive at some particular point in time.  If <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>A</b> creates another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>B</b>, after which <b>A</b> terminates and <b>B</b> creates <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>C</b>, the three agents are in the same cluster if <b>A</b> could share some memory with <b>B</b> and <b>B</b> could share some memory with <b>C</b>.</p>\n    </div></emu-note>\n\n    <p>All agents within a cluster must have the same value for the [[LittleEndian]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records.</p>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>If different agents within an agent cluster have different values of [[LittleEndian]] it becomes hard to use shared memory for multi-byte data.</p>\n    </div></emu-note>\n\n    <p>All agents within a cluster must have the same values for the [[IsLockFree1]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records; similarly for the [[IsLockFree2]] property.</p>\n\n    <p>All agents within a cluster must have different values for the [[Signifier]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records.</p>\n\n    <p>An embedding may deactivate (stop forward progress) or activate (resume forward progress) an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> without the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s knowledge or cooperation.  If the embedding does so, it must not leave some agents in the cluster active while other agents in the cluster are deactivated indefinitely.</p>\n\n    <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n      <p>The purpose of the preceding restriction is to avoid a situation where an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> deadlocks or starves because another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> has been deactivated.  For example, if an HTML shared worker that has a lifetime independent of documents in any windows were allowed to share memory with the dedicated worker of such an independent document, and the document and its dedicated worker were to be deactivated while the dedicated worker holds a lock (say, the document is pushed into its window's history), and the shared worker then tries to acquire the lock, then the shared worker will be blocked until the dedicated worker is activated again, if ever.  Meanwhile other workers trying to access the shared worker from other windows will starve.</p>\n\n      <p>The implication of the restriction is that it will not be possible to share memory between agents that don't belong to the same suspend/wake collective within the embedding.</p>\n    </div></emu-note>\n\n    <p>An embedding may terminate an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> without any of the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s cluster's other agents' prior knowledge or cooperation.  If an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is terminated not by programmatic action of its own or of another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the cluster but by forces external to the cluster, then the embedding must choose one of two strategies: Either terminate all the agents in the cluster, or provide reliable APIs that allow the agents in the cluster to coordinate so that at least one remaining member of the cluster will be able to detect the termination, with the termination data containing enough information to identify the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that was terminated.</p>\n\n    <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n      <p>Examples of that type of termination are: operating systems or users terminating agents that are running in separate processes; the embedding itself terminating an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is running in-process with the other agents when per-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> resource accounting indicates that the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is runaway.</p>\n    </div></emu-note>\n\n    <p>Prior to any evaluation of any ECMAScript code by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a cluster, the [[CandidateExecution]] field of the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> for all agents in the cluster is set to the initial <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>. The initial <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> is an <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">empty candidate execution</a></emu-xref> whose [[EventsRecords]] field is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing, for each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>, an <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> whose [[AgentSignifier]] field is that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s signifier, and whose [[EventList]] and [[AgentSynchronizesWith]] fields are empty Lists.</p>\n\n    <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n      <p>All agents in an agent cluster share the same <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> in its <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CandidateExecution]] field. The <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> is a specification mechanism used by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 7</span><div class=\"note-contents\">\n      <p>An agent cluster is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-number.epsilon": {"num": "20.1.2.1", "title": "#sec-number.epsilon Number.EPSILON", "html": "<emu-clause id=\"sec-number.epsilon\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.epsilon\">#sec-number.epsilon</span> Number.EPSILON</h1>\n        <p>The value of <code>Number.EPSILON</code> is the difference between 1 and the smallest value greater than 1 that is representable as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>, which is approximately 2.2204460492503130808472633361816 x 10<sup> - 16</sup>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-no-lineterminator-here-automatic-semicolon-insertion-list": {"num": "11.11.1", "title": "#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">#sec-no-lineterminator-here-automatic-semicolon-insertion-list</span> List of Grammar Productions with Optional Operands and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n      <ul>\n        <li><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>.</li>\n        <li>Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>) with relation to Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>) </li>\n      </ul>\n    </emu-clause>\n  "}, "sec-expression-statement": {"num": "13.5", "title": "#sec-expression-statement Expression Statement", "html": "<emu-clause id=\"sec-expression-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</span> Expression Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ExpressionStatement\" params=\"Yield, Await\" id=\"prod-ExpressionStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c38255ff\"><emu-gann>[lookahead &#8713; { <emu-t>{</emu-t>, <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t>, <emu-t>let</emu-t>\n        <emu-t>[</emu-t> }]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with a U+007B (LEFT CURLY BRACKET) because that might make it ambiguous with a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>. An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with the <code>function</code> or <code>class</code> keywords because that would make it ambiguous with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>. An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with <code>async function</code> because that would make it ambiguous with an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.  An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with the two token sequence <code>let [</code> because that would make it ambiguous with a <code>let</code> <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> whose first <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> was an <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-expression-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.5.1</span>#sec-expression-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-weak-ref.prototype": {"num": "25.1.2.1", "title": "#sec-weak-ref.prototype WeakRef.prototype", "html": "<emu-clause id=\"sec-weak-ref.prototype\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype\">#sec-weak-ref.prototype</span> WeakRef.prototype</h1>\n        <p>The initial value of <code>WeakRef.prototype</code> is the intrinsic <emu-xref href=\"#sec-properties-of-the-weak-ref-prototype-object\"><a href=\"#sec-properties-of-the-weak-ref-prototype-object\">%WeakRef.prototype%</a></emu-xref> object. </p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-suspend": {"num": "24.4.1.9", "title": "#sec-suspend Suspend ( WL, W, timeout )", "html": "<emu-clause id=\"sec-suspend\" aoid=\"Suspend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-suspend\">#sec-suspend</span> Suspend ( <var>WL</var>, <var>W</var>, <var>timeout</var> )</h1>\n        <p>The abstract operation Suspend takes arguments <var>WL</var> (a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref>), <var>W</var> (an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> signifier), and <var>timeout</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is equal to <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is on the list of waiters in <var>WL</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>() is <emu-val>true</emu-val>.</li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>) and suspend <var>W</var> for up to <var>timeout</var> milliseconds, performing the combined operation in such a way that a notification that arrives after the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> is exited but before the suspension takes effect is not lost.  <var>W</var> can notify either because the timeout expired or because it was notified explicitly by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> calling <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>), and not for any other reasons at all.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>W</var> was notified explicitly by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> calling <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Runtime Semantics: Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Runtime Semantics: Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the length of <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Let <var>n</var> be the number of leading 1 bits in <var>B</var>.</li><li>If <var>n</var> = 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>start</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>If <var>n</var> = 1 or <var>n</var> &gt; 4, throw a <emu-val>URIError</emu-val> exception.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>B</var>.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var>,<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Append <var>B</var> to  <var>Octets</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The length of <var>Octets</var> is <var>n</var>.</li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are, in order, the elements in <emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in <emu-xref href=\"#table-43\"><a href=\"#table-43\" class=\"excluded-xref\" excluded-id=\"table-43\">#table-43</a></emu-xref>.</p>\n            <emu-table id=\"table-43\" caption=\"UTF-8 Encodings\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-43\">#table-43</span> (Informative): UTF-8 Encodings</figcaption>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  </th>\n                  <th>\n                    Representation\n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    not followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation.  <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-liveness": {"num": "8.9.2", "title": "#sec-liveness Liveness", "html": "<emu-clause id=\"sec-liveness\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-liveness\">#sec-liveness</span> Liveness</h1>\n\n      <p>For some set of objects <var>S</var>, a <dfn>hypothetical WeakRef-oblivious</dfn> execution with respect to <var>S</var> is an execution whereby the abstract operation <emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref> of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> whose referent is an element of <var>S</var> always returns <emu-val>undefined</emu-val>.</p>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>-obliviousness, together with liveness, capture two notions. One, that a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> itself does not keep an object alive. Two, that cycles in liveness does not imply that an object is live. To be concrete, if determining <var>obj</var>'s liveness depends on determining the liveness of another <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> referent, <var>obj2</var>, <var>obj2</var>'s liveness cannot assume <var>obj</var>'s liveness, which would be circular reasoning.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>-obliviousness is defined on sets of objects instead of individual objects to account for cycles. If it were defined on individual objects, then an object in a cycle will be considered live even though its Object value is only observed via WeakRefs of other objects in the cycle.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        Colloquially, we say that an individual object is live if every set of objects containing it is live.\n      </div></emu-note>\n\n      <p>At any point during evaluation, a set of objects <var>S</var> is considered <dfn>live</dfn> if either of the following conditions is met: </p>\n\n      <ul>\n        <li>\n          Any element in <var>S</var> is included in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s [[KeptAlive]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n        </li>\n        <li>\n          There exists a valid future hypothetical WeakRef-oblivious execution with respect to <var>S</var> that observes the Object value of any object in <var>S</var>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        The intuition the second condition above intends to capture is that an object is live if its identity is observable via non-<emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> means. An object's identity may be observed by observing a strict equality comparison between objects or observing the object being used as key in a Map.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Presence of an object in a field, an internal slot, or a property does not imply that the object is live. For example if the object in question is never passed back to the program, then it cannot be observed.</p>\n\n        <p>This is the case for keys in a WeakMap, members of a WeakSet, as well as the [[WeakRefTarget]] and [[UnregisterToken]] fields of a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> Cell record.</p>\n\n        <p>The above definition implies that, if a key in a WeakMap is not live, then its corresponding value is not necessarily live either.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        Liveness is the lower bound for guaranteeing which WeakRefs engines must not empty. Liveness as defined here is undecidable. In practice, engines use conservative approximations such as reachability. There is expected to be significant implementation leeway.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, return 0.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"figure-1": "Figure 1", "figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-2": "Table 3", "table-3": "Table 4", "table-22": "Table 23", "table-23": "Table 24", "table-24": "Table 25", "table-agent-record": "Table 27", "table-36": "Table 39", "table-37": "Table 40", "table-cyclic-module-fields": "Table 41", "table-cyclic-module-methods": "Table 42", "table-43": "Table 48", "table-the-typedarray-constructors": "Table 62"}}, "to": {"secList": ["sec-finalization-registry.prototype.register", "sec-objects", "sec-forward-progress", "sec-shared-memory-guidelines", "sec-agents", "sec-weakref-invariants", "sec-data-blocks", "sec-example-cyclic-module-record-graphs", "sec-atomics-object", "sec-execution-contexts", "sec-agent-clusters", "sec-number.epsilon", "sec-no-lineterminator-here-automatic-semicolon-insertion-list", "sec-expression-statement", "sec-weak-ref.prototype", "sec-suspend", "sec-decode", "sec-cyclic-module-records", "sec-liveness", "sec-atomics.notify"], "secData": {"sec-finalization-registry.prototype.register": {"num": "25.2.3.2", "title": "#sec-finalization-registry.prototype.register FinalizationRegistry.prototype.register ( target, heldValue [ , unregisterToken ] )", "html": "<emu-clause id=\"sec-finalization-registry.prototype.register\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-finalization-registry.prototype.register\">#sec-finalization-registry.prototype.register</span> FinalizationRegistry.prototype.register ( <var>target</var>, <var>heldValue</var> [ , <var>unregisterToken</var> ] )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>finalizationRegistry</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>finalizationRegistry</var>, [[Cells]]).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>target</var>, <var>heldValue</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unregisterToken</var>) is not Object, then<ol><li>If <var>unregisterToken</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set <var>unregisterToken</var> to <emu-const>empty</emu-const>.</li></ol></li><li>Let <var>cell</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[WeakRefTarget]]: <var>target</var>, [[HeldValue]]: <var>heldValue</var>, [[UnregisterToken]]: <var>unregisterToken</var> }.</li><li>Append <var>cell</var> to <var>finalizationRegistry</var>.[[Cells]].</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Based on the algorithms and definitions in this specification, <var>cell</var>.[[HeldValue]] is <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> when <var>cell</var> is in <var>finalizationRegistry</var>.[[Cells]]; however, this does not necessarily mean that <var>cell</var>.[[UnregisterToken]] or <var>cell</var>.[[Target]] are <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref>. For example, registering an object with itself as its unregister token would not keep the object alive forever.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-objects": {"num": "4.3.1", "title": "#sec-objects Objects", "html": "<emu-clause id=\"sec-objects\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-objects\">#sec-objects</span> Objects</h1>\n      <p>Even though ECMAScript includes syntax for class definitions, ECMAScript objects are not fundamentally class-based such as those in C++, Smalltalk, or Java. Instead objects may be created in various ways including via a literal notation or via <em>constructors</em> which create objects and then execute code that initializes all or part of them by assigning initial values to their properties. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is a function that has a property named <emu-val>\"prototype\"</emu-val> that is used to implement <em>prototype-based inheritance</em> and <em>shared properties</em>. Objects are created by using constructors in <b>new</b> expressions; for example, <code>new Date(2009, 11)</code> creates a new Date object. Invoking a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> without using <b>new</b> has consequences that depend on the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. For example, <code>Date()</code> produces a string representation of the current date and time rather than an object.</p>\n      <p>Every object created by a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has an implicit reference (called the object's <em>prototype</em>) to the value of its <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s <emu-val>\"prototype\"</emu-val> property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the <em>prototype chain</em>. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>\n      <emu-figure id=\"figure-1\" caption=\"Object/Prototype Relationships\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-1\">#figure-1</span>: Object/Prototype Relationships</figcaption>\n        <object data=\"img/figure-1.svg\" height=\"354\" type=\"image/svg+xml\" width=\"719\"><img alt=\"An image of lots of boxes and arrows.\" height=\"354\" src=\"img/figure-1.png\" width=\"719\"></object>\n      </figure></emu-figure>\n      <p>In a class-based object-oriented language, in general, state is carried by instances, methods are carried by classes, and inheritance is only of structure and behaviour. In ECMAScript, the state and methods are carried by objects, while structure, behaviour, and state are all inherited.</p>\n      <p>All objects that do not directly contain a particular property that their prototype contains share that property and its value. Figure 1 illustrates this:</p>\n      <p><b>CF</b> is a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> (and also an object). Five objects have been created by using <code>new</code> expressions: <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b>. Each of these objects contains properties named <emu-val>\"q1\"</emu-val> and <emu-val>\"q2\"</emu-val>. The dashed lines represent the implicit prototype relationship; so, for example, <b>cf<sub>3</sub></b>'s prototype is <b>CF<sub>p</sub></b>. The <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, <b>CF</b>, has two properties itself, named <emu-val>\"P1\"</emu-val> and <emu-val>\"P2\"</emu-val>, which are not visible to <b>CF<sub>p</sub></b>, <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, or <b>cf<sub>5</sub></b>. The property named <emu-val>\"CFP1\"</emu-val> in <b>CF<sub>p</sub></b> is shared by <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> (but not by <b>CF</b>), as are any properties found in <b>CF<sub>p</sub></b>'s implicit prototype chain that are not named <emu-val>\"q1\"</emu-val>, <emu-val>\"q2\"</emu-val>, or <emu-val>\"CFP1\"</emu-val>. Notice that there is no implicit prototype link between <b>CF</b> and <b>CF<sub>p</sub></b>.</p>\n      <p>Unlike most class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object's properties. In the above diagram, one could add a new shared property for <b>cf<sub>1</sub></b>, <b>cf<sub>2</sub></b>, <b>cf<sub>3</sub></b>, <b>cf<sub>4</sub></b>, and <b>cf<sub>5</sub></b> by assigning a new value to the property in <b>CF<sub>p</sub></b>.</p>\n      <p>Although ECMAScript objects are not inherently class-based, it is often convenient to define class-like abstractions based upon a common pattern of <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions, prototype objects, and methods. The ECMAScript built-in objects themselves follow such a class-like pattern. Beginning with ECMAScript 2015, the ECMAScript language includes syntactic class definitions that permit programmers to concisely define objects that conform to the same class-like abstraction pattern used by the built-in objects.</p>\n    </emu-clause>\n\n    "}, "sec-forward-progress": {"num": "8.8", "title": "#sec-forward-progress Forward Progress", "html": "<emu-clause id=\"sec-forward-progress\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forward-progress\">#sec-forward-progress</span> Forward Progress</h1>\n    <p>For an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to <em>make forward progress</em> is for it to perform an evaluation step according to this specification.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> becomes <em>blocked</em> when its <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> waits synchronously and indefinitely for an external event. Only agents whose <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CanBlock]] property is <emu-val>true</emu-val> can become blocked in this sense. An <em>unblocked</em> <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is one that is not blocked.</p>\n\n    <p>Implementations must ensure that:</p>\n    <ul>\n      <li>every unblocked <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> with a dedicated <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> eventually makes forward progress</li>\n      <li>in a set of agents that share an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> eventually makes forward progress</li>\n      <li>an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> does not cause another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to become blocked except via explicit APIs that provide blocking.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>This, along with the liveness guarantee in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, ensures that all <emu-const>SeqCst</emu-const> writes eventually become observable to all agents.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-shared-memory-guidelines": {"num": "28.11", "title": "#sec-shared-memory-guidelines Shared Memory Guidelines", "html": "<emu-clause id=\"sec-shared-memory-guidelines\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-shared-memory-guidelines\">#sec-shared-memory-guidelines</span> Shared Memory Guidelines</h1>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript programmers working with shared memory.</p>\n      <p>We recommend programs be kept data race free, i.e., make it so that it is impossible for there to be concurrent non-atomic operations on the same memory location. Data race free programs have interleaving semantics where each step in the evaluation semantics of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> are interleaved with each other. For data race free programs, it is not necessary to understand the details of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The details are unlikely to build intuition that will help one to better write ECMAScript.</p>\n      <p>More generally, even if a program is not data race free it may have predictable behaviour, so long as atomic operations are not involved in any data races and the operations that race all have the same access size. The simplest way to arrange for atomics not to be involved in races is to ensure that different memory cells are used by atomic and non-atomic operations and that atomic accesses of different sizes are not used to access the same cells at the same time. Effectively, the program should treat shared memory as strongly typed as much as possible. One still cannot depend on the ordering and timing of non-atomic accesses that race, but if memory is treated as strongly typed the racing accesses will not \"tear\" (bits of their values will not be mixed).</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers writing compiler transformations for programs using shared memory.</p>\n      <p>It is desirable to allow most program transformations that are valid in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting, to ensure that the performance of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program is as good as it would be in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting. Frequently these transformations are hard to judge. We outline some rules about program transformations that are intended to be taken as normative (in that they are implied by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> or stronger than what the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> implies) but which are likely not exhaustive. These rules are intended to apply to program transformations that precede the introductions of the events that make up the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n      <p>Let an <dfn>agent-order slice</dfn> be the subset of the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> pertaining to a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n      <p>Let <dfn>possible read values</dfn> of a read event be the set of all values of <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref> for that event across all valid executions.</p>\n      <p>Any transformation of an agent-order slice that is valid in the absence of shared memory is valid in the presence of shared memory, with the following exceptions.</p>\n      <ul>\n        <li>\n          <p><em>Atomics are carved in stone</em>: Program transformations must not cause the <emu-const>SeqCst</emu-const> events in an agent-order slice to be reordered with its <emu-const>Unordered</emu-const> operations, nor its <emu-const>SeqCst</emu-const> operations to be reordered with each other, nor may a program transformation remove a <emu-const>SeqCst</emu-const> operation from the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n          <p>(In practice, the prohibition on reorderings forces a compiler to assume that every <emu-const>SeqCst</emu-const> operation is a synchronization and included in the final <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref>, which it would usually have to assume anyway in the absence of inter-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program analysis. It also forces the compiler to assume that every call where the callee's effects on the <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref> are unknown may contain <emu-const>SeqCst</emu-const> operations.)</p>\n        </li>\n        <li>\n          <p><em>Reads must be stable</em>: Any given shared memory read must only observe a single value in an execution.</p>\n          <p>(For example, if what is semantically a single read in the program is executed multiple times then the program is subsequently allowed to observe only one of the values read. A transformation known as rematerialization can violate this rule.)</p>\n        </li>\n        <li>\n          <p><em>Writes must be stable</em>: All observable writes to shared memory must follow from program semantics in an execution.</p>\n          <p>(For example, a transformation may not introduce certain observable writes, such as by using read-modify-write operations on a larger location to write a smaller datum, writing a value to memory that the program could not have written, or writing a just-read value back to the location it was read from, if that location could have been overwritten by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> after the read.)</p>\n        </li>\n        <li>\n          <p><em>Possible read values must be nonempty</em>: Program transformations cannot cause the possible read values of a shared memory read to become empty.</p>\n          <p>(Counterintuitively, this rule in effect restricts transformations on writes, because writes have force in <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> insofar as to be read by read events. For example, writes may be moved and coalesced and sometimes reordered between two <emu-const>SeqCst</emu-const> operations, but the transformation may not remove every write that updates a location; some write must be preserved.)</p>\n        </li>\n      </ul>\n      <p>Examples of transformations that remain valid are: merging multiple non-atomic reads from the same location, reordering non-atomic reads, introducing speculative non-atomic reads, merging multiple non-atomic writes to the same location, reordering non-atomic writes to different locations, and hoisting non-atomic reads out of loops even if that affects termination. Note in general that aliased TypedArrays make it hard to prove that locations are different.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers generating machine code for shared memory accesses.</p>\n      <p>For architectures with memory models no weaker than those of ARM or Power, non-atomic stores and loads may be compiled to bare stores and loads on the target architecture. Atomic stores and loads may be compiled down to instructions that guarantee sequential consistency. If no such instructions exist, memory barriers are to be employed, such as placing barriers on both sides of a bare store or load. Read-modify-write operations may be compiled to read-modify-write instructions on the target architecture, such as <code>LOCK</code>-prefixed instructions on x86, load-exclusive/store-exclusive instructions on ARM, and load-link/store-conditional instructions on Power.</p>\n      <p>Specifically, the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> is intended to allow code generation as follows.</p>\n      <ul>\n        <li>Every atomic operation in the program is assumed to be necessary.</li>\n        <li>Atomic operations are never rearranged with each other or with non-atomic operations.</li>\n        <li>Functions are always assumed to perform atomic operations.</li>\n        <li>Atomic operations are never implemented as read-modify-write operations on larger data, but as non-lock-free atomics if the platform does not have atomic operations of the appropriate size. (We already assume that every platform has normal memory access operations of every interesting size.)</li>\n      </ul>\n      <p>Naive code generation uses these patterns:</p>\n      <ul>\n        <li>Regular loads and stores compile to single load and store instructions.</li>\n        <li>Lock-free atomic loads and stores compile to a full (sequentially consistent) fence, a regular load or store, and a full fence.</li>\n        <li>Lock-free atomic read-modify-write accesses compile to a full fence, an atomic read-modify-write instruction sequence, and a full fence.</li>\n        <li>Non-lock-free atomics compile to a spinlock acquire, a full fence, a series of non-atomic load and store instructions, a full fence, and a spinlock release.</li>\n      </ul>\n      <p>That mapping is correct so long as an atomic operation on an address range does not race with a non-atomic write or with an atomic operation of different size. However, that is all we need: the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> effectively demotes the atomic operations involved in a race to non-atomic status. On the other hand, the naive mapping is quite strong: it allows atomic operations to be used as sequentially consistent fences, which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> does not actually guarantee.</p>\n      <p>A number of local improvements to those basic patterns are also intended to be legal:</p>\n      <ul>\n        <li>There are obvious platform-dependent improvements that remove redundant fences. For example, on x86 the fences around lock-free atomic loads and stores can always be omitted except for the fence following a store, and no fence is needed for lock-free read-modify-write instructions, as these all use LOCK-prefixed instructions. On many platforms there are fences of several strengths, and weaker fences can be used in certain contexts without destroying sequential consistency.</li>\n        <li>Most modern platforms support lock-free atomics for all the data sizes required by ECMAScript atomics. Should non-lock-free atomics be needed, the fences surrounding the body of the atomic operation can usually be folded into the lock and unlock steps. The simplest solution for non-lock-free atomics is to have a single lock word per SharedArrayBuffer.</li>\n        <li>There are also more complicated platform-dependent local improvements, requiring some code analysis. For example, two back-to-back fences often have the same effect as a single fence, so if code is generated for two atomic operations in sequence, only a single fence need separate them. On x86, even a single fence separating atomic stores can be omitted, as the fence following a store is only needed to separate the store from a subsequent load.</li>\n      </ul>\n    </div></emu-note>\n  </emu-clause>\n"}, "sec-agents": {"num": "8.6", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\">agent</dfn> comprises a set of ECMAScript execution contexts, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\">Agent Record</dfn>, and an <dfn id=\"executing-thread\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s execution contexts independently of other agents, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple agents, provided none of the agents sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> and should be the alternative that is most efficient for the implementation. Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-byte values are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[KeptAlive]]</td>\n            <td><emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of objects</td>\n            <td>Initially a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, representing the list of objects to be kept alive until the end of the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref></td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free. Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses. See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">8.6.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">8.6.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-weakref-invariants": {"num": "8.9.1", "title": "#sec-weakref-invariants Objectives", "html": "<emu-clause id=\"sec-weakref-invariants\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakref-invariants\">#sec-weakref-invariants</span> Objectives</h1>\n\n      <p>This specification does not make any guarantees that any object will be garbage collected. Objects which are not <emu-xref href=\"#sec-liveness\"><a href=\"#sec-liveness\">live</a></emu-xref> may be released after long periods of time, or never at all. For this reason, this specification uses the term \"may\" when describing behaviour triggered by garbage collection.</p>\n\n      <p>The semantics of <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> and <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> objects is based on two operations which happen at particular points in time:</p>\n\n      <ul>\n        <li>\n          When <code>WeakRef.prototype.deref</code> is called, the referent (if <emu-val>undefined</emu-val> is not returned) is kept alive so that subsequent, synchronous accesses also return the object. This list is reset when synchronous work is done using the <emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> abstract operation.\n        </li>\n\n        <li>\n          When an object which is registered with a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> becomes unreachable, a call of the <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref>'s cleanup callback may eventually be made, after synchronous ECMAScript execution completes. The <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> cleanup is performed with the <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> abstract operation.\n        </li>\n      </ul>\n\n      <p>Neither of these actions (<emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> or <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref>) may interrupt synchronous ECMAScript execution. Because hosts may assemble longer, synchronous ECMAScript execution runs, this specification defers the scheduling of <emu-xref aoid=\"ClearKeptObjects\"><a href=\"#sec-clear-kept-objects\">ClearKeptObjects</a></emu-xref> and <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>.</p>\n\n      <p>Some ECMAScript implementations include garbage collector implementations which run in the background, including when ECMAScript is idle. Letting the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref> schedule <emu-xref aoid=\"CleanupFinalizationRegistry\"><a href=\"#sec-cleanup-finalization-registry\">CleanupFinalizationRegistry</a></emu-xref> allows it to resume ECMAScript execution in order to run finalizer work, which may free up held values, reducing overall memory usage.</p>\n    </emu-clause>\n\n    "}, "sec-data-blocks": {"num": "6.2.8", "title": "#sec-data-blocks Data Blocks", "html": "<emu-clause id=\"sec-data-blocks\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-blocks\">#sec-data-blocks</span> Data Blocks</h1>\n      <p>The <dfn>Data Block</dfn> specification type is used to describe a distinct and mutable sequence of byte-sized (8 bit) numeric values. A <dfn>byte value</dfn> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value in the range 0 through 255, inclusive. A Data Block value is created with a fixed number of bytes that each have the initial value 0.</p>\n      <p>For notational convenience within this specification, an array-like syntax can be used to access the individual bytes of a Data Block value. This notation presents a Data Block value as a 0-origined <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>\n      <p>A data block that resides in memory that can be referenced from multiple agents concurrently is designated a <dfn>Shared Data Block</dfn>. A Shared Data Block has an identity (for the purposes of equality testing Shared Data Block values) that is <em>address-free</em>: it is tied not to the virtual addresses the block is mapped to in any process, but to the set of locations in memory that the block represents. Two data blocks are equal only if the sets of the locations they contain are equal; otherwise, they are not equal and the intersection of the sets of locations they contain is empty. Finally, Shared Data Blocks can be distinguished from Data Blocks.</p>\n      <p>The semantics of Shared Data Blocks is defined using Shared Data Block events by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> below introduce Shared Data Block events and act as the interface between evaluation semantics and the event semantics of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The events form a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>, on which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> acts as a filter. Please consult the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for full semantics.</p>\n      <p>Shared Data Block events are modeled by Records, defined in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Data Block values:</p>\n\n      <div id=\"excluded-sec-createbytedatablock\"><h1><span class=\"secnum\">6.2.8.1</span>#sec-createbytedatablock CreateByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-createsharedbytedatablock\"><h1><span class=\"secnum\">6.2.8.2</span>#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )</h1>...</div><div id=\"excluded-sec-copydatablockbytes\"><h1><span class=\"secnum\">6.2.8.3</span>#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )</h1>...</div></emu-clause>\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-atomics-object": {"num": "24.4", "title": "#sec-atomics-object The Atomics Object", "html": "<emu-clause id=\"sec-atomics-object\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics-object\">#sec-atomics-object</span> The Atomics Object</h1>\n    <p>The Atomics object:</p>\n    <ul>\n      <li>is <dfn>%Atomics%</dfn>.</li>\n      <li>is the initial value of the <emu-val>\"Atomics\"</emu-val> property of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.</li>\n      <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n      <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      <li>does not have a [[Construct]] internal method; it cannot be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> with the <code>new</code> operator.</li>\n      <li>does not have a [[Call]] internal method; it cannot be invoked as a function.</li>\n    </ul>\n    <p>The Atomics object provides functions that operate indivisibly (atomically) on shared memory array cells as well as functions that let agents wait for and dispatch primitive events. When used with discipline, the Atomics functions allow multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> programs that communicate through shared memory to execute in a well-understood order even on parallel CPUs. The rules that govern shared-memory communication are provided by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, defined below.</p>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>For informative guidelines for programming and implementing shared memory in ECMAScript, please see the notes at the end of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> section.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-abstract-operations-for-atomics\"><h1><span class=\"secnum\">24.4.1</span>#sec-abstract-operations-for-atomics Abstract Operations for Atomics</h1>...</div><div id=\"excluded-sec-atomics.add\"><h1><span class=\"secnum\">24.4.2</span>#sec-atomics.add Atomics.add ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.and\"><h1><span class=\"secnum\">24.4.3</span>#sec-atomics.and Atomics.and ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.compareexchange\"><h1><span class=\"secnum\">24.4.4</span>#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )</h1>...</div><div id=\"excluded-sec-atomics.exchange\"><h1><span class=\"secnum\">24.4.5</span>#sec-atomics.exchange Atomics.exchange ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.islockfree\"><h1><span class=\"secnum\">24.4.6</span>#sec-atomics.islockfree Atomics.isLockFree ( size )</h1>...</div><div id=\"excluded-sec-atomics.load\"><h1><span class=\"secnum\">24.4.7</span>#sec-atomics.load Atomics.load ( typedArray, index )</h1>...</div><div id=\"excluded-sec-atomics.or\"><h1><span class=\"secnum\">24.4.8</span>#sec-atomics.or Atomics.or ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.store\"><h1><span class=\"secnum\">24.4.9</span>#sec-atomics.store Atomics.store ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.sub\"><h1><span class=\"secnum\">24.4.10</span>#sec-atomics.sub Atomics.sub ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics.wait\"><h1><span class=\"secnum\">24.4.11</span>#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )</h1>...</div><div id=\"excluded-sec-atomics.notify\"><h1><span class=\"secnum\">24.4.12</span>#sec-atomics.notify Atomics.notify ( typedArray, index, count )</h1>...</div><div id=\"excluded-sec-atomics.xor\"><h1><span class=\"secnum\">24.4.13</span>#sec-atomics.xor Atomics.xor ( typedArray, index, value )</h1>...</div><div id=\"excluded-sec-atomics-@@tostringtag\"><h1><span class=\"secnum\">24.4.14</span>#sec-atomics-@@tostringtag Atomics [ @@toStringTag ]</h1>...</div></emu-clause>\n\n  "}, "sec-execution-contexts": {"num": "8.3", "title": "#sec-execution-contexts Execution Contexts", "html": "<emu-clause id=\"sec-execution-contexts\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-execution-contexts\">#sec-execution-contexts</span> Execution Contexts</h1>\n    <p>An <dfn>execution context</dfn> is a specification device that is used to track the runtime evaluation of code by an ECMAScript implementation. At any point in time, there is at most one execution context per <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is actually executing code. This is known as the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <dfn id=\"running-execution-context\">running execution context</dfn>. All references to the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> in this specification denote the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</p>\n    <p>The <dfn id=\"execution-context-stack\">execution context stack</dfn> is used to track execution contexts. The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is always the top element of this stack. A new execution context is created whenever control is transferred from the executable code associated with the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> to executable code that is not associated with that execution context. The newly created execution context is pushed onto the stack and becomes the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context contains whatever implementation specific state is necessary to track the execution progress of its associated code. Each execution context has at least the state components listed in <emu-xref href=\"#table-22\"><a href=\"#table-22\" class=\"excluded-xref\" excluded-id=\"table-22\">#table-22</a></emu-xref>.</p>\n    <emu-table id=\"table-22\" caption=\"State Components for All Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-22\">#table-22</span>: State Components for All Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            code evaluation state\n          </td>\n          <td>\n            Any state needed to perform, suspend, and resume evaluation of the code associated with this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Function\n          </td>\n          <td>\n            If this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating the code of a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>, then the value of this component is that <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. If the context is evaluating the code of a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> or <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>\n          </td>\n          <td>\n            The <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            ScriptOrModule\n          </td>\n          <td>\n            The <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> or <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> from which associated code originates. If there is no originating script or module, as is the case for the original <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> created in <emu-xref aoid=\"InitializeHostDefinedRealm\"><a href=\"#sec-initializehostdefinedrealm\">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>Evaluation of code by the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> status among execution contexts usually occurs in stack-like last-in/first-out manner. However, some ECMAScript features require non-LIFO transitions of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>The value of the <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called <dfn id=\"current-realm\">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> is also called the <dfn id=\"active-function-object\">active function object</dfn>.</p>\n    <p>Execution contexts for ECMAScript code have the additional state components listed in <emu-xref href=\"#table-23\"><a href=\"#table-23\" class=\"excluded-xref\" excluded-id=\"table-23\">#table-23</a></emu-xref>.</p>\n    <emu-table id=\"table-23\" caption=\"Additional State Components for ECMAScript Code Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-23\">#table-23</span>: Additional State Components for ECMAScript Code Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            LexicalEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> used to resolve identifier references made by code within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        <tr>\n          <td>\n            VariableEnvironment\n          </td>\n          <td>\n            Identifies the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that holds bindings created by <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt>s within this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>The LexicalEnvironment and VariableEnvironment components of an execution context are always Environment Records.</p>\n    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in <emu-xref href=\"#table-24\"><a href=\"#table-24\" class=\"excluded-xref\" excluded-id=\"table-24\">#table-24</a></emu-xref>.</p>\n    <emu-table id=\"table-24\" caption=\"Additional State Components for Generator Execution Contexts\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-24\">#table-24</span>: Additional State Components for Generator Execution Contexts</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Component\n          </th>\n          <th>\n            Purpose\n          </th>\n        </tr>\n        <tr>\n          <td>\n            Generator\n          </td>\n          <td>\n            The generator object that this <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is evaluating.\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In most situations only the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> (the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>) is directly manipulated by algorithms within this specification. Hence when the terms &#8220;LexicalEnvironment&#8221;, and &#8220;VariableEnvironment&#8221; are used without qualification they are in reference to those components of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</p>\n    <p>An execution context is purely a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation. It is impossible for ECMAScript code to directly access or observe an execution context.</p>\n\n    <div id=\"excluded-sec-getactivescriptormodule\"><h1><span class=\"secnum\">8.3.1</span>#sec-getactivescriptormodule GetActiveScriptOrModule ( )</h1>...</div><div id=\"excluded-sec-resolvebinding\"><h1><span class=\"secnum\">8.3.2</span>#sec-resolvebinding ResolveBinding ( name [ , env ] )</h1>...</div><div id=\"excluded-sec-getthisenvironment\"><h1><span class=\"secnum\">8.3.3</span>#sec-getthisenvironment GetThisEnvironment ( )</h1>...</div><div id=\"excluded-sec-resolvethisbinding\"><h1><span class=\"secnum\">8.3.4</span>#sec-resolvethisbinding ResolveThisBinding ( )</h1>...</div><div id=\"excluded-sec-getnewtarget\"><h1><span class=\"secnum\">8.3.5</span>#sec-getnewtarget GetNewTarget ( )</h1>...</div><div id=\"excluded-sec-getglobalobject\"><h1><span class=\"secnum\">8.3.6</span>#sec-getglobalobject GetGlobalObject ( )</h1>...</div></emu-clause>\n\n  "}, "sec-agent-clusters": {"num": "8.7", "title": "#sec-agent-clusters Agent Clusters", "html": "<emu-clause id=\"sec-agent-clusters\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agent-clusters\">#sec-agent-clusters</span> Agent Clusters</h1>\n\n    <p>An <dfn>agent cluster</dfn> is a maximal set of agents that can communicate by operating on shared memory.</p>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Programs within different agents may share memory by unspecified means. At a minimum, the backing memory for SharedArrayBuffer objects can be shared among the agents in the cluster.</p>\n\n      <p>There may be agents that can communicate by message passing that cannot share memory; they are never in the same agent cluster.</p>\n    </div></emu-note>\n\n    <p>Every <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belongs to exactly one agent cluster.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The agents in a cluster need not all be alive at some particular point in time. If <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>A</b> creates another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>B</b>, after which <b>A</b> terminates and <b>B</b> creates <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> <b>C</b>, the three agents are in the same cluster if <b>A</b> could share some memory with <b>B</b> and <b>B</b> could share some memory with <b>C</b>.</p>\n    </div></emu-note>\n\n    <p>All agents within a cluster must have the same value for the [[LittleEndian]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records.</p>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>If different agents within an agent cluster have different values of [[LittleEndian]] it becomes hard to use shared memory for multi-byte data.</p>\n    </div></emu-note>\n\n    <p>All agents within a cluster must have the same values for the [[IsLockFree1]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records; similarly for the [[IsLockFree2]] property.</p>\n\n    <p>All agents within a cluster must have different values for the [[Signifier]] property in their respective <emu-xref href=\"#agent\"><a href=\"#agent\">Agent</a></emu-xref> Records.</p>\n\n    <p>An embedding may deactivate (stop forward progress) or activate (resume forward progress) an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> without the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s knowledge or cooperation. If the embedding does so, it must not leave some agents in the cluster active while other agents in the cluster are deactivated indefinitely.</p>\n\n    <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n      <p>The purpose of the preceding restriction is to avoid a situation where an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> deadlocks or starves because another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> has been deactivated. For example, if an HTML shared worker that has a lifetime independent of documents in any windows were allowed to share memory with the dedicated worker of such an independent document, and the document and its dedicated worker were to be deactivated while the dedicated worker holds a lock (say, the document is pushed into its window's history), and the shared worker then tries to acquire the lock, then the shared worker will be blocked until the dedicated worker is activated again, if ever. Meanwhile other workers trying to access the shared worker from other windows will starve.</p>\n\n      <p>The implication of the restriction is that it will not be possible to share memory between agents that don't belong to the same suspend/wake collective within the embedding.</p>\n    </div></emu-note>\n\n    <p>An embedding may terminate an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> without any of the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s cluster's other agents' prior knowledge or cooperation. If an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is terminated not by programmatic action of its own or of another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the cluster but by forces external to the cluster, then the embedding must choose one of two strategies: Either terminate all the agents in the cluster, or provide reliable APIs that allow the agents in the cluster to coordinate so that at least one remaining member of the cluster will be able to detect the termination, with the termination data containing enough information to identify the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that was terminated.</p>\n\n    <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n      <p>Examples of that type of termination are: operating systems or users terminating agents that are running in separate processes; the embedding itself terminating an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> that is running in-process with the other agents when per-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> resource accounting indicates that the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is runaway.</p>\n    </div></emu-note>\n\n    <p>Prior to any evaluation of any ECMAScript code by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a cluster, the [[CandidateExecution]] field of the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> for all agents in the cluster is set to the initial <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref>. The initial <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> is an <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">empty candidate execution</a></emu-xref> whose [[EventsRecords]] field is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing, for each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>, an <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> whose [[AgentSignifier]] field is that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s signifier, and whose [[EventList]] and [[AgentSynchronizesWith]] fields are empty Lists.</p>\n\n    <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n      <p>All agents in an agent cluster share the same <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> in its <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CandidateExecution]] field. The <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> is a specification mechanism used by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 7</span><div class=\"note-contents\">\n      <p>An agent cluster is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n  </emu-clause>\n\n  "}, "sec-number.epsilon": {"num": "20.1.2.1", "title": "#sec-number.epsilon Number.EPSILON", "html": "<emu-clause id=\"sec-number.epsilon\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-number.epsilon\">#sec-number.epsilon</span> Number.EPSILON</h1>\n        <p>The value of <code>Number.EPSILON</code> is the difference between 1 and the smallest value greater than 1 that is representable as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>, which is approximately 2.2204460492503130808472633361816 x 10<sup>-16</sup>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-no-lineterminator-here-automatic-semicolon-insertion-list": {"num": "11.11.1", "title": "#sec-no-lineterminator-here-automatic-semicolon-insertion-list List of Grammar Productions with Optional Operands and \u201c[no LineTerminator here]\u201d", "html": "<emu-clause id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-no-lineterminator-here-automatic-semicolon-insertion-list\">#sec-no-lineterminator-here-automatic-semicolon-insertion-list</span> List of Grammar Productions with Optional Operands and &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221;</h1>\n      <ul>\n        <li><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt>.</li>\n        <li><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>.</li>\n        <li>Async Function Definitions (<emu-xref href=\"#sec-async-function-definitions\"><a href=\"#sec-async-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</a></emu-xref>) with relation to Function Definitions (<emu-xref href=\"#sec-function-definitions\"><a href=\"#sec-function-definitions\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</a></emu-xref>)</li>\n      </ul>\n    </emu-clause>\n  "}, "sec-expression-statement": {"num": "13.5", "title": "#sec-expression-statement Expression Statement", "html": "<emu-clause id=\"sec-expression-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</span> Expression Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ExpressionStatement\" params=\"Yield, Await\" id=\"prod-ExpressionStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c38255ff\"><emu-gann>[lookahead &#8713; { <emu-t>{</emu-t>, <emu-t>function</emu-t>, <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>, <emu-t>class</emu-t>, <emu-t>let</emu-t>\n        <emu-t>[</emu-t> }]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with a U+007B (LEFT CURLY BRACKET) because that might make it ambiguous with a <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>. An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with the <code>function</code> or <code>class</code> keywords because that would make it ambiguous with a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>. An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with <code>async function</code> because that would make it ambiguous with an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>. An <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> cannot start with the two token sequence <code>let [</code> because that would make it ambiguous with a <code>let</code> <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> whose first <emu-nt><a href=\"#prod-LexicalBinding\">LexicalBinding</a></emu-nt> was an <emu-nt><a href=\"#prod-ArrayBindingPattern\">ArrayBindingPattern</a></emu-nt>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-expression-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.5.1</span>#sec-expression-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-weak-ref.prototype": {"num": "25.1.2.1", "title": "#sec-weak-ref.prototype WeakRef.prototype", "html": "<emu-clause id=\"sec-weak-ref.prototype\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weak-ref.prototype\">#sec-weak-ref.prototype</span> WeakRef.prototype</h1>\n        <p>The initial value of <code>WeakRef.prototype</code> is the intrinsic <emu-xref href=\"#sec-properties-of-the-weak-ref-prototype-object\"><a href=\"#sec-properties-of-the-weak-ref-prototype-object\">%WeakRef.prototype%</a></emu-xref> object.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-suspend": {"num": "24.4.1.9", "title": "#sec-suspend Suspend ( WL, W, timeout )", "html": "<emu-clause id=\"sec-suspend\" aoid=\"Suspend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-suspend\">#sec-suspend</span> Suspend ( <var>WL</var>, <var>W</var>, <var>timeout</var> )</h1>\n        <p>The abstract operation Suspend takes arguments <var>WL</var> (a <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">WaiterList</a></emu-xref>), <var>W</var> (an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> signifier), and <var>timeout</var> (a Number). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is in the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> for <var>WL</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is equal to <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is on the list of waiters in <var>WL</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>() is <emu-val>true</emu-val>.</li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>) and suspend <var>W</var> for up to <var>timeout</var> milliseconds, performing the combined operation in such a way that a notification that arrives after the <emu-xref href=\"#sec-getwaiterlist\"><a href=\"#sec-getwaiterlist\">critical section</a></emu-xref> is exited but before the suspension takes effect is not lost. <var>W</var> can notify either because the timeout expired or because it was notified explicitly by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> calling <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>), and not for any other reasons at all.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>W</var> was notified explicitly by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> calling <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>), return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-decode": {"num": "18.2.6.1.2", "title": "#sec-decode Runtime Semantics: Decode ( string, reservedSet )", "html": "<emu-clause id=\"sec-decode\" aoid=\"Decode\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decode\">#sec-decode</span> Runtime Semantics: Decode ( <var>string</var>, <var>reservedSet</var> )</h1>\n          <p>The abstract operation Decode takes arguments <var>string</var> (a String) and <var>reservedSet</var> (a String). It performs URI unescaping and decoding. It performs the following steps when called:</p>\n          <emu-alg><ol><li>Let <var>strLen</var> be the length of <var>string</var>.</li><li>Let <var>R</var> be the empty String.</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> equals <var>strLen</var>, return <var>R</var>.</li><li>Let <var>C</var> be the code unit at index <var>k</var> within <var>string</var>.</li><li>If <var>C</var> is not the code unit 0x0025 (PERCENT SIGN), then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>start</var> be <var>k</var>.</li><li>If <var>k</var> + 2 is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Let <var>n</var> be the number of leading 1 bits in <var>B</var>.</li><li>If <var>n</var> = 0, then<ol><li>Let <var>C</var> be the code unit whose value is <var>B</var>.</li><li>If <var>C</var> is not in <var>reservedSet</var>, then<ol><li>Let <var>S</var> be the String value containing only the code unit <var>C</var>.</li></ol></li><li>Else,<ol><li>Let <var>S</var> be the <emu-xref href=\"#substring\"><a href=\"#substring\">substring</a></emu-xref> of <var>string</var> from <var>start</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>If <var>n</var> = 1 or <var>n</var> &gt; 4, throw a <emu-val>URIError</emu-val> exception.</li><li>If <var>k</var> + (3 &#215; (<var>n</var> - 1)) is greater than or equal to <var>strLen</var>, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>Octets</var> be a new <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing <var>B</var>.</li><li>Let <var>j</var> be 1.</li><li>Repeat, while <var>j</var> &lt; <var>n</var>,<ol><li>Set <var>k</var> to <var>k</var> + 1.</li><li>If the code unit at index <var>k</var> within <var>string</var> is not the code unit 0x0025 (PERCENT SIGN), throw a <emu-val>URIError</emu-val> exception.</li><li>If the code units at index (<var>k</var> + 1) and (<var>k</var> + 2) within <var>string</var> do not represent hexadecimal digits, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>B</var> be the 8-bit value represented by the two hexadecimal digits at index (<var>k</var> + 1) and (<var>k</var> + 2).</li><li>Set <var>k</var> to <var>k</var> + 2.</li><li>Append <var>B</var> to <var>Octets</var>.</li><li>Set <var>j</var> to <var>j</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The length of <var>Octets</var> is <var>n</var>.</li><li>If <var>Octets</var> does not contain a valid UTF-8 encoding of a Unicode code point, throw a <emu-val>URIError</emu-val> exception.</li><li>Let <var>V</var> be the value obtained by applying the UTF-8 transformation to <var>Octets</var>, that is, from a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of octets into a 21-bit value.</li><li>Let <var>S</var> be the String value whose code units are, in order, the elements in <emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>V</var>).</li></ol></li></ol></li><li>Set <var>R</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>R</var> and <var>S</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>This syntax of Uniform Resource Identifiers is based upon RFC 2396 and does not reflect the more recent RFC 3986 which replaces RFC 2396. A formal description and implementation of UTF-8 is given in RFC 3629.</p>\n            <p>In UTF-8, characters are encoded using sequences of 1 to 6 octets. The only octet of a sequence of one has the higher-order bit set to 0, the remaining 7 bits being used to encode the character value. In a sequence of n octets, n &gt; 1, the initial octet has the n higher-order bits set to 1, followed by a bit set to 0. The remaining bits of that octet contain bits from the value of the character to be encoded. The following octets all have the higher-order bit set to 1 and the following bit set to 0, leaving 6 bits in each to contain bits from the character to be encoded. The possible UTF-8 encodings of ECMAScript characters are specified in <emu-xref href=\"#table-43\"><a href=\"#table-43\" class=\"excluded-xref\" excluded-id=\"table-43\">#table-43</a></emu-xref>.</p>\n            <emu-table id=\"table-43\" caption=\"UTF-8 Encodings\" informative=\"\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-43\">#table-43</span> (Informative): UTF-8 Encodings</figcaption>\n              <table>\n                <tbody>\n                <tr>\n                  <th>\n                    Code Unit Value\n                  </th>\n                  <th>\n                    Representation\n                  </th>\n                  <th>\n                    1<sup>st</sup> Octet\n                  </th>\n                  <th>\n                    2<sup>nd</sup> Octet\n                  </th>\n                  <th>\n                    3<sup>rd</sup> Octet\n                  </th>\n                  <th>\n                    4<sup>th</sup> Octet\n                  </th>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0000 - 0x007F</code>\n                  </td>\n                  <td>\n                    <code>00000000 0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>0<i>zzzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0080 - 0x07FF</code>\n                  </td>\n                  <td>\n                    <code>00000<i>yyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>110<i>yyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0x0800 - 0xD7FF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    <code>110110<i>vv vvwwwwxx</i></code>\n                    <br>\n                    followed by\n                    <br>\n                    <code>110111<i>yy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>11110<i>uuu</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>uuwwww</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>xxyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xD800 - 0xDBFF</code>\n                    <br>\n                    not followed by\n                    <br>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xDC00 - 0xDFFF</code>\n                  </td>\n                  <td>\n                    causes <code>URIError</code>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <code>0xE000 - 0xFFFF</code>\n                  </td>\n                  <td>\n                    <code><i>xxxxyyyy yyzzzzzz</i></code>\n                  </td>\n                  <td>\n                    <code>1110<i>xxxx</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>yyyyyy</i></code>\n                  </td>\n                  <td>\n                    <code>10<i>zzzzzz</i></code>\n                  </td>\n                  <td>\n                  </td>\n                </tr>\n                </tbody>\n              </table>\n            </figure></emu-table>\n            <p>Where\n              <br>\n                <var>uuuuu</var> = <var>vvvv</var> + 1\n              <br>\n              to account for the addition of 0x10000 as in section 3.8 of the Unicode Standard (Surrogates).</p>\n            <p>The above transformation combines each <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> (for which code unit values in the inclusive range 0xD800 to 0xDFFF are reserved) into a UTF-32 representation and encodes the resulting 21-bit value into UTF-8. Decoding reconstructs the <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref>.</p>\n            <p>RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For example, the invalid sequence C0 80 must not decode into the code unit 0x0000. Implementations of the Decode algorithm are required to throw a <emu-val>URIError</emu-val> when encountering such invalid sequences.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-liveness": {"num": "8.9.2", "title": "#sec-liveness Liveness", "html": "<emu-clause id=\"sec-liveness\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-liveness\">#sec-liveness</span> Liveness</h1>\n\n      <p>For some set of objects <var>S</var>, a <dfn>hypothetical WeakRef-oblivious</dfn> execution with respect to <var>S</var> is an execution whereby the abstract operation <emu-xref aoid=\"WeakRefDeref\"><a href=\"#sec-weakrefderef\">WeakRefDeref</a></emu-xref> of a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> whose referent is an element of <var>S</var> always returns <emu-val>undefined</emu-val>.</p>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>-obliviousness, together with liveness, capture two notions. One, that a <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> itself does not keep an object alive. Two, that cycles in liveness does not imply that an object is live. To be concrete, if determining <var>obj</var>'s liveness depends on determining the liveness of another <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> referent, <var>obj2</var>, <var>obj2</var>'s liveness cannot assume <var>obj</var>'s liveness, which would be circular reasoning.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref>-obliviousness is defined on sets of objects instead of individual objects to account for cycles. If it were defined on individual objects, then an object in a cycle will be considered live even though its Object value is only observed via WeakRefs of other objects in the cycle.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        Colloquially, we say that an individual object is live if every set of objects containing it is live.\n      </div></emu-note>\n\n      <p>At any point during evaluation, a set of objects <var>S</var> is considered <dfn>live</dfn> if either of the following conditions is met:</p>\n\n      <ul>\n        <li>\n          Any element in <var>S</var> is included in any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s [[KeptAlive]] <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.\n        </li>\n        <li>\n          There exists a valid future hypothetical WeakRef-oblivious execution with respect to <var>S</var> that observes the Object value of any object in <var>S</var>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        The intuition the second condition above intends to capture is that an object is live if its identity is observable via non-<emu-xref href=\"#sec-weak-ref-constructor\"><a href=\"#sec-weak-ref-constructor\">WeakRef</a></emu-xref> means. An object's identity may be observed by observing a strict equality comparison between objects or observing the object being used as key in a Map.\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 5</span><div class=\"note-contents\">\n        <p>Presence of an object in a field, an internal slot, or a property does not imply that the object is live. For example if the object in question is never passed back to the program, then it cannot be observed.</p>\n\n        <p>This is the case for keys in a WeakMap, members of a WeakSet, as well as the [[WeakRefTarget]] and [[UnregisterToken]] fields of a <emu-xref href=\"#sec-finalization-registry-constructor\"><a href=\"#sec-finalization-registry-constructor\">FinalizationRegistry</a></emu-xref> Cell record.</p>\n\n        <p>The above definition implies that, if a key in a WeakMap is not live, then its corresponding value is not necessarily live either.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 6</span><div class=\"note-contents\">\n        Liveness is the lower bound for guaranteeing which WeakRefs engines must not empty. Liveness as defined here is undecidable. In practice, engines use conservative approximations such as reachability. There is expected to be significant implementation leeway.\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateIntegerTypedArray\"><a href=\"#sec-validateintegertypedarray\">ValidateIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, return 0.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"figure-1": "Figure 1", "figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-2": "Table 3", "table-3": "Table 4", "table-22": "Table 23", "table-23": "Table 24", "table-24": "Table 25", "table-agent-record": "Table 27", "table-36": "Table 39", "table-37": "Table 40", "table-cyclic-module-fields": "Table 41", "table-cyclic-module-methods": "Table 42", "table-43": "Table 48", "table-the-typedarray-constructors": "Table 62"}}}