{"from": {"secList": ["sec-typedarray-length", "sec-typedarray", "sec-typedarray-buffer-byteoffset-length", "sec-nativeerror", "sec-typedarray-object", "sec-typedarray-typedarray"], "secData": {"sec-typedarray-length": {"num": "22.2.4.2", "title": "#sec-typedarray-length TypedArray ( length )", "html": "<emu-clause id=\"sec-typedarray-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-length\">#sec-typedarray-length</span> <var>TypedArray</var> ( <var>length</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is not Object.</p>\n        <p><var>TypedArray</var> called with argument <var>length</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>length</var>) is not Object.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%TypedArrayPrototype%\"</code>, <var>elementLength</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-allocatetypedarray\"><h1><span class=\"secnum\">22.2.4.2.1</span>#sec-allocatetypedarray Runtime Semantics: AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )</h1>...</div><div id=\"excluded-sec-allocatetypedarraybuffer\"><h1><span class=\"secnum\">22.2.4.2.2</span>#sec-allocatetypedarraybuffer Runtime Semantics: AllocateTypedArrayBuffer ( O, length )</h1>...</div></emu-clause>\n\n      "}, "sec-typedarray": {"num": "22.2.4.1", "title": "#sec-typedarray TypedArray ( )", "html": "<emu-clause id=\"sec-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray\">#sec-typedarray</span> <var>TypedArray</var> ( )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with no arguments.</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%TypedArrayPrototype%\"</code>, 0).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-buffer-byteoffset-length": {"num": "22.2.4.5", "title": "#sec-typedarray-buffer-byteoffset-length TypedArray ( buffer [ , byteOffset [ , length ] ] )", "html": "<emu-clause id=\"sec-typedarray-buffer-byteoffset-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-buffer-byteoffset-length\">#sec-typedarray-buffer-byteoffset-length</span> <var>TypedArray</var> ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>length</var> ] ] )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with at least one argument <var>buffer</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>buffer</var>) is Object and <var>buffer</var> has an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%TypedArrayPrototype%\"</code>).</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>offset</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>byteOffset</var>).</li><li>If <var>offset</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>length</var> is present and <var>length</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>newLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>bufferByteLength</var> be <var>buffer</var>.[[ArrayBufferByteLength]].</li><li>If <var>length</var> is either not present or <emu-val>undefined</emu-val>, then<ol><li>If <var>bufferByteLength</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>newByteLength</var> be <var>bufferByteLength</var> - <var>offset</var>.</li><li>If <var>newByteLength</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>Let <var>newByteLength</var> be <var>newLength</var> &#215; <var>elementSize</var>.</li><li>If <var>offset</var> + <var>newByteLength</var> &gt; <var>bufferByteLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>buffer</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>newByteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to <var>offset</var>.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>newByteLength</var> / <var>elementSize</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-nativeerror": {"num": "19.5.6.1.1", "title": "#sec-nativeerror NativeError ( message )", "html": "<emu-clause id=\"sec-nativeerror\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror\">#sec-nativeerror</span> NativeError ( <var>message</var> )</h1>\n          <p>When a <var>NativeError</var> function is called with argument <var>message</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%NativeErrorPrototype%\"</code>, &#171; [[ErrorData]] &#187;).</li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>message</var>).</li><li>Let <var>msgDesc</var> be the PropertyDescriptor { [[Value]]: <var>msg</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <code>\"message\"</code>, <var>msgDesc</var>).</li></ol></li><li>Return <var>O</var>.\n          </li></ol></emu-alg>\n          <p>The actual value of the string passed in step 2 is either <code>\"%EvalError.prototype%\"</code>, <code>\"%RangeError.prototype%\"</code>, <code>\"%ReferenceError.prototype%\"</code>, <code>\"%SyntaxError.prototype%\"</code>, <code>\"%TypeError.prototype%\"</code>, or <code>\"%URIError.prototype%\"</code> corresponding to which <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is being defined.</p>\n        </emu-clause>\n      "}, "sec-typedarray-object": {"num": "22.2.4.4", "title": "#sec-typedarray-object TypedArray ( object )", "html": "<emu-clause id=\"sec-typedarray-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-object\">#sec-typedarray-object</span> <var>TypedArray</var> ( <var>object</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>object</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>object</var>) is Object and <var>object</var> does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%TypedArrayPrototype%\"</code>).</li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>object</var>, @@iterator).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>object</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>O</var>.</li></ol></li><li>NOTE: <var>object</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be <var>object</var>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-typedarray": {"num": "22.2.4.3", "title": "#sec-typedarray-typedarray TypedArray ( typedArray )", "html": "<emu-clause id=\"sec-typedarray-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-typedarray\">#sec-typedarray-typedarray</span> <var>TypedArray</var> ( <var>typedArray</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has a [[TypedArrayName]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>typedArray</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>typedArray</var>) is Object and <var>typedArray</var> has a [[TypedArrayName]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%TypedArrayPrototype%\"</code>).</li><li>Let <var>srcArray</var> be <var>typedArray</var>.</li><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>elementType</var>, <var>srcType</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-49": "Table 60"}}, "to": {"secList": ["sec-typedarray-length", "sec-typedarray", "sec-typedarray-buffer-byteoffset-length", "sec-nativeerror", "sec-typedarray-object", "sec-typedarray-typedarray"], "secData": {"sec-typedarray-length": {"num": "22.2.4.2", "title": "#sec-typedarray-length TypedArray ( length )", "html": "<emu-clause id=\"sec-typedarray-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-length\">#sec-typedarray-length</span> <var>TypedArray</var> ( <var>length</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is not Object.</p>\n        <p><var>TypedArray</var> called with argument <var>length</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>length</var>) is not Object.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>Prototype%\"</code>, <var>elementLength</var>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-allocatetypedarray\"><h1><span class=\"secnum\">22.2.4.2.1</span>#sec-allocatetypedarray Runtime Semantics: AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )</h1>...</div><div id=\"excluded-sec-allocatetypedarraybuffer\"><h1><span class=\"secnum\">22.2.4.2.2</span>#sec-allocatetypedarraybuffer Runtime Semantics: AllocateTypedArrayBuffer ( O, length )</h1>...</div></emu-clause>\n\n      "}, "sec-typedarray": {"num": "22.2.4.1", "title": "#sec-typedarray TypedArray ( )", "html": "<emu-clause id=\"sec-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray\">#sec-typedarray</span> <var>TypedArray</var> ( )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with no arguments.</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>Prototype%\"</code>, 0).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-buffer-byteoffset-length": {"num": "22.2.4.5", "title": "#sec-typedarray-buffer-byteoffset-length TypedArray ( buffer [ , byteOffset [ , length ] ] )", "html": "<emu-clause id=\"sec-typedarray-buffer-byteoffset-length\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-buffer-byteoffset-length\">#sec-typedarray-buffer-byteoffset-length</span> <var>TypedArray</var> ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>length</var> ] ] )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with at least one argument <var>buffer</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>buffer</var>) is Object and <var>buffer</var> has an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>Prototype%\"</code>).</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>offset</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>byteOffset</var>).</li><li>If <var>offset</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>length</var> is present and <var>length</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>newLength</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>length</var>).</li></ol></li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>bufferByteLength</var> be <var>buffer</var>.[[ArrayBufferByteLength]].</li><li>If <var>length</var> is either not present or <emu-val>undefined</emu-val>, then<ol><li>If <var>bufferByteLength</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> <var>elementSize</var> &#8800; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>newByteLength</var> be <var>bufferByteLength</var> - <var>offset</var>.</li><li>If <var>newByteLength</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>Let <var>newByteLength</var> be <var>newLength</var> &#215; <var>elementSize</var>.</li><li>If <var>offset</var> + <var>newByteLength</var> &gt; <var>bufferByteLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>buffer</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>newByteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to <var>offset</var>.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>newByteLength</var> / <var>elementSize</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-nativeerror": {"num": "19.5.6.1.1", "title": "#sec-nativeerror NativeError ( message )", "html": "<emu-clause id=\"sec-nativeerror\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-nativeerror\">#sec-nativeerror</span> NativeError ( <var>message</var> )</h1>\n          <p>When a <var>NativeError</var> function is called with argument <var>message</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, let <var>newTarget</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>; else let <var>newTarget</var> be NewTarget.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%<var>NativeError</var>Prototype%\"</code>, &#171; [[ErrorData]] &#187;).</li><li>If <var>message</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>msg</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>message</var>).</li><li>Let <var>msgDesc</var> be the PropertyDescriptor { [[Value]]: <var>msg</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <code>\"message\"</code>, <var>msgDesc</var>).</li></ol></li><li>Return <var>O</var>.\n          </li></ol></emu-alg>\n          <p>The actual value of the string passed in step 2 is either <code>\"%EvalError.prototype%\"</code>, <code>\"%RangeError.prototype%\"</code>, <code>\"%ReferenceError.prototype%\"</code>, <code>\"%SyntaxError.prototype%\"</code>, <code>\"%TypeError.prototype%\"</code>, or <code>\"%URIError.prototype%\"</code> corresponding to which <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is being defined.</p>\n        </emu-clause>\n      "}, "sec-typedarray-object": {"num": "22.2.4.4", "title": "#sec-typedarray-object TypedArray ( object )", "html": "<emu-clause id=\"sec-typedarray-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-object\">#sec-typedarray-object</span> <var>TypedArray</var> ( <var>object</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>object</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>object</var>) is Object and <var>object</var> does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>Prototype%\"</code>).</li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>object</var>, @@iterator).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>object</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>O</var>.</li></ol></li><li>NOTE: <var>object</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be <var>object</var>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-typedarray": {"num": "22.2.4.3", "title": "#sec-typedarray-typedarray TypedArray ( typedArray )", "html": "<emu-clause id=\"sec-typedarray-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-typedarray\">#sec-typedarray-typedarray</span> <var>TypedArray</var> ( <var>typedArray</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has a [[TypedArrayName]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>typedArray</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>typedArray</var>) is Object and <var>typedArray</var> has a [[TypedArrayName]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>Prototype%\"</code>).</li><li>Let <var>srcArray</var> be <var>typedArray</var>.</li><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>elementType</var>, <var>srcType</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {"table-49": "Table 60"}}}