{"from": {"secList": ["sec-numeric-types-bigint-leftShift", "sec-numeric-types-bigint-tostring", "sec-numeric-types-number-tostring", "sec-numeric-types-bigint-signedRightShift", "sec-%typedarray%.prototype.sort", "sec-sortcompare", "sec-numeric-types-bigint-equal", "sec-numeric-types-bigint-unsignedRightShift", "sec-numeric-types-bigint-bitwiseNOT", "sec-numeric-types-bigint-multiply", "sec-numeric-types-bigint-lessThan", "sec-numeric-types-bigint-sameValueZero", "sec-numeric-types-bigint-sameValue", "sec-numeric-types-bigint-subtract", "sec-numeric-types-bigint-add"], "secData": {"sec-numeric-types-bigint-leftShift": {"num": "6.1.6.2.9", "title": "#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-leftShift\">#sec-numeric-types-bigint-leftShift</span> BigInt::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::leftShift with two arguments <var>x</var> and <var>y</var> of type BigInt performs the following steps:</p>\n          <emu-alg><ol><li>If <var>y</var> &lt; <emu-val>0n</emu-val>, then<ol><li>Return the BigInt value that represents <var>x</var> &#247; 2<sup>-<var>y</var></sup>, rounding down to the nearest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, including for negative numbers.</li></ol></li><li>Return the BigInt value that represents <var>x</var> &#215; 2<sup><var>y</var></sup>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-tostring": {"num": "6.1.6.2.23", "title": "#sec-numeric-types-bigint-tostring BigInt::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-tostring\" aoid=\"BigInt::toString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</span> BigInt::toString ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::toString converts a BigInt <var>x</var> to String format as follows:</p>\n          <emu-alg><ol><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the String <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"BigInt::toString\"><a href=\"#sec-numeric-types-bigint-tostring\">BigInt::toString</a></emu-xref>(-<var>x</var>).</li><li>Return the String value consisting of the code units of the digits of the decimal representation of <var>x</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <span id=\"sec-tostring-applied-to-the-number-type\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString converts a Number <var>x</var> to String format as follows:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub>&#8477;</sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)\n          </li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              \n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\n              \n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n            <emu-alg><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub>&#8477;</sub>.\n            </li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              \n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-numeric-types-bigint-signedRightShift": {"num": "6.1.6.2.10", "title": "#sec-numeric-types-bigint-signedRightShift BigInt::signedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-signedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-signedRightShift\">#sec-numeric-types-bigint-signedRightShift</span> BigInt::signedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::signedRightShift with arguments <var>x</var> and <var>y</var> of type BigInt performs the following steps:</p>\n          <emu-alg><ol><li>Return BigInt::leftShift(<var>x</var>, -<var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose  <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> object that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].\n        </li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method.</p>\n        <p>When the TypedArray <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> abstract operation is called with two arguments <var>x</var> and <var>y</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sortcompare": {"num": "22.1.3.27.1", "title": "#sec-sortcompare Runtime Semantics: SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> Runtime Semantics: SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The SortCompare abstract operation is called with two arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. The following steps are taken:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return -1.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>xString</var> &lt; <var>yString</var>.</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return -1.</li><li>Let <var>ySmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>yString</var> &lt; <var>xString</var>.</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps 5 and 7 have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-numeric-types-bigint-equal": {"num": "6.1.6.2.13", "title": "#sec-numeric-types-bigint-equal BigInt::equal ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-equal\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-equal\">#sec-numeric-types-bigint-equal</span> BigInt::equal ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::equal with two arguments <var>x</var> and <var>y</var> of type BigInt returns <emu-val>true</emu-val> if <var>x</var> and <var>y</var> have the same <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-unsignedRightShift": {"num": "6.1.6.2.11", "title": "#sec-numeric-types-bigint-unsignedRightShift BigInt::unsignedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-unsignedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-unsignedRightShift\">#sec-numeric-types-bigint-unsignedRightShift</span> BigInt::unsignedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::unsignedRightShift with two arguments <var>x</var> and <var>y</var> of type BigInt performs the following steps:</p>\n          <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-bitwiseNOT": {"num": "6.1.6.2.2", "title": "#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-bitwiseNOT\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-bitwiseNOT\">#sec-numeric-types-bigint-bitwiseNOT</span> BigInt::bitwiseNOT ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::bitwiseNOT with an argument <var>x</var> of type BigInt returns the one's complement of <var>x</var>; that is, -<var>x</var> - 1.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-multiply": {"num": "6.1.6.2.4", "title": "#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-multiply\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-multiply\">#sec-numeric-types-bigint-multiply</span> BigInt::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::multiply with two arguments <var>x</var> and <var>y</var> of type BigInt returns the BigInt value that represents the result of multiplying <var>x</var> and <var>y</var>.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Even if the result has a much larger bit width than the input, the exact mathematical answer is given.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-lessThan": {"num": "6.1.6.2.12", "title": "#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-lessThan\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-lessThan\">#sec-numeric-types-bigint-lessThan</span> BigInt::lessThan ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::lessThan with two arguments <var>x</var> and <var>y</var> of type BigInt returns <emu-val>true</emu-val> if <var>x</var> is less than <var>y</var> and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-sameValueZero": {"num": "6.1.6.2.15", "title": "#sec-numeric-types-bigint-sameValueZero BigInt::sameValueZero ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-sameValueZero\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-sameValueZero\">#sec-numeric-types-bigint-sameValueZero</span> BigInt::sameValueZero ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::sameValueZero with two arguments <var>x</var> and <var>y</var> of type BigInt performs the following steps:</p>\n          <emu-alg><ol><li>Return BigInt::equal(<var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-sameValue": {"num": "6.1.6.2.14", "title": "#sec-numeric-types-bigint-sameValue BigInt::sameValue ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-sameValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-sameValue\">#sec-numeric-types-bigint-sameValue</span> BigInt::sameValue ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::sameValue with two arguments <var>x</var> and <var>y</var> of type BigInt performs the following steps:</p>\n          <emu-alg><ol><li>Return BigInt::equal(<var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-subtract": {"num": "6.1.6.2.8", "title": "#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-subtract\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-subtract\">#sec-numeric-types-bigint-subtract</span> BigInt::subtract ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::subtract with two arguments <var>x</var> and <var>y</var> of type BigInt returns the BigInt value that represents the difference <var>x</var> minus <var>y</var>.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-add": {"num": "6.1.6.2.7", "title": "#sec-numeric-types-bigint-add BigInt::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-add\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-add\">#sec-numeric-types-bigint-add</span> BigInt::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::add with two arguments <var>x</var> and <var>y</var> of type BigInt returns the BigInt value that represents the sum of <var>x</var> and <var>y</var>.</p>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-numeric-types-bigint-leftShift", "sec-numeric-types-bigint-tostring", "sec-numeric-types-number-tostring", "sec-numeric-types-bigint-signedRightShift", "sec-%typedarray%.prototype.sort", "sec-sortcompare", "sec-numeric-types-bigint-equal", "sec-numeric-types-bigint-unsignedRightShift", "sec-numeric-types-bigint-bitwiseNOT", "sec-numeric-types-bigint-multiply", "sec-numeric-types-bigint-lessThan", "sec-numeric-types-bigint-sameValueZero", "sec-numeric-types-bigint-sameValue", "sec-numeric-types-bigint-subtract", "sec-numeric-types-bigint-add"], "secData": {"sec-numeric-types-bigint-leftShift": {"num": "6.1.6.2.9", "title": "#sec-numeric-types-bigint-leftShift BigInt::leftShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-leftShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-leftShift\">#sec-numeric-types-bigint-leftShift</span> BigInt::leftShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::leftShift takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>y</var> &lt; <emu-val>0n</emu-val>, then<ol><li>Return the BigInt value that represents <var>x</var> &#247; 2<sup>-<var>y</var></sup>, rounding down to the nearest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, including for negative numbers.</li></ol></li><li>Return the BigInt value that represents <var>x</var> &#215; 2<sup><var>y</var></sup>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Semantics here should be equivalent to a bitwise shift, treating the BigInt as an infinite length string of binary two's complement digits.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-tostring": {"num": "6.1.6.2.23", "title": "#sec-numeric-types-bigint-tostring BigInt::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-tostring\" aoid=\"BigInt::toString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-tostring\">#sec-numeric-types-bigint-tostring</span> BigInt::toString ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::toString takes argument <var>x</var> (a BigInt). It converts <var>x</var> to String format. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the String <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"BigInt::toString\"><a href=\"#sec-numeric-types-bigint-tostring\">BigInt::toString</a></emu-xref>(-<var>x</var>).</li><li>Return the String value consisting of the code units of the digits of the decimal representation of <var>x</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <span id=\"sec-tostring-applied-to-the-number-type\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString takes argument <var>x</var> (a Number). It converts <var>x</var> to String format. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub>&#8477;</sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)\n          </li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              \n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step 5.\n              \n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step 5 be used as a guideline:</p>\n            <emu-alg><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub>&#8477;</sub>.\n            </li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              \n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              \n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-numeric-types-bigint-signedRightShift": {"num": "6.1.6.2.10", "title": "#sec-numeric-types-bigint-signedRightShift BigInt::signedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-signedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-signedRightShift\">#sec-numeric-types-bigint-signedRightShift</span> BigInt::signedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::signedRightShift takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return BigInt::leftShift(<var>x</var>, -<var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose  <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> object that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].\n        </li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in  <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-sortcompare": {"num": "22.1.3.27.1", "title": "#sec-sortcompare Runtime Semantics: SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> Runtime Semantics: SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation SortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return -1.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li>Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>xString</var> &lt; <var>yString</var>.</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return -1.</li><li>Let <var>ySmaller</var> be the result of performing <emu-xref aoid=\"Abstract Relational Comparison\"><a href=\"#sec-abstract-relational-comparison\">Abstract Relational Comparison</a></emu-xref> <var>yString</var> &lt; <var>xString</var>.</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps 5 and 7 have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-numeric-types-bigint-equal": {"num": "6.1.6.2.13", "title": "#sec-numeric-types-bigint-equal BigInt::equal ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-equal\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-equal\">#sec-numeric-types-bigint-equal</span> BigInt::equal ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::equal takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns <emu-val>true</emu-val> if <var>x</var> and <var>y</var> have the same <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-unsignedRightShift": {"num": "6.1.6.2.11", "title": "#sec-numeric-types-bigint-unsignedRightShift BigInt::unsignedRightShift ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-unsignedRightShift\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-unsignedRightShift\">#sec-numeric-types-bigint-unsignedRightShift</span> BigInt::unsignedRightShift ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::unsignedRightShift takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-bitwiseNOT": {"num": "6.1.6.2.2", "title": "#sec-numeric-types-bigint-bitwiseNOT BigInt::bitwiseNOT ( x )", "html": "<emu-clause id=\"sec-numeric-types-bigint-bitwiseNOT\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-bitwiseNOT\">#sec-numeric-types-bigint-bitwiseNOT</span> BigInt::bitwiseNOT ( <var>x</var> )</h1>\n          <p>The abstract operation BigInt::bitwiseNOT takes argument <var>x</var> (a BigInt). It returns the one's complement of <var>x</var>; that is, -<var>x</var> - 1.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-multiply": {"num": "6.1.6.2.4", "title": "#sec-numeric-types-bigint-multiply BigInt::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-multiply\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-multiply\">#sec-numeric-types-bigint-multiply</span> BigInt::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::multiply takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the result of multiplying <var>x</var> and <var>y</var>.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">Even if the result has a much larger bit width than the input, the exact mathematical answer is given.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-lessThan": {"num": "6.1.6.2.12", "title": "#sec-numeric-types-bigint-lessThan BigInt::lessThan ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-lessThan\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-lessThan\">#sec-numeric-types-bigint-lessThan</span> BigInt::lessThan ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::lessThan takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns <emu-val>true</emu-val> if <var>x</var> is less than <var>y</var> and <emu-val>false</emu-val> otherwise.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-sameValueZero": {"num": "6.1.6.2.15", "title": "#sec-numeric-types-bigint-sameValueZero BigInt::sameValueZero ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-sameValueZero\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-sameValueZero\">#sec-numeric-types-bigint-sameValueZero</span> BigInt::sameValueZero ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::sameValueZero takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return BigInt::equal(<var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-sameValue": {"num": "6.1.6.2.14", "title": "#sec-numeric-types-bigint-sameValue BigInt::sameValue ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-sameValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-sameValue\">#sec-numeric-types-bigint-sameValue</span> BigInt::sameValue ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::sameValue takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It performs the following steps when called:</p>\n          <emu-alg><ol><li>Return BigInt::equal(<var>x</var>, <var>y</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-subtract": {"num": "6.1.6.2.8", "title": "#sec-numeric-types-bigint-subtract BigInt::subtract ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-subtract\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-subtract\">#sec-numeric-types-bigint-subtract</span> BigInt::subtract ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::subtract takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the difference <var>x</var> minus <var>y</var>.</p>\n        </emu-clause>\n\n        "}, "sec-numeric-types-bigint-add": {"num": "6.1.6.2.7", "title": "#sec-numeric-types-bigint-add BigInt::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-bigint-add\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-bigint-add\">#sec-numeric-types-bigint-add</span> BigInt::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation BigInt::add takes arguments <var>x</var> (a BigInt) and <var>y</var> (a BigInt). It returns the BigInt value that represents the sum of <var>x</var> and <var>y</var>.</p>\n        </emu-clause>\n\n        "}}, "figData": {}}}